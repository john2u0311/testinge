{"ast":null,"code":"!function (t, e) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? e(exports) : \"function\" == typeof define && define.amd ? define([\"exports\"], e) : e((t = \"undefined\" != typeof globalThis ? globalThis : t || self).fabric = {});\n}(this, function (t) {\n  \"use strict\";\n\n  function e(t, e, s) {\n    return (e = function (t) {\n      var e = function (t, e) {\n        if (\"object\" != typeof t || !t) return t;\n        var s = t[Symbol.toPrimitive];\n        if (void 0 !== s) {\n          var i = s.call(t, e || \"default\");\n          if (\"object\" != typeof i) return i;\n          throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n        }\n        return (\"string\" === e ? String : Number)(t);\n      }(t, \"string\");\n      return \"symbol\" == typeof e ? e : e + \"\";\n    }(e)) in t ? Object.defineProperty(t, e, {\n      value: s,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : t[e] = s, t;\n  }\n  function s(t, e) {\n    var s = Object.keys(t);\n    if (Object.getOwnPropertySymbols) {\n      var i = Object.getOwnPropertySymbols(t);\n      e && (i = i.filter(function (e) {\n        return Object.getOwnPropertyDescriptor(t, e).enumerable;\n      })), s.push.apply(s, i);\n    }\n    return s;\n  }\n  function i(t) {\n    for (var i = 1; i < arguments.length; i++) {\n      var r = null != arguments[i] ? arguments[i] : {};\n      i % 2 ? s(Object(r), !0).forEach(function (s) {\n        e(t, s, r[s]);\n      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : s(Object(r)).forEach(function (e) {\n        Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));\n      });\n    }\n    return t;\n  }\n  function r(t, e) {\n    if (null == t) return {};\n    var s,\n      i,\n      r = function (t, e) {\n        if (null == t) return {};\n        var s = {};\n        for (var i in t) if ({}.hasOwnProperty.call(t, i)) {\n          if (e.indexOf(i) >= 0) continue;\n          s[i] = t[i];\n        }\n        return s;\n      }(t, e);\n    if (Object.getOwnPropertySymbols) {\n      var n = Object.getOwnPropertySymbols(t);\n      for (i = 0; i < n.length; i++) s = n[i], e.indexOf(s) >= 0 || {}.propertyIsEnumerable.call(t, s) && (r[s] = t[s]);\n    }\n    return r;\n  }\n  function n(t, e) {\n    return e || (e = t.slice(0)), Object.freeze(Object.defineProperties(t, {\n      raw: {\n        value: Object.freeze(e)\n      }\n    }));\n  }\n  class o {\n    constructor() {\n      e(this, \"browserShadowBlurConstant\", 1), e(this, \"DPI\", 96), e(this, \"devicePixelRatio\", \"undefined\" != typeof window ? window.devicePixelRatio : 1), e(this, \"perfLimitSizeTotal\", 2097152), e(this, \"maxCacheSideLimit\", 4096), e(this, \"minCacheSideLimit\", 256), e(this, \"disableStyleCopyPaste\", !1), e(this, \"enableGLFiltering\", !0), e(this, \"textureSize\", 4096), e(this, \"forceGLPutImageData\", !1), e(this, \"cachesBoundsOfCurve\", !1), e(this, \"fontPaths\", {}), e(this, \"NUM_FRACTION_DIGITS\", 4);\n    }\n  }\n  const a = new class extends o {\n      constructor(t) {\n        super(), this.configure(t);\n      }\n      configure() {\n        let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n        Object.assign(this, t);\n      }\n      addFonts() {\n        let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n        this.fontPaths = i(i({}, this.fontPaths), t);\n      }\n      removeFonts() {\n        (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : []).forEach(t => {\n          delete this.fontPaths[t];\n        });\n      }\n      clearFonts() {\n        this.fontPaths = {};\n      }\n      restoreDefaults(t) {\n        const e = new o(),\n          s = (null == t ? void 0 : t.reduce((t, s) => (t[s] = e[s], t), {})) || e;\n        this.configure(s);\n      }\n    }(),\n    h = function (t) {\n      for (var e = arguments.length, s = new Array(e > 1 ? e - 1 : 0), i = 1; i < e; i++) s[i - 1] = arguments[i];\n      return console[t](\"fabric\", ...s);\n    };\n  class c extends Error {\n    constructor(t, e) {\n      super(\"fabric: \".concat(t), e);\n    }\n  }\n  class l extends c {\n    constructor(t) {\n      super(\"\".concat(t, \" 'options.signal' is in 'aborted' state\"));\n    }\n  }\n  class u {}\n  class d extends u {\n    testPrecision(t, e) {\n      const s = \"precision \".concat(e, \" float;\\nvoid main(){}\"),\n        i = t.createShader(t.FRAGMENT_SHADER);\n      return !!i && (t.shaderSource(i, s), t.compileShader(i), !!t.getShaderParameter(i, t.COMPILE_STATUS));\n    }\n    queryWebGL(t) {\n      const e = t.getContext(\"webgl\");\n      e && (this.maxTextureSize = e.getParameter(e.MAX_TEXTURE_SIZE), this.GLPrecision = [\"highp\", \"mediump\", \"lowp\"].find(t => this.testPrecision(e, t)), e.getExtension(\"WEBGL_lose_context\").loseContext(), h(\"log\", \"WebGL: max texture size \".concat(this.maxTextureSize)));\n    }\n    isSupported(t) {\n      return !!this.maxTextureSize && this.maxTextureSize >= t;\n    }\n  }\n  const g = {};\n  let f;\n  const p = () => f || (f = {\n      document: document,\n      window: window,\n      isTouchSupported: \"ontouchstart\" in window || \"ontouchstart\" in document || window && window.navigator && window.navigator.maxTouchPoints > 0,\n      WebGLProbe: new d(),\n      dispose() {},\n      copyPasteData: g\n    }),\n    m = () => p().document,\n    v = () => p().window,\n    y = () => {\n      var t;\n      return Math.max(null !== (t = a.devicePixelRatio) && void 0 !== t ? t : v().devicePixelRatio, 1);\n    };\n  const _ = new class {\n    constructor() {\n      e(this, \"charWidthsCache\", {}), e(this, \"boundsOfCurveCache\", {});\n    }\n    getFontCache(t) {\n      let {\n        fontFamily: e,\n        fontStyle: s,\n        fontWeight: i\n      } = t;\n      e = e.toLowerCase(), this.charWidthsCache[e] || (this.charWidthsCache[e] = {});\n      const r = this.charWidthsCache[e],\n        n = \"\".concat(s.toLowerCase(), \"_\").concat((i + \"\").toLowerCase());\n      return r[n] || (r[n] = {}), r[n];\n    }\n    clearFontCache(t) {\n      (t = (t || \"\").toLowerCase()) ? this.charWidthsCache[t] && delete this.charWidthsCache[t] : this.charWidthsCache = {};\n    }\n    limitDimsByArea(t) {\n      const {\n          perfLimitSizeTotal: e\n        } = a,\n        s = Math.sqrt(e * t);\n      return [Math.floor(s), Math.floor(e / s)];\n    }\n  }();\n  const x = \"6.6.1\";\n  function C() {}\n  const b = Math.PI / 2,\n    S = 2 * Math.PI,\n    w = Math.PI / 180,\n    T = Object.freeze([1, 0, 0, 1, 0, 0]),\n    O = 16,\n    k = .4477152502,\n    D = \"center\",\n    M = \"left\",\n    P = \"top\",\n    E = \"bottom\",\n    A = \"right\",\n    j = \"none\",\n    F = /\\r?\\n/,\n    L = \"moving\",\n    R = \"scaling\",\n    I = \"rotating\",\n    B = \"rotate\",\n    X = \"skewing\",\n    Y = \"resizing\",\n    W = \"modifyPoly\",\n    V = \"modifyPath\",\n    G = \"changed\",\n    z = \"scale\",\n    H = \"scaleX\",\n    N = \"scaleY\",\n    U = \"skewX\",\n    q = \"skewY\",\n    K = \"fill\",\n    J = \"stroke\",\n    Q = \"modified\",\n    Z = \"json\",\n    $ = \"svg\";\n  const tt = new class {\n    constructor() {\n      this[Z] = new Map(), this[$] = new Map();\n    }\n    has(t) {\n      return this[Z].has(t);\n    }\n    getClass(t) {\n      const e = this[Z].get(t);\n      if (!e) throw new c(\"No class registered for \".concat(t));\n      return e;\n    }\n    setClass(t, e) {\n      e ? this[Z].set(e, t) : (this[Z].set(t.type, t), this[Z].set(t.type.toLowerCase(), t));\n    }\n    getSVGClass(t) {\n      return this[$].get(t);\n    }\n    setSVGClass(t, e) {\n      this[$].set(null != e ? e : t.type.toLowerCase(), t);\n    }\n  }();\n  const et = new class extends Array {\n    remove(t) {\n      const e = this.indexOf(t);\n      e > -1 && this.splice(e, 1);\n    }\n    cancelAll() {\n      const t = this.splice(0);\n      return t.forEach(t => t.abort()), t;\n    }\n    cancelByCanvas(t) {\n      if (!t) return [];\n      const e = this.filter(e => {\n        var s;\n        return e.target === t || \"object\" == typeof e.target && (null === (s = e.target) || void 0 === s ? void 0 : s.canvas) === t;\n      });\n      return e.forEach(t => t.abort()), e;\n    }\n    cancelByTarget(t) {\n      if (!t) return [];\n      const e = this.filter(e => e.target === t);\n      return e.forEach(t => t.abort()), e;\n    }\n  }();\n  class st {\n    constructor() {\n      e(this, \"__eventListeners\", {});\n    }\n    on(t, e) {\n      if (this.__eventListeners || (this.__eventListeners = {}), \"object\" == typeof t) return Object.entries(t).forEach(t => {\n        let [e, s] = t;\n        this.on(e, s);\n      }), () => this.off(t);\n      if (e) {\n        const s = t;\n        return this.__eventListeners[s] || (this.__eventListeners[s] = []), this.__eventListeners[s].push(e), () => this.off(s, e);\n      }\n      return () => !1;\n    }\n    once(t, e) {\n      if (\"object\" == typeof t) {\n        const e = [];\n        return Object.entries(t).forEach(t => {\n          let [s, i] = t;\n          e.push(this.once(s, i));\n        }), () => e.forEach(t => t());\n      }\n      if (e) {\n        const s = this.on(t, function () {\n          for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++) i[r] = arguments[r];\n          e.call(this, ...i), s();\n        });\n        return s;\n      }\n      return () => !1;\n    }\n    _removeEventListener(t, e) {\n      if (this.__eventListeners[t]) if (e) {\n        const s = this.__eventListeners[t],\n          i = s.indexOf(e);\n        i > -1 && s.splice(i, 1);\n      } else this.__eventListeners[t] = [];\n    }\n    off(t, e) {\n      if (this.__eventListeners) if (void 0 === t) for (const t in this.__eventListeners) this._removeEventListener(t);else \"object\" == typeof t ? Object.entries(t).forEach(t => {\n        let [e, s] = t;\n        this._removeEventListener(e, s);\n      }) : this._removeEventListener(t, e);\n    }\n    fire(t, e) {\n      var s;\n      if (!this.__eventListeners) return;\n      const i = null === (s = this.__eventListeners[t]) || void 0 === s ? void 0 : s.concat();\n      if (i) for (let t = 0; t < i.length; t++) i[t].call(this, e || {});\n    }\n  }\n  const it = (t, e) => {\n      const s = t.indexOf(e);\n      return -1 !== s && t.splice(s, 1), t;\n    },\n    rt = t => {\n      if (0 === t) return 1;\n      switch (Math.abs(t) / b) {\n        case 1:\n        case 3:\n          return 0;\n        case 2:\n          return -1;\n      }\n      return Math.cos(t);\n    },\n    nt = t => {\n      if (0 === t) return 0;\n      const e = t / b,\n        s = Math.sign(t);\n      switch (e) {\n        case 1:\n          return s;\n        case 2:\n          return 0;\n        case 3:\n          return -s;\n      }\n      return Math.sin(t);\n    };\n  class ot {\n    constructor() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,\n        e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\n      \"object\" == typeof t ? (this.x = t.x, this.y = t.y) : (this.x = t, this.y = e);\n    }\n    add(t) {\n      return new ot(this.x + t.x, this.y + t.y);\n    }\n    addEquals(t) {\n      return this.x += t.x, this.y += t.y, this;\n    }\n    scalarAdd(t) {\n      return new ot(this.x + t, this.y + t);\n    }\n    scalarAddEquals(t) {\n      return this.x += t, this.y += t, this;\n    }\n    subtract(t) {\n      return new ot(this.x - t.x, this.y - t.y);\n    }\n    subtractEquals(t) {\n      return this.x -= t.x, this.y -= t.y, this;\n    }\n    scalarSubtract(t) {\n      return new ot(this.x - t, this.y - t);\n    }\n    scalarSubtractEquals(t) {\n      return this.x -= t, this.y -= t, this;\n    }\n    multiply(t) {\n      return new ot(this.x * t.x, this.y * t.y);\n    }\n    scalarMultiply(t) {\n      return new ot(this.x * t, this.y * t);\n    }\n    scalarMultiplyEquals(t) {\n      return this.x *= t, this.y *= t, this;\n    }\n    divide(t) {\n      return new ot(this.x / t.x, this.y / t.y);\n    }\n    scalarDivide(t) {\n      return new ot(this.x / t, this.y / t);\n    }\n    scalarDivideEquals(t) {\n      return this.x /= t, this.y /= t, this;\n    }\n    eq(t) {\n      return this.x === t.x && this.y === t.y;\n    }\n    lt(t) {\n      return this.x < t.x && this.y < t.y;\n    }\n    lte(t) {\n      return this.x <= t.x && this.y <= t.y;\n    }\n    gt(t) {\n      return this.x > t.x && this.y > t.y;\n    }\n    gte(t) {\n      return this.x >= t.x && this.y >= t.y;\n    }\n    lerp(t) {\n      let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : .5;\n      return e = Math.max(Math.min(1, e), 0), new ot(this.x + (t.x - this.x) * e, this.y + (t.y - this.y) * e);\n    }\n    distanceFrom(t) {\n      const e = this.x - t.x,\n        s = this.y - t.y;\n      return Math.sqrt(e * e + s * s);\n    }\n    midPointFrom(t) {\n      return this.lerp(t);\n    }\n    min(t) {\n      return new ot(Math.min(this.x, t.x), Math.min(this.y, t.y));\n    }\n    max(t) {\n      return new ot(Math.max(this.x, t.x), Math.max(this.y, t.y));\n    }\n    toString() {\n      return \"\".concat(this.x, \",\").concat(this.y);\n    }\n    setXY(t, e) {\n      return this.x = t, this.y = e, this;\n    }\n    setX(t) {\n      return this.x = t, this;\n    }\n    setY(t) {\n      return this.y = t, this;\n    }\n    setFromPoint(t) {\n      return this.x = t.x, this.y = t.y, this;\n    }\n    swap(t) {\n      const e = this.x,\n        s = this.y;\n      this.x = t.x, this.y = t.y, t.x = e, t.y = s;\n    }\n    clone() {\n      return new ot(this.x, this.y);\n    }\n    rotate(t) {\n      let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : at;\n      const s = nt(t),\n        i = rt(t),\n        r = this.subtract(e);\n      return new ot(r.x * i - r.y * s, r.x * s + r.y * i).add(e);\n    }\n    transform(t) {\n      let e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n      return new ot(t[0] * this.x + t[2] * this.y + (e ? 0 : t[4]), t[1] * this.x + t[3] * this.y + (e ? 0 : t[5]));\n    }\n  }\n  const at = new ot(0, 0),\n    ht = t => !!t && Array.isArray(t._objects);\n  function ct(t) {\n    class s extends t {\n      constructor() {\n        super(...arguments), e(this, \"_objects\", []);\n      }\n      _onObjectAdded(t) {}\n      _onObjectRemoved(t) {}\n      _onStackOrderChanged(t) {}\n      add() {\n        for (var t = arguments.length, e = new Array(t), s = 0; s < t; s++) e[s] = arguments[s];\n        const i = this._objects.push(...e);\n        return e.forEach(t => this._onObjectAdded(t)), i;\n      }\n      insertAt(t) {\n        for (var e = arguments.length, s = new Array(e > 1 ? e - 1 : 0), i = 1; i < e; i++) s[i - 1] = arguments[i];\n        return this._objects.splice(t, 0, ...s), s.forEach(t => this._onObjectAdded(t)), this._objects.length;\n      }\n      remove() {\n        const t = this._objects,\n          e = [];\n        for (var s = arguments.length, i = new Array(s), r = 0; r < s; r++) i[r] = arguments[r];\n        return i.forEach(s => {\n          const i = t.indexOf(s);\n          -1 !== i && (t.splice(i, 1), e.push(s), this._onObjectRemoved(s));\n        }), e;\n      }\n      forEachObject(t) {\n        this.getObjects().forEach((e, s, i) => t(e, s, i));\n      }\n      getObjects() {\n        for (var t = arguments.length, e = new Array(t), s = 0; s < t; s++) e[s] = arguments[s];\n        return 0 === e.length ? [...this._objects] : this._objects.filter(t => t.isType(...e));\n      }\n      item(t) {\n        return this._objects[t];\n      }\n      isEmpty() {\n        return 0 === this._objects.length;\n      }\n      size() {\n        return this._objects.length;\n      }\n      contains(t, e) {\n        return !!this._objects.includes(t) || !!e && this._objects.some(e => e instanceof s && e.contains(t, !0));\n      }\n      complexity() {\n        return this._objects.reduce((t, e) => t += e.complexity ? e.complexity() : 0, 0);\n      }\n      sendObjectToBack(t) {\n        return !(!t || t === this._objects[0]) && (it(this._objects, t), this._objects.unshift(t), this._onStackOrderChanged(t), !0);\n      }\n      bringObjectToFront(t) {\n        return !(!t || t === this._objects[this._objects.length - 1]) && (it(this._objects, t), this._objects.push(t), this._onStackOrderChanged(t), !0);\n      }\n      sendObjectBackwards(t, e) {\n        if (!t) return !1;\n        const s = this._objects.indexOf(t);\n        if (0 !== s) {\n          const i = this.findNewLowerIndex(t, s, e);\n          return it(this._objects, t), this._objects.splice(i, 0, t), this._onStackOrderChanged(t), !0;\n        }\n        return !1;\n      }\n      bringObjectForward(t, e) {\n        if (!t) return !1;\n        const s = this._objects.indexOf(t);\n        if (s !== this._objects.length - 1) {\n          const i = this.findNewUpperIndex(t, s, e);\n          return it(this._objects, t), this._objects.splice(i, 0, t), this._onStackOrderChanged(t), !0;\n        }\n        return !1;\n      }\n      moveObjectTo(t, e) {\n        return t !== this._objects[e] && (it(this._objects, t), this._objects.splice(e, 0, t), this._onStackOrderChanged(t), !0);\n      }\n      findNewLowerIndex(t, e, s) {\n        let i;\n        if (s) {\n          i = e;\n          for (let s = e - 1; s >= 0; --s) if (t.isOverlapping(this._objects[s])) {\n            i = s;\n            break;\n          }\n        } else i = e - 1;\n        return i;\n      }\n      findNewUpperIndex(t, e, s) {\n        let i;\n        if (s) {\n          i = e;\n          for (let s = e + 1; s < this._objects.length; ++s) if (t.isOverlapping(this._objects[s])) {\n            i = s;\n            break;\n          }\n        } else i = e + 1;\n        return i;\n      }\n      collectObjects(t) {\n        let {\n            left: e,\n            top: s,\n            width: i,\n            height: r\n          } = t,\n          {\n            includeIntersecting: n = !0\n          } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n        const o = [],\n          a = new ot(e, s),\n          h = a.add(new ot(i, r));\n        for (let t = this._objects.length - 1; t >= 0; t--) {\n          const e = this._objects[t];\n          e.selectable && e.visible && (n && e.intersectsWithRect(a, h) || e.isContainedWithinRect(a, h) || n && e.containsPoint(a) || n && e.containsPoint(h)) && o.push(e);\n        }\n        return o;\n      }\n    }\n    return s;\n  }\n  class lt extends st {\n    _setOptions() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n      for (const e in t) this.set(e, t[e]);\n    }\n    _setObject(t) {\n      for (const e in t) this._set(e, t[e]);\n    }\n    set(t, e) {\n      return \"object\" == typeof t ? this._setObject(t) : this._set(t, e), this;\n    }\n    _set(t, e) {\n      this[t] = e;\n    }\n    toggle(t) {\n      const e = this.get(t);\n      return \"boolean\" == typeof e && this.set(t, !e), this;\n    }\n    get(t) {\n      return this[t];\n    }\n  }\n  function ut(t) {\n    return v().requestAnimationFrame(t);\n  }\n  function dt(t) {\n    return v().cancelAnimationFrame(t);\n  }\n  let gt = 0;\n  const ft = () => gt++,\n    pt = () => {\n      const t = m().createElement(\"canvas\");\n      if (!t || void 0 === t.getContext) throw new c(\"Failed to create `canvas` element\");\n      return t;\n    },\n    mt = () => m().createElement(\"img\"),\n    vt = t => {\n      const e = pt();\n      return e.width = t.width, e.height = t.height, e;\n    },\n    yt = (t, e, s) => t.toDataURL(\"image/\".concat(e), s),\n    _t = (t, e, s) => new Promise((i, r) => {\n      t.toBlob(i, \"image/\".concat(e), s);\n    }),\n    xt = t => t * w,\n    Ct = t => t / w,\n    bt = t => t.every((t, e) => t === T[e]),\n    St = (t, e, s) => new ot(t).transform(e, s),\n    wt = t => {\n      const e = 1 / (t[0] * t[3] - t[1] * t[2]),\n        s = [e * t[3], -e * t[1], -e * t[2], e * t[0], 0, 0],\n        {\n          x: i,\n          y: r\n        } = new ot(t[4], t[5]).transform(s, !0);\n      return s[4] = -i, s[5] = -r, s;\n    },\n    Tt = (t, e, s) => [t[0] * e[0] + t[2] * e[1], t[1] * e[0] + t[3] * e[1], t[0] * e[2] + t[2] * e[3], t[1] * e[2] + t[3] * e[3], s ? 0 : t[0] * e[4] + t[2] * e[5] + t[4], s ? 0 : t[1] * e[4] + t[3] * e[5] + t[5]],\n    Ot = (t, e) => t.reduceRight((t, s) => s && t ? Tt(s, t, e) : s || t, void 0) || T.concat(),\n    kt = t => {\n      let [e, s] = t;\n      return Math.atan2(s, e);\n    },\n    Dt = t => {\n      const e = kt(t),\n        s = Math.pow(t[0], 2) + Math.pow(t[1], 2),\n        i = Math.sqrt(s),\n        r = (t[0] * t[3] - t[2] * t[1]) / i,\n        n = Math.atan2(t[0] * t[2] + t[1] * t[3], s);\n      return {\n        angle: Ct(e),\n        scaleX: i,\n        scaleY: r,\n        skewX: Ct(n),\n        skewY: 0,\n        translateX: t[4] || 0,\n        translateY: t[5] || 0\n      };\n    },\n    Mt = function (t) {\n      return [1, 0, 0, 1, t, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0];\n    };\n  function Pt() {\n    let {\n        angle: t = 0\n      } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n      {\n        x: e = 0,\n        y: s = 0\n      } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    const i = xt(t),\n      r = rt(i),\n      n = nt(i);\n    return [r, n, -n, r, e ? e - (r * e - n * s) : 0, s ? s - (n * e + r * s) : 0];\n  }\n  const Et = function (t) {\n      return [t, 0, 0, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : t, 0, 0];\n    },\n    At = t => Math.tan(xt(t)),\n    jt = t => [1, 0, At(t), 1, 0, 0],\n    Ft = t => [1, At(t), 0, 1, 0, 0],\n    Lt = t => {\n      let {\n          scaleX: e = 1,\n          scaleY: s = 1,\n          flipX: i = !1,\n          flipY: r = !1,\n          skewX: n = 0,\n          skewY: o = 0\n        } = t,\n        a = Et(i ? -e : e, r ? -s : s);\n      return n && (a = Tt(a, jt(n), !0)), o && (a = Tt(a, Ft(o), !0)), a;\n    },\n    Rt = t => {\n      const {\n        translateX: e = 0,\n        translateY: s = 0,\n        angle: i = 0\n      } = t;\n      let r = Mt(e, s);\n      i && (r = Tt(r, Pt({\n        angle: i\n      })));\n      const n = Lt(t);\n      return bt(n) || (r = Tt(r, n)), r;\n    },\n    It = function (t) {\n      let {\n        signal: e,\n        crossOrigin: s = null\n      } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      return new Promise(function (i, r) {\n        if (e && e.aborted) return r(new l(\"loadImage\"));\n        const n = mt();\n        let o;\n        e && (o = function (t) {\n          n.src = \"\", r(t);\n        }, e.addEventListener(\"abort\", o, {\n          once: !0\n        }));\n        const a = function () {\n          n.onload = n.onerror = null, o && (null == e || e.removeEventListener(\"abort\", o)), i(n);\n        };\n        t ? (n.onload = a, n.onerror = function () {\n          o && (null == e || e.removeEventListener(\"abort\", o)), r(new c(\"Error loading \".concat(n.src)));\n        }, s && (n.crossOrigin = s), n.src = t) : a();\n      });\n    },\n    Bt = function (t) {\n      let {\n        signal: e,\n        reviver: s = C\n      } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      return new Promise((i, r) => {\n        const n = [];\n        e && e.addEventListener(\"abort\", r, {\n          once: !0\n        }), Promise.all(t.map(t => tt.getClass(t.type).fromObject(t, {\n          signal: e\n        }).then(e => (s(t, e), n.push(e), e)))).then(i).catch(t => {\n          n.forEach(t => {\n            t.dispose && t.dispose();\n          }), r(t);\n        }).finally(() => {\n          e && e.removeEventListener(\"abort\", r);\n        });\n      });\n    },\n    Xt = function (t) {\n      let {\n        signal: e\n      } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      return new Promise((s, i) => {\n        const r = [];\n        e && e.addEventListener(\"abort\", i, {\n          once: !0\n        });\n        const n = Object.values(t).map(t => t && t.type && tt.has(t.type) ? Bt([t], {\n            signal: e\n          }).then(t => {\n            let [e] = t;\n            return r.push(e), e;\n          }) : t),\n          o = Object.keys(t);\n        Promise.all(n).then(t => t.reduce((t, e, s) => (t[o[s]] = e, t), {})).then(s).catch(t => {\n          r.forEach(t => {\n            t.dispose && t.dispose();\n          }), i(t);\n        }).finally(() => {\n          e && e.removeEventListener(\"abort\", i);\n        });\n      });\n    },\n    Yt = function (t) {\n      return (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : []).reduce((e, s) => (s in t && (e[s] = t[s]), e), {});\n    },\n    Wt = (t, e) => Object.keys(t).reduce((s, i) => (e(t[i], i, t) && (s[i] = t[i]), s), {}),\n    Vt = {\n      aliceblue: \"#F0F8FF\",\n      antiquewhite: \"#FAEBD7\",\n      aqua: \"#0FF\",\n      aquamarine: \"#7FFFD4\",\n      azure: \"#F0FFFF\",\n      beige: \"#F5F5DC\",\n      bisque: \"#FFE4C4\",\n      black: \"#000\",\n      blanchedalmond: \"#FFEBCD\",\n      blue: \"#00F\",\n      blueviolet: \"#8A2BE2\",\n      brown: \"#A52A2A\",\n      burlywood: \"#DEB887\",\n      cadetblue: \"#5F9EA0\",\n      chartreuse: \"#7FFF00\",\n      chocolate: \"#D2691E\",\n      coral: \"#FF7F50\",\n      cornflowerblue: \"#6495ED\",\n      cornsilk: \"#FFF8DC\",\n      crimson: \"#DC143C\",\n      cyan: \"#0FF\",\n      darkblue: \"#00008B\",\n      darkcyan: \"#008B8B\",\n      darkgoldenrod: \"#B8860B\",\n      darkgray: \"#A9A9A9\",\n      darkgrey: \"#A9A9A9\",\n      darkgreen: \"#006400\",\n      darkkhaki: \"#BDB76B\",\n      darkmagenta: \"#8B008B\",\n      darkolivegreen: \"#556B2F\",\n      darkorange: \"#FF8C00\",\n      darkorchid: \"#9932CC\",\n      darkred: \"#8B0000\",\n      darksalmon: \"#E9967A\",\n      darkseagreen: \"#8FBC8F\",\n      darkslateblue: \"#483D8B\",\n      darkslategray: \"#2F4F4F\",\n      darkslategrey: \"#2F4F4F\",\n      darkturquoise: \"#00CED1\",\n      darkviolet: \"#9400D3\",\n      deeppink: \"#FF1493\",\n      deepskyblue: \"#00BFFF\",\n      dimgray: \"#696969\",\n      dimgrey: \"#696969\",\n      dodgerblue: \"#1E90FF\",\n      firebrick: \"#B22222\",\n      floralwhite: \"#FFFAF0\",\n      forestgreen: \"#228B22\",\n      fuchsia: \"#F0F\",\n      gainsboro: \"#DCDCDC\",\n      ghostwhite: \"#F8F8FF\",\n      gold: \"#FFD700\",\n      goldenrod: \"#DAA520\",\n      gray: \"#808080\",\n      grey: \"#808080\",\n      green: \"#008000\",\n      greenyellow: \"#ADFF2F\",\n      honeydew: \"#F0FFF0\",\n      hotpink: \"#FF69B4\",\n      indianred: \"#CD5C5C\",\n      indigo: \"#4B0082\",\n      ivory: \"#FFFFF0\",\n      khaki: \"#F0E68C\",\n      lavender: \"#E6E6FA\",\n      lavenderblush: \"#FFF0F5\",\n      lawngreen: \"#7CFC00\",\n      lemonchiffon: \"#FFFACD\",\n      lightblue: \"#ADD8E6\",\n      lightcoral: \"#F08080\",\n      lightcyan: \"#E0FFFF\",\n      lightgoldenrodyellow: \"#FAFAD2\",\n      lightgray: \"#D3D3D3\",\n      lightgrey: \"#D3D3D3\",\n      lightgreen: \"#90EE90\",\n      lightpink: \"#FFB6C1\",\n      lightsalmon: \"#FFA07A\",\n      lightseagreen: \"#20B2AA\",\n      lightskyblue: \"#87CEFA\",\n      lightslategray: \"#789\",\n      lightslategrey: \"#789\",\n      lightsteelblue: \"#B0C4DE\",\n      lightyellow: \"#FFFFE0\",\n      lime: \"#0F0\",\n      limegreen: \"#32CD32\",\n      linen: \"#FAF0E6\",\n      magenta: \"#F0F\",\n      maroon: \"#800000\",\n      mediumaquamarine: \"#66CDAA\",\n      mediumblue: \"#0000CD\",\n      mediumorchid: \"#BA55D3\",\n      mediumpurple: \"#9370DB\",\n      mediumseagreen: \"#3CB371\",\n      mediumslateblue: \"#7B68EE\",\n      mediumspringgreen: \"#00FA9A\",\n      mediumturquoise: \"#48D1CC\",\n      mediumvioletred: \"#C71585\",\n      midnightblue: \"#191970\",\n      mintcream: \"#F5FFFA\",\n      mistyrose: \"#FFE4E1\",\n      moccasin: \"#FFE4B5\",\n      navajowhite: \"#FFDEAD\",\n      navy: \"#000080\",\n      oldlace: \"#FDF5E6\",\n      olive: \"#808000\",\n      olivedrab: \"#6B8E23\",\n      orange: \"#FFA500\",\n      orangered: \"#FF4500\",\n      orchid: \"#DA70D6\",\n      palegoldenrod: \"#EEE8AA\",\n      palegreen: \"#98FB98\",\n      paleturquoise: \"#AFEEEE\",\n      palevioletred: \"#DB7093\",\n      papayawhip: \"#FFEFD5\",\n      peachpuff: \"#FFDAB9\",\n      peru: \"#CD853F\",\n      pink: \"#FFC0CB\",\n      plum: \"#DDA0DD\",\n      powderblue: \"#B0E0E6\",\n      purple: \"#800080\",\n      rebeccapurple: \"#639\",\n      red: \"#F00\",\n      rosybrown: \"#BC8F8F\",\n      royalblue: \"#4169E1\",\n      saddlebrown: \"#8B4513\",\n      salmon: \"#FA8072\",\n      sandybrown: \"#F4A460\",\n      seagreen: \"#2E8B57\",\n      seashell: \"#FFF5EE\",\n      sienna: \"#A0522D\",\n      silver: \"#C0C0C0\",\n      skyblue: \"#87CEEB\",\n      slateblue: \"#6A5ACD\",\n      slategray: \"#708090\",\n      slategrey: \"#708090\",\n      snow: \"#FFFAFA\",\n      springgreen: \"#00FF7F\",\n      steelblue: \"#4682B4\",\n      tan: \"#D2B48C\",\n      teal: \"#008080\",\n      thistle: \"#D8BFD8\",\n      tomato: \"#FF6347\",\n      turquoise: \"#40E0D0\",\n      violet: \"#EE82EE\",\n      wheat: \"#F5DEB3\",\n      white: \"#FFF\",\n      whitesmoke: \"#F5F5F5\",\n      yellow: \"#FF0\",\n      yellowgreen: \"#9ACD32\"\n    },\n    Gt = (t, e, s) => (s < 0 && (s += 1), s > 1 && (s -= 1), s < 1 / 6 ? t + 6 * (e - t) * s : s < .5 ? e : s < 2 / 3 ? t + (e - t) * (2 / 3 - s) * 6 : t),\n    zt = (t, e, s, i) => {\n      t /= 255, e /= 255, s /= 255;\n      const r = Math.max(t, e, s),\n        n = Math.min(t, e, s);\n      let o, a;\n      const h = (r + n) / 2;\n      if (r === n) o = a = 0;else {\n        const i = r - n;\n        switch (a = h > .5 ? i / (2 - r - n) : i / (r + n), r) {\n          case t:\n            o = (e - s) / i + (e < s ? 6 : 0);\n            break;\n          case e:\n            o = (s - t) / i + 2;\n            break;\n          case s:\n            o = (t - e) / i + 4;\n        }\n        o /= 6;\n      }\n      return [Math.round(360 * o), Math.round(100 * a), Math.round(100 * h), i];\n    },\n    Ht = function () {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"1\";\n      return parseFloat(t) / (t.endsWith(\"%\") ? 100 : 1);\n    },\n    Nt = t => Math.min(Math.round(t), 255).toString(16).toUpperCase().padStart(2, \"0\"),\n    Ut = t => {\n      let [e, s, i, r = 1] = t;\n      const n = Math.round(.3 * e + .59 * s + .11 * i);\n      return [n, n, n, r];\n    };\n  class qt {\n    constructor(t) {\n      if (e(this, \"isUnrecognised\", !1), t) {\n        if (t instanceof qt) this.setSource([...t._source]);else if (Array.isArray(t)) {\n          const [e, s, i, r = 1] = t;\n          this.setSource([e, s, i, r]);\n        } else this.setSource(this._tryParsingColor(t));\n      } else this.setSource([0, 0, 0, 1]);\n    }\n    _tryParsingColor(t) {\n      return (t = t.toLowerCase()) in Vt && (t = Vt[t]), \"transparent\" === t ? [255, 255, 255, 0] : qt.sourceFromHex(t) || qt.sourceFromRgb(t) || qt.sourceFromHsl(t) || (this.isUnrecognised = !0) && [0, 0, 0, 1];\n    }\n    getSource() {\n      return this._source;\n    }\n    setSource(t) {\n      this._source = t;\n    }\n    toRgb() {\n      const [t, e, s] = this.getSource();\n      return \"rgb(\".concat(t, \",\").concat(e, \",\").concat(s, \")\");\n    }\n    toRgba() {\n      return \"rgba(\".concat(this.getSource().join(\",\"), \")\");\n    }\n    toHsl() {\n      const [t, e, s] = zt(...this.getSource());\n      return \"hsl(\".concat(t, \",\").concat(e, \"%,\").concat(s, \"%)\");\n    }\n    toHsla() {\n      const [t, e, s, i] = zt(...this.getSource());\n      return \"hsla(\".concat(t, \",\").concat(e, \"%,\").concat(s, \"%,\").concat(i, \")\");\n    }\n    toHex() {\n      return this.toHexa().slice(0, 6);\n    }\n    toHexa() {\n      const [t, e, s, i] = this.getSource();\n      return \"\".concat(Nt(t)).concat(Nt(e)).concat(Nt(s)).concat(Nt(Math.round(255 * i)));\n    }\n    getAlpha() {\n      return this.getSource()[3];\n    }\n    setAlpha(t) {\n      return this._source[3] = t, this;\n    }\n    toGrayscale() {\n      return this.setSource(Ut(this.getSource())), this;\n    }\n    toBlackWhite(t) {\n      const [e,,, s] = Ut(this.getSource()),\n        i = e < (t || 127) ? 0 : 255;\n      return this.setSource([i, i, i, s]), this;\n    }\n    overlayWith(t) {\n      t instanceof qt || (t = new qt(t));\n      const e = this.getSource(),\n        s = t.getSource(),\n        [i, r, n] = e.map((t, e) => Math.round(.5 * t + .5 * s[e]));\n      return this.setSource([i, r, n, e[3]]), this;\n    }\n    static fromRgb(t) {\n      return qt.fromRgba(t);\n    }\n    static fromRgba(t) {\n      return new qt(qt.sourceFromRgb(t));\n    }\n    static sourceFromRgb(t) {\n      const e = t.match(/^rgba?\\(\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*(?:\\s*[,/]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*)?\\)$/i);\n      if (e) {\n        const [t, s, i] = e.slice(1, 4).map(t => {\n          const e = parseFloat(t);\n          return t.endsWith(\"%\") ? Math.round(2.55 * e) : e;\n        });\n        return [t, s, i, Ht(e[4])];\n      }\n    }\n    static fromHsl(t) {\n      return qt.fromHsla(t);\n    }\n    static fromHsla(t) {\n      return new qt(qt.sourceFromHsl(t));\n    }\n    static sourceFromHsl(t) {\n      const e = t.match(/^hsla?\\(\\s*([+-]?\\d{0,3}(?:\\.\\d+)?(?:deg|turn|rad)?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*(?:\\s*[,/]\\s*(\\d*(?:\\.\\d+)?%?)\\s*)?\\)$/i);\n      if (!e) return;\n      const s = (qt.parseAngletoDegrees(e[1]) % 360 + 360) % 360 / 360,\n        i = parseFloat(e[2]) / 100,\n        r = parseFloat(e[3]) / 100;\n      let n, o, a;\n      if (0 === i) n = o = a = r;else {\n        const t = r <= .5 ? r * (i + 1) : r + i - r * i,\n          e = 2 * r - t;\n        n = Gt(e, t, s + 1 / 3), o = Gt(e, t, s), a = Gt(e, t, s - 1 / 3);\n      }\n      return [Math.round(255 * n), Math.round(255 * o), Math.round(255 * a), Ht(e[4])];\n    }\n    static fromHex(t) {\n      return new qt(qt.sourceFromHex(t));\n    }\n    static sourceFromHex(t) {\n      if (t.match(/^#?(([0-9a-f]){3,4}|([0-9a-f]{2}){3,4})$/i)) {\n        const e = t.slice(t.indexOf(\"#\") + 1);\n        let s;\n        s = e.length <= 4 ? e.split(\"\").map(t => t + t) : e.match(/.{2}/g);\n        const [i, r, n, o = 255] = s.map(t => parseInt(t, 16));\n        return [i, r, n, o / 255];\n      }\n    }\n    static parseAngletoDegrees(t) {\n      const e = t.toLowerCase(),\n        s = parseFloat(e);\n      return e.includes(\"rad\") ? Ct(s) : e.includes(\"turn\") ? 360 * s : s;\n    }\n  }\n  const Kt = (t, e) => parseFloat(Number(t).toFixed(e)),\n    Jt = function (t) {\n      let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : O;\n      const s = /\\D{0,2}$/.exec(t),\n        i = parseFloat(t),\n        r = a.DPI;\n      switch (null == s ? void 0 : s[0]) {\n        case \"mm\":\n          return i * r / 25.4;\n        case \"cm\":\n          return i * r / 2.54;\n        case \"in\":\n          return i * r;\n        case \"pt\":\n          return i * r / 72;\n        case \"pc\":\n          return i * r / 72 * 12;\n        case \"em\":\n          return i * e;\n        default:\n          return i;\n      }\n    },\n    Qt = t => {\n      const [e, s] = t.trim().split(\" \"),\n        [i, r] = (n = e) && n !== j ? [n.slice(1, 4), n.slice(5, 8)] : n === j ? [n, n] : [\"Mid\", \"Mid\"];\n      var n;\n      return {\n        meetOrSlice: s || \"meet\",\n        alignX: i,\n        alignY: r\n      };\n    },\n    Zt = t => \"matrix(\" + t.map(t => Kt(t, a.NUM_FRACTION_DIGITS)).join(\" \") + \")\",\n    $t = function (t, e) {\n      let s,\n        i,\n        r = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];\n      if (e) {\n        if (e.toLive) s = \"url(#SVGID_\".concat(e.id, \")\");else {\n          const t = new qt(e),\n            r = t.getAlpha();\n          s = t.toRgb(), 1 !== r && (i = r.toString());\n        }\n      } else s = \"none\";\n      return r ? \"\".concat(t, \": \").concat(s, \"; \").concat(i ? \"\".concat(t, \"-opacity: \").concat(i, \"; \") : \"\") : \"\".concat(t, '=\"').concat(s, '\" ').concat(i ? \"\".concat(t, '-opacity=\"').concat(i, '\" ') : \"\");\n    },\n    te = t => !!t && void 0 !== t.toLive,\n    ee = t => !!t && \"function\" == typeof t.toObject,\n    se = t => !!t && void 0 !== t.offsetX && \"source\" in t,\n    ie = t => !!t && \"multiSelectionStacking\" in t;\n  function re(t) {\n    const e = t && ne(t);\n    let s = 0,\n      i = 0;\n    if (!t || !e) return {\n      left: s,\n      top: i\n    };\n    let r = t;\n    const n = e.documentElement,\n      o = e.body || {\n        scrollLeft: 0,\n        scrollTop: 0\n      };\n    for (; r && (r.parentNode || r.host) && (r = r.parentNode || r.host, r === e ? (s = o.scrollLeft || n.scrollLeft || 0, i = o.scrollTop || n.scrollTop || 0) : (s += r.scrollLeft || 0, i += r.scrollTop || 0), 1 !== r.nodeType || \"fixed\" !== r.style.position););\n    return {\n      left: s,\n      top: i\n    };\n  }\n  const ne = t => t.ownerDocument || null,\n    oe = t => {\n      var e;\n      return (null === (e = t.ownerDocument) || void 0 === e ? void 0 : e.defaultView) || null;\n    },\n    ae = function (t, e, s) {\n      let {\n          width: i,\n          height: r\n        } = s,\n        n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1;\n      t.width = i, t.height = r, n > 1 && (t.setAttribute(\"width\", (i * n).toString()), t.setAttribute(\"height\", (r * n).toString()), e.scale(n, n));\n    },\n    he = (t, e) => {\n      let {\n        width: s,\n        height: i\n      } = e;\n      s && (t.style.width = \"number\" == typeof s ? \"\".concat(s, \"px\") : s), i && (t.style.height = \"number\" == typeof i ? \"\".concat(i, \"px\") : i);\n    };\n  function ce(t) {\n    return void 0 !== t.onselectstart && (t.onselectstart = () => !1), t.style.userSelect = j, t;\n  }\n  class le {\n    constructor(t) {\n      e(this, \"_originalCanvasStyle\", void 0), e(this, \"lower\", void 0);\n      const s = this.createLowerCanvas(t);\n      this.lower = {\n        el: s,\n        ctx: s.getContext(\"2d\")\n      };\n    }\n    createLowerCanvas(t) {\n      const e = (s = t) && void 0 !== s.getContext ? t : t && m().getElementById(t) || pt();\n      var s;\n      if (e.hasAttribute(\"data-fabric\")) throw new c(\"Trying to initialize a canvas that has already been initialized. Did you forget to dispose the canvas?\");\n      return this._originalCanvasStyle = e.style.cssText, e.setAttribute(\"data-fabric\", \"main\"), e.classList.add(\"lower-canvas\"), e;\n    }\n    cleanupDOM(t) {\n      let {\n        width: e,\n        height: s\n      } = t;\n      const {\n        el: i\n      } = this.lower;\n      i.classList.remove(\"lower-canvas\"), i.removeAttribute(\"data-fabric\"), i.setAttribute(\"width\", \"\".concat(e)), i.setAttribute(\"height\", \"\".concat(s)), i.style.cssText = this._originalCanvasStyle || \"\", this._originalCanvasStyle = void 0;\n    }\n    setDimensions(t, e) {\n      const {\n        el: s,\n        ctx: i\n      } = this.lower;\n      ae(s, i, t, e);\n    }\n    setCSSDimensions(t) {\n      he(this.lower.el, t);\n    }\n    calcOffset() {\n      return function (t) {\n        var e;\n        const s = t && ne(t),\n          i = {\n            left: 0,\n            top: 0\n          };\n        if (!s) return i;\n        const r = (null === (e = oe(t)) || void 0 === e ? void 0 : e.getComputedStyle(t, null)) || {};\n        i.left += parseInt(r.borderLeftWidth, 10) || 0, i.top += parseInt(r.borderTopWidth, 10) || 0, i.left += parseInt(r.paddingLeft, 10) || 0, i.top += parseInt(r.paddingTop, 10) || 0;\n        let n = {\n          left: 0,\n          top: 0\n        };\n        const o = s.documentElement;\n        void 0 !== t.getBoundingClientRect && (n = t.getBoundingClientRect());\n        const a = re(t);\n        return {\n          left: n.left + a.left - (o.clientLeft || 0) + i.left,\n          top: n.top + a.top - (o.clientTop || 0) + i.top\n        };\n      }(this.lower.el);\n    }\n    dispose() {\n      p().dispose(this.lower.el), delete this.lower;\n    }\n  }\n  const ue = {\n    backgroundVpt: !0,\n    backgroundColor: \"\",\n    overlayVpt: !0,\n    overlayColor: \"\",\n    includeDefaultValues: !0,\n    svgViewportTransformation: !0,\n    renderOnAddRemove: !0,\n    skipOffscreen: !0,\n    enableRetinaScaling: !0,\n    imageSmoothingEnabled: !0,\n    controlsAboveOverlay: !1,\n    allowTouchScrolling: !1,\n    viewportTransform: [...T]\n  };\n  class de extends ct(lt) {\n    get lowerCanvasEl() {\n      var t;\n      return null === (t = this.elements.lower) || void 0 === t ? void 0 : t.el;\n    }\n    get contextContainer() {\n      var t;\n      return null === (t = this.elements.lower) || void 0 === t ? void 0 : t.ctx;\n    }\n    static getDefaults() {\n      return de.ownDefaults;\n    }\n    constructor(t) {\n      let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      super(), Object.assign(this, this.constructor.getDefaults()), this.set(e), this.initElements(t), this._setDimensionsImpl({\n        width: this.width || this.elements.lower.el.width || 0,\n        height: this.height || this.elements.lower.el.height || 0\n      }), this.skipControlsDrawing = !1, this.viewportTransform = [...this.viewportTransform], this.calcViewportBoundaries();\n    }\n    initElements(t) {\n      this.elements = new le(t);\n    }\n    add() {\n      const t = super.add(...arguments);\n      return arguments.length > 0 && this.renderOnAddRemove && this.requestRenderAll(), t;\n    }\n    insertAt(t) {\n      for (var e = arguments.length, s = new Array(e > 1 ? e - 1 : 0), i = 1; i < e; i++) s[i - 1] = arguments[i];\n      const r = super.insertAt(t, ...s);\n      return s.length > 0 && this.renderOnAddRemove && this.requestRenderAll(), r;\n    }\n    remove() {\n      const t = super.remove(...arguments);\n      return t.length > 0 && this.renderOnAddRemove && this.requestRenderAll(), t;\n    }\n    _onObjectAdded(t) {\n      t.canvas && t.canvas !== this && (h(\"warn\", \"Canvas is trying to add an object that belongs to a different canvas.\\nResulting to default behavior: removing object from previous canvas and adding to new canvas\"), t.canvas.remove(t)), t._set(\"canvas\", this), t.setCoords(), this.fire(\"object:added\", {\n        target: t\n      }), t.fire(\"added\", {\n        target: this\n      });\n    }\n    _onObjectRemoved(t) {\n      t._set(\"canvas\", void 0), this.fire(\"object:removed\", {\n        target: t\n      }), t.fire(\"removed\", {\n        target: this\n      });\n    }\n    _onStackOrderChanged() {\n      this.renderOnAddRemove && this.requestRenderAll();\n    }\n    getRetinaScaling() {\n      return this.enableRetinaScaling ? y() : 1;\n    }\n    calcOffset() {\n      return this._offset = this.elements.calcOffset();\n    }\n    getWidth() {\n      return this.width;\n    }\n    getHeight() {\n      return this.height;\n    }\n    setWidth(t, e) {\n      return this.setDimensions({\n        width: t\n      }, e);\n    }\n    setHeight(t, e) {\n      return this.setDimensions({\n        height: t\n      }, e);\n    }\n    _setDimensionsImpl(t) {\n      let {\n        cssOnly: e = !1,\n        backstoreOnly: s = !1\n      } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      if (!e) {\n        const e = i({\n          width: this.width,\n          height: this.height\n        }, t);\n        this.elements.setDimensions(e, this.getRetinaScaling()), this.hasLostContext = !0, this.width = e.width, this.height = e.height;\n      }\n      s || this.elements.setCSSDimensions(t), this.calcOffset();\n    }\n    setDimensions(t, e) {\n      this._setDimensionsImpl(t, e), e && e.cssOnly || this.requestRenderAll();\n    }\n    getZoom() {\n      return this.viewportTransform[0];\n    }\n    setViewportTransform(t) {\n      this.viewportTransform = t, this.calcViewportBoundaries(), this.renderOnAddRemove && this.requestRenderAll();\n    }\n    zoomToPoint(t, e) {\n      const s = t,\n        i = [...this.viewportTransform],\n        r = St(t, wt(i));\n      i[0] = e, i[3] = e;\n      const n = St(r, i);\n      i[4] += s.x - n.x, i[5] += s.y - n.y, this.setViewportTransform(i);\n    }\n    setZoom(t) {\n      this.zoomToPoint(new ot(0, 0), t);\n    }\n    absolutePan(t) {\n      const e = [...this.viewportTransform];\n      return e[4] = -t.x, e[5] = -t.y, this.setViewportTransform(e);\n    }\n    relativePan(t) {\n      return this.absolutePan(new ot(-t.x - this.viewportTransform[4], -t.y - this.viewportTransform[5]));\n    }\n    getElement() {\n      return this.elements.lower.el;\n    }\n    clearContext(t) {\n      t.clearRect(0, 0, this.width, this.height);\n    }\n    getContext() {\n      return this.elements.lower.ctx;\n    }\n    clear() {\n      this.remove(...this.getObjects()), this.backgroundImage = void 0, this.overlayImage = void 0, this.backgroundColor = \"\", this.overlayColor = \"\", this.clearContext(this.getContext()), this.fire(\"canvas:cleared\"), this.renderOnAddRemove && this.requestRenderAll();\n    }\n    renderAll() {\n      this.cancelRequestedRender(), this.destroyed || this.renderCanvas(this.getContext(), this._objects);\n    }\n    renderAndReset() {\n      this.nextRenderHandle = 0, this.renderAll();\n    }\n    requestRenderAll() {\n      this.nextRenderHandle || this.disposed || this.destroyed || (this.nextRenderHandle = ut(() => this.renderAndReset()));\n    }\n    calcViewportBoundaries() {\n      const t = this.width,\n        e = this.height,\n        s = wt(this.viewportTransform),\n        i = St({\n          x: 0,\n          y: 0\n        }, s),\n        r = St({\n          x: t,\n          y: e\n        }, s),\n        n = i.min(r),\n        o = i.max(r);\n      return this.vptCoords = {\n        tl: n,\n        tr: new ot(o.x, n.y),\n        bl: new ot(n.x, o.y),\n        br: o\n      };\n    }\n    cancelRequestedRender() {\n      this.nextRenderHandle && (dt(this.nextRenderHandle), this.nextRenderHandle = 0);\n    }\n    drawControls(t) {}\n    renderCanvas(t, e) {\n      if (this.destroyed) return;\n      const s = this.viewportTransform,\n        i = this.clipPath;\n      this.calcViewportBoundaries(), this.clearContext(t), t.imageSmoothingEnabled = this.imageSmoothingEnabled, t.patternQuality = \"best\", this.fire(\"before:render\", {\n        ctx: t\n      }), this._renderBackground(t), t.save(), t.transform(s[0], s[1], s[2], s[3], s[4], s[5]), this._renderObjects(t, e), t.restore(), this.controlsAboveOverlay || this.skipControlsDrawing || this.drawControls(t), i && (i._set(\"canvas\", this), i.shouldCache(), i._transformDone = !0, i.renderCache({\n        forClipping: !0\n      }), this.drawClipPathOnCanvas(t, i)), this._renderOverlay(t), this.controlsAboveOverlay && !this.skipControlsDrawing && this.drawControls(t), this.fire(\"after:render\", {\n        ctx: t\n      }), this.__cleanupTask && (this.__cleanupTask(), this.__cleanupTask = void 0);\n    }\n    drawClipPathOnCanvas(t, e) {\n      const s = this.viewportTransform;\n      t.save(), t.transform(...s), t.globalCompositeOperation = \"destination-in\", e.transform(t), t.scale(1 / e.zoomX, 1 / e.zoomY), t.drawImage(e._cacheCanvas, -e.cacheTranslationX, -e.cacheTranslationY), t.restore();\n    }\n    _renderObjects(t, e) {\n      for (let s = 0, i = e.length; s < i; ++s) e[s] && e[s].render(t);\n    }\n    _renderBackgroundOrOverlay(t, e) {\n      const s = this[\"\".concat(e, \"Color\")],\n        i = this[\"\".concat(e, \"Image\")],\n        r = this.viewportTransform,\n        n = this[\"\".concat(e, \"Vpt\")];\n      if (!s && !i) return;\n      const o = te(s);\n      if (s) {\n        if (t.save(), t.beginPath(), t.moveTo(0, 0), t.lineTo(this.width, 0), t.lineTo(this.width, this.height), t.lineTo(0, this.height), t.closePath(), t.fillStyle = o ? s.toLive(t) : s, n && t.transform(...r), o) {\n          t.transform(1, 0, 0, 1, s.offsetX || 0, s.offsetY || 0);\n          const e = s.gradientTransform || s.patternTransform;\n          e && t.transform(...e);\n        }\n        t.fill(), t.restore();\n      }\n      if (i) {\n        t.save();\n        const {\n          skipOffscreen: e\n        } = this;\n        this.skipOffscreen = n, n && t.transform(...r), i.render(t), this.skipOffscreen = e, t.restore();\n      }\n    }\n    _renderBackground(t) {\n      this._renderBackgroundOrOverlay(t, \"background\");\n    }\n    _renderOverlay(t) {\n      this._renderBackgroundOrOverlay(t, \"overlay\");\n    }\n    getCenter() {\n      return {\n        top: this.height / 2,\n        left: this.width / 2\n      };\n    }\n    getCenterPoint() {\n      return new ot(this.width / 2, this.height / 2);\n    }\n    centerObjectH(t) {\n      return this._centerObject(t, new ot(this.getCenterPoint().x, t.getCenterPoint().y));\n    }\n    centerObjectV(t) {\n      return this._centerObject(t, new ot(t.getCenterPoint().x, this.getCenterPoint().y));\n    }\n    centerObject(t) {\n      return this._centerObject(t, this.getCenterPoint());\n    }\n    viewportCenterObject(t) {\n      return this._centerObject(t, this.getVpCenter());\n    }\n    viewportCenterObjectH(t) {\n      return this._centerObject(t, new ot(this.getVpCenter().x, t.getCenterPoint().y));\n    }\n    viewportCenterObjectV(t) {\n      return this._centerObject(t, new ot(t.getCenterPoint().x, this.getVpCenter().y));\n    }\n    getVpCenter() {\n      return St(this.getCenterPoint(), wt(this.viewportTransform));\n    }\n    _centerObject(t, e) {\n      t.setXY(e, D, D), t.setCoords(), this.renderOnAddRemove && this.requestRenderAll();\n    }\n    toDatalessJSON(t) {\n      return this.toDatalessObject(t);\n    }\n    toObject(t) {\n      return this._toObjectMethod(\"toObject\", t);\n    }\n    toJSON() {\n      return this.toObject();\n    }\n    toDatalessObject(t) {\n      return this._toObjectMethod(\"toDatalessObject\", t);\n    }\n    _toObjectMethod(t, e) {\n      const s = this.clipPath,\n        r = s && !s.excludeFromExport ? this._toObject(s, t, e) : null;\n      return i(i(i({\n        version: x\n      }, Yt(this, e)), {}, {\n        objects: this._objects.filter(t => !t.excludeFromExport).map(s => this._toObject(s, t, e))\n      }, this.__serializeBgOverlay(t, e)), r ? {\n        clipPath: r\n      } : null);\n    }\n    _toObject(t, e, s) {\n      let i;\n      this.includeDefaultValues || (i = t.includeDefaultValues, t.includeDefaultValues = !1);\n      const r = t[e](s);\n      return this.includeDefaultValues || (t.includeDefaultValues = !!i), r;\n    }\n    __serializeBgOverlay(t, e) {\n      const s = {},\n        i = this.backgroundImage,\n        r = this.overlayImage,\n        n = this.backgroundColor,\n        o = this.overlayColor;\n      return te(n) ? n.excludeFromExport || (s.background = n.toObject(e)) : n && (s.background = n), te(o) ? o.excludeFromExport || (s.overlay = o.toObject(e)) : o && (s.overlay = o), i && !i.excludeFromExport && (s.backgroundImage = this._toObject(i, t, e)), r && !r.excludeFromExport && (s.overlayImage = this._toObject(r, t, e)), s;\n    }\n    toSVG() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n        e = arguments.length > 1 ? arguments[1] : void 0;\n      t.reviver = e;\n      const s = [];\n      return this._setSVGPreamble(s, t), this._setSVGHeader(s, t), this.clipPath && s.push('<g clip-path=\"url(#'.concat(this.clipPath.clipPathId, ')\" >\\n')), this._setSVGBgOverlayColor(s, \"background\"), this._setSVGBgOverlayImage(s, \"backgroundImage\", e), this._setSVGObjects(s, e), this.clipPath && s.push(\"</g>\\n\"), this._setSVGBgOverlayColor(s, \"overlay\"), this._setSVGBgOverlayImage(s, \"overlayImage\", e), s.push(\"</svg>\"), s.join(\"\");\n    }\n    _setSVGPreamble(t, e) {\n      e.suppressPreamble || t.push('<?xml version=\"1.0\" encoding=\"', e.encoding || \"UTF-8\", '\" standalone=\"no\" ?>\\n', '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ', '\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n');\n    }\n    _setSVGHeader(t, e) {\n      const s = e.width || \"\".concat(this.width),\n        i = e.height || \"\".concat(this.height),\n        r = a.NUM_FRACTION_DIGITS,\n        n = e.viewBox;\n      let o;\n      if (n) o = 'viewBox=\"'.concat(n.x, \" \").concat(n.y, \" \").concat(n.width, \" \").concat(n.height, '\" ');else if (this.svgViewportTransformation) {\n        const t = this.viewportTransform;\n        o = 'viewBox=\"'.concat(Kt(-t[4] / t[0], r), \" \").concat(Kt(-t[5] / t[3], r), \" \").concat(Kt(this.width / t[0], r), \" \").concat(Kt(this.height / t[3], r), '\" ');\n      } else o = 'viewBox=\"0 0 '.concat(this.width, \" \").concat(this.height, '\" ');\n      t.push(\"<svg \", 'xmlns=\"http://www.w3.org/2000/svg\" ', 'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ', 'version=\"1.1\" ', 'width=\"', s, '\" ', 'height=\"', i, '\" ', o, 'xml:space=\"preserve\">\\n', \"<desc>Created with Fabric.js \", x, \"</desc>\\n\", \"<defs>\\n\", this.createSVGFontFacesMarkup(), this.createSVGRefElementsMarkup(), this.createSVGClipPathMarkup(e), \"</defs>\\n\");\n    }\n    createSVGClipPathMarkup(t) {\n      const e = this.clipPath;\n      return e ? (e.clipPathId = \"CLIPPATH_\".concat(ft()), '<clipPath id=\"'.concat(e.clipPathId, '\" >\\n').concat(e.toClipPathSVG(t.reviver), \"</clipPath>\\n\")) : \"\";\n    }\n    createSVGRefElementsMarkup() {\n      return [\"background\", \"overlay\"].map(t => {\n        const e = this[\"\".concat(t, \"Color\")];\n        if (te(e)) {\n          const s = this[\"\".concat(t, \"Vpt\")],\n            i = this.viewportTransform,\n            r = {\n              isType: () => !1,\n              width: this.width / (s ? i[0] : 1),\n              height: this.height / (s ? i[3] : 1)\n            };\n          return e.toSVG(r, {\n            additionalTransform: s ? Zt(i) : \"\"\n          });\n        }\n      }).join(\"\");\n    }\n    createSVGFontFacesMarkup() {\n      const t = [],\n        e = {},\n        s = a.fontPaths;\n      this._objects.forEach(function e(s) {\n        t.push(s), ht(s) && s._objects.forEach(e);\n      }), t.forEach(t => {\n        if (!(i = t) || \"function\" != typeof i._renderText) return;\n        var i;\n        const {\n          styles: r,\n          fontFamily: n\n        } = t;\n        !e[n] && s[n] && (e[n] = !0, r && Object.values(r).forEach(t => {\n          Object.values(t).forEach(t => {\n            let {\n              fontFamily: i = \"\"\n            } = t;\n            !e[i] && s[i] && (e[i] = !0);\n          });\n        }));\n      });\n      const i = Object.keys(e).map(t => \"\\t\\t@font-face {\\n\\t\\t\\tfont-family: '\".concat(t, \"';\\n\\t\\t\\tsrc: url('\").concat(s[t], \"');\\n\\t\\t}\\n\")).join(\"\");\n      return i ? '\\t<style type=\"text/css\"><![CDATA[\\n'.concat(i, \"]]></style>\\n\") : \"\";\n    }\n    _setSVGObjects(t, e) {\n      this.forEachObject(s => {\n        s.excludeFromExport || this._setSVGObject(t, s, e);\n      });\n    }\n    _setSVGObject(t, e, s) {\n      t.push(e.toSVG(s));\n    }\n    _setSVGBgOverlayImage(t, e, s) {\n      const i = this[e];\n      i && !i.excludeFromExport && i.toSVG && t.push(i.toSVG(s));\n    }\n    _setSVGBgOverlayColor(t, e) {\n      const s = this[\"\".concat(e, \"Color\")];\n      if (s) if (te(s)) {\n        const i = s.repeat || \"\",\n          r = this.width,\n          n = this.height,\n          o = this[\"\".concat(e, \"Vpt\")] ? Zt(wt(this.viewportTransform)) : \"\";\n        t.push('<rect transform=\"'.concat(o, \" translate(\").concat(r / 2, \",\").concat(n / 2, ')\" x=\"').concat(s.offsetX - r / 2, '\" y=\"').concat(s.offsetY - n / 2, '\" width=\"').concat(\"repeat-y\" !== i && \"no-repeat\" !== i || !se(s) ? r : s.source.width, '\" height=\"').concat(\"repeat-x\" !== i && \"no-repeat\" !== i || !se(s) ? n : s.source.height, '\" fill=\"url(#SVGID_').concat(s.id, ')\"></rect>\\n'));\n      } else t.push('<rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" ', 'fill=\"', s, '\"', \"></rect>\\n\");\n    }\n    loadFromJSON(t, e) {\n      let {\n        signal: s\n      } = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n      if (!t) return Promise.reject(new c(\"`json` is undefined\"));\n      const i = \"string\" == typeof t ? JSON.parse(t) : t,\n        {\n          objects: r = [],\n          backgroundImage: n,\n          background: o,\n          overlayImage: a,\n          overlay: h,\n          clipPath: l\n        } = i,\n        u = this.renderOnAddRemove;\n      return this.renderOnAddRemove = !1, Promise.all([Bt(r, {\n        reviver: e,\n        signal: s\n      }), Xt({\n        backgroundImage: n,\n        backgroundColor: o,\n        overlayImage: a,\n        overlayColor: h,\n        clipPath: l\n      }, {\n        signal: s\n      })]).then(t => {\n        let [e, s] = t;\n        return this.clear(), this.add(...e), this.set(i), this.set(s), this.renderOnAddRemove = u, this;\n      });\n    }\n    clone(t) {\n      const e = this.toObject(t);\n      return this.cloneWithoutData().loadFromJSON(e);\n    }\n    cloneWithoutData() {\n      const t = vt(this);\n      return new this.constructor(t);\n    }\n    toDataURL() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n      const {\n          format: e = \"png\",\n          quality: s = 1,\n          multiplier: i = 1,\n          enableRetinaScaling: r = !1\n        } = t,\n        n = i * (r ? this.getRetinaScaling() : 1);\n      return yt(this.toCanvasElement(n, t), e, s);\n    }\n    toBlob() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n      const {\n          format: e = \"png\",\n          quality: s = 1,\n          multiplier: i = 1,\n          enableRetinaScaling: r = !1\n        } = t,\n        n = i * (r ? this.getRetinaScaling() : 1);\n      return _t(this.toCanvasElement(n, t), e, s);\n    }\n    toCanvasElement() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1,\n        {\n          width: e,\n          height: s,\n          left: i,\n          top: r,\n          filter: n\n        } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      const o = (e || this.width) * t,\n        a = (s || this.height) * t,\n        h = this.getZoom(),\n        c = this.width,\n        l = this.height,\n        u = this.skipControlsDrawing,\n        d = h * t,\n        g = this.viewportTransform,\n        f = [d, 0, 0, d, (g[4] - (i || 0)) * t, (g[5] - (r || 0)) * t],\n        p = this.enableRetinaScaling,\n        m = vt({\n          width: o,\n          height: a\n        }),\n        v = n ? this._objects.filter(t => n(t)) : this._objects;\n      return this.enableRetinaScaling = !1, this.viewportTransform = f, this.width = o, this.height = a, this.skipControlsDrawing = !0, this.calcViewportBoundaries(), this.renderCanvas(m.getContext(\"2d\"), v), this.viewportTransform = g, this.width = c, this.height = l, this.calcViewportBoundaries(), this.enableRetinaScaling = p, this.skipControlsDrawing = u, m;\n    }\n    dispose() {\n      return !this.disposed && this.elements.cleanupDOM({\n        width: this.width,\n        height: this.height\n      }), et.cancelByCanvas(this), this.disposed = !0, new Promise((t, e) => {\n        const s = () => {\n          this.destroy(), t(!0);\n        };\n        s.kill = e, this.__cleanupTask && this.__cleanupTask.kill(\"aborted\"), this.destroyed ? t(!1) : this.nextRenderHandle ? this.__cleanupTask = s : s();\n      });\n    }\n    destroy() {\n      this.destroyed = !0, this.cancelRequestedRender(), this.forEachObject(t => t.dispose()), this._objects = [], this.backgroundImage && this.backgroundImage.dispose(), this.backgroundImage = void 0, this.overlayImage && this.overlayImage.dispose(), this.overlayImage = void 0, this.elements.dispose();\n    }\n    toString() {\n      return \"#<Canvas (\".concat(this.complexity(), \"): { objects: \").concat(this._objects.length, \" }>\");\n    }\n  }\n  e(de, \"ownDefaults\", ue);\n  const ge = [\"touchstart\", \"touchmove\", \"touchend\"];\n  const fe = t => {\n      const e = re(t.target),\n        s = function (t) {\n          const e = t.changedTouches;\n          return e && e[0] ? e[0] : t;\n        }(t);\n      return new ot(s.clientX + e.left, s.clientY + e.top);\n    },\n    pe = t => ge.includes(t.type) || \"touch\" === t.pointerType,\n    me = t => {\n      t.preventDefault(), t.stopPropagation();\n    },\n    ve = t => {\n      let e = 0,\n        s = 0,\n        i = 0,\n        r = 0;\n      for (let n = 0, o = t.length; n < o; n++) {\n        const {\n          x: o,\n          y: a\n        } = t[n];\n        (o > i || !n) && (i = o), (o < e || !n) && (e = o), (a > r || !n) && (r = a), (a < s || !n) && (s = a);\n      }\n      return {\n        left: e,\n        top: s,\n        width: i - e,\n        height: r - s\n      };\n    },\n    ye = [\"translateX\", \"translateY\", \"scaleX\", \"scaleY\"],\n    _e = (t, e) => xe(t, Tt(e, t.calcOwnMatrix())),\n    xe = (t, e) => {\n      const s = Dt(e),\n        {\n          translateX: i,\n          translateY: n,\n          scaleX: o,\n          scaleY: a\n        } = s,\n        h = r(s, ye),\n        c = new ot(i, n);\n      t.flipX = !1, t.flipY = !1, Object.assign(t, h), t.set({\n        scaleX: o,\n        scaleY: a\n      }), t.setPositionByOrigin(c, D, D);\n    },\n    Ce = t => {\n      t.scaleX = 1, t.scaleY = 1, t.skewX = 0, t.skewY = 0, t.flipX = !1, t.flipY = !1, t.rotate(0);\n    },\n    be = t => ({\n      scaleX: t.scaleX,\n      scaleY: t.scaleY,\n      skewX: t.skewX,\n      skewY: t.skewY,\n      angle: t.angle,\n      left: t.left,\n      flipX: t.flipX,\n      flipY: t.flipY,\n      top: t.top\n    }),\n    Se = (t, e, s) => {\n      const i = t / 2,\n        r = e / 2,\n        n = [new ot(-i, -r), new ot(i, -r), new ot(-i, r), new ot(i, r)].map(t => t.transform(s)),\n        o = ve(n);\n      return new ot(o.width, o.height);\n    },\n    we = function () {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : T;\n      return Tt(wt(arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : T), t);\n    },\n    Te = function (t) {\n      let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : T,\n        s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : T;\n      return t.transform(we(e, s));\n    },\n    Oe = function (t) {\n      let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : T,\n        s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : T;\n      return t.transform(we(e, s), !0);\n    },\n    ke = (t, e, s) => {\n      const i = we(e, s);\n      return xe(t, Tt(i, t.calcOwnMatrix())), i;\n    },\n    De = (t, e) => {\n      var s;\n      const {\n        transform: {\n          target: r\n        }\n      } = e;\n      null === (s = r.canvas) || void 0 === s || s.fire(\"object:\".concat(t), i(i({}, e), {}, {\n        target: r\n      })), r.fire(t, e);\n    },\n    Me = {\n      left: -.5,\n      top: -.5,\n      center: 0,\n      bottom: .5,\n      right: .5\n    },\n    Pe = t => \"string\" == typeof t ? Me[t] : t - .5,\n    Ee = \"not-allowed\";\n  function Ae(t) {\n    return Pe(t.originX) === Pe(D) && Pe(t.originY) === Pe(D);\n  }\n  function je(t) {\n    return .5 - Pe(t);\n  }\n  const Fe = (t, e) => t[e],\n    Le = (t, e, s, i) => ({\n      e: t,\n      transform: e,\n      pointer: new ot(s, i)\n    });\n  function Re(t, e) {\n    const s = t.getTotalAngle() + Ct(Math.atan2(e.y, e.x)) + 360;\n    return Math.round(s % 360 / 45);\n  }\n  function Ie(t, e, s, i, r) {\n    var n;\n    let {\n      target: o,\n      corner: a\n    } = t;\n    const h = o.controls[a],\n      c = (null === (n = o.canvas) || void 0 === n ? void 0 : n.getZoom()) || 1,\n      l = o.padding / c,\n      u = function (t, e, s, i) {\n        const r = t.getRelativeCenterPoint(),\n          n = void 0 !== s && void 0 !== i ? t.translateToGivenOrigin(r, D, D, s, i) : new ot(t.left, t.top);\n        return (t.angle ? e.rotate(-xt(t.angle), r) : e).subtract(n);\n      }(o, new ot(i, r), e, s);\n    return u.x >= l && (u.x -= l), u.x <= -l && (u.x += l), u.y >= l && (u.y -= l), u.y <= l && (u.y += l), u.x -= h.offsetX, u.y -= h.offsetY, u;\n  }\n  const Be = (t, e, s, i) => {\n    const {\n        target: r,\n        offsetX: n,\n        offsetY: o\n      } = e,\n      a = s - n,\n      h = i - o,\n      c = !Fe(r, \"lockMovementX\") && r.left !== a,\n      l = !Fe(r, \"lockMovementY\") && r.top !== h;\n    return c && r.set(M, a), l && r.set(P, h), (c || l) && De(L, Le(t, e, s, i)), c || l;\n  };\n  class Xe {\n    getSvgStyles(t) {\n      const e = this.fillRule ? this.fillRule : \"nonzero\",\n        s = this.strokeWidth ? this.strokeWidth : \"0\",\n        i = this.strokeDashArray ? this.strokeDashArray.join(\" \") : j,\n        r = this.strokeDashOffset ? this.strokeDashOffset : \"0\",\n        n = this.strokeLineCap ? this.strokeLineCap : \"butt\",\n        o = this.strokeLineJoin ? this.strokeLineJoin : \"miter\",\n        a = this.strokeMiterLimit ? this.strokeMiterLimit : \"4\",\n        h = void 0 !== this.opacity ? this.opacity : \"1\",\n        c = this.visible ? \"\" : \" visibility: hidden;\",\n        l = t ? \"\" : this.getSvgFilter(),\n        u = $t(K, this.fill);\n      return [$t(J, this.stroke), \"stroke-width: \", s, \"; \", \"stroke-dasharray: \", i, \"; \", \"stroke-linecap: \", n, \"; \", \"stroke-dashoffset: \", r, \"; \", \"stroke-linejoin: \", o, \"; \", \"stroke-miterlimit: \", a, \"; \", u, \"fill-rule: \", e, \"; \", \"opacity: \", h, \";\", l, c].join(\"\");\n    }\n    getSvgFilter() {\n      return this.shadow ? \"filter: url(#SVGID_\".concat(this.shadow.id, \");\") : \"\";\n    }\n    getSvgCommons() {\n      return [this.id ? 'id=\"'.concat(this.id, '\" ') : \"\", this.clipPath ? 'clip-path=\"url(#'.concat(this.clipPath.clipPathId, ')\" ') : \"\"].join(\"\");\n    }\n    getSvgTransform(t) {\n      let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"\";\n      const s = t ? this.calcTransformMatrix() : this.calcOwnMatrix(),\n        i = 'transform=\"'.concat(Zt(s));\n      return \"\".concat(i).concat(e, '\" ');\n    }\n    _toSVG(t) {\n      return [\"\"];\n    }\n    toSVG(t) {\n      return this._createBaseSVGMarkup(this._toSVG(t), {\n        reviver: t\n      });\n    }\n    toClipPathSVG(t) {\n      return \"\\t\" + this._createBaseClipPathSVGMarkup(this._toSVG(t), {\n        reviver: t\n      });\n    }\n    _createBaseClipPathSVGMarkup(t) {\n      let {\n        reviver: e,\n        additionalTransform: s = \"\"\n      } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      const i = [this.getSvgTransform(!0, s), this.getSvgCommons()].join(\"\"),\n        r = t.indexOf(\"COMMON_PARTS\");\n      return t[r] = i, e ? e(t.join(\"\")) : t.join(\"\");\n    }\n    _createBaseSVGMarkup(t) {\n      let {\n        noStyle: e,\n        reviver: s,\n        withShadow: i,\n        additionalTransform: r\n      } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      const n = e ? \"\" : 'style=\"'.concat(this.getSvgStyles(), '\" '),\n        o = i ? 'style=\"'.concat(this.getSvgFilter(), '\" ') : \"\",\n        a = this.clipPath,\n        h = this.strokeUniform ? 'vector-effect=\"non-scaling-stroke\" ' : \"\",\n        c = a && a.absolutePositioned,\n        l = this.stroke,\n        u = this.fill,\n        d = this.shadow,\n        g = [],\n        f = t.indexOf(\"COMMON_PARTS\");\n      let p;\n      a && (a.clipPathId = \"CLIPPATH_\".concat(ft()), p = '<clipPath id=\"'.concat(a.clipPathId, '\" >\\n').concat(a.toClipPathSVG(s), \"</clipPath>\\n\")), c && g.push(\"<g \", o, this.getSvgCommons(), \" >\\n\"), g.push(\"<g \", this.getSvgTransform(!1), c ? \"\" : o + this.getSvgCommons(), \" >\\n\");\n      const m = [n, h, e ? \"\" : this.addPaintOrder(), \" \", r ? 'transform=\"'.concat(r, '\" ') : \"\"].join(\"\");\n      return t[f] = m, te(u) && g.push(u.toSVG(this)), te(l) && g.push(l.toSVG(this)), d && g.push(d.toSVG(this)), a && g.push(p), g.push(t.join(\"\")), g.push(\"</g>\\n\"), c && g.push(\"</g>\\n\"), s ? s(g.join(\"\")) : g.join(\"\");\n    }\n    addPaintOrder() {\n      return this.paintFirst !== K ? ' paint-order=\"'.concat(this.paintFirst, '\" ') : \"\";\n    }\n  }\n  function Ye(t) {\n    return new RegExp(\"^(\" + t.join(\"|\") + \")\\\\b\", \"i\");\n  }\n  var We;\n  const Ve = String.raw(We || (We = n([\"(?:[-+]?(?:d*.d+|d+.?)(?:[eE][-+]?d+)?)\"], [\"(?:[-+]?(?:\\\\d*\\\\.\\\\d+|\\\\d+\\\\.?)(?:[eE][-+]?\\\\d+)?)\"]))),\n    Ge = \"http://www.w3.org/2000/svg\",\n    ze = new RegExp(\"(normal|italic)?\\\\s*(normal|small-caps)?\\\\s*(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\\\s*(\" + Ve + \"(?:px|cm|mm|em|pt|pc|in)*)(?:\\\\/(normal|\" + Ve + \"))?\\\\s+(.*)\"),\n    He = {\n      cx: M,\n      x: M,\n      r: \"radius\",\n      cy: P,\n      y: P,\n      display: \"visible\",\n      visibility: \"visible\",\n      transform: \"transformMatrix\",\n      \"fill-opacity\": \"fillOpacity\",\n      \"fill-rule\": \"fillRule\",\n      \"font-family\": \"fontFamily\",\n      \"font-size\": \"fontSize\",\n      \"font-style\": \"fontStyle\",\n      \"font-weight\": \"fontWeight\",\n      \"letter-spacing\": \"charSpacing\",\n      \"paint-order\": \"paintFirst\",\n      \"stroke-dasharray\": \"strokeDashArray\",\n      \"stroke-dashoffset\": \"strokeDashOffset\",\n      \"stroke-linecap\": \"strokeLineCap\",\n      \"stroke-linejoin\": \"strokeLineJoin\",\n      \"stroke-miterlimit\": \"strokeMiterLimit\",\n      \"stroke-opacity\": \"strokeOpacity\",\n      \"stroke-width\": \"strokeWidth\",\n      \"text-decoration\": \"textDecoration\",\n      \"text-anchor\": \"textAnchor\",\n      opacity: \"opacity\",\n      \"clip-path\": \"clipPath\",\n      \"clip-rule\": \"clipRule\",\n      \"vector-effect\": \"strokeUniform\",\n      \"image-rendering\": \"imageSmoothing\"\n    },\n    Ne = \"font-size\",\n    Ue = \"clip-path\",\n    qe = Ye([\"path\", \"circle\", \"polygon\", \"polyline\", \"ellipse\", \"rect\", \"line\", \"image\", \"text\"]),\n    Ke = Ye([\"symbol\", \"image\", \"marker\", \"pattern\", \"view\", \"svg\"]),\n    Je = Ye([\"symbol\", \"g\", \"a\", \"svg\", \"clipPath\", \"defs\"]),\n    Qe = new RegExp(\"^\\\\s*(\" + Ve + \"+)\\\\s*,?\\\\s*(\" + Ve + \"+)\\\\s*,?\\\\s*(\" + Ve + \"+)\\\\s*,?\\\\s*(\" + Ve + \"+)\\\\s*$\"),\n    Ze = new ot(1, 0),\n    $e = new ot(),\n    ts = (t, e) => t.rotate(e),\n    es = (t, e) => new ot(e).subtract(t),\n    ss = t => t.distanceFrom($e),\n    is = (t, e) => Math.atan2(as(t, e), hs(t, e)),\n    rs = t => is(Ze, t),\n    ns = t => t.eq($e) ? t : t.scalarDivide(ss(t)),\n    os = function (t) {\n      let e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];\n      return ns(new ot(-t.y, t.x).scalarMultiply(e ? 1 : -1));\n    },\n    as = (t, e) => t.x * e.y - t.y * e.x,\n    hs = (t, e) => t.x * e.x + t.y * e.y,\n    cs = (t, e, s) => {\n      if (t.eq(e) || t.eq(s)) return !0;\n      const i = as(e, s),\n        r = as(e, t),\n        n = as(s, t);\n      return i >= 0 ? r >= 0 && n <= 0 : !(r <= 0 && n >= 0);\n    },\n    ls = \"(-?\\\\d+(?:\\\\.\\\\d*)?(?:px)?(?:\\\\s?|$))?\",\n    us = new RegExp(\"(?:\\\\s|^)\" + ls + ls + \"(\" + Ve + \"?(?:px)?)?(?:\\\\s?|$)(?:$|\\\\s)\");\n  class ds {\n    constructor(t) {\n      const e = \"string\" == typeof t ? ds.parseShadow(t) : t;\n      Object.assign(this, ds.ownDefaults, e), this.id = ft();\n    }\n    static parseShadow(t) {\n      const e = t.trim(),\n        [, s = 0, i = 0, r = 0] = (us.exec(e) || []).map(t => parseFloat(t) || 0);\n      return {\n        color: (e.replace(us, \"\") || \"rgb(0,0,0)\").trim(),\n        offsetX: s,\n        offsetY: i,\n        blur: r\n      };\n    }\n    toString() {\n      return [this.offsetX, this.offsetY, this.blur, this.color].join(\"px \");\n    }\n    toSVG(t) {\n      const e = ts(new ot(this.offsetX, this.offsetY), xt(-t.angle)),\n        s = new qt(this.color);\n      let i = 40,\n        r = 40;\n      return t.width && t.height && (i = 100 * Kt((Math.abs(e.x) + this.blur) / t.width, a.NUM_FRACTION_DIGITS) + 20, r = 100 * Kt((Math.abs(e.y) + this.blur) / t.height, a.NUM_FRACTION_DIGITS) + 20), t.flipX && (e.x *= -1), t.flipY && (e.y *= -1), '<filter id=\"SVGID_'.concat(this.id, '\" y=\"-').concat(r, '%\" height=\"').concat(100 + 2 * r, '%\" x=\"-').concat(i, '%\" width=\"').concat(100 + 2 * i, '%\" >\\n\\t<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"').concat(Kt(this.blur ? this.blur / 2 : 0, a.NUM_FRACTION_DIGITS), '\"></feGaussianBlur>\\n\\t<feOffset dx=\"').concat(Kt(e.x, a.NUM_FRACTION_DIGITS), '\" dy=\"').concat(Kt(e.y, a.NUM_FRACTION_DIGITS), '\" result=\"oBlur\" ></feOffset>\\n\\t<feFlood flood-color=\"').concat(s.toRgb(), '\" flood-opacity=\"').concat(s.getAlpha(), '\"/>\\n\\t<feComposite in2=\"oBlur\" operator=\"in\" />\\n\\t<feMerge>\\n\\t\\t<feMergeNode></feMergeNode>\\n\\t\\t<feMergeNode in=\"SourceGraphic\"></feMergeNode>\\n\\t</feMerge>\\n</filter>\\n');\n    }\n    toObject() {\n      const t = {\n          color: this.color,\n          blur: this.blur,\n          offsetX: this.offsetX,\n          offsetY: this.offsetY,\n          affectStroke: this.affectStroke,\n          nonScaling: this.nonScaling,\n          type: this.constructor.type\n        },\n        e = ds.ownDefaults;\n      return this.includeDefaultValues ? t : Wt(t, (t, s) => t !== e[s]);\n    }\n    static async fromObject(t) {\n      return new this(t);\n    }\n  }\n  e(ds, \"ownDefaults\", {\n    color: \"rgb(0,0,0)\",\n    blur: 0,\n    offsetX: 0,\n    offsetY: 0,\n    affectStroke: !1,\n    includeDefaultValues: !0,\n    nonScaling: !1\n  }), e(ds, \"type\", \"shadow\"), tt.setClass(ds, \"shadow\");\n  const gs = (t, e, s) => Math.max(t, Math.min(e, s)),\n    fs = [P, M, H, N, \"flipX\", \"flipY\", \"originX\", \"originY\", \"angle\", \"opacity\", \"globalCompositeOperation\", \"shadow\", \"visible\", U, q],\n    ps = [K, J, \"strokeWidth\", \"strokeDashArray\", \"width\", \"height\", \"paintFirst\", \"strokeUniform\", \"strokeLineCap\", \"strokeDashOffset\", \"strokeLineJoin\", \"strokeMiterLimit\", \"backgroundColor\", \"clipPath\"],\n    ms = {\n      top: 0,\n      left: 0,\n      width: 0,\n      height: 0,\n      angle: 0,\n      flipX: !1,\n      flipY: !1,\n      scaleX: 1,\n      scaleY: 1,\n      minScaleLimit: 0,\n      skewX: 0,\n      skewY: 0,\n      originX: M,\n      originY: P,\n      strokeWidth: 1,\n      strokeUniform: !1,\n      padding: 0,\n      opacity: 1,\n      paintFirst: K,\n      fill: \"rgb(0,0,0)\",\n      fillRule: \"nonzero\",\n      stroke: null,\n      strokeDashArray: null,\n      strokeDashOffset: 0,\n      strokeLineCap: \"butt\",\n      strokeLineJoin: \"miter\",\n      strokeMiterLimit: 4,\n      globalCompositeOperation: \"source-over\",\n      backgroundColor: \"\",\n      shadow: null,\n      visible: !0,\n      includeDefaultValues: !0,\n      excludeFromExport: !1,\n      objectCaching: !0,\n      clipPath: void 0,\n      inverted: !1,\n      absolutePositioned: !1,\n      centeredRotation: !0,\n      centeredScaling: !1,\n      dirty: !0\n    },\n    vs = (t, e, s, i) => (t < Math.abs(e) ? (t = e, i = s / 4) : i = 0 === e && 0 === t ? s / S * Math.asin(1) : s / S * Math.asin(e / t), {\n      a: t,\n      c: e,\n      p: s,\n      s: i\n    }),\n    ys = (t, e, s, i, r) => t * Math.pow(2, 10 * (i -= 1)) * Math.sin((i * r - e) * S / s),\n    _s = (t, e, s, i) => -s * Math.cos(t / i * b) + s + e,\n    xs = (t, e, s, i) => (t /= i) < 1 / 2.75 ? s * (7.5625 * t * t) + e : t < 2 / 2.75 ? s * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + e : t < 2.5 / 2.75 ? s * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + e : s * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + e,\n    Cs = (t, e, s, i) => s - xs(i - t, 0, s, i) + e;\n  var bs = Object.freeze({\n    __proto__: null,\n    defaultEasing: _s,\n    easeInBack: function (t, e, s, i) {\n      let r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1.70158;\n      return s * (t /= i) * t * ((r + 1) * t - r) + e;\n    },\n    easeInBounce: Cs,\n    easeInCirc: (t, e, s, i) => -s * (Math.sqrt(1 - (t /= i) * t) - 1) + e,\n    easeInCubic: (t, e, s, i) => s * (t / i) ** 3 + e,\n    easeInElastic: (t, e, s, i) => {\n      const r = s;\n      let n = 0;\n      if (0 === t) return e;\n      if (1 === (t /= i)) return e + s;\n      n || (n = .3 * i);\n      const {\n        a: o,\n        s: a,\n        p: h\n      } = vs(r, s, n, 1.70158);\n      return -ys(o, a, h, t, i) + e;\n    },\n    easeInExpo: (t, e, s, i) => 0 === t ? e : s * 2 ** (10 * (t / i - 1)) + e,\n    easeInOutBack: function (t, e, s, i) {\n      let r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1.70158;\n      return (t /= i / 2) < 1 ? s / 2 * (t * t * ((1 + (r *= 1.525)) * t - r)) + e : s / 2 * ((t -= 2) * t * ((1 + (r *= 1.525)) * t + r) + 2) + e;\n    },\n    easeInOutBounce: (t, e, s, i) => t < i / 2 ? .5 * Cs(2 * t, 0, s, i) + e : .5 * xs(2 * t - i, 0, s, i) + .5 * s + e,\n    easeInOutCirc: (t, e, s, i) => (t /= i / 2) < 1 ? -s / 2 * (Math.sqrt(1 - t ** 2) - 1) + e : s / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + e,\n    easeInOutCubic: (t, e, s, i) => (t /= i / 2) < 1 ? s / 2 * t ** 3 + e : s / 2 * ((t - 2) ** 3 + 2) + e,\n    easeInOutElastic: (t, e, s, i) => {\n      const r = s;\n      let n = 0;\n      if (0 === t) return e;\n      if (2 === (t /= i / 2)) return e + s;\n      n || (n = i * (.3 * 1.5));\n      const {\n        a: o,\n        s: a,\n        p: h,\n        c: c\n      } = vs(r, s, n, 1.70158);\n      return t < 1 ? -.5 * ys(o, a, h, t, i) + e : o * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * i - a) * S / h) * .5 + c + e;\n    },\n    easeInOutExpo: (t, e, s, i) => 0 === t ? e : t === i ? e + s : (t /= i / 2) < 1 ? s / 2 * 2 ** (10 * (t - 1)) + e : s / 2 * -(2 ** (-10 * --t) + 2) + e,\n    easeInOutQuad: (t, e, s, i) => (t /= i / 2) < 1 ? s / 2 * t ** 2 + e : -s / 2 * (--t * (t - 2) - 1) + e,\n    easeInOutQuart: (t, e, s, i) => (t /= i / 2) < 1 ? s / 2 * t ** 4 + e : -s / 2 * ((t -= 2) * t ** 3 - 2) + e,\n    easeInOutQuint: (t, e, s, i) => (t /= i / 2) < 1 ? s / 2 * t ** 5 + e : s / 2 * ((t - 2) ** 5 + 2) + e,\n    easeInOutSine: (t, e, s, i) => -s / 2 * (Math.cos(Math.PI * t / i) - 1) + e,\n    easeInQuad: (t, e, s, i) => s * (t /= i) * t + e,\n    easeInQuart: (t, e, s, i) => s * (t /= i) * t ** 3 + e,\n    easeInQuint: (t, e, s, i) => s * (t / i) ** 5 + e,\n    easeInSine: (t, e, s, i) => -s * Math.cos(t / i * b) + s + e,\n    easeOutBack: function (t, e, s, i) {\n      let r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1.70158;\n      return s * ((t = t / i - 1) * t * ((r + 1) * t + r) + 1) + e;\n    },\n    easeOutBounce: xs,\n    easeOutCirc: (t, e, s, i) => s * Math.sqrt(1 - (t = t / i - 1) * t) + e,\n    easeOutCubic: (t, e, s, i) => s * ((t / i - 1) ** 3 + 1) + e,\n    easeOutElastic: (t, e, s, i) => {\n      const r = s;\n      let n = 0;\n      if (0 === t) return e;\n      if (1 === (t /= i)) return e + s;\n      n || (n = .3 * i);\n      const {\n        a: o,\n        s: a,\n        p: h,\n        c: c\n      } = vs(r, s, n, 1.70158);\n      return o * 2 ** (-10 * t) * Math.sin((t * i - a) * S / h) + c + e;\n    },\n    easeOutExpo: (t, e, s, i) => t === i ? e + s : s * -(2 ** (-10 * t / i) + 1) + e,\n    easeOutQuad: (t, e, s, i) => -s * (t /= i) * (t - 2) + e,\n    easeOutQuart: (t, e, s, i) => -s * ((t = t / i - 1) * t ** 3 - 1) + e,\n    easeOutQuint: (t, e, s, i) => s * ((t / i - 1) ** 5 + 1) + e,\n    easeOutSine: (t, e, s, i) => s * Math.sin(t / i * b) + e\n  });\n  const Ss = () => !1;\n  class ws {\n    constructor(t) {\n      let {\n        startValue: s,\n        byValue: i,\n        duration: r = 500,\n        delay: n = 0,\n        easing: o = _s,\n        onStart: a = C,\n        onChange: h = C,\n        onComplete: c = C,\n        abort: l = Ss,\n        target: u\n      } = t;\n      e(this, \"_state\", \"pending\"), e(this, \"durationProgress\", 0), e(this, \"valueProgress\", 0), this.tick = this.tick.bind(this), this.duration = r, this.delay = n, this.easing = o, this._onStart = a, this._onChange = h, this._onComplete = c, this._abort = l, this.target = u, this.startValue = s, this.byValue = i, this.value = this.startValue, this.endValue = Object.freeze(this.calculate(this.duration).value);\n    }\n    get state() {\n      return this._state;\n    }\n    isDone() {\n      return \"aborted\" === this._state || \"completed\" === this._state;\n    }\n    start() {\n      const t = t => {\n        \"pending\" === this._state && (this.startTime = t || +new Date(), this._state = \"running\", this._onStart(), this.tick(this.startTime));\n      };\n      this.register(), this.delay > 0 ? setTimeout(() => ut(t), this.delay) : ut(t);\n    }\n    tick(t) {\n      const e = (t || +new Date()) - this.startTime,\n        s = Math.min(e, this.duration);\n      this.durationProgress = s / this.duration;\n      const {\n        value: i,\n        valueProgress: r\n      } = this.calculate(s);\n      this.value = Object.freeze(i), this.valueProgress = r, \"aborted\" !== this._state && (this._abort(this.value, this.valueProgress, this.durationProgress) ? (this._state = \"aborted\", this.unregister()) : e >= this.duration ? (this.durationProgress = this.valueProgress = 1, this._onChange(this.endValue, this.valueProgress, this.durationProgress), this._state = \"completed\", this._onComplete(this.endValue, this.valueProgress, this.durationProgress), this.unregister()) : (this._onChange(this.value, this.valueProgress, this.durationProgress), ut(this.tick)));\n    }\n    register() {\n      et.push(this);\n    }\n    unregister() {\n      et.remove(this);\n    }\n    abort() {\n      this._state = \"aborted\", this.unregister();\n    }\n  }\n  const Ts = [\"startValue\", \"endValue\"];\n  class Os extends ws {\n    constructor(t) {\n      let {\n        startValue: e = 0,\n        endValue: s = 100\n      } = t;\n      super(i(i({}, r(t, Ts)), {}, {\n        startValue: e,\n        byValue: s - e\n      }));\n    }\n    calculate(t) {\n      const e = this.easing(t, this.startValue, this.byValue, this.duration);\n      return {\n        value: e,\n        valueProgress: Math.abs((e - this.startValue) / this.byValue)\n      };\n    }\n  }\n  const ks = [\"startValue\", \"endValue\"];\n  class Ds extends ws {\n    constructor(t) {\n      let {\n        startValue: e = [0],\n        endValue: s = [100]\n      } = t;\n      super(i(i({}, r(t, ks)), {}, {\n        startValue: e,\n        byValue: s.map((t, s) => t - e[s])\n      }));\n    }\n    calculate(t) {\n      const e = this.startValue.map((e, s) => this.easing(t, e, this.byValue[s], this.duration, s));\n      return {\n        value: e,\n        valueProgress: Math.abs((e[0] - this.startValue[0]) / this.byValue[0])\n      };\n    }\n  }\n  const Ms = [\"startValue\", \"endValue\", \"easing\", \"onChange\", \"onComplete\", \"abort\"],\n    Ps = (t, e, s, i) => e + s * (1 - Math.cos(t / i * b)),\n    Es = t => t && ((e, s, i) => t(new qt(e).toRgba(), s, i));\n  class As extends ws {\n    constructor(t) {\n      let {\n          startValue: e,\n          endValue: s,\n          easing: n = Ps,\n          onChange: o,\n          onComplete: a,\n          abort: h\n        } = t,\n        c = r(t, Ms);\n      const l = new qt(e).getSource(),\n        u = new qt(s).getSource();\n      super(i(i({}, c), {}, {\n        startValue: l,\n        byValue: u.map((t, e) => t - l[e]),\n        easing: n,\n        onChange: Es(o),\n        onComplete: Es(a),\n        abort: Es(h)\n      }));\n    }\n    calculate(t) {\n      const [e, s, i, r] = this.startValue.map((e, s) => this.easing(t, e, this.byValue[s], this.duration, s)),\n        n = [...[e, s, i].map(Math.round), gs(0, r, 1)];\n      return {\n        value: n,\n        valueProgress: n.map((t, e) => 0 !== this.byValue[e] ? Math.abs((t - this.startValue[e]) / this.byValue[e]) : 0).find(t => 0 !== t) || 0\n      };\n    }\n  }\n  function js(t) {\n    const e = (t => Array.isArray(t.startValue) || Array.isArray(t.endValue))(t) ? new Ds(t) : new Os(t);\n    return e.start(), e;\n  }\n  function Fs(t) {\n    const e = new As(t);\n    return e.start(), e;\n  }\n  class Ls {\n    constructor(t) {\n      this.status = t, this.points = [];\n    }\n    includes(t) {\n      return this.points.some(e => e.eq(t));\n    }\n    append() {\n      for (var t = arguments.length, e = new Array(t), s = 0; s < t; s++) e[s] = arguments[s];\n      return this.points = this.points.concat(e.filter(t => !this.includes(t))), this;\n    }\n    static isPointContained(t, e, s) {\n      let i = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];\n      if (e.eq(s)) return t.eq(e);\n      if (e.x === s.x) return t.x === e.x && (i || t.y >= Math.min(e.y, s.y) && t.y <= Math.max(e.y, s.y));\n      if (e.y === s.y) return t.y === e.y && (i || t.x >= Math.min(e.x, s.x) && t.x <= Math.max(e.x, s.x));\n      {\n        const r = es(e, s),\n          n = es(e, t).divide(r);\n        return i ? Math.abs(n.x) === Math.abs(n.y) : n.x === n.y && n.x >= 0 && n.x <= 1;\n      }\n    }\n    static isPointInPolygon(t, e) {\n      const s = new ot(t).setX(Math.min(t.x - 1, ...e.map(t => t.x)));\n      let i = 0;\n      for (let r = 0; r < e.length; r++) {\n        const n = this.intersectSegmentSegment(e[r], e[(r + 1) % e.length], t, s);\n        if (n.includes(t)) return !0;\n        i += Number(\"Intersection\" === n.status);\n      }\n      return i % 2 == 1;\n    }\n    static intersectLineLine(t, e, s, i) {\n      let r = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4],\n        n = !(arguments.length > 5 && void 0 !== arguments[5]) || arguments[5];\n      const o = e.x - t.x,\n        a = e.y - t.y,\n        h = i.x - s.x,\n        c = i.y - s.y,\n        l = t.x - s.x,\n        u = t.y - s.y,\n        d = h * u - c * l,\n        g = o * u - a * l,\n        f = c * o - h * a;\n      if (0 !== f) {\n        const e = d / f,\n          s = g / f;\n        return (r || 0 <= e && e <= 1) && (n || 0 <= s && s <= 1) ? new Ls(\"Intersection\").append(new ot(t.x + e * o, t.y + e * a)) : new Ls();\n      }\n      if (0 === d || 0 === g) {\n        const o = r || n || Ls.isPointContained(t, s, i) || Ls.isPointContained(e, s, i) || Ls.isPointContained(s, t, e) || Ls.isPointContained(i, t, e);\n        return new Ls(o ? \"Coincident\" : void 0);\n      }\n      return new Ls(\"Parallel\");\n    }\n    static intersectSegmentLine(t, e, s, i) {\n      return Ls.intersectLineLine(t, e, s, i, !1, !0);\n    }\n    static intersectSegmentSegment(t, e, s, i) {\n      return Ls.intersectLineLine(t, e, s, i, !1, !1);\n    }\n    static intersectLinePolygon(t, e, s) {\n      let i = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3];\n      const r = new Ls(),\n        n = s.length;\n      for (let o, a, h, c = 0; c < n; c++) {\n        if (o = s[c], a = s[(c + 1) % n], h = Ls.intersectLineLine(t, e, o, a, i, !1), \"Coincident\" === h.status) return h;\n        r.append(...h.points);\n      }\n      return r.points.length > 0 && (r.status = \"Intersection\"), r;\n    }\n    static intersectSegmentPolygon(t, e, s) {\n      return Ls.intersectLinePolygon(t, e, s, !1);\n    }\n    static intersectPolygonPolygon(t, e) {\n      const s = new Ls(),\n        i = t.length,\n        r = [];\n      for (let n = 0; n < i; n++) {\n        const o = t[n],\n          a = t[(n + 1) % i],\n          h = Ls.intersectSegmentPolygon(o, a, e);\n        \"Coincident\" === h.status ? (r.push(h), s.append(o, a)) : s.append(...h.points);\n      }\n      return r.length > 0 && r.length === t.length ? new Ls(\"Coincident\") : (s.points.length > 0 && (s.status = \"Intersection\"), s);\n    }\n    static intersectPolygonRectangle(t, e, s) {\n      const i = e.min(s),\n        r = e.max(s),\n        n = new ot(r.x, i.y),\n        o = new ot(i.x, r.y);\n      return Ls.intersectPolygonPolygon(t, [i, n, r, o]);\n    }\n  }\n  class Rs extends lt {\n    getX() {\n      return this.getXY().x;\n    }\n    setX(t) {\n      this.setXY(this.getXY().setX(t));\n    }\n    getY() {\n      return this.getXY().y;\n    }\n    setY(t) {\n      this.setXY(this.getXY().setY(t));\n    }\n    getRelativeX() {\n      return this.left;\n    }\n    setRelativeX(t) {\n      this.left = t;\n    }\n    getRelativeY() {\n      return this.top;\n    }\n    setRelativeY(t) {\n      this.top = t;\n    }\n    getXY() {\n      const t = this.getRelativeXY();\n      return this.group ? St(t, this.group.calcTransformMatrix()) : t;\n    }\n    setXY(t, e, s) {\n      this.group && (t = St(t, wt(this.group.calcTransformMatrix()))), this.setRelativeXY(t, e, s);\n    }\n    getRelativeXY() {\n      return new ot(this.left, this.top);\n    }\n    setRelativeXY(t) {\n      let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.originX,\n        s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.originY;\n      this.setPositionByOrigin(t, e, s);\n    }\n    isStrokeAccountedForInDimensions() {\n      return !1;\n    }\n    getCoords() {\n      const {\n          tl: t,\n          tr: e,\n          br: s,\n          bl: i\n        } = this.aCoords || (this.aCoords = this.calcACoords()),\n        r = [t, e, s, i];\n      if (this.group) {\n        const t = this.group.calcTransformMatrix();\n        return r.map(e => St(e, t));\n      }\n      return r;\n    }\n    intersectsWithRect(t, e) {\n      return \"Intersection\" === Ls.intersectPolygonRectangle(this.getCoords(), t, e).status;\n    }\n    intersectsWithObject(t) {\n      const e = Ls.intersectPolygonPolygon(this.getCoords(), t.getCoords());\n      return \"Intersection\" === e.status || \"Coincident\" === e.status || t.isContainedWithinObject(this) || this.isContainedWithinObject(t);\n    }\n    isContainedWithinObject(t) {\n      return this.getCoords().every(e => t.containsPoint(e));\n    }\n    isContainedWithinRect(t, e) {\n      const {\n        left: s,\n        top: i,\n        width: r,\n        height: n\n      } = this.getBoundingRect();\n      return s >= t.x && s + r <= e.x && i >= t.y && i + n <= e.y;\n    }\n    isOverlapping(t) {\n      return this.intersectsWithObject(t) || this.isContainedWithinObject(t) || t.isContainedWithinObject(this);\n    }\n    containsPoint(t) {\n      return Ls.isPointInPolygon(t, this.getCoords());\n    }\n    isOnScreen() {\n      if (!this.canvas) return !1;\n      const {\n        tl: t,\n        br: e\n      } = this.canvas.vptCoords;\n      return !!this.getCoords().some(s => s.x <= e.x && s.x >= t.x && s.y <= e.y && s.y >= t.y) || !!this.intersectsWithRect(t, e) || this.containsPoint(t.midPointFrom(e));\n    }\n    isPartiallyOnScreen() {\n      if (!this.canvas) return !1;\n      const {\n        tl: t,\n        br: e\n      } = this.canvas.vptCoords;\n      if (this.intersectsWithRect(t, e)) return !0;\n      return this.getCoords().every(s => (s.x >= e.x || s.x <= t.x) && (s.y >= e.y || s.y <= t.y)) && this.containsPoint(t.midPointFrom(e));\n    }\n    getBoundingRect() {\n      return ve(this.getCoords());\n    }\n    getScaledWidth() {\n      return this._getTransformedDimensions().x;\n    }\n    getScaledHeight() {\n      return this._getTransformedDimensions().y;\n    }\n    scale(t) {\n      this._set(H, t), this._set(N, t), this.setCoords();\n    }\n    scaleToWidth(t) {\n      const e = this.getBoundingRect().width / this.getScaledWidth();\n      return this.scale(t / this.width / e);\n    }\n    scaleToHeight(t) {\n      const e = this.getBoundingRect().height / this.getScaledHeight();\n      return this.scale(t / this.height / e);\n    }\n    getCanvasRetinaScaling() {\n      var t;\n      return (null === (t = this.canvas) || void 0 === t ? void 0 : t.getRetinaScaling()) || 1;\n    }\n    getTotalAngle() {\n      return this.group ? Ct(kt(this.calcTransformMatrix())) : this.angle;\n    }\n    getViewportTransform() {\n      var t;\n      return (null === (t = this.canvas) || void 0 === t ? void 0 : t.viewportTransform) || T.concat();\n    }\n    calcACoords() {\n      const t = Pt({\n          angle: this.angle\n        }),\n        {\n          x: e,\n          y: s\n        } = this.getRelativeCenterPoint(),\n        i = Mt(e, s),\n        r = Tt(i, t),\n        n = this._getTransformedDimensions(),\n        o = n.x / 2,\n        a = n.y / 2;\n      return {\n        tl: St({\n          x: -o,\n          y: -a\n        }, r),\n        tr: St({\n          x: o,\n          y: -a\n        }, r),\n        bl: St({\n          x: -o,\n          y: a\n        }, r),\n        br: St({\n          x: o,\n          y: a\n        }, r)\n      };\n    }\n    setCoords() {\n      this.aCoords = this.calcACoords();\n    }\n    transformMatrixKey() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n        e = [];\n      return !t && this.group && (e = this.group.transformMatrixKey(t)), e.push(this.top, this.left, this.width, this.height, this.scaleX, this.scaleY, this.angle, this.strokeWidth, this.skewX, this.skewY, +this.flipX, +this.flipY, Pe(this.originX), Pe(this.originY)), e;\n    }\n    calcTransformMatrix() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n        e = this.calcOwnMatrix();\n      if (t || !this.group) return e;\n      const s = this.transformMatrixKey(t),\n        i = this.matrixCache;\n      return i && i.key.every((t, e) => t === s[e]) ? i.value : (this.group && (e = Tt(this.group.calcTransformMatrix(!1), e)), this.matrixCache = {\n        key: s,\n        value: e\n      }, e);\n    }\n    calcOwnMatrix() {\n      const t = this.transformMatrixKey(!0),\n        e = this.ownMatrixCache;\n      if (e && e.key === t) return e.value;\n      const s = this.getRelativeCenterPoint(),\n        i = {\n          angle: this.angle,\n          translateX: s.x,\n          translateY: s.y,\n          scaleX: this.scaleX,\n          scaleY: this.scaleY,\n          skewX: this.skewX,\n          skewY: this.skewY,\n          flipX: this.flipX,\n          flipY: this.flipY\n        },\n        r = Rt(i);\n      return this.ownMatrixCache = {\n        key: t,\n        value: r\n      }, r;\n    }\n    _getNonTransformedDimensions() {\n      return new ot(this.width, this.height).scalarAdd(this.strokeWidth);\n    }\n    _calculateCurrentDimensions(t) {\n      return this._getTransformedDimensions(t).transform(this.getViewportTransform(), !0).scalarAdd(2 * this.padding);\n    }\n    _getTransformedDimensions() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n      const e = i({\n          scaleX: this.scaleX,\n          scaleY: this.scaleY,\n          skewX: this.skewX,\n          skewY: this.skewY,\n          width: this.width,\n          height: this.height,\n          strokeWidth: this.strokeWidth\n        }, t),\n        s = e.strokeWidth;\n      let r = s,\n        n = 0;\n      this.strokeUniform && (r = 0, n = s);\n      const o = e.width + r,\n        a = e.height + r;\n      let h;\n      return h = 0 === e.skewX && 0 === e.skewY ? new ot(o * e.scaleX, a * e.scaleY) : Se(o, a, Lt(e)), h.scalarAdd(n);\n    }\n    translateToGivenOrigin(t, e, s, i, r) {\n      let n = t.x,\n        o = t.y;\n      const a = Pe(i) - Pe(e),\n        h = Pe(r) - Pe(s);\n      if (a || h) {\n        const t = this._getTransformedDimensions();\n        n += a * t.x, o += h * t.y;\n      }\n      return new ot(n, o);\n    }\n    translateToCenterPoint(t, e, s) {\n      if (e === D && s === D) return t;\n      const i = this.translateToGivenOrigin(t, e, s, D, D);\n      return this.angle ? i.rotate(xt(this.angle), t) : i;\n    }\n    translateToOriginPoint(t, e, s) {\n      const i = this.translateToGivenOrigin(t, D, D, e, s);\n      return this.angle ? i.rotate(xt(this.angle), t) : i;\n    }\n    getCenterPoint() {\n      const t = this.getRelativeCenterPoint();\n      return this.group ? St(t, this.group.calcTransformMatrix()) : t;\n    }\n    getRelativeCenterPoint() {\n      return this.translateToCenterPoint(new ot(this.left, this.top), this.originX, this.originY);\n    }\n    getPointByOrigin(t, e) {\n      return this.translateToOriginPoint(this.getRelativeCenterPoint(), t, e);\n    }\n    setPositionByOrigin(t, e, s) {\n      const i = this.translateToCenterPoint(t, e, s),\n        r = this.translateToOriginPoint(i, this.originX, this.originY);\n      this.set({\n        left: r.x,\n        top: r.y\n      });\n    }\n    _getLeftTopCoords() {\n      return this.translateToOriginPoint(this.getRelativeCenterPoint(), M, P);\n    }\n  }\n  const Is = [\"type\"],\n    Bs = [\"extraParam\"];\n  let Xs = class t extends Rs {\n    static getDefaults() {\n      return t.ownDefaults;\n    }\n    get type() {\n      const t = this.constructor.type;\n      return \"FabricObject\" === t ? \"object\" : t.toLowerCase();\n    }\n    set type(t) {\n      h(\"warn\", \"Setting type has no effect\", t);\n    }\n    constructor(s) {\n      super(), e(this, \"_cacheContext\", null), Object.assign(this, t.ownDefaults), this.setOptions(s);\n    }\n    _createCacheCanvas() {\n      this._cacheCanvas = pt(), this._cacheContext = this._cacheCanvas.getContext(\"2d\"), this._updateCacheCanvas(), this.dirty = !0;\n    }\n    _limitCacheSize(t) {\n      const e = t.width,\n        s = t.height,\n        i = a.maxCacheSideLimit,\n        r = a.minCacheSideLimit;\n      if (e <= i && s <= i && e * s <= a.perfLimitSizeTotal) return e < r && (t.width = r), s < r && (t.height = r), t;\n      const n = e / s,\n        [o, h] = _.limitDimsByArea(n),\n        c = gs(r, o, i),\n        l = gs(r, h, i);\n      return e > c && (t.zoomX /= e / c, t.width = c, t.capped = !0), s > l && (t.zoomY /= s / l, t.height = l, t.capped = !0), t;\n    }\n    _getCacheCanvasDimensions() {\n      const t = this.getTotalObjectScaling(),\n        e = this._getTransformedDimensions({\n          skewX: 0,\n          skewY: 0\n        }),\n        s = e.x * t.x / this.scaleX,\n        i = e.y * t.y / this.scaleY;\n      return {\n        width: Math.ceil(s + 2),\n        height: Math.ceil(i + 2),\n        zoomX: t.x,\n        zoomY: t.y,\n        x: s,\n        y: i\n      };\n    }\n    _updateCacheCanvas() {\n      const t = this._cacheCanvas,\n        e = this._cacheContext,\n        {\n          width: s,\n          height: i,\n          zoomX: r,\n          zoomY: n,\n          x: o,\n          y: a\n        } = this._limitCacheSize(this._getCacheCanvasDimensions()),\n        h = s !== t.width || i !== t.height,\n        c = this.zoomX !== r || this.zoomY !== n;\n      if (!t || !e) return !1;\n      if (h || c) {\n        s !== t.width || i !== t.height ? (t.width = s, t.height = i) : (e.setTransform(1, 0, 0, 1, 0, 0), e.clearRect(0, 0, t.width, t.height));\n        const h = o / 2,\n          c = a / 2;\n        return this.cacheTranslationX = Math.round(t.width / 2 - h) + h, this.cacheTranslationY = Math.round(t.height / 2 - c) + c, e.translate(this.cacheTranslationX, this.cacheTranslationY), e.scale(r, n), this.zoomX = r, this.zoomY = n, !0;\n      }\n      return !1;\n    }\n    setOptions() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n      this._setOptions(t);\n    }\n    transform(t) {\n      const e = this.group && !this.group._transformDone || this.group && this.canvas && t === this.canvas.contextTop,\n        s = this.calcTransformMatrix(!e);\n      t.transform(s[0], s[1], s[2], s[3], s[4], s[5]);\n    }\n    getObjectScaling() {\n      if (!this.group) return new ot(Math.abs(this.scaleX), Math.abs(this.scaleY));\n      const t = Dt(this.calcTransformMatrix());\n      return new ot(Math.abs(t.scaleX), Math.abs(t.scaleY));\n    }\n    getTotalObjectScaling() {\n      const t = this.getObjectScaling();\n      if (this.canvas) {\n        const e = this.canvas.getZoom(),\n          s = this.getCanvasRetinaScaling();\n        return t.scalarMultiply(e * s);\n      }\n      return t;\n    }\n    getObjectOpacity() {\n      let t = this.opacity;\n      return this.group && (t *= this.group.getObjectOpacity()), t;\n    }\n    _constrainScale(t) {\n      return Math.abs(t) < this.minScaleLimit ? t < 0 ? -this.minScaleLimit : this.minScaleLimit : 0 === t ? 1e-4 : t;\n    }\n    _set(t, e) {\n      t !== H && t !== N || (e = this._constrainScale(e)), t === H && e < 0 ? (this.flipX = !this.flipX, e *= -1) : \"scaleY\" === t && e < 0 ? (this.flipY = !this.flipY, e *= -1) : \"shadow\" !== t || !e || e instanceof ds || (e = new ds(e));\n      const s = this[t] !== e;\n      return this[t] = e, s && this.constructor.cacheProperties.includes(t) && (this.dirty = !0), this.parent && (this.dirty || s && this.constructor.stateProperties.includes(t)) && this.parent._set(\"dirty\", !0), this;\n    }\n    isNotVisible() {\n      return 0 === this.opacity || !this.width && !this.height && 0 === this.strokeWidth || !this.visible;\n    }\n    render(t) {\n      this.isNotVisible() || this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen() || (t.save(), this._setupCompositeOperation(t), this.drawSelectionBackground(t), this.transform(t), this._setOpacity(t), this._setShadow(t), this.shouldCache() ? (this.renderCache(), this.drawCacheOnCanvas(t)) : (this._removeCacheCanvas(), this.drawObject(t, !1, {}), this.dirty = !1), t.restore());\n    }\n    drawSelectionBackground(t) {}\n    renderCache(t) {\n      if (t = t || {}, this._cacheCanvas && this._cacheContext || this._createCacheCanvas(), this.isCacheDirty() && this._cacheContext) {\n        const {\n            zoomX: e,\n            zoomY: s,\n            cacheTranslationX: i,\n            cacheTranslationY: r\n          } = this,\n          {\n            width: n,\n            height: o\n          } = this._cacheCanvas;\n        this.drawObject(this._cacheContext, t.forClipping, {\n          zoomX: e,\n          zoomY: s,\n          cacheTranslationX: i,\n          cacheTranslationY: r,\n          width: n,\n          height: o,\n          parentClipPaths: []\n        }), this.dirty = !1;\n      }\n    }\n    _removeCacheCanvas() {\n      this._cacheCanvas = void 0, this._cacheContext = null;\n    }\n    hasStroke() {\n      return this.stroke && \"transparent\" !== this.stroke && 0 !== this.strokeWidth;\n    }\n    hasFill() {\n      return this.fill && \"transparent\" !== this.fill;\n    }\n    needsItsOwnCache() {\n      return !!(this.paintFirst === J && this.hasFill() && this.hasStroke() && this.shadow) || !!this.clipPath;\n    }\n    shouldCache() {\n      return this.ownCaching = this.objectCaching && (!this.parent || !this.parent.isOnACache()) || this.needsItsOwnCache(), this.ownCaching;\n    }\n    willDrawShadow() {\n      return !!this.shadow && (0 !== this.shadow.offsetX || 0 !== this.shadow.offsetY);\n    }\n    drawClipPathOnCache(t, e, s) {\n      t.save(), e.inverted ? t.globalCompositeOperation = \"destination-out\" : t.globalCompositeOperation = \"destination-in\", t.setTransform(1, 0, 0, 1, 0, 0), t.drawImage(s, 0, 0), t.restore();\n    }\n    drawObject(t, e, s) {\n      const i = this.fill,\n        r = this.stroke;\n      e ? (this.fill = \"black\", this.stroke = \"\", this._setClippingProperties(t)) : this._renderBackground(t), this._render(t), this._drawClipPath(t, this.clipPath, s), this.fill = i, this.stroke = r;\n    }\n    createClipPathLayer(t, e) {\n      const s = vt(e),\n        i = s.getContext(\"2d\");\n      if (i.translate(e.cacheTranslationX, e.cacheTranslationY), i.scale(e.zoomX, e.zoomY), t._cacheCanvas = s, e.parentClipPaths.forEach(t => {\n        t.transform(i);\n      }), e.parentClipPaths.push(t), t.absolutePositioned) {\n        const t = wt(this.calcTransformMatrix());\n        i.transform(t[0], t[1], t[2], t[3], t[4], t[5]);\n      }\n      return t.transform(i), t.drawObject(i, !0, e), s;\n    }\n    _drawClipPath(t, e, s) {\n      if (!e) return;\n      e._transformDone = !0;\n      const i = this.createClipPathLayer(e, s);\n      this.drawClipPathOnCache(t, e, i);\n    }\n    drawCacheOnCanvas(t) {\n      t.scale(1 / this.zoomX, 1 / this.zoomY), t.drawImage(this._cacheCanvas, -this.cacheTranslationX, -this.cacheTranslationY);\n    }\n    isCacheDirty() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n      if (this.isNotVisible()) return !1;\n      const e = this._cacheCanvas,\n        s = this._cacheContext;\n      return !(!e || !s || t || !this._updateCacheCanvas()) || !!(this.dirty || this.clipPath && this.clipPath.absolutePositioned) && (e && s && !t && (s.save(), s.setTransform(1, 0, 0, 1, 0, 0), s.clearRect(0, 0, e.width, e.height), s.restore()), !0);\n    }\n    _renderBackground(t) {\n      if (!this.backgroundColor) return;\n      const e = this._getNonTransformedDimensions();\n      t.fillStyle = this.backgroundColor, t.fillRect(-e.x / 2, -e.y / 2, e.x, e.y), this._removeShadow(t);\n    }\n    _setOpacity(t) {\n      this.group && !this.group._transformDone ? t.globalAlpha = this.getObjectOpacity() : t.globalAlpha *= this.opacity;\n    }\n    _setStrokeStyles(t, e) {\n      const s = e.stroke;\n      s && (t.lineWidth = e.strokeWidth, t.lineCap = e.strokeLineCap, t.lineDashOffset = e.strokeDashOffset, t.lineJoin = e.strokeLineJoin, t.miterLimit = e.strokeMiterLimit, te(s) ? \"percentage\" === s.gradientUnits || s.gradientTransform || s.patternTransform ? this._applyPatternForTransformedGradient(t, s) : (t.strokeStyle = s.toLive(t), this._applyPatternGradientTransform(t, s)) : t.strokeStyle = e.stroke);\n    }\n    _setFillStyles(t, e) {\n      let {\n        fill: s\n      } = e;\n      s && (te(s) ? (t.fillStyle = s.toLive(t), this._applyPatternGradientTransform(t, s)) : t.fillStyle = s);\n    }\n    _setClippingProperties(t) {\n      t.globalAlpha = 1, t.strokeStyle = \"transparent\", t.fillStyle = \"#000000\";\n    }\n    _setLineDash(t, e) {\n      e && 0 !== e.length && t.setLineDash(e);\n    }\n    _setShadow(t) {\n      if (!this.shadow) return;\n      const e = this.shadow,\n        s = this.canvas,\n        i = this.getCanvasRetinaScaling(),\n        [r,,, n] = (null == s ? void 0 : s.viewportTransform) || T,\n        o = r * i,\n        h = n * i,\n        c = e.nonScaling ? new ot(1, 1) : this.getObjectScaling();\n      t.shadowColor = e.color, t.shadowBlur = e.blur * a.browserShadowBlurConstant * (o + h) * (c.x + c.y) / 4, t.shadowOffsetX = e.offsetX * o * c.x, t.shadowOffsetY = e.offsetY * h * c.y;\n    }\n    _removeShadow(t) {\n      this.shadow && (t.shadowColor = \"\", t.shadowBlur = t.shadowOffsetX = t.shadowOffsetY = 0);\n    }\n    _applyPatternGradientTransform(t, e) {\n      if (!te(e)) return {\n        offsetX: 0,\n        offsetY: 0\n      };\n      const s = e.gradientTransform || e.patternTransform,\n        i = -this.width / 2 + e.offsetX || 0,\n        r = -this.height / 2 + e.offsetY || 0;\n      return \"percentage\" === e.gradientUnits ? t.transform(this.width, 0, 0, this.height, i, r) : t.transform(1, 0, 0, 1, i, r), s && t.transform(s[0], s[1], s[2], s[3], s[4], s[5]), {\n        offsetX: i,\n        offsetY: r\n      };\n    }\n    _renderPaintInOrder(t) {\n      this.paintFirst === J ? (this._renderStroke(t), this._renderFill(t)) : (this._renderFill(t), this._renderStroke(t));\n    }\n    _render(t) {}\n    _renderFill(t) {\n      this.fill && (t.save(), this._setFillStyles(t, this), \"evenodd\" === this.fillRule ? t.fill(\"evenodd\") : t.fill(), t.restore());\n    }\n    _renderStroke(t) {\n      if (this.stroke && 0 !== this.strokeWidth) {\n        if (this.shadow && !this.shadow.affectStroke && this._removeShadow(t), t.save(), this.strokeUniform) {\n          const e = this.getObjectScaling();\n          t.scale(1 / e.x, 1 / e.y);\n        }\n        this._setLineDash(t, this.strokeDashArray), this._setStrokeStyles(t, this), t.stroke(), t.restore();\n      }\n    }\n    _applyPatternForTransformedGradient(t, e) {\n      var s;\n      const i = this._limitCacheSize(this._getCacheCanvasDimensions()),\n        r = this.getCanvasRetinaScaling(),\n        n = i.x / this.scaleX / r,\n        o = i.y / this.scaleY / r,\n        a = vt({\n          width: Math.ceil(n),\n          height: Math.ceil(o)\n        }),\n        h = a.getContext(\"2d\");\n      h && (h.beginPath(), h.moveTo(0, 0), h.lineTo(n, 0), h.lineTo(n, o), h.lineTo(0, o), h.closePath(), h.translate(n / 2, o / 2), h.scale(i.zoomX / this.scaleX / r, i.zoomY / this.scaleY / r), this._applyPatternGradientTransform(h, e), h.fillStyle = e.toLive(t), h.fill(), t.translate(-this.width / 2 - this.strokeWidth / 2, -this.height / 2 - this.strokeWidth / 2), t.scale(r * this.scaleX / i.zoomX, r * this.scaleY / i.zoomY), t.strokeStyle = null !== (s = h.createPattern(a, \"no-repeat\")) && void 0 !== s ? s : \"\");\n    }\n    _findCenterFromElement() {\n      return new ot(this.left + this.width / 2, this.top + this.height / 2);\n    }\n    clone(t) {\n      const e = this.toObject(t);\n      return this.constructor.fromObject(e);\n    }\n    cloneAsImage(t) {\n      const e = this.toCanvasElement(t);\n      return new (tt.getClass(\"image\"))(e);\n    }\n    toCanvasElement() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n      const e = be(this),\n        s = this.group,\n        i = this.shadow,\n        r = Math.abs,\n        n = t.enableRetinaScaling ? y() : 1,\n        o = (t.multiplier || 1) * n,\n        a = t.canvasProvider || (t => new de(t, {\n          enableRetinaScaling: !1,\n          renderOnAddRemove: !1,\n          skipOffscreen: !1\n        }));\n      delete this.group, t.withoutTransform && Ce(this), t.withoutShadow && (this.shadow = null), t.viewportTransform && ke(this, this.getViewportTransform()), this.setCoords();\n      const h = pt(),\n        c = this.getBoundingRect(),\n        l = this.shadow,\n        u = new ot();\n      if (l) {\n        const t = l.blur,\n          e = l.nonScaling ? new ot(1, 1) : this.getObjectScaling();\n        u.x = 2 * Math.round(r(l.offsetX) + t) * r(e.x), u.y = 2 * Math.round(r(l.offsetY) + t) * r(e.y);\n      }\n      const d = c.width + u.x,\n        g = c.height + u.y;\n      h.width = Math.ceil(d), h.height = Math.ceil(g);\n      const f = a(h);\n      \"jpeg\" === t.format && (f.backgroundColor = \"#fff\"), this.setPositionByOrigin(new ot(f.width / 2, f.height / 2), D, D);\n      const p = this.canvas;\n      f._objects = [this], this.set(\"canvas\", f), this.setCoords();\n      const m = f.toCanvasElement(o || 1, t);\n      return this.set(\"canvas\", p), this.shadow = i, s && (this.group = s), this.set(e), this.setCoords(), f._objects = [], f.destroy(), m;\n    }\n    toDataURL() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n      return yt(this.toCanvasElement(t), t.format || \"png\", t.quality || 1);\n    }\n    toBlob() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n      return _t(this.toCanvasElement(t), t.format || \"png\", t.quality || 1);\n    }\n    isType() {\n      for (var t = arguments.length, e = new Array(t), s = 0; s < t; s++) e[s] = arguments[s];\n      return e.includes(this.constructor.type) || e.includes(this.type);\n    }\n    complexity() {\n      return 1;\n    }\n    toJSON() {\n      return this.toObject();\n    }\n    rotate(t) {\n      const {\n        centeredRotation: e,\n        originX: s,\n        originY: i\n      } = this;\n      if (e) {\n        const {\n          x: t,\n          y: e\n        } = this.getRelativeCenterPoint();\n        this.originX = D, this.originY = D, this.left = t, this.top = e;\n      }\n      if (this.set(\"angle\", t), e) {\n        const {\n          x: t,\n          y: e\n        } = this.translateToOriginPoint(this.getRelativeCenterPoint(), s, i);\n        this.left = t, this.top = e, this.originX = s, this.originY = i;\n      }\n    }\n    setOnGroup() {}\n    _setupCompositeOperation(t) {\n      this.globalCompositeOperation && (t.globalCompositeOperation = this.globalCompositeOperation);\n    }\n    dispose() {\n      et.cancelByTarget(this), this.off(), this._set(\"canvas\", void 0), this._cacheCanvas && p().dispose(this._cacheCanvas), this._cacheCanvas = void 0, this._cacheContext = null;\n    }\n    animate(t, e) {\n      return Object.entries(t).reduce((t, s) => {\n        let [i, r] = s;\n        return t[i] = this._animate(i, r, e), t;\n      }, {});\n    }\n    _animate(t, e) {\n      let s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n      const r = t.split(\".\"),\n        n = this.constructor.colorProperties.includes(r[r.length - 1]),\n        {\n          abort: o,\n          startValue: a,\n          onChange: h,\n          onComplete: c\n        } = s,\n        l = i(i({}, s), {}, {\n          target: this,\n          startValue: null != a ? a : r.reduce((t, e) => t[e], this),\n          endValue: e,\n          abort: null == o ? void 0 : o.bind(this),\n          onChange: (t, e, s) => {\n            r.reduce((e, s, i) => (i === r.length - 1 && (e[s] = t), e[s]), this), h && h(t, e, s);\n          },\n          onComplete: (t, e, s) => {\n            this.setCoords(), c && c(t, e, s);\n          }\n        });\n      return n ? Fs(l) : js(l);\n    }\n    isDescendantOf(t) {\n      const {\n        parent: e,\n        group: s\n      } = this;\n      return e === t || s === t || !!e && e.isDescendantOf(t) || !!s && s !== e && s.isDescendantOf(t);\n    }\n    getAncestors() {\n      const t = [];\n      let e = this;\n      do {\n        e = e.parent, e && t.push(e);\n      } while (e);\n      return t;\n    }\n    findCommonAncestors(t) {\n      if (this === t) return {\n        fork: [],\n        otherFork: [],\n        common: [this, ...this.getAncestors()]\n      };\n      const e = this.getAncestors(),\n        s = t.getAncestors();\n      if (0 === e.length && s.length > 0 && this === s[s.length - 1]) return {\n        fork: [],\n        otherFork: [t, ...s.slice(0, s.length - 1)],\n        common: [this]\n      };\n      for (let i, r = 0; r < e.length; r++) {\n        if (i = e[r], i === t) return {\n          fork: [this, ...e.slice(0, r)],\n          otherFork: [],\n          common: e.slice(r)\n        };\n        for (let n = 0; n < s.length; n++) {\n          if (this === s[n]) return {\n            fork: [],\n            otherFork: [t, ...s.slice(0, n)],\n            common: [this, ...e]\n          };\n          if (i === s[n]) return {\n            fork: [this, ...e.slice(0, r)],\n            otherFork: [t, ...s.slice(0, n)],\n            common: e.slice(r)\n          };\n        }\n      }\n      return {\n        fork: [this, ...e],\n        otherFork: [t, ...s],\n        common: []\n      };\n    }\n    hasCommonAncestors(t) {\n      const e = this.findCommonAncestors(t);\n      return e && !!e.common.length;\n    }\n    isInFrontOf(t) {\n      if (this === t) return;\n      const e = this.findCommonAncestors(t);\n      if (e.fork.includes(t)) return !0;\n      if (e.otherFork.includes(this)) return !1;\n      const s = e.common[0] || this.canvas;\n      if (!s) return;\n      const i = e.fork.pop(),\n        r = e.otherFork.pop(),\n        n = s._objects.indexOf(i),\n        o = s._objects.indexOf(r);\n      return n > -1 && n > o;\n    }\n    toObject() {\n      const e = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : []).concat(t.customProperties, this.constructor.customProperties || []);\n      let s;\n      const r = a.NUM_FRACTION_DIGITS,\n        {\n          clipPath: n,\n          fill: o,\n          stroke: h,\n          shadow: c,\n          strokeDashArray: l,\n          left: u,\n          top: d,\n          originX: g,\n          originY: f,\n          width: p,\n          height: m,\n          strokeWidth: v,\n          strokeLineCap: y,\n          strokeDashOffset: _,\n          strokeLineJoin: C,\n          strokeUniform: b,\n          strokeMiterLimit: S,\n          scaleX: w,\n          scaleY: T,\n          angle: O,\n          flipX: k,\n          flipY: D,\n          opacity: M,\n          visible: P,\n          backgroundColor: E,\n          fillRule: A,\n          paintFirst: j,\n          globalCompositeOperation: F,\n          skewX: L,\n          skewY: R\n        } = this;\n      n && !n.excludeFromExport && (s = n.toObject(e.concat(\"inverted\", \"absolutePositioned\")));\n      const I = t => Kt(t, r),\n        B = i(i({}, Yt(this, e)), {}, {\n          type: this.constructor.type,\n          version: x,\n          originX: g,\n          originY: f,\n          left: I(u),\n          top: I(d),\n          width: I(p),\n          height: I(m),\n          fill: ee(o) ? o.toObject() : o,\n          stroke: ee(h) ? h.toObject() : h,\n          strokeWidth: I(v),\n          strokeDashArray: l ? l.concat() : l,\n          strokeLineCap: y,\n          strokeDashOffset: _,\n          strokeLineJoin: C,\n          strokeUniform: b,\n          strokeMiterLimit: I(S),\n          scaleX: I(w),\n          scaleY: I(T),\n          angle: I(O),\n          flipX: k,\n          flipY: D,\n          opacity: I(M),\n          shadow: c ? c.toObject() : c,\n          visible: P,\n          backgroundColor: E,\n          fillRule: A,\n          paintFirst: j,\n          globalCompositeOperation: F,\n          skewX: I(L),\n          skewY: I(R)\n        }, s ? {\n          clipPath: s\n        } : null);\n      return this.includeDefaultValues ? B : this._removeDefaultValues(B);\n    }\n    toDatalessObject(t) {\n      return this.toObject(t);\n    }\n    _removeDefaultValues(t) {\n      const e = this.constructor.getDefaults(),\n        s = Object.keys(e).length > 0 ? e : Object.getPrototypeOf(this);\n      return Wt(t, (t, e) => {\n        if (e === M || e === P || \"type\" === e) return !0;\n        const i = s[e];\n        return t !== i && !(Array.isArray(t) && Array.isArray(i) && 0 === t.length && 0 === i.length);\n      });\n    }\n    toString() {\n      return \"#<\".concat(this.constructor.type, \">\");\n    }\n    static _fromObject(t) {\n      let e = r(t, Is),\n        s = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n        {\n          extraParam: i\n        } = s,\n        n = r(s, Bs);\n      return Xt(e, n).then(t => i ? (delete t[i], new this(e[i], t)) : new this(t));\n    }\n    static fromObject(t, e) {\n      return this._fromObject(t, e);\n    }\n  };\n  e(Xs, \"stateProperties\", fs), e(Xs, \"cacheProperties\", ps), e(Xs, \"ownDefaults\", ms), e(Xs, \"type\", \"FabricObject\"), e(Xs, \"colorProperties\", [K, J, \"backgroundColor\"]), e(Xs, \"customProperties\", []), tt.setClass(Xs), tt.setClass(Xs, \"object\");\n  const Ys = (t, e, s) => (r, n, o, a) => {\n    const h = e(r, n, o, a);\n    return h && De(t, i(i({}, Le(r, n, o, a)), s)), h;\n  };\n  function Ws(t) {\n    return (e, s, i, r) => {\n      const {\n          target: n,\n          originX: o,\n          originY: a\n        } = s,\n        h = n.getRelativeCenterPoint(),\n        c = n.translateToOriginPoint(h, o, a),\n        l = t(e, s, i, r);\n      return n.setPositionByOrigin(c, s.originX, s.originY), l;\n    };\n  }\n  const Vs = Ys(Y, Ws((t, e, s, i) => {\n    const r = Ie(e, e.originX, e.originY, s, i);\n    if (Pe(e.originX) === Pe(D) || Pe(e.originX) === Pe(A) && r.x < 0 || Pe(e.originX) === Pe(M) && r.x > 0) {\n      const {\n          target: t\n        } = e,\n        s = t.strokeWidth / (t.strokeUniform ? t.scaleX : 1),\n        i = Ae(e) ? 2 : 1,\n        n = t.width,\n        o = Math.abs(r.x * i / t.scaleX) - s;\n      return t.set(\"width\", Math.max(o, 1)), n !== t.width;\n    }\n    return !1;\n  }));\n  function Gs(t, e, s, i, r) {\n    i = i || {};\n    const n = this.sizeX || i.cornerSize || r.cornerSize,\n      o = this.sizeY || i.cornerSize || r.cornerSize,\n      a = void 0 !== i.transparentCorners ? i.transparentCorners : r.transparentCorners,\n      h = a ? J : K,\n      c = !a && (i.cornerStrokeColor || r.cornerStrokeColor);\n    let l,\n      u = e,\n      d = s;\n    t.save(), t.fillStyle = i.cornerColor || r.cornerColor || \"\", t.strokeStyle = i.cornerStrokeColor || r.cornerStrokeColor || \"\", n > o ? (l = n, t.scale(1, o / n), d = s * n / o) : o > n ? (l = o, t.scale(n / o, 1), u = e * o / n) : l = n, t.beginPath(), t.arc(u, d, l / 2, 0, S, !1), t[h](), c && t.stroke(), t.restore();\n  }\n  function zs(t, e, s, i, r) {\n    i = i || {};\n    const n = this.sizeX || i.cornerSize || r.cornerSize,\n      o = this.sizeY || i.cornerSize || r.cornerSize,\n      a = void 0 !== i.transparentCorners ? i.transparentCorners : r.transparentCorners,\n      h = a ? J : K,\n      c = !a && (i.cornerStrokeColor || r.cornerStrokeColor),\n      l = n / 2,\n      u = o / 2;\n    t.save(), t.fillStyle = i.cornerColor || r.cornerColor || \"\", t.strokeStyle = i.cornerStrokeColor || r.cornerStrokeColor || \"\", t.translate(e, s);\n    const d = r.getTotalAngle();\n    t.rotate(xt(d)), t[\"\".concat(h, \"Rect\")](-l, -u, n, o), c && t.strokeRect(-l, -u, n, o), t.restore();\n  }\n  class Hs {\n    constructor(t) {\n      e(this, \"visible\", !0), e(this, \"actionName\", z), e(this, \"angle\", 0), e(this, \"x\", 0), e(this, \"y\", 0), e(this, \"offsetX\", 0), e(this, \"offsetY\", 0), e(this, \"sizeX\", 0), e(this, \"sizeY\", 0), e(this, \"touchSizeX\", 0), e(this, \"touchSizeY\", 0), e(this, \"cursorStyle\", \"crosshair\"), e(this, \"withConnection\", !1), Object.assign(this, t);\n    }\n    shouldActivate(t, e, s, i) {\n      var r;\n      let {\n        tl: n,\n        tr: o,\n        br: a,\n        bl: h\n      } = i;\n      return (null === (r = e.canvas) || void 0 === r ? void 0 : r.getActiveObject()) === e && e.isControlVisible(t) && Ls.isPointInPolygon(s, [n, o, a, h]);\n    }\n    getActionHandler(t, e, s) {\n      return this.actionHandler;\n    }\n    getMouseDownHandler(t, e, s) {\n      return this.mouseDownHandler;\n    }\n    getMouseUpHandler(t, e, s) {\n      return this.mouseUpHandler;\n    }\n    cursorStyleHandler(t, e, s) {\n      return e.cursorStyle;\n    }\n    getActionName(t, e, s) {\n      return e.actionName;\n    }\n    getVisibility(t, e) {\n      var s, i;\n      return null !== (s = null === (i = t._controlsVisibility) || void 0 === i ? void 0 : i[e]) && void 0 !== s ? s : this.visible;\n    }\n    setVisibility(t, e, s) {\n      this.visible = t;\n    }\n    positionHandler(t, e, s, i) {\n      return new ot(this.x * t.x + this.offsetX, this.y * t.y + this.offsetY).transform(e);\n    }\n    calcCornerCoords(t, e, s, i, r, n) {\n      const o = Ot([Mt(s, i), Pt({\n        angle: t\n      }), Et((r ? this.touchSizeX : this.sizeX) || e, (r ? this.touchSizeY : this.sizeY) || e)]);\n      return {\n        tl: new ot(-.5, -.5).transform(o),\n        tr: new ot(.5, -.5).transform(o),\n        br: new ot(.5, .5).transform(o),\n        bl: new ot(-.5, .5).transform(o)\n      };\n    }\n    render(t, e, s, i, r) {\n      if (\"circle\" === ((i = i || {}).cornerStyle || r.cornerStyle)) Gs.call(this, t, e, s, i, r);else zs.call(this, t, e, s, i, r);\n    }\n  }\n  const Ns = (t, e, s) => s.lockRotation ? Ee : e.cursorStyle,\n    Us = Ys(I, Ws((t, e, s, i) => {\n      let {\n        target: r,\n        ex: n,\n        ey: o,\n        theta: a,\n        originX: h,\n        originY: c\n      } = e;\n      const l = r.translateToOriginPoint(r.getRelativeCenterPoint(), h, c);\n      if (Fe(r, \"lockRotation\")) return !1;\n      const u = Math.atan2(o - l.y, n - l.x),\n        d = Math.atan2(i - l.y, s - l.x);\n      let g = Ct(d - u + a);\n      if (r.snapAngle && r.snapAngle > 0) {\n        const t = r.snapAngle,\n          e = r.snapThreshold || t,\n          s = Math.ceil(g / t) * t,\n          i = Math.floor(g / t) * t;\n        Math.abs(g - i) < e ? g = i : Math.abs(g - s) < e && (g = s);\n      }\n      g < 0 && (g = 360 + g), g %= 360;\n      const f = r.angle !== g;\n      return r.angle = g, f;\n    }));\n  function qs(t, e) {\n    const s = e.canvas,\n      i = t[s.uniScaleKey];\n    return s.uniformScaling && !i || !s.uniformScaling && i;\n  }\n  function Ks(t, e, s) {\n    const i = Fe(t, \"lockScalingX\"),\n      r = Fe(t, \"lockScalingY\");\n    if (i && r) return !0;\n    if (!e && (i || r) && s) return !0;\n    if (i && \"x\" === e) return !0;\n    if (r && \"y\" === e) return !0;\n    const {\n      width: n,\n      height: o,\n      strokeWidth: a\n    } = t;\n    return 0 === n && 0 === a && \"y\" !== e || 0 === o && 0 === a && \"x\" !== e;\n  }\n  const Js = [\"e\", \"se\", \"s\", \"sw\", \"w\", \"nw\", \"n\", \"ne\", \"e\"],\n    Qs = (t, e, s) => {\n      const i = qs(t, s);\n      if (Ks(s, 0 !== e.x && 0 === e.y ? \"x\" : 0 === e.x && 0 !== e.y ? \"y\" : \"\", i)) return Ee;\n      const r = Re(s, e);\n      return \"\".concat(Js[r], \"-resize\");\n    };\n  function Zs(t, e, s, i) {\n    let r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : {};\n    const n = e.target,\n      o = r.by,\n      a = qs(t, n);\n    let h, c, l, u, d, g;\n    if (Ks(n, o, a)) return !1;\n    if (e.gestureScale) c = e.scaleX * e.gestureScale, l = e.scaleY * e.gestureScale;else {\n      if (h = Ie(e, e.originX, e.originY, s, i), d = \"y\" !== o ? Math.sign(h.x || e.signX || 1) : 1, g = \"x\" !== o ? Math.sign(h.y || e.signY || 1) : 1, e.signX || (e.signX = d), e.signY || (e.signY = g), Fe(n, \"lockScalingFlip\") && (e.signX !== d || e.signY !== g)) return !1;\n      if (u = n._getTransformedDimensions(), a && !o) {\n        const t = Math.abs(h.x) + Math.abs(h.y),\n          {\n            original: s\n          } = e,\n          i = t / (Math.abs(u.x * s.scaleX / n.scaleX) + Math.abs(u.y * s.scaleY / n.scaleY));\n        c = s.scaleX * i, l = s.scaleY * i;\n      } else c = Math.abs(h.x * n.scaleX / u.x), l = Math.abs(h.y * n.scaleY / u.y);\n      Ae(e) && (c *= 2, l *= 2), e.signX !== d && \"y\" !== o && (e.originX = je(e.originX), c *= -1, e.signX = d), e.signY !== g && \"x\" !== o && (e.originY = je(e.originY), l *= -1, e.signY = g);\n    }\n    const f = n.scaleX,\n      p = n.scaleY;\n    return o ? (\"x\" === o && n.set(H, c), \"y\" === o && n.set(N, l)) : (!Fe(n, \"lockScalingX\") && n.set(H, c), !Fe(n, \"lockScalingY\") && n.set(N, l)), f !== n.scaleX || p !== n.scaleY;\n  }\n  const $s = Ys(R, Ws((t, e, s, i) => Zs(t, e, s, i))),\n    ti = Ys(R, Ws((t, e, s, i) => Zs(t, e, s, i, {\n      by: \"x\"\n    }))),\n    ei = Ys(R, Ws((t, e, s, i) => Zs(t, e, s, i, {\n      by: \"y\"\n    }))),\n    si = [\"target\", \"ex\", \"ey\", \"skewingSide\"],\n    ii = {\n      x: {\n        counterAxis: \"y\",\n        scale: H,\n        skew: U,\n        lockSkewing: \"lockSkewingX\",\n        origin: \"originX\",\n        flip: \"flipX\"\n      },\n      y: {\n        counterAxis: \"x\",\n        scale: N,\n        skew: q,\n        lockSkewing: \"lockSkewingY\",\n        origin: \"originY\",\n        flip: \"flipY\"\n      }\n    },\n    ri = [\"ns\", \"nesw\", \"ew\", \"nwse\"],\n    ni = (t, e, s) => {\n      if (0 !== e.x && Fe(s, \"lockSkewingY\")) return Ee;\n      if (0 !== e.y && Fe(s, \"lockSkewingX\")) return Ee;\n      const i = Re(s, e) % 4;\n      return \"\".concat(ri[i], \"-resize\");\n    };\n  function oi(t, e, s, n, o) {\n    const {\n        target: a\n      } = s,\n      {\n        counterAxis: h,\n        origin: c,\n        lockSkewing: l,\n        skew: u,\n        flip: d\n      } = ii[t];\n    if (Fe(a, l)) return !1;\n    const {\n        origin: g,\n        flip: f\n      } = ii[h],\n      p = Pe(s[g]) * (a[f] ? -1 : 1),\n      m = -Math.sign(p) * (a[d] ? -1 : 1),\n      v = .5 * -((0 === a[u] && Ie(s, D, D, n, o)[t] > 0 || a[u] > 0 ? 1 : -1) * m) + .5,\n      y = Ys(X, Ws((e, s, i, n) => function (t, e, s) {\n        let {\n            target: i,\n            ex: n,\n            ey: o,\n            skewingSide: a\n          } = e,\n          h = r(e, si);\n        const {\n            skew: c\n          } = ii[t],\n          l = s.subtract(new ot(n, o)).divide(new ot(i.scaleX, i.scaleY))[t],\n          u = i[c],\n          d = h[c],\n          g = Math.tan(xt(d)),\n          f = \"y\" === t ? i._getTransformedDimensions({\n            scaleX: 1,\n            scaleY: 1,\n            skewX: 0\n          }).x : i._getTransformedDimensions({\n            scaleX: 1,\n            scaleY: 1\n          }).y,\n          p = 2 * l * a / Math.max(f, 1) + g,\n          m = Ct(Math.atan(p));\n        i.set(c, m);\n        const v = u !== i[c];\n        if (v && \"y\" === t) {\n          const {\n              skewX: t,\n              scaleX: e\n            } = i,\n            s = i._getTransformedDimensions({\n              skewY: u\n            }),\n            r = i._getTransformedDimensions(),\n            n = 0 !== t ? s.x / r.x : 1;\n          1 !== n && i.set(H, n * e);\n        }\n        return v;\n      }(t, s, new ot(i, n))));\n    return y(e, i(i({}, s), {}, {\n      [c]: v,\n      skewingSide: m\n    }), n, o);\n  }\n  const ai = (t, e, s, i) => oi(\"x\", t, e, s, i),\n    hi = (t, e, s, i) => oi(\"y\", t, e, s, i);\n  function ci(t, e) {\n    return t[e.canvas.altActionKey];\n  }\n  const li = (t, e, s) => {\n      const i = ci(t, s);\n      return 0 === e.x ? i ? U : N : 0 === e.y ? i ? q : H : \"\";\n    },\n    ui = (t, e, s) => ci(t, s) ? ni(0, e, s) : Qs(t, e, s),\n    di = (t, e, s, i) => ci(t, e.target) ? hi(t, e, s, i) : ti(t, e, s, i),\n    gi = (t, e, s, i) => ci(t, e.target) ? ai(t, e, s, i) : ei(t, e, s, i),\n    fi = () => ({\n      ml: new Hs({\n        x: -.5,\n        y: 0,\n        cursorStyleHandler: ui,\n        actionHandler: di,\n        getActionName: li\n      }),\n      mr: new Hs({\n        x: .5,\n        y: 0,\n        cursorStyleHandler: ui,\n        actionHandler: di,\n        getActionName: li\n      }),\n      mb: new Hs({\n        x: 0,\n        y: .5,\n        cursorStyleHandler: ui,\n        actionHandler: gi,\n        getActionName: li\n      }),\n      mt: new Hs({\n        x: 0,\n        y: -.5,\n        cursorStyleHandler: ui,\n        actionHandler: gi,\n        getActionName: li\n      }),\n      tl: new Hs({\n        x: -.5,\n        y: -.5,\n        cursorStyleHandler: Qs,\n        actionHandler: $s\n      }),\n      tr: new Hs({\n        x: .5,\n        y: -.5,\n        cursorStyleHandler: Qs,\n        actionHandler: $s\n      }),\n      bl: new Hs({\n        x: -.5,\n        y: .5,\n        cursorStyleHandler: Qs,\n        actionHandler: $s\n      }),\n      br: new Hs({\n        x: .5,\n        y: .5,\n        cursorStyleHandler: Qs,\n        actionHandler: $s\n      }),\n      mtr: new Hs({\n        x: 0,\n        y: -.5,\n        actionHandler: Us,\n        cursorStyleHandler: Ns,\n        offsetY: -40,\n        withConnection: !0,\n        actionName: B\n      })\n    }),\n    pi = () => ({\n      mr: new Hs({\n        x: .5,\n        y: 0,\n        actionHandler: Vs,\n        cursorStyleHandler: ui,\n        actionName: Y\n      }),\n      ml: new Hs({\n        x: -.5,\n        y: 0,\n        actionHandler: Vs,\n        cursorStyleHandler: ui,\n        actionName: Y\n      })\n    }),\n    mi = () => i(i({}, fi()), pi());\n  class vi extends Xs {\n    static getDefaults() {\n      return i(i({}, super.getDefaults()), vi.ownDefaults);\n    }\n    constructor(t) {\n      super(), Object.assign(this, this.constructor.createControls(), vi.ownDefaults), this.setOptions(t);\n    }\n    static createControls() {\n      return {\n        controls: fi()\n      };\n    }\n    _updateCacheCanvas() {\n      const t = this.canvas;\n      if (this.noScaleCache && t && t._currentTransform) {\n        const e = t._currentTransform,\n          s = e.target,\n          i = e.action;\n        if (this === s && i && i.startsWith(z)) return !1;\n      }\n      return super._updateCacheCanvas();\n    }\n    getActiveControl() {\n      const t = this.__corner;\n      return t ? {\n        key: t,\n        control: this.controls[t],\n        coord: this.oCoords[t]\n      } : void 0;\n    }\n    findControl(t) {\n      let e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n      if (!this.hasControls || !this.canvas) return;\n      this.__corner = void 0;\n      const s = Object.entries(this.oCoords);\n      for (let i = s.length - 1; i >= 0; i--) {\n        const [r, n] = s[i],\n          o = this.controls[r];\n        if (o.shouldActivate(r, this, t, e ? n.touchCorner : n.corner)) return this.__corner = r, {\n          key: r,\n          control: o,\n          coord: this.oCoords[r]\n        };\n      }\n    }\n    calcOCoords() {\n      const t = this.getViewportTransform(),\n        e = this.getCenterPoint(),\n        s = Mt(e.x, e.y),\n        i = Pt({\n          angle: this.getTotalAngle() - (this.group && this.flipX ? 180 : 0)\n        }),\n        r = Tt(s, i),\n        n = Tt(t, r),\n        o = Tt(n, [1 / t[0], 0, 0, 1 / t[3], 0, 0]),\n        a = this.group ? Dt(this.calcTransformMatrix()) : void 0;\n      a && (a.scaleX = Math.abs(a.scaleX), a.scaleY = Math.abs(a.scaleY));\n      const h = this._calculateCurrentDimensions(a),\n        c = {};\n      return this.forEachControl((t, e) => {\n        const s = t.positionHandler(h, o, this, t);\n        c[e] = Object.assign(s, this._calcCornerCoords(t, s));\n      }), c;\n    }\n    _calcCornerCoords(t, e) {\n      const s = this.getTotalAngle();\n      return {\n        corner: t.calcCornerCoords(s, this.cornerSize, e.x, e.y, !1, this),\n        touchCorner: t.calcCornerCoords(s, this.touchCornerSize, e.x, e.y, !0, this)\n      };\n    }\n    setCoords() {\n      super.setCoords(), this.canvas && (this.oCoords = this.calcOCoords());\n    }\n    forEachControl(t) {\n      for (const e in this.controls) t(this.controls[e], e, this);\n    }\n    drawSelectionBackground(t) {\n      if (!this.selectionBackgroundColor || this.canvas && this.canvas._activeObject !== this) return;\n      t.save();\n      const e = this.getRelativeCenterPoint(),\n        s = this._calculateCurrentDimensions(),\n        i = this.getViewportTransform();\n      t.translate(e.x, e.y), t.scale(1 / i[0], 1 / i[3]), t.rotate(xt(this.angle)), t.fillStyle = this.selectionBackgroundColor, t.fillRect(-s.x / 2, -s.y / 2, s.x, s.y), t.restore();\n    }\n    strokeBorders(t, e) {\n      t.strokeRect(-e.x / 2, -e.y / 2, e.x, e.y);\n    }\n    _drawBorders(t, e) {\n      let s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n      const r = i({\n        hasControls: this.hasControls,\n        borderColor: this.borderColor,\n        borderDashArray: this.borderDashArray\n      }, s);\n      t.save(), t.strokeStyle = r.borderColor, this._setLineDash(t, r.borderDashArray), this.strokeBorders(t, e), r.hasControls && this.drawControlsConnectingLines(t, e), t.restore();\n    }\n    _renderControls(t) {\n      let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      const {\n          hasBorders: s,\n          hasControls: r\n        } = this,\n        n = i({\n          hasBorders: s,\n          hasControls: r\n        }, e),\n        o = this.getViewportTransform(),\n        a = n.hasBorders,\n        h = n.hasControls,\n        c = Tt(o, this.calcTransformMatrix()),\n        l = Dt(c);\n      t.save(), t.translate(l.translateX, l.translateY), t.lineWidth = this.borderScaleFactor, this.group === this.parent && (t.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1), this.flipX && (l.angle -= 180), t.rotate(xt(this.group ? l.angle : this.angle)), a && this.drawBorders(t, l, e), h && this.drawControls(t, e), t.restore();\n    }\n    drawBorders(t, e, s) {\n      let i;\n      if (s && s.forActiveSelection || this.group) {\n        const t = Se(this.width, this.height, Lt(e)),\n          s = this.isStrokeAccountedForInDimensions() ? at : (this.strokeUniform ? new ot().scalarAdd(this.canvas ? this.canvas.getZoom() : 1) : new ot(e.scaleX, e.scaleY)).scalarMultiply(this.strokeWidth);\n        i = t.add(s).scalarAdd(this.borderScaleFactor).scalarAdd(2 * this.padding);\n      } else i = this._calculateCurrentDimensions().scalarAdd(this.borderScaleFactor);\n      this._drawBorders(t, i, s);\n    }\n    drawControlsConnectingLines(t, e) {\n      let s = !1;\n      t.beginPath(), this.forEachControl((i, r) => {\n        i.withConnection && i.getVisibility(this, r) && (s = !0, t.moveTo(i.x * e.x, i.y * e.y), t.lineTo(i.x * e.x + i.offsetX, i.y * e.y + i.offsetY));\n      }), s && t.stroke();\n    }\n    drawControls(t) {\n      let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      t.save();\n      const s = this.getCanvasRetinaScaling(),\n        {\n          cornerStrokeColor: r,\n          cornerDashArray: n,\n          cornerColor: o\n        } = this,\n        a = i({\n          cornerStrokeColor: r,\n          cornerDashArray: n,\n          cornerColor: o\n        }, e);\n      t.setTransform(s, 0, 0, s, 0, 0), t.strokeStyle = t.fillStyle = a.cornerColor, this.transparentCorners || (t.strokeStyle = a.cornerStrokeColor), this._setLineDash(t, a.cornerDashArray), this.forEachControl((e, s) => {\n        if (e.getVisibility(this, s)) {\n          const i = this.oCoords[s];\n          e.render(t, i.x, i.y, a, this);\n        }\n      }), t.restore();\n    }\n    isControlVisible(t) {\n      return this.controls[t] && this.controls[t].getVisibility(this, t);\n    }\n    setControlVisible(t, e) {\n      this._controlsVisibility || (this._controlsVisibility = {}), this._controlsVisibility[t] = e;\n    }\n    setControlsVisibility() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n      Object.entries(t).forEach(t => {\n        let [e, s] = t;\n        return this.setControlVisible(e, s);\n      });\n    }\n    clearContextTop(t) {\n      if (!this.canvas) return;\n      const e = this.canvas.contextTop;\n      if (!e) return;\n      const s = this.canvas.viewportTransform;\n      e.save(), e.transform(s[0], s[1], s[2], s[3], s[4], s[5]), this.transform(e);\n      const i = this.width + 4,\n        r = this.height + 4;\n      return e.clearRect(-i / 2, -r / 2, i, r), t || e.restore(), e;\n    }\n    onDeselect(t) {\n      return !1;\n    }\n    onSelect(t) {\n      return !1;\n    }\n    shouldStartDragging(t) {\n      return !1;\n    }\n    onDragStart(t) {\n      return !1;\n    }\n    canDrop(t) {\n      return !1;\n    }\n    renderDragSourceEffect(t) {}\n    renderDropTargetEffect(t) {}\n  }\n  function yi(t, e) {\n    return e.forEach(e => {\n      Object.getOwnPropertyNames(e.prototype).forEach(s => {\n        \"constructor\" !== s && Object.defineProperty(t.prototype, s, Object.getOwnPropertyDescriptor(e.prototype, s) || Object.create(null));\n      });\n    }), t;\n  }\n  e(vi, \"ownDefaults\", {\n    noScaleCache: !0,\n    lockMovementX: !1,\n    lockMovementY: !1,\n    lockRotation: !1,\n    lockScalingX: !1,\n    lockScalingY: !1,\n    lockSkewingX: !1,\n    lockSkewingY: !1,\n    lockScalingFlip: !1,\n    cornerSize: 13,\n    touchCornerSize: 24,\n    transparentCorners: !0,\n    cornerColor: \"rgb(178,204,255)\",\n    cornerStrokeColor: \"\",\n    cornerStyle: \"rect\",\n    cornerDashArray: null,\n    hasControls: !0,\n    borderColor: \"rgb(178,204,255)\",\n    borderDashArray: null,\n    borderOpacityWhenMoving: .4,\n    borderScaleFactor: 1,\n    hasBorders: !0,\n    selectionBackgroundColor: \"\",\n    selectable: !0,\n    evented: !0,\n    perPixelTargetFind: !1,\n    activeOn: \"down\",\n    hoverCursor: null,\n    moveCursor: null\n  });\n  class _i extends vi {}\n  yi(_i, [Xe]), tt.setClass(_i), tt.setClass(_i, \"object\");\n  const xi = (t, e, s, i) => {\n    const r = 2 * (i = Math.round(i)) + 1,\n      {\n        data: n\n      } = t.getImageData(e - i, s - i, r, r);\n    for (let t = 3; t < n.length; t += 4) {\n      if (n[t] > 0) return !1;\n    }\n    return !0;\n  };\n  class Ci {\n    constructor(t) {\n      this.options = t, this.strokeProjectionMagnitude = this.options.strokeWidth / 2, this.scale = new ot(this.options.scaleX, this.options.scaleY), this.strokeUniformScalar = this.options.strokeUniform ? new ot(1 / this.options.scaleX, 1 / this.options.scaleY) : new ot(1, 1);\n    }\n    createSideVector(t, e) {\n      const s = es(t, e);\n      return this.options.strokeUniform ? s.multiply(this.scale) : s;\n    }\n    projectOrthogonally(t, e, s) {\n      return this.applySkew(t.add(this.calcOrthogonalProjection(t, e, s)));\n    }\n    isSkewed() {\n      return 0 !== this.options.skewX || 0 !== this.options.skewY;\n    }\n    applySkew(t) {\n      const e = new ot(t);\n      return e.y += e.x * Math.tan(xt(this.options.skewY)), e.x += e.y * Math.tan(xt(this.options.skewX)), e;\n    }\n    scaleUnitVector(t, e) {\n      return t.multiply(this.strokeUniformScalar).scalarMultiply(e);\n    }\n  }\n  const bi = new ot();\n  class Si extends Ci {\n    static getOrthogonalRotationFactor(t, e) {\n      const s = e ? is(t, e) : rs(t);\n      return Math.abs(s) < b ? -1 : 1;\n    }\n    constructor(t, s, i, r) {\n      super(r), e(this, \"AB\", void 0), e(this, \"AC\", void 0), e(this, \"alpha\", void 0), e(this, \"bisector\", void 0), this.A = new ot(t), this.B = new ot(s), this.C = new ot(i), this.AB = this.createSideVector(this.A, this.B), this.AC = this.createSideVector(this.A, this.C), this.alpha = is(this.AB, this.AC), this.bisector = ns(ts(this.AB.eq(bi) ? this.AC : this.AB, this.alpha / 2));\n    }\n    calcOrthogonalProjection(t, e) {\n      let s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.strokeProjectionMagnitude;\n      const i = this.createSideVector(t, e),\n        r = os(i),\n        n = Si.getOrthogonalRotationFactor(r, this.bisector);\n      return this.scaleUnitVector(r, s * n);\n    }\n    projectBevel() {\n      const t = [];\n      return (this.alpha % S == 0 ? [this.B] : [this.B, this.C]).forEach(e => {\n        t.push(this.projectOrthogonally(this.A, e)), t.push(this.projectOrthogonally(this.A, e, -this.strokeProjectionMagnitude));\n      }), t;\n    }\n    projectMiter() {\n      const t = [],\n        e = Math.abs(this.alpha),\n        s = 1 / Math.sin(e / 2),\n        i = this.scaleUnitVector(this.bisector, -this.strokeProjectionMagnitude * s),\n        r = this.options.strokeUniform ? ss(this.scaleUnitVector(this.bisector, this.options.strokeMiterLimit)) : this.options.strokeMiterLimit;\n      return ss(i) / this.strokeProjectionMagnitude <= r && t.push(this.applySkew(this.A.add(i))), t.push(...this.projectBevel()), t;\n    }\n    projectRoundNoSkew(t, e) {\n      const s = [],\n        i = new ot(Si.getOrthogonalRotationFactor(this.bisector), Si.getOrthogonalRotationFactor(new ot(this.bisector.y, this.bisector.x)));\n      return [new ot(1, 0).scalarMultiply(this.strokeProjectionMagnitude).multiply(this.strokeUniformScalar).multiply(i), new ot(0, 1).scalarMultiply(this.strokeProjectionMagnitude).multiply(this.strokeUniformScalar).multiply(i)].forEach(i => {\n        cs(i, t, e) && s.push(this.A.add(i));\n      }), s;\n    }\n    projectRoundWithSkew(t, e) {\n      const s = [],\n        {\n          skewX: i,\n          skewY: r,\n          scaleX: n,\n          scaleY: o,\n          strokeUniform: a\n        } = this.options,\n        h = new ot(Math.tan(xt(i)), Math.tan(xt(r))),\n        c = this.strokeProjectionMagnitude,\n        l = a ? c / o / Math.sqrt(1 / o ** 2 + 1 / n ** 2 * h.y ** 2) : c / Math.sqrt(1 + h.y ** 2),\n        u = new ot(Math.sqrt(Math.max(c ** 2 - l ** 2, 0)), l),\n        d = a ? c / Math.sqrt(1 + h.x ** 2 * (1 / o) ** 2 / (1 / n + 1 / n * h.x * h.y) ** 2) : c / Math.sqrt(1 + h.x ** 2 / (1 + h.x * h.y) ** 2),\n        g = new ot(d, Math.sqrt(Math.max(c ** 2 - d ** 2, 0)));\n      return [g, g.scalarMultiply(-1), u, u.scalarMultiply(-1)].map(t => this.applySkew(a ? t.multiply(this.strokeUniformScalar) : t)).forEach(i => {\n        cs(i, t, e) && s.push(this.applySkew(this.A).add(i));\n      }), s;\n    }\n    projectRound() {\n      const t = [];\n      t.push(...this.projectBevel());\n      const e = this.alpha % S == 0,\n        s = this.applySkew(this.A),\n        i = t[e ? 0 : 2].subtract(s),\n        r = t[e ? 1 : 0].subtract(s),\n        n = e ? this.applySkew(this.AB.scalarMultiply(-1)) : this.applySkew(this.bisector.multiply(this.strokeUniformScalar).scalarMultiply(-1)),\n        o = as(i, n) > 0,\n        a = o ? i : r,\n        h = o ? r : i;\n      return this.isSkewed() ? t.push(...this.projectRoundWithSkew(a, h)) : t.push(...this.projectRoundNoSkew(a, h)), t;\n    }\n    projectPoints() {\n      switch (this.options.strokeLineJoin) {\n        case \"miter\":\n          return this.projectMiter();\n        case \"round\":\n          return this.projectRound();\n        default:\n          return this.projectBevel();\n      }\n    }\n    project() {\n      return this.projectPoints().map(t => ({\n        originPoint: this.A,\n        projectedPoint: t,\n        angle: this.alpha,\n        bisector: this.bisector\n      }));\n    }\n  }\n  class wi extends Ci {\n    constructor(t, e, s) {\n      super(s), this.A = new ot(t), this.T = new ot(e);\n    }\n    calcOrthogonalProjection(t, e) {\n      let s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.strokeProjectionMagnitude;\n      const i = this.createSideVector(t, e);\n      return this.scaleUnitVector(os(i), s);\n    }\n    projectButt() {\n      return [this.projectOrthogonally(this.A, this.T, this.strokeProjectionMagnitude), this.projectOrthogonally(this.A, this.T, -this.strokeProjectionMagnitude)];\n    }\n    projectRound() {\n      const t = [];\n      if (!this.isSkewed() && this.A.eq(this.T)) {\n        const e = new ot(1, 1).scalarMultiply(this.strokeProjectionMagnitude).multiply(this.strokeUniformScalar);\n        t.push(this.applySkew(this.A.add(e)), this.applySkew(this.A.subtract(e)));\n      } else t.push(...new Si(this.A, this.T, this.T, this.options).projectRound());\n      return t;\n    }\n    projectSquare() {\n      const t = [];\n      if (this.A.eq(this.T)) {\n        const e = new ot(1, 1).scalarMultiply(this.strokeProjectionMagnitude).multiply(this.strokeUniformScalar);\n        t.push(this.A.add(e), this.A.subtract(e));\n      } else {\n        const e = this.calcOrthogonalProjection(this.A, this.T, this.strokeProjectionMagnitude),\n          s = this.scaleUnitVector(ns(this.createSideVector(this.A, this.T)), -this.strokeProjectionMagnitude),\n          i = this.A.add(s);\n        t.push(i.add(e), i.subtract(e));\n      }\n      return t.map(t => this.applySkew(t));\n    }\n    projectPoints() {\n      switch (this.options.strokeLineCap) {\n        case \"round\":\n          return this.projectRound();\n        case \"square\":\n          return this.projectSquare();\n        default:\n          return this.projectButt();\n      }\n    }\n    project() {\n      return this.projectPoints().map(t => ({\n        originPoint: this.A,\n        projectedPoint: t\n      }));\n    }\n  }\n  const Ti = function (t, e) {\n      let s = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n      const i = [];\n      if (0 === t.length) return i;\n      const r = t.reduce((t, e) => (t[t.length - 1].eq(e) || t.push(new ot(e)), t), [new ot(t[0])]);\n      if (1 === r.length) s = !0;else if (!s) {\n        const t = r[0],\n          e = ((t, e) => {\n            for (let s = t.length - 1; s >= 0; s--) if (e(t[s], s, t)) return s;\n            return -1;\n          })(r, e => !e.eq(t));\n        r.splice(e + 1);\n      }\n      return r.forEach((t, r, n) => {\n        let o, a;\n        0 === r ? (a = n[1], o = s ? t : n[n.length - 1]) : r === n.length - 1 ? (o = n[r - 1], a = s ? t : n[0]) : (o = n[r - 1], a = n[r + 1]), s && 1 === n.length ? i.push(...new wi(t, t, e).project()) : !s || 0 !== r && r !== n.length - 1 ? i.push(...new Si(t, o, a, e).project()) : i.push(...new wi(t, 0 === r ? a : o, e).project());\n      }), i;\n    },\n    Oi = t => {\n      const e = {};\n      return Object.keys(t).forEach(s => {\n        e[s] = {}, Object.keys(t[s]).forEach(r => {\n          e[s][r] = i({}, t[s][r]);\n        });\n      }), e;\n    },\n    ki = t => t.replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\"),\n    Di = t => {\n      const e = [];\n      for (let s, i = 0; i < t.length; i++) !1 !== (s = Mi(t, i)) && e.push(s);\n      return e;\n    },\n    Mi = (t, e) => {\n      const s = t.charCodeAt(e);\n      if (isNaN(s)) return \"\";\n      if (s < 55296 || s > 57343) return t.charAt(e);\n      if (55296 <= s && s <= 56319) {\n        if (t.length <= e + 1) throw \"High surrogate without following low surrogate\";\n        const s = t.charCodeAt(e + 1);\n        if (56320 > s || s > 57343) throw \"High surrogate without following low surrogate\";\n        return t.charAt(e) + t.charAt(e + 1);\n      }\n      if (0 === e) throw \"Low surrogate without preceding high surrogate\";\n      const i = t.charCodeAt(e - 1);\n      if (55296 > i || i > 56319) throw \"Low surrogate without preceding high surrogate\";\n      return !1;\n    };\n  var Pi = Object.freeze({\n    __proto__: null,\n    capitalize: function (t) {\n      let e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n      return \"\".concat(t.charAt(0).toUpperCase()).concat(e ? t.slice(1) : t.slice(1).toLowerCase());\n    },\n    escapeXml: ki,\n    graphemeSplit: Di\n  });\n  const Ei = function (t, e) {\n      let s = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n      return t.fill !== e.fill || t.stroke !== e.stroke || t.strokeWidth !== e.strokeWidth || t.fontSize !== e.fontSize || t.fontFamily !== e.fontFamily || t.fontWeight !== e.fontWeight || t.fontStyle !== e.fontStyle || t.textBackgroundColor !== e.textBackgroundColor || t.deltaY !== e.deltaY || s && (t.overline !== e.overline || t.underline !== e.underline || t.linethrough !== e.linethrough);\n    },\n    Ai = (t, e) => {\n      const s = e.split(\"\\n\"),\n        i = [];\n      let r = -1,\n        n = {};\n      t = Oi(t);\n      for (let e = 0; e < s.length; e++) {\n        const o = Di(s[e]);\n        if (t[e]) for (let s = 0; s < o.length; s++) {\n          r++;\n          const o = t[e][s];\n          o && Object.keys(o).length > 0 && (Ei(n, o, !0) ? i.push({\n            start: r,\n            end: r + 1,\n            style: o\n          }) : i[i.length - 1].end++), n = o || {};\n        } else r += o.length, n = {};\n      }\n      return i;\n    },\n    ji = (t, e) => {\n      if (!Array.isArray(t)) return Oi(t);\n      const s = e.split(F),\n        r = {};\n      let n = -1,\n        o = 0;\n      for (let e = 0; e < s.length; e++) {\n        const a = Di(s[e]);\n        for (let s = 0; s < a.length; s++) n++, t[o] && t[o].start <= n && n < t[o].end && (r[e] = r[e] || {}, r[e][s] = i({}, t[o].style), n === t[o].end - 1 && o++);\n      }\n      return r;\n    },\n    Fi = [\"display\", \"transform\", K, \"fill-opacity\", \"fill-rule\", \"opacity\", J, \"stroke-dasharray\", \"stroke-linecap\", \"stroke-dashoffset\", \"stroke-linejoin\", \"stroke-miterlimit\", \"stroke-opacity\", \"stroke-width\", \"id\", \"paint-order\", \"vector-effect\", \"instantiated_by_use\", \"clip-path\"];\n  function Li(t, e) {\n    const s = t.nodeName,\n      i = t.getAttribute(\"class\"),\n      r = t.getAttribute(\"id\"),\n      n = \"(?![a-zA-Z\\\\-]+)\";\n    let o;\n    if (o = new RegExp(\"^\" + s, \"i\"), e = e.replace(o, \"\"), r && e.length && (o = new RegExp(\"#\" + r + n, \"i\"), e = e.replace(o, \"\")), i && e.length) {\n      const t = i.split(\" \");\n      for (let s = t.length; s--;) o = new RegExp(\"\\\\.\" + t[s] + n, \"i\"), e = e.replace(o, \"\");\n    }\n    return 0 === e.length;\n  }\n  function Ri(t, e) {\n    let s = !0;\n    const i = Li(t, e.pop());\n    return i && e.length && (s = function (t, e) {\n      let s,\n        i = !0;\n      for (; t.parentElement && 1 === t.parentElement.nodeType && e.length;) i && (s = e.pop()), i = Li(t = t.parentElement, s);\n      return 0 === e.length;\n    }(t, e)), i && s && 0 === e.length;\n  }\n  const Ii = t => {\n      var e;\n      return null !== (e = He[t]) && void 0 !== e ? e : t;\n    },\n    Bi = new RegExp(\"(\".concat(Ve, \")\"), \"gi\"),\n    Xi = t => t.replace(Bi, \" $1 \").replace(/,/gi, \" \").replace(/\\s+/gi, \" \");\n  var Yi, Wi, Vi, Gi, zi, Hi, Ni;\n  const Ui = \"(\".concat(Ve, \")\"),\n    qi = String.raw(Yi || (Yi = n([\"(skewX)(\", \")\"], [\"(skewX)\\\\(\", \"\\\\)\"])), Ui),\n    Ki = String.raw(Wi || (Wi = n([\"(skewY)(\", \")\"], [\"(skewY)\\\\(\", \"\\\\)\"])), Ui),\n    Ji = String.raw(Vi || (Vi = n([\"(rotate)(\", \"(?: \", \" \", \")?)\"], [\"(rotate)\\\\(\", \"(?: \", \" \", \")?\\\\)\"])), Ui, Ui, Ui),\n    Qi = String.raw(Gi || (Gi = n([\"(scale)(\", \"(?: \", \")?)\"], [\"(scale)\\\\(\", \"(?: \", \")?\\\\)\"])), Ui, Ui),\n    Zi = String.raw(zi || (zi = n([\"(translate)(\", \"(?: \", \")?)\"], [\"(translate)\\\\(\", \"(?: \", \")?\\\\)\"])), Ui, Ui),\n    $i = String.raw(Hi || (Hi = n([\"(matrix)(\", \" \", \" \", \" \", \" \", \" \", \")\"], [\"(matrix)\\\\(\", \" \", \" \", \" \", \" \", \" \", \"\\\\)\"])), Ui, Ui, Ui, Ui, Ui, Ui),\n    tr = \"(?:\".concat($i, \"|\").concat(Zi, \"|\").concat(Ji, \"|\").concat(Qi, \"|\").concat(qi, \"|\").concat(Ki, \")\"),\n    er = \"(?:\".concat(tr, \"*)\"),\n    sr = String.raw(Ni || (Ni = n([\"^s*(?:\", \"?)s*$\"], [\"^\\\\s*(?:\", \"?)\\\\s*$\"])), er),\n    ir = new RegExp(sr),\n    rr = new RegExp(tr),\n    nr = new RegExp(tr, \"g\");\n  function or(t) {\n    const e = [];\n    if (!(t = Xi(t).replace(/\\s*([()])\\s*/gi, \"$1\")) || t && !ir.test(t)) return [...T];\n    for (const s of t.matchAll(nr)) {\n      const t = rr.exec(s[0]);\n      if (!t) continue;\n      let i = T;\n      const r = t.filter(t => !!t),\n        [, n, ...o] = r,\n        [a, h, c, l, u, d] = o.map(t => parseFloat(t));\n      switch (n) {\n        case \"translate\":\n          i = Mt(a, h);\n          break;\n        case B:\n          i = Pt({\n            angle: a\n          }, {\n            x: h,\n            y: c\n          });\n          break;\n        case z:\n          i = Et(a, h);\n          break;\n        case U:\n          i = jt(a);\n          break;\n        case q:\n          i = Ft(a);\n          break;\n        case \"matrix\":\n          i = [a, h, c, l, u, d];\n      }\n      e.push(i);\n    }\n    return Ot(e);\n  }\n  function ar(t, e, s, i) {\n    const r = Array.isArray(e);\n    let n,\n      o = e;\n    if (t !== K && t !== J || e !== j) {\n      if (\"strokeUniform\" === t) return \"non-scaling-stroke\" === e;\n      if (\"strokeDashArray\" === t) o = e === j ? null : e.replace(/,/g, \" \").split(/\\s+/).map(parseFloat);else if (\"transformMatrix\" === t) o = s && s.transformMatrix ? Tt(s.transformMatrix, or(e)) : or(e);else if (\"visible\" === t) o = e !== j && \"hidden\" !== e, s && !1 === s.visible && (o = !1);else if (\"opacity\" === t) o = parseFloat(e), s && void 0 !== s.opacity && (o *= s.opacity);else if (\"textAnchor\" === t) o = \"start\" === e ? M : \"end\" === e ? A : D;else if (\"charSpacing\" === t) n = Jt(e, i) / i * 1e3;else if (\"paintFirst\" === t) {\n        const t = e.indexOf(K),\n          s = e.indexOf(J);\n        o = K, (t > -1 && s > -1 && s < t || -1 === t && s > -1) && (o = J);\n      } else {\n        if (\"href\" === t || \"xlink:href\" === t || \"font\" === t || \"id\" === t) return e;\n        if (\"imageSmoothing\" === t) return \"optimizeQuality\" === e;\n        n = r ? e.map(Jt) : Jt(e, i);\n      }\n    } else o = \"\";\n    return !r && isNaN(n) ? o : n;\n  }\n  function hr(t, e) {\n    const s = t.match(ze);\n    if (!s) return;\n    const i = s[1],\n      r = s[3],\n      n = s[4],\n      o = s[5],\n      a = s[6];\n    i && (e.fontStyle = i), r && (e.fontWeight = isNaN(parseFloat(r)) ? r : parseFloat(r)), n && (e.fontSize = Jt(n)), a && (e.fontFamily = a), o && (e.lineHeight = \"normal\" === o ? 1 : o);\n  }\n  function cr(t, e) {\n    t.replace(/;\\s*$/, \"\").split(\";\").forEach(t => {\n      if (!t) return;\n      const [s, i] = t.split(\":\");\n      e[s.trim().toLowerCase()] = i.trim();\n    });\n  }\n  function lr(t) {\n    const e = {},\n      s = t.getAttribute(\"style\");\n    return s ? (\"string\" == typeof s ? cr(s, e) : function (t, e) {\n      Object.entries(t).forEach(t => {\n        let [s, i] = t;\n        void 0 !== i && (e[s.toLowerCase()] = i);\n      });\n    }(s, e), e) : e;\n  }\n  const ur = {\n    stroke: \"strokeOpacity\",\n    fill: \"fillOpacity\"\n  };\n  function dr(t, e, s) {\n    if (!t) return {};\n    let r,\n      n = {},\n      o = O;\n    t.parentNode && Je.test(t.parentNode.nodeName) && (n = dr(t.parentElement, e, s), n.fontSize && (r = o = Jt(n.fontSize)));\n    const a = i(i(i({}, e.reduce((e, s) => {\n      const i = t.getAttribute(s);\n      return i && (e[s] = i), e;\n    }, {})), function (t) {\n      let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n        s = {};\n      for (const r in e) Ri(t, r.split(\" \")) && (s = i(i({}, s), e[r]));\n      return s;\n    }(t, s)), lr(t));\n    a[Ue] && t.setAttribute(Ue, a[Ue]), a[Ne] && (r = Jt(a[Ne], o), a[Ne] = \"\".concat(r));\n    const h = {};\n    for (const t in a) {\n      const e = Ii(t),\n        s = ar(e, a[t], n, r);\n      h[e] = s;\n    }\n    h && h.font && hr(h.font, h);\n    const c = i(i({}, n), h);\n    return Je.test(t.nodeName) ? c : function (t) {\n      const e = _i.getDefaults();\n      return Object.entries(ur).forEach(s => {\n        let [i, r] = s;\n        if (void 0 === t[r] || \"\" === t[i]) return;\n        if (void 0 === t[i]) {\n          if (!e[i]) return;\n          t[i] = e[i];\n        }\n        if (0 === t[i].indexOf(\"url(\")) return;\n        const n = new qt(t[i]);\n        t[i] = n.setAlpha(Kt(n.getAlpha() * t[r], 2)).toRgba();\n      }), t;\n    }(c);\n  }\n  const gr = [\"left\", \"top\", \"width\", \"height\", \"visible\"],\n    fr = [\"rx\", \"ry\"];\n  class pr extends _i {\n    static getDefaults() {\n      return i(i({}, super.getDefaults()), pr.ownDefaults);\n    }\n    constructor(t) {\n      super(), Object.assign(this, pr.ownDefaults), this.setOptions(t), this._initRxRy();\n    }\n    _initRxRy() {\n      const {\n        rx: t,\n        ry: e\n      } = this;\n      t && !e ? this.ry = t : e && !t && (this.rx = e);\n    }\n    _render(t) {\n      const {\n          width: e,\n          height: s\n        } = this,\n        i = -e / 2,\n        r = -s / 2,\n        n = this.rx ? Math.min(this.rx, e / 2) : 0,\n        o = this.ry ? Math.min(this.ry, s / 2) : 0,\n        a = 0 !== n || 0 !== o;\n      t.beginPath(), t.moveTo(i + n, r), t.lineTo(i + e - n, r), a && t.bezierCurveTo(i + e - k * n, r, i + e, r + k * o, i + e, r + o), t.lineTo(i + e, r + s - o), a && t.bezierCurveTo(i + e, r + s - k * o, i + e - k * n, r + s, i + e - n, r + s), t.lineTo(i + n, r + s), a && t.bezierCurveTo(i + k * n, r + s, i, r + s - k * o, i, r + s - o), t.lineTo(i, r + o), a && t.bezierCurveTo(i, r + k * o, i + k * n, r, i + n, r), t.closePath(), this._renderPaintInOrder(t);\n    }\n    toObject() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n      return super.toObject([...fr, ...t]);\n    }\n    _toSVG() {\n      const {\n        width: t,\n        height: e,\n        rx: s,\n        ry: i\n      } = this;\n      return [\"<rect \", \"COMMON_PARTS\", 'x=\"'.concat(-t / 2, '\" y=\"').concat(-e / 2, '\" rx=\"').concat(s, '\" ry=\"').concat(i, '\" width=\"').concat(t, '\" height=\"').concat(e, '\" />\\n')];\n    }\n    static async fromElement(t, e, s) {\n      const n = dr(t, this.ATTRIBUTE_NAMES, s),\n        {\n          left: o = 0,\n          top: a = 0,\n          width: h = 0,\n          height: c = 0,\n          visible: l = !0\n        } = n,\n        u = r(n, gr);\n      return new this(i(i(i({}, e), u), {}, {\n        left: o,\n        top: a,\n        width: h,\n        height: c,\n        visible: Boolean(l && h && c)\n      }));\n    }\n  }\n  e(pr, \"type\", \"Rect\"), e(pr, \"cacheProperties\", [...ps, ...fr]), e(pr, \"ownDefaults\", {\n    rx: 0,\n    ry: 0\n  }), e(pr, \"ATTRIBUTE_NAMES\", [...Fi, \"x\", \"y\", \"rx\", \"ry\", \"width\", \"height\"]), tt.setClass(pr), tt.setSVGClass(pr);\n  const mr = \"initialization\",\n    vr = \"added\",\n    yr = \"removed\",\n    _r = \"imperative\",\n    xr = (t, e) => {\n      const {\n          strokeUniform: s,\n          strokeWidth: i,\n          width: r,\n          height: n,\n          group: o\n        } = e,\n        a = o && o !== t ? we(o.calcTransformMatrix(), t.calcTransformMatrix()) : null,\n        h = a ? e.getRelativeCenterPoint().transform(a) : e.getRelativeCenterPoint(),\n        c = !e.isStrokeAccountedForInDimensions(),\n        l = s && c ? Oe(new ot(i, i), void 0, t.calcTransformMatrix()) : at,\n        u = !s && c ? i : 0,\n        d = Se(r + u, n + u, Ot([a, e.calcOwnMatrix()], !0)).add(l).scalarDivide(2);\n      return [h.subtract(d), h.add(d)];\n    };\n  class Cr {\n    calcLayoutResult(t, e) {\n      if (this.shouldPerformLayout(t)) return this.calcBoundingBox(e, t);\n    }\n    shouldPerformLayout(t) {\n      let {\n        type: e,\n        prevStrategy: s,\n        strategy: i\n      } = t;\n      return e === mr || e === _r || !!s && i !== s;\n    }\n    shouldLayoutClipPath(t) {\n      let {\n        type: e,\n        target: {\n          clipPath: s\n        }\n      } = t;\n      return e !== mr && s && !s.absolutePositioned;\n    }\n    getInitialSize(t, e) {\n      return e.size;\n    }\n    calcBoundingBox(t, e) {\n      const {\n        type: s,\n        target: i\n      } = e;\n      if (s === _r && e.overrides) return e.overrides;\n      if (0 === t.length) return;\n      const {\n          left: r,\n          top: n,\n          width: o,\n          height: a\n        } = ve(t.map(t => xr(i, t)).reduce((t, e) => t.concat(e), [])),\n        h = new ot(o, a),\n        c = new ot(r, n).add(h.scalarDivide(2));\n      if (s === mr) {\n        const t = this.getInitialSize(e, {\n          size: h,\n          center: c\n        });\n        return {\n          center: c,\n          relativeCorrection: new ot(0, 0),\n          size: t\n        };\n      }\n      return {\n        center: c.transform(i.calcOwnMatrix()),\n        size: h\n      };\n    }\n  }\n  e(Cr, \"type\", \"strategy\");\n  class br extends Cr {\n    shouldPerformLayout(t) {\n      return !0;\n    }\n  }\n  e(br, \"type\", \"fit-content\"), tt.setClass(br);\n  const Sr = [\"strategy\"],\n    wr = [\"target\", \"strategy\", \"bubbles\", \"prevStrategy\"],\n    Tr = \"layoutManager\";\n  class Or {\n    constructor() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new br();\n      e(this, \"strategy\", void 0), this.strategy = t, this._subscriptions = new Map();\n    }\n    performLayout(t) {\n      const e = i(i({\n        bubbles: !0,\n        strategy: this.strategy\n      }, t), {}, {\n        prevStrategy: this._prevLayoutStrategy,\n        stopPropagation() {\n          this.bubbles = !1;\n        }\n      });\n      this.onBeforeLayout(e);\n      const s = this.getLayoutResult(e);\n      s && this.commitLayout(e, s), this.onAfterLayout(e, s), this._prevLayoutStrategy = e.strategy;\n    }\n    attachHandlers(t, e) {\n      const {\n        target: s\n      } = e;\n      return [Q, L, Y, I, R, X, G, W, V].map(e => t.on(e, t => this.performLayout(e === Q ? {\n        type: \"object_modified\",\n        trigger: e,\n        e: t,\n        target: s\n      } : {\n        type: \"object_modifying\",\n        trigger: e,\n        e: t,\n        target: s\n      })));\n    }\n    subscribe(t, e) {\n      this.unsubscribe(t, e);\n      const s = this.attachHandlers(t, e);\n      this._subscriptions.set(t, s);\n    }\n    unsubscribe(t, e) {\n      (this._subscriptions.get(t) || []).forEach(t => t()), this._subscriptions.delete(t);\n    }\n    unsubscribeTargets(t) {\n      t.targets.forEach(e => this.unsubscribe(e, t));\n    }\n    subscribeTargets(t) {\n      t.targets.forEach(e => this.subscribe(e, t));\n    }\n    onBeforeLayout(t) {\n      const {\n          target: e,\n          type: s\n        } = t,\n        {\n          canvas: n\n        } = e;\n      if (s === mr || s === vr ? this.subscribeTargets(t) : s === yr && this.unsubscribeTargets(t), e.fire(\"layout:before\", {\n        context: t\n      }), n && n.fire(\"object:layout:before\", {\n        target: e,\n        context: t\n      }), s === _r && t.deep) {\n        const s = r(t, Sr);\n        e.forEachObject(t => t.layoutManager && t.layoutManager.performLayout(i(i({}, s), {}, {\n          bubbles: !1,\n          target: t\n        })));\n      }\n    }\n    getLayoutResult(t) {\n      const {\n          target: e,\n          strategy: s,\n          type: i\n        } = t,\n        r = s.calcLayoutResult(t, e.getObjects());\n      if (!r) return;\n      const n = i === mr ? new ot() : e.getRelativeCenterPoint(),\n        {\n          center: o,\n          correction: a = new ot(),\n          relativeCorrection: h = new ot()\n        } = r,\n        c = n.subtract(o).add(a).transform(i === mr ? T : wt(e.calcOwnMatrix()), !0).add(h);\n      return {\n        result: r,\n        prevCenter: n,\n        nextCenter: o,\n        offset: c\n      };\n    }\n    commitLayout(t, e) {\n      const {\n          target: s\n        } = t,\n        {\n          result: {\n            size: i\n          },\n          nextCenter: r\n        } = e;\n      var n, o;\n      (s.set({\n        width: i.x,\n        height: i.y\n      }), this.layoutObjects(t, e), t.type === mr) ? s.set({\n        left: null !== (n = t.x) && void 0 !== n ? n : r.x + i.x * Pe(s.originX),\n        top: null !== (o = t.y) && void 0 !== o ? o : r.y + i.y * Pe(s.originY)\n      }) : (s.setPositionByOrigin(r, D, D), s.setCoords(), s.set(\"dirty\", !0));\n    }\n    layoutObjects(t, e) {\n      const {\n        target: s\n      } = t;\n      s.forEachObject(i => {\n        i.group === s && this.layoutObject(t, e, i);\n      }), t.strategy.shouldLayoutClipPath(t) && this.layoutObject(t, e, s.clipPath);\n    }\n    layoutObject(t, e, s) {\n      let {\n        offset: i\n      } = e;\n      s.set({\n        left: s.left + i.x,\n        top: s.top + i.y\n      });\n    }\n    onAfterLayout(t, e) {\n      const {\n          target: s,\n          strategy: n,\n          bubbles: o,\n          prevStrategy: a\n        } = t,\n        h = r(t, wr),\n        {\n          canvas: c\n        } = s;\n      s.fire(\"layout:after\", {\n        context: t,\n        result: e\n      }), c && c.fire(\"object:layout:after\", {\n        context: t,\n        result: e,\n        target: s\n      });\n      const l = s.parent;\n      o && null != l && l.layoutManager && ((h.path || (h.path = [])).push(s), l.layoutManager.performLayout(i(i({}, h), {}, {\n        target: l\n      }))), s.set(\"dirty\", !0);\n    }\n    dispose() {\n      const {\n        _subscriptions: t\n      } = this;\n      t.forEach(t => t.forEach(t => t())), t.clear();\n    }\n    toObject() {\n      return {\n        type: Tr,\n        strategy: this.strategy.constructor.type\n      };\n    }\n    toJSON() {\n      return this.toObject();\n    }\n  }\n  tt.setClass(Or, Tr);\n  const kr = [\"type\", \"objects\", \"layoutManager\"];\n  class Dr extends Or {\n    performLayout() {}\n  }\n  class Mr extends ct(_i) {\n    static getDefaults() {\n      return i(i({}, super.getDefaults()), Mr.ownDefaults);\n    }\n    constructor() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],\n        s = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      super(), e(this, \"_activeObjects\", []), e(this, \"__objectSelectionTracker\", void 0), e(this, \"__objectSelectionDisposer\", void 0), Object.assign(this, Mr.ownDefaults), this.setOptions(s), this.groupInit(t, s);\n    }\n    groupInit(t, e) {\n      var s;\n      this._objects = [...t], this.__objectSelectionTracker = this.__objectSelectionMonitor.bind(this, !0), this.__objectSelectionDisposer = this.__objectSelectionMonitor.bind(this, !1), this.forEachObject(t => {\n        this.enterGroup(t, !1);\n      }), this.layoutManager = null !== (s = e.layoutManager) && void 0 !== s ? s : new Or(), this.layoutManager.performLayout({\n        type: mr,\n        target: this,\n        targets: [...t],\n        x: e.left,\n        y: e.top\n      });\n    }\n    canEnterGroup(t) {\n      return t === this || this.isDescendantOf(t) ? (h(\"error\", \"Group: circular object trees are not supported, this call has no effect\"), !1) : -1 === this._objects.indexOf(t) || (h(\"error\", \"Group: duplicate objects are not supported inside group, this call has no effect\"), !1);\n    }\n    _filterObjectsBeforeEnteringGroup(t) {\n      return t.filter((t, e, s) => this.canEnterGroup(t) && s.indexOf(t) === e);\n    }\n    add() {\n      for (var t = arguments.length, e = new Array(t), s = 0; s < t; s++) e[s] = arguments[s];\n      const i = this._filterObjectsBeforeEnteringGroup(e),\n        r = super.add(...i);\n      return this._onAfterObjectsChange(vr, i), r;\n    }\n    insertAt(t) {\n      for (var e = arguments.length, s = new Array(e > 1 ? e - 1 : 0), i = 1; i < e; i++) s[i - 1] = arguments[i];\n      const r = this._filterObjectsBeforeEnteringGroup(s),\n        n = super.insertAt(t, ...r);\n      return this._onAfterObjectsChange(vr, r), n;\n    }\n    remove() {\n      const t = super.remove(...arguments);\n      return this._onAfterObjectsChange(yr, t), t;\n    }\n    _onObjectAdded(t) {\n      this.enterGroup(t, !0), this.fire(\"object:added\", {\n        target: t\n      }), t.fire(\"added\", {\n        target: this\n      });\n    }\n    _onObjectRemoved(t, e) {\n      this.exitGroup(t, e), this.fire(\"object:removed\", {\n        target: t\n      }), t.fire(\"removed\", {\n        target: this\n      });\n    }\n    _onAfterObjectsChange(t, e) {\n      this.layoutManager.performLayout({\n        type: t,\n        targets: e,\n        target: this\n      });\n    }\n    _onStackOrderChanged() {\n      this._set(\"dirty\", !0);\n    }\n    _set(t, e) {\n      const s = this[t];\n      return super._set(t, e), \"canvas\" === t && s !== e && (this._objects || []).forEach(s => {\n        s._set(t, e);\n      }), this;\n    }\n    _shouldSetNestedCoords() {\n      return this.subTargetCheck;\n    }\n    removeAll() {\n      return this._activeObjects = [], this.remove(...this._objects);\n    }\n    __objectSelectionMonitor(t, e) {\n      let {\n        target: s\n      } = e;\n      const i = this._activeObjects;\n      if (t) i.push(s), this._set(\"dirty\", !0);else if (i.length > 0) {\n        const t = i.indexOf(s);\n        t > -1 && (i.splice(t, 1), this._set(\"dirty\", !0));\n      }\n    }\n    _watchObject(t, e) {\n      t && this._watchObject(!1, e), t ? (e.on(\"selected\", this.__objectSelectionTracker), e.on(\"deselected\", this.__objectSelectionDisposer)) : (e.off(\"selected\", this.__objectSelectionTracker), e.off(\"deselected\", this.__objectSelectionDisposer));\n    }\n    enterGroup(t, e) {\n      t.group && t.group.remove(t), t._set(\"parent\", this), this._enterGroup(t, e);\n    }\n    _enterGroup(t, e) {\n      e && xe(t, Tt(wt(this.calcTransformMatrix()), t.calcTransformMatrix())), this._shouldSetNestedCoords() && t.setCoords(), t._set(\"group\", this), t._set(\"canvas\", this.canvas), this._watchObject(!0, t);\n      const s = this.canvas && this.canvas.getActiveObject && this.canvas.getActiveObject();\n      s && (s === t || t.isDescendantOf(s)) && this._activeObjects.push(t);\n    }\n    exitGroup(t, e) {\n      this._exitGroup(t, e), t._set(\"parent\", void 0), t._set(\"canvas\", void 0);\n    }\n    _exitGroup(t, e) {\n      t._set(\"group\", void 0), e || (xe(t, Tt(this.calcTransformMatrix(), t.calcTransformMatrix())), t.setCoords()), this._watchObject(!1, t);\n      const s = this._activeObjects.length > 0 ? this._activeObjects.indexOf(t) : -1;\n      s > -1 && this._activeObjects.splice(s, 1);\n    }\n    shouldCache() {\n      const t = _i.prototype.shouldCache.call(this);\n      if (t) for (let t = 0; t < this._objects.length; t++) if (this._objects[t].willDrawShadow()) return this.ownCaching = !1, !1;\n      return t;\n    }\n    willDrawShadow() {\n      if (super.willDrawShadow()) return !0;\n      for (let t = 0; t < this._objects.length; t++) if (this._objects[t].willDrawShadow()) return !0;\n      return !1;\n    }\n    isOnACache() {\n      return this.ownCaching || !!this.parent && this.parent.isOnACache();\n    }\n    drawObject(t, e, s) {\n      this._renderBackground(t);\n      for (let e = 0; e < this._objects.length; e++) {\n        var i;\n        const s = this._objects[e];\n        null !== (i = this.canvas) && void 0 !== i && i.preserveObjectStacking && s.group !== this ? (t.save(), t.transform(...wt(this.calcTransformMatrix())), s.render(t), t.restore()) : s.group === this && s.render(t);\n      }\n      this._drawClipPath(t, this.clipPath, s);\n    }\n    setCoords() {\n      super.setCoords(), this._shouldSetNestedCoords() && this.forEachObject(t => t.setCoords());\n    }\n    triggerLayout() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n      this.layoutManager.performLayout(i({\n        target: this,\n        type: _r\n      }, t));\n    }\n    render(t) {\n      this._transformDone = !0, super.render(t), this._transformDone = !1;\n    }\n    __serializeObjects(t, e) {\n      const s = this.includeDefaultValues;\n      return this._objects.filter(function (t) {\n        return !t.excludeFromExport;\n      }).map(function (i) {\n        const r = i.includeDefaultValues;\n        i.includeDefaultValues = s;\n        const n = i[t || \"toObject\"](e);\n        return i.includeDefaultValues = r, n;\n      });\n    }\n    toObject() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n      const e = this.layoutManager.toObject();\n      return i(i(i({}, super.toObject([\"subTargetCheck\", \"interactive\", ...t])), \"fit-content\" !== e.strategy || this.includeDefaultValues ? {\n        layoutManager: e\n      } : {}), {}, {\n        objects: this.__serializeObjects(\"toObject\", t)\n      });\n    }\n    toString() {\n      return \"#<Group: (\".concat(this.complexity(), \")>\");\n    }\n    dispose() {\n      this.layoutManager.unsubscribeTargets({\n        targets: this.getObjects(),\n        target: this\n      }), this._activeObjects = [], this.forEachObject(t => {\n        this._watchObject(!1, t), t.dispose();\n      }), super.dispose();\n    }\n    _createSVGBgRect(t) {\n      if (!this.backgroundColor) return \"\";\n      const e = pr.prototype._toSVG.call(this),\n        s = e.indexOf(\"COMMON_PARTS\");\n      e[s] = 'for=\"group\" ';\n      const i = e.join(\"\");\n      return t ? t(i) : i;\n    }\n    _toSVG(t) {\n      const e = [\"<g \", \"COMMON_PARTS\", \" >\\n\"],\n        s = this._createSVGBgRect(t);\n      s && e.push(\"\\t\\t\", s);\n      for (let s = 0; s < this._objects.length; s++) e.push(\"\\t\\t\", this._objects[s].toSVG(t));\n      return e.push(\"</g>\\n\"), e;\n    }\n    getSvgStyles() {\n      const t = void 0 !== this.opacity && 1 !== this.opacity ? \"opacity: \".concat(this.opacity, \";\") : \"\",\n        e = this.visible ? \"\" : \" visibility: hidden;\";\n      return [t, this.getSvgFilter(), e].join(\"\");\n    }\n    toClipPathSVG(t) {\n      const e = [],\n        s = this._createSVGBgRect(t);\n      s && e.push(\"\\t\", s);\n      for (let s = 0; s < this._objects.length; s++) e.push(\"\\t\", this._objects[s].toClipPathSVG(t));\n      return this._createBaseClipPathSVGMarkup(e, {\n        reviver: t\n      });\n    }\n    static fromObject(t, e) {\n      let {\n          type: s,\n          objects: n = [],\n          layoutManager: o\n        } = t,\n        a = r(t, kr);\n      return Promise.all([Bt(n, e), Xt(a, e)]).then(t => {\n        let [e, s] = t;\n        const r = new this(e, i(i(i({}, a), s), {}, {\n          layoutManager: new Dr()\n        }));\n        if (o) {\n          const t = tt.getClass(o.type),\n            e = tt.getClass(o.strategy);\n          r.layoutManager = new t(new e());\n        } else r.layoutManager = new Or();\n        return r.layoutManager.subscribeTargets({\n          type: mr,\n          target: r,\n          targets: r.getObjects()\n        }), r.setCoords(), r;\n      });\n    }\n  }\n  e(Mr, \"type\", \"Group\"), e(Mr, \"ownDefaults\", {\n    strokeWidth: 0,\n    subTargetCheck: !1,\n    interactive: !1\n  }), tt.setClass(Mr);\n  const Pr = (t, e) => Math.min(e.width / t.width, e.height / t.height),\n    Er = (t, e) => Math.max(e.width / t.width, e.height / t.height),\n    Ar = \"\\\\s*,?\\\\s*\",\n    jr = \"\".concat(Ar, \"(\").concat(Ve, \")\"),\n    Fr = \"\".concat(jr).concat(jr).concat(jr).concat(Ar, \"([01])\").concat(Ar, \"([01])\").concat(jr).concat(jr),\n    Lr = {\n      m: \"l\",\n      M: \"L\"\n    },\n    Rr = (t, e, s, i, r, n, o, a, h, c, l) => {\n      const u = rt(t),\n        d = nt(t),\n        g = rt(e),\n        f = nt(e),\n        p = s * r * g - i * n * f + o,\n        m = i * r * g + s * n * f + a;\n      return [\"C\", c + h * (-s * r * d - i * n * u), l + h * (-i * r * d + s * n * u), p + h * (s * r * f + i * n * g), m + h * (i * r * f - s * n * g), p, m];\n    },\n    Ir = (t, e, s, i) => {\n      const r = Math.atan2(e, t),\n        n = Math.atan2(i, s);\n      return n >= r ? n - r : 2 * Math.PI - (r - n);\n    };\n  function Br(t, e, s, i, r, n, o, h) {\n    let c;\n    if (a.cachesBoundsOfCurve && (c = [...arguments].join(), _.boundsOfCurveCache[c])) return _.boundsOfCurveCache[c];\n    const l = Math.sqrt,\n      u = Math.abs,\n      d = [],\n      g = [[0, 0], [0, 0]];\n    let f = 6 * t - 12 * s + 6 * r,\n      p = -3 * t + 9 * s - 9 * r + 3 * o,\n      m = 3 * s - 3 * t;\n    for (let t = 0; t < 2; ++t) {\n      if (t > 0 && (f = 6 * e - 12 * i + 6 * n, p = -3 * e + 9 * i - 9 * n + 3 * h, m = 3 * i - 3 * e), u(p) < 1e-12) {\n        if (u(f) < 1e-12) continue;\n        const t = -m / f;\n        0 < t && t < 1 && d.push(t);\n        continue;\n      }\n      const s = f * f - 4 * m * p;\n      if (s < 0) continue;\n      const r = l(s),\n        o = (-f + r) / (2 * p);\n      0 < o && o < 1 && d.push(o);\n      const a = (-f - r) / (2 * p);\n      0 < a && a < 1 && d.push(a);\n    }\n    let v = d.length;\n    const y = v,\n      x = Vr(t, e, s, i, r, n, o, h);\n    for (; v--;) {\n      const {\n        x: t,\n        y: e\n      } = x(d[v]);\n      g[0][v] = t, g[1][v] = e;\n    }\n    g[0][y] = t, g[1][y] = e, g[0][y + 1] = o, g[1][y + 1] = h;\n    const C = [new ot(Math.min(...g[0]), Math.min(...g[1])), new ot(Math.max(...g[0]), Math.max(...g[1]))];\n    return a.cachesBoundsOfCurve && (_.boundsOfCurveCache[c] = C), C;\n  }\n  const Xr = (t, e, s) => {\n      let [i, r, n, o, a, h, c, l] = s;\n      const u = ((t, e, s, i, r, n, o) => {\n        if (0 === s || 0 === i) return [];\n        let a = 0,\n          h = 0,\n          c = 0;\n        const l = Math.PI,\n          u = o * w,\n          d = nt(u),\n          g = rt(u),\n          f = .5 * (-g * t - d * e),\n          p = .5 * (-g * e + d * t),\n          m = s ** 2,\n          v = i ** 2,\n          y = p ** 2,\n          _ = f ** 2,\n          x = m * v - m * y - v * _;\n        let C = Math.abs(s),\n          b = Math.abs(i);\n        if (x < 0) {\n          const t = Math.sqrt(1 - x / (m * v));\n          C *= t, b *= t;\n        } else c = (r === n ? -1 : 1) * Math.sqrt(x / (m * y + v * _));\n        const S = c * C * p / b,\n          T = -c * b * f / C,\n          O = g * S - d * T + .5 * t,\n          k = d * S + g * T + .5 * e;\n        let D = Ir(1, 0, (f - S) / C, (p - T) / b),\n          M = Ir((f - S) / C, (p - T) / b, (-f - S) / C, (-p - T) / b);\n        0 === n && M > 0 ? M -= 2 * l : 1 === n && M < 0 && (M += 2 * l);\n        const P = Math.ceil(Math.abs(M / l * 2)),\n          E = [],\n          A = M / P,\n          j = 8 / 3 * Math.sin(A / 4) * Math.sin(A / 4) / Math.sin(A / 2);\n        let F = D + A;\n        for (let t = 0; t < P; t++) E[t] = Rr(D, F, g, d, C, b, O, k, j, a, h), a = E[t][5], h = E[t][6], D = F, F += A;\n        return E;\n      })(c - t, l - e, r, n, a, h, o);\n      for (let s = 0, i = u.length; s < i; s++) u[s][1] += t, u[s][2] += e, u[s][3] += t, u[s][4] += e, u[s][5] += t, u[s][6] += e;\n      return u;\n    },\n    Yr = t => {\n      let e = 0,\n        s = 0,\n        i = 0,\n        r = 0;\n      const n = [];\n      let o,\n        a = 0,\n        h = 0;\n      for (const c of t) {\n        const t = [...c];\n        let l;\n        switch (t[0]) {\n          case \"l\":\n            t[1] += e, t[2] += s;\n          case \"L\":\n            e = t[1], s = t[2], l = [\"L\", e, s];\n            break;\n          case \"h\":\n            t[1] += e;\n          case \"H\":\n            e = t[1], l = [\"L\", e, s];\n            break;\n          case \"v\":\n            t[1] += s;\n          case \"V\":\n            s = t[1], l = [\"L\", e, s];\n            break;\n          case \"m\":\n            t[1] += e, t[2] += s;\n          case \"M\":\n            e = t[1], s = t[2], i = t[1], r = t[2], l = [\"M\", e, s];\n            break;\n          case \"c\":\n            t[1] += e, t[2] += s, t[3] += e, t[4] += s, t[5] += e, t[6] += s;\n          case \"C\":\n            a = t[3], h = t[4], e = t[5], s = t[6], l = [\"C\", t[1], t[2], a, h, e, s];\n            break;\n          case \"s\":\n            t[1] += e, t[2] += s, t[3] += e, t[4] += s;\n          case \"S\":\n            \"C\" === o ? (a = 2 * e - a, h = 2 * s - h) : (a = e, h = s), e = t[3], s = t[4], l = [\"C\", a, h, t[1], t[2], e, s], a = l[3], h = l[4];\n            break;\n          case \"q\":\n            t[1] += e, t[2] += s, t[3] += e, t[4] += s;\n          case \"Q\":\n            a = t[1], h = t[2], e = t[3], s = t[4], l = [\"Q\", a, h, e, s];\n            break;\n          case \"t\":\n            t[1] += e, t[2] += s;\n          case \"T\":\n            \"Q\" === o ? (a = 2 * e - a, h = 2 * s - h) : (a = e, h = s), e = t[1], s = t[2], l = [\"Q\", a, h, e, s];\n            break;\n          case \"a\":\n            t[6] += e, t[7] += s;\n          case \"A\":\n            Xr(e, s, t).forEach(t => n.push(t)), e = t[6], s = t[7];\n            break;\n          case \"z\":\n          case \"Z\":\n            e = i, s = r, l = [\"Z\"];\n        }\n        l ? (n.push(l), o = l[0]) : o = \"\";\n      }\n      return n;\n    },\n    Wr = (t, e, s, i) => Math.sqrt((s - t) ** 2 + (i - e) ** 2),\n    Vr = (t, e, s, i, r, n, o, a) => h => {\n      const c = h ** 3,\n        l = (t => 3 * t ** 2 * (1 - t))(h),\n        u = (t => 3 * t * (1 - t) ** 2)(h),\n        d = (t => (1 - t) ** 3)(h);\n      return new ot(o * c + r * l + s * u + t * d, a * c + n * l + i * u + e * d);\n    },\n    Gr = t => t ** 2,\n    zr = t => 2 * t * (1 - t),\n    Hr = t => (1 - t) ** 2,\n    Nr = (t, e, s, i, r, n, o, a) => h => {\n      const c = Gr(h),\n        l = zr(h),\n        u = Hr(h),\n        d = 3 * (u * (s - t) + l * (r - s) + c * (o - r)),\n        g = 3 * (u * (i - e) + l * (n - i) + c * (a - n));\n      return Math.atan2(g, d);\n    },\n    Ur = (t, e, s, i, r, n) => o => {\n      const a = Gr(o),\n        h = zr(o),\n        c = Hr(o);\n      return new ot(r * a + s * h + t * c, n * a + i * h + e * c);\n    },\n    qr = (t, e, s, i, r, n) => o => {\n      const a = 1 - o,\n        h = 2 * (a * (s - t) + o * (r - s)),\n        c = 2 * (a * (i - e) + o * (n - i));\n      return Math.atan2(c, h);\n    },\n    Kr = (t, e, s) => {\n      let i = new ot(e, s),\n        r = 0;\n      for (let e = 1; e <= 100; e += 1) {\n        const s = t(e / 100);\n        r += Wr(i.x, i.y, s.x, s.y), i = s;\n      }\n      return r;\n    },\n    Jr = (t, e) => {\n      let s,\n        r = 0,\n        n = 0,\n        o = {\n          x: t.x,\n          y: t.y\n        },\n        a = i({}, o),\n        h = .01,\n        c = 0;\n      const l = t.iterator,\n        u = t.angleFinder;\n      for (; n < e && h > 1e-4;) a = l(r), c = r, s = Wr(o.x, o.y, a.x, a.y), s + n > e ? (r -= h, h /= 2) : (o = a, r += h, n += s);\n      return i(i({}, a), {}, {\n        angle: u(c)\n      });\n    },\n    Qr = t => {\n      let e,\n        s,\n        i = 0,\n        r = 0,\n        n = 0,\n        o = 0,\n        a = 0;\n      const h = [];\n      for (const c of t) {\n        const t = {\n          x: r,\n          y: n,\n          command: c[0],\n          length: 0\n        };\n        switch (c[0]) {\n          case \"M\":\n            s = t, s.x = o = r = c[1], s.y = a = n = c[2];\n            break;\n          case \"L\":\n            s = t, s.length = Wr(r, n, c[1], c[2]), r = c[1], n = c[2];\n            break;\n          case \"C\":\n            e = Vr(r, n, c[1], c[2], c[3], c[4], c[5], c[6]), s = t, s.iterator = e, s.angleFinder = Nr(r, n, c[1], c[2], c[3], c[4], c[5], c[6]), s.length = Kr(e, r, n), r = c[5], n = c[6];\n            break;\n          case \"Q\":\n            e = Ur(r, n, c[1], c[2], c[3], c[4]), s = t, s.iterator = e, s.angleFinder = qr(r, n, c[1], c[2], c[3], c[4]), s.length = Kr(e, r, n), r = c[3], n = c[4];\n            break;\n          case \"Z\":\n            s = t, s.destX = o, s.destY = a, s.length = Wr(r, n, o, a), r = o, n = a;\n        }\n        i += s.length, h.push(s);\n      }\n      return h.push({\n        length: i,\n        x: r,\n        y: n\n      }), h;\n    },\n    Zr = function (t, e) {\n      let s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : Qr(t),\n        r = 0;\n      for (; e - s[r].length > 0 && r < s.length - 2;) e -= s[r].length, r++;\n      const n = s[r],\n        o = e / n.length,\n        a = t[r];\n      switch (n.command) {\n        case \"M\":\n          return {\n            x: n.x,\n            y: n.y,\n            angle: 0\n          };\n        case \"Z\":\n          return i(i({}, new ot(n.x, n.y).lerp(new ot(n.destX, n.destY), o)), {}, {\n            angle: Math.atan2(n.destY - n.y, n.destX - n.x)\n          });\n        case \"L\":\n          return i(i({}, new ot(n.x, n.y).lerp(new ot(a[1], a[2]), o)), {}, {\n            angle: Math.atan2(a[2] - n.y, a[1] - n.x)\n          });\n        case \"C\":\n        case \"Q\":\n          return Jr(n, e);\n      }\n    },\n    $r = new RegExp(\"[mzlhvcsqta][^mzlhvcsqta]*\", \"gi\"),\n    tn = new RegExp(Fr, \"g\"),\n    en = new RegExp(Ve, \"gi\"),\n    sn = {\n      m: 2,\n      l: 2,\n      h: 1,\n      v: 1,\n      c: 6,\n      s: 4,\n      q: 4,\n      t: 2,\n      a: 7\n    },\n    rn = t => {\n      var e;\n      const s = [],\n        i = null !== (e = t.match($r)) && void 0 !== e ? e : [];\n      for (const t of i) {\n        const e = t[0];\n        if (\"z\" === e || \"Z\" === e) {\n          s.push([e]);\n          continue;\n        }\n        const i = sn[e.toLowerCase()];\n        let r = [];\n        if (\"a\" === e || \"A\" === e) {\n          tn.lastIndex = 0;\n          for (let e = null; e = tn.exec(t);) r.push(...e.slice(1));\n        } else r = t.match(en) || [];\n        for (let t = 0; t < r.length; t += i) {\n          const n = new Array(i),\n            o = Lr[e];\n          n[0] = t > 0 && o ? o : e;\n          for (let e = 0; e < i; e++) n[e + 1] = parseFloat(r[t + e]);\n          s.push(n);\n        }\n      }\n      return s;\n    },\n    nn = function (t) {\n      let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,\n        s = new ot(t[0]),\n        i = new ot(t[1]),\n        r = 1,\n        n = 0;\n      const o = [],\n        a = t.length,\n        h = a > 2;\n      let c;\n      for (h && (r = t[2].x < i.x ? -1 : t[2].x === i.x ? 0 : 1, n = t[2].y < i.y ? -1 : t[2].y === i.y ? 0 : 1), o.push([\"M\", s.x - r * e, s.y - n * e]), c = 1; c < a; c++) {\n        if (!s.eq(i)) {\n          const t = s.midPointFrom(i);\n          o.push([\"Q\", s.x, s.y, t.x, t.y]);\n        }\n        s = t[c], c + 1 < t.length && (i = t[c + 1]);\n      }\n      return h && (r = s.x > t[c - 2].x ? 1 : s.x === t[c - 2].x ? 0 : -1, n = s.y > t[c - 2].y ? 1 : s.y === t[c - 2].y ? 0 : -1), o.push([\"L\", s.x + r * e, s.y + n * e]), o;\n    },\n    on = (t, e) => t.map(t => t.map((t, s) => 0 === s || void 0 === e ? t : Kt(t, e)).join(\" \")).join(\" \");\n  function an(t, e) {\n    const s = t.style;\n    s && e && (\"string\" == typeof e ? s.cssText += \";\" + e : Object.entries(e).forEach(t => {\n      let [e, i] = t;\n      return s.setProperty(e, i);\n    }));\n  }\n  const hn = (t, e) => Math.floor(Math.random() * (e - t + 1)) + t;\n  function cn(t) {\n    let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    const s = e.onComplete || C,\n      i = new (v().XMLHttpRequest)(),\n      r = e.signal,\n      n = function () {\n        i.abort();\n      },\n      o = function () {\n        r && r.removeEventListener(\"abort\", n), i.onerror = i.ontimeout = C;\n      };\n    if (r && r.aborted) throw new l(\"request\");\n    return r && r.addEventListener(\"abort\", n, {\n      once: !0\n    }), i.onreadystatechange = function () {\n      4 === i.readyState && (o(), s(i), i.onreadystatechange = C);\n    }, i.onerror = i.ontimeout = o, i.open(\"get\", t, !0), i.send(), i;\n  }\n  const ln = (t, e) => {\n    let s = t._findCenterFromElement();\n    t.transformMatrix && ((t => {\n      if (t.transformMatrix) {\n        const {\n          scaleX: e,\n          scaleY: s,\n          angle: i,\n          skewX: r\n        } = Dt(t.transformMatrix);\n        t.flipX = !1, t.flipY = !1, t.set(H, e), t.set(N, s), t.angle = i, t.skewX = r, t.skewY = 0;\n      }\n    })(t), s = s.transform(t.transformMatrix)), delete t.transformMatrix, e && (t.scaleX *= e.scaleX, t.scaleY *= e.scaleY, t.cropX = e.cropX, t.cropY = e.cropY, s.x += e.offsetLeft, s.y += e.offsetTop, t.width = e.width, t.height = e.height), t.setPositionByOrigin(s, D, D);\n  };\n  var un = Object.freeze({\n    __proto__: null,\n    addTransformToObject: _e,\n    animate: js,\n    animateColor: Fs,\n    applyTransformToObject: xe,\n    calcAngleBetweenVectors: is,\n    calcDimensionsMatrix: Lt,\n    calcPlaneChangeMatrix: we,\n    calcVectorRotation: rs,\n    cancelAnimFrame: dt,\n    capValue: gs,\n    composeMatrix: Rt,\n    copyCanvasElement: t => {\n      var e;\n      const s = vt(t);\n      return null === (e = s.getContext(\"2d\")) || void 0 === e || e.drawImage(t, 0, 0), s;\n    },\n    cos: rt,\n    createCanvasElement: pt,\n    createImage: mt,\n    createRotateMatrix: Pt,\n    createScaleMatrix: Et,\n    createSkewXMatrix: jt,\n    createSkewYMatrix: Ft,\n    createTranslateMatrix: Mt,\n    createVector: es,\n    crossProduct: as,\n    degreesToRadians: xt,\n    dotProduct: hs,\n    ease: bs,\n    enlivenObjectEnlivables: Xt,\n    enlivenObjects: Bt,\n    findScaleToCover: Er,\n    findScaleToFit: Pr,\n    getBoundsOfCurve: Br,\n    getOrthonormalVector: os,\n    getPathSegmentsInfo: Qr,\n    getPointOnPath: Zr,\n    getPointer: fe,\n    getRandomInt: hn,\n    getRegularPolygonPath: (t, e) => {\n      const s = 2 * Math.PI / t;\n      let i = -b;\n      t % 2 == 0 && (i += s / 2);\n      const r = new Array(t + 1);\n      for (let n = 0; n < t; n++) {\n        const t = n * s + i,\n          {\n            x: o,\n            y: a\n          } = new ot(rt(t), nt(t)).scalarMultiply(e);\n        r[n] = [0 === n ? \"M\" : \"L\", o, a];\n      }\n      return r[t] = [\"Z\"], r;\n    },\n    getSmoothPathFromPoints: nn,\n    getSvgAttributes: t => {\n      const e = [\"instantiated_by_use\", \"style\", \"id\", \"class\"];\n      switch (t) {\n        case \"linearGradient\":\n          return e.concat([\"x1\", \"y1\", \"x2\", \"y2\", \"gradientUnits\", \"gradientTransform\"]);\n        case \"radialGradient\":\n          return e.concat([\"gradientUnits\", \"gradientTransform\", \"cx\", \"cy\", \"r\", \"fx\", \"fy\", \"fr\"]);\n        case \"stop\":\n          return e.concat([\"offset\", \"stop-color\", \"stop-opacity\"]);\n      }\n      return e;\n    },\n    getUnitVector: ns,\n    groupSVGElements: (t, e) => t && 1 === t.length ? t[0] : new Mr(t, e),\n    hasStyleChanged: Ei,\n    invertTransform: wt,\n    isBetweenVectors: cs,\n    isIdentityMatrix: bt,\n    isTouchEvent: pe,\n    isTransparent: xi,\n    joinPath: on,\n    loadImage: It,\n    magnitude: ss,\n    makeBoundingBoxFromPoints: ve,\n    makePathSimpler: Yr,\n    matrixToSVG: Zt,\n    mergeClipPaths: (t, e) => {\n      var s;\n      let i = t,\n        r = e;\n      i.inverted && !r.inverted && (i = e, r = t), ke(r, null === (s = r.group) || void 0 === s ? void 0 : s.calcTransformMatrix(), i.calcTransformMatrix());\n      const n = i.inverted && r.inverted;\n      return n && (i.inverted = r.inverted = !1), new Mr([i], {\n        clipPath: r,\n        inverted: n\n      });\n    },\n    multiplyTransformMatrices: Tt,\n    multiplyTransformMatrixArray: Ot,\n    parsePath: rn,\n    parsePreserveAspectRatioAttribute: Qt,\n    parseUnit: Jt,\n    pick: Yt,\n    projectStrokeOnPoints: Ti,\n    qrDecompose: Dt,\n    radiansToDegrees: Ct,\n    removeFromArray: it,\n    removeTransformFromObject: (t, e) => {\n      const s = wt(e),\n        i = Tt(s, t.calcOwnMatrix());\n      xe(t, i);\n    },\n    removeTransformMatrixForSvgParsing: ln,\n    request: cn,\n    requestAnimFrame: ut,\n    resetObjectTransform: Ce,\n    rotatePoint: (t, e, s) => t.rotate(s, e),\n    rotateVector: ts,\n    saveObjectTransform: be,\n    sendObjectToPlane: ke,\n    sendPointToPlane: Te,\n    sendVectorToPlane: Oe,\n    setStyle: an,\n    sin: nt,\n    sizeAfterTransform: Se,\n    string: Pi,\n    stylesFromArray: ji,\n    stylesToArray: Ai,\n    toBlob: _t,\n    toDataURL: yt,\n    toFixed: Kt,\n    transformPath: (t, e, s) => (s && (e = Tt(e, [1, 0, 0, 1, -s.x, -s.y])), t.map(t => {\n      const s = [...t];\n      for (let i = 1; i < t.length - 1; i += 2) {\n        const {\n          x: r,\n          y: n\n        } = St({\n          x: t[i],\n          y: t[i + 1]\n        }, e);\n        s[i] = r, s[i + 1] = n;\n      }\n      return s;\n    })),\n    transformPoint: St\n  });\n  class dn extends le {\n    constructor(t) {\n      let {\n        allowTouchScrolling: s = !1,\n        containerClass: i = \"\"\n      } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      super(t), e(this, \"upper\", void 0), e(this, \"container\", void 0);\n      const {\n          el: r\n        } = this.lower,\n        n = this.createUpperCanvas();\n      this.upper = {\n        el: n,\n        ctx: n.getContext(\"2d\")\n      }, this.applyCanvasStyle(r, {\n        allowTouchScrolling: s\n      }), this.applyCanvasStyle(n, {\n        allowTouchScrolling: s,\n        styles: {\n          position: \"absolute\",\n          left: \"0\",\n          top: \"0\"\n        }\n      });\n      const o = this.createContainerElement();\n      o.classList.add(i), r.parentNode && r.parentNode.replaceChild(o, r), o.append(r, n), this.container = o;\n    }\n    createUpperCanvas() {\n      const {\n          el: t\n        } = this.lower,\n        e = pt();\n      return e.className = t.className, e.classList.remove(\"lower-canvas\"), e.classList.add(\"upper-canvas\"), e.setAttribute(\"data-fabric\", \"top\"), e.style.cssText = t.style.cssText, e.setAttribute(\"draggable\", \"true\"), e;\n    }\n    createContainerElement() {\n      const t = m().createElement(\"div\");\n      return t.setAttribute(\"data-fabric\", \"wrapper\"), an(t, {\n        position: \"relative\"\n      }), ce(t), t;\n    }\n    applyCanvasStyle(t, e) {\n      const {\n        styles: s,\n        allowTouchScrolling: r\n      } = e;\n      an(t, i(i({}, s), {}, {\n        \"touch-action\": r ? \"manipulation\" : j\n      })), ce(t);\n    }\n    setDimensions(t, e) {\n      super.setDimensions(t, e);\n      const {\n        el: s,\n        ctx: i\n      } = this.upper;\n      ae(s, i, t, e);\n    }\n    setCSSDimensions(t) {\n      super.setCSSDimensions(t), he(this.upper.el, t), he(this.container, t);\n    }\n    cleanupDOM(t) {\n      const e = this.container,\n        {\n          el: s\n        } = this.lower,\n        {\n          el: i\n        } = this.upper;\n      super.cleanupDOM(t), e.removeChild(i), e.removeChild(s), e.parentNode && e.parentNode.replaceChild(s, e);\n    }\n    dispose() {\n      super.dispose(), p().dispose(this.upper.el), delete this.upper, delete this.container;\n    }\n  }\n  class gn extends de {\n    constructor() {\n      super(...arguments), e(this, \"targets\", []), e(this, \"_hoveredTargets\", []), e(this, \"_objectsToRender\", void 0), e(this, \"_currentTransform\", null), e(this, \"_groupSelector\", null), e(this, \"contextTopDirty\", !1);\n    }\n    static getDefaults() {\n      return i(i({}, super.getDefaults()), gn.ownDefaults);\n    }\n    get upperCanvasEl() {\n      var t;\n      return null === (t = this.elements.upper) || void 0 === t ? void 0 : t.el;\n    }\n    get contextTop() {\n      var t;\n      return null === (t = this.elements.upper) || void 0 === t ? void 0 : t.ctx;\n    }\n    get wrapperEl() {\n      return this.elements.container;\n    }\n    initElements(t) {\n      this.elements = new dn(t, {\n        allowTouchScrolling: this.allowTouchScrolling,\n        containerClass: this.containerClass\n      }), this._createCacheCanvas();\n    }\n    _onObjectAdded(t) {\n      this._objectsToRender = void 0, super._onObjectAdded(t);\n    }\n    _onObjectRemoved(t) {\n      this._objectsToRender = void 0, t === this._activeObject && (this.fire(\"before:selection:cleared\", {\n        deselected: [t]\n      }), this._discardActiveObject(), this.fire(\"selection:cleared\", {\n        deselected: [t]\n      }), t.fire(\"deselected\", {\n        target: t\n      })), t === this._hoveredTarget && (this._hoveredTarget = void 0, this._hoveredTargets = []), super._onObjectRemoved(t);\n    }\n    _onStackOrderChanged() {\n      this._objectsToRender = void 0, super._onStackOrderChanged();\n    }\n    _chooseObjectsToRender() {\n      const t = this._activeObject;\n      return !this.preserveObjectStacking && t ? this._objects.filter(e => !e.group && e !== t).concat(t) : this._objects;\n    }\n    renderAll() {\n      this.cancelRequestedRender(), this.destroyed || (!this.contextTopDirty || this._groupSelector || this.isDrawingMode || (this.clearContext(this.contextTop), this.contextTopDirty = !1), this.hasLostContext && (this.renderTopLayer(this.contextTop), this.hasLostContext = !1), !this._objectsToRender && (this._objectsToRender = this._chooseObjectsToRender()), this.renderCanvas(this.getContext(), this._objectsToRender));\n    }\n    renderTopLayer(t) {\n      t.save(), this.isDrawingMode && this._isCurrentlyDrawing && (this.freeDrawingBrush && this.freeDrawingBrush._render(), this.contextTopDirty = !0), this.selection && this._groupSelector && (this._drawSelection(t), this.contextTopDirty = !0), t.restore();\n    }\n    renderTop() {\n      const t = this.contextTop;\n      this.clearContext(t), this.renderTopLayer(t), this.fire(\"after:render\", {\n        ctx: t\n      });\n    }\n    setTargetFindTolerance(t) {\n      t = Math.round(t), this.targetFindTolerance = t;\n      const e = this.getRetinaScaling(),\n        s = Math.ceil((2 * t + 1) * e);\n      this.pixelFindCanvasEl.width = this.pixelFindCanvasEl.height = s, this.pixelFindContext.scale(e, e);\n    }\n    isTargetTransparent(t, e, s) {\n      const i = this.targetFindTolerance,\n        r = this.pixelFindContext;\n      this.clearContext(r), r.save(), r.translate(-e + i, -s + i), r.transform(...this.viewportTransform);\n      const n = t.selectionBackgroundColor;\n      t.selectionBackgroundColor = \"\", t.render(r), t.selectionBackgroundColor = n, r.restore();\n      const o = Math.round(i * this.getRetinaScaling());\n      return xi(r, o, o, o);\n    }\n    _isSelectionKeyPressed(t) {\n      const e = this.selectionKey;\n      return !!e && (Array.isArray(e) ? !!e.find(e => !!e && !0 === t[e]) : t[e]);\n    }\n    _shouldClearSelection(t, e) {\n      const s = this.getActiveObjects(),\n        i = this._activeObject;\n      return !!(!e || e && i && s.length > 1 && -1 === s.indexOf(e) && i !== e && !this._isSelectionKeyPressed(t) || e && !e.evented || e && !e.selectable && i && i !== e);\n    }\n    _shouldCenterTransform(t, e, s) {\n      if (!t) return;\n      let i;\n      return e === z || e === H || e === N || e === Y ? i = this.centeredScaling || t.centeredScaling : e === B && (i = this.centeredRotation || t.centeredRotation), i ? !s : s;\n    }\n    _getOriginFromCorner(t, e) {\n      const s = {\n        x: t.originX,\n        y: t.originY\n      };\n      return e ? ([\"ml\", \"tl\", \"bl\"].includes(e) ? s.x = A : [\"mr\", \"tr\", \"br\"].includes(e) && (s.x = M), [\"tl\", \"mt\", \"tr\"].includes(e) ? s.y = E : [\"bl\", \"mb\", \"br\"].includes(e) && (s.y = P), s) : s;\n    }\n    _setupCurrentTransform(t, e, s) {\n      var r;\n      const n = e.group ? Te(this.getScenePoint(t), void 0, e.group.calcTransformMatrix()) : this.getScenePoint(t),\n        {\n          key: o = \"\",\n          control: a\n        } = e.getActiveControl() || {},\n        h = s && a ? null === (r = a.getActionHandler(t, e, a)) || void 0 === r ? void 0 : r.bind(a) : Be,\n        c = ((t, e, s, i) => {\n          if (!e || !t) return \"drag\";\n          const r = i.controls[e];\n          return r.getActionName(s, r, i);\n        })(s, o, t, e),\n        l = t[this.centeredKey],\n        u = this._shouldCenterTransform(e, c, l) ? {\n          x: D,\n          y: D\n        } : this._getOriginFromCorner(e, o),\n        d = {\n          target: e,\n          action: c,\n          actionHandler: h,\n          actionPerformed: !1,\n          corner: o,\n          scaleX: e.scaleX,\n          scaleY: e.scaleY,\n          skewX: e.skewX,\n          skewY: e.skewY,\n          offsetX: n.x - e.left,\n          offsetY: n.y - e.top,\n          originX: u.x,\n          originY: u.y,\n          ex: n.x,\n          ey: n.y,\n          lastX: n.x,\n          lastY: n.y,\n          theta: xt(e.angle),\n          width: e.width,\n          height: e.height,\n          shiftKey: t.shiftKey,\n          altKey: l,\n          original: i(i({}, be(e)), {}, {\n            originX: u.x,\n            originY: u.y\n          })\n        };\n      this._currentTransform = d, this.fire(\"before:transform\", {\n        e: t,\n        transform: d\n      });\n    }\n    setCursor(t) {\n      this.upperCanvasEl.style.cursor = t;\n    }\n    _drawSelection(t) {\n      const {\n          x: e,\n          y: s,\n          deltaX: i,\n          deltaY: r\n        } = this._groupSelector,\n        n = new ot(e, s).transform(this.viewportTransform),\n        o = new ot(e + i, s + r).transform(this.viewportTransform),\n        a = this.selectionLineWidth / 2;\n      let h = Math.min(n.x, o.x),\n        c = Math.min(n.y, o.y),\n        l = Math.max(n.x, o.x),\n        u = Math.max(n.y, o.y);\n      this.selectionColor && (t.fillStyle = this.selectionColor, t.fillRect(h, c, l - h, u - c)), this.selectionLineWidth && this.selectionBorderColor && (t.lineWidth = this.selectionLineWidth, t.strokeStyle = this.selectionBorderColor, h += a, c += a, l -= a, u -= a, _i.prototype._setLineDash.call(this, t, this.selectionDashArray), t.strokeRect(h, c, l - h, u - c));\n    }\n    findTarget(t) {\n      if (this.skipTargetFind) return;\n      const e = this.getViewportPoint(t),\n        s = this._activeObject,\n        i = this.getActiveObjects();\n      if (this.targets = [], s && i.length >= 1) {\n        if (s.findControl(e, pe(t))) return s;\n        if (i.length > 1 && this.searchPossibleTargets([s], e)) return s;\n        if (s === this.searchPossibleTargets([s], e)) {\n          if (this.preserveObjectStacking) {\n            const i = this.targets;\n            this.targets = [];\n            const r = this.searchPossibleTargets(this._objects, e);\n            return t[this.altSelectionKey] && r && r !== s ? (this.targets = i, s) : r;\n          }\n          return s;\n        }\n      }\n      return this.searchPossibleTargets(this._objects, e);\n    }\n    _pointIsInObjectSelectionArea(t, e) {\n      let s = t.getCoords();\n      const i = this.getZoom(),\n        r = t.padding / i;\n      if (r) {\n        const [t, e, i, n] = s,\n          o = Math.atan2(e.y - t.y, e.x - t.x),\n          a = rt(o) * r,\n          h = nt(o) * r,\n          c = a + h,\n          l = a - h;\n        s = [new ot(t.x - l, t.y - c), new ot(e.x + c, e.y - l), new ot(i.x + l, i.y + c), new ot(n.x - c, n.y + l)];\n      }\n      return Ls.isPointInPolygon(e, s);\n    }\n    _checkTarget(t, e) {\n      if (t && t.visible && t.evented && this._pointIsInObjectSelectionArea(t, Te(e, void 0, this.viewportTransform))) {\n        if (!this.perPixelTargetFind && !t.perPixelTargetFind || t.isEditing) return !0;\n        if (!this.isTargetTransparent(t, e.x, e.y)) return !0;\n      }\n      return !1;\n    }\n    _searchPossibleTargets(t, e) {\n      let s = t.length;\n      for (; s--;) {\n        const i = t[s];\n        if (this._checkTarget(i, e)) {\n          if (ht(i) && i.subTargetCheck) {\n            const t = this._searchPossibleTargets(i._objects, e);\n            t && this.targets.push(t);\n          }\n          return i;\n        }\n      }\n    }\n    searchPossibleTargets(t, e) {\n      const s = this._searchPossibleTargets(t, e);\n      if (s && ht(s) && s.interactive && this.targets[0]) {\n        const t = this.targets;\n        for (let e = t.length - 1; e > 0; e--) {\n          const s = t[e];\n          if (!ht(s) || !s.interactive) return s;\n        }\n        return t[0];\n      }\n      return s;\n    }\n    getViewportPoint(t) {\n      return this._pointer ? this._pointer : this.getPointer(t, !0);\n    }\n    getScenePoint(t) {\n      return this._absolutePointer ? this._absolutePointer : this.getPointer(t);\n    }\n    getPointer(t) {\n      let e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n      const s = this.upperCanvasEl,\n        i = s.getBoundingClientRect();\n      let r = fe(t),\n        n = i.width || 0,\n        o = i.height || 0;\n      n && o || (P in i && E in i && (o = Math.abs(i.top - i.bottom)), A in i && M in i && (n = Math.abs(i.right - i.left))), this.calcOffset(), r.x = r.x - this._offset.left, r.y = r.y - this._offset.top, e || (r = Te(r, void 0, this.viewportTransform));\n      const a = this.getRetinaScaling();\n      1 !== a && (r.x /= a, r.y /= a);\n      const h = 0 === n || 0 === o ? new ot(1, 1) : new ot(s.width / n, s.height / o);\n      return r.multiply(h);\n    }\n    _setDimensionsImpl(t, e) {\n      this._resetTransformEventData(), super._setDimensionsImpl(t, e), this._isCurrentlyDrawing && this.freeDrawingBrush && this.freeDrawingBrush._setBrushStyles(this.contextTop);\n    }\n    _createCacheCanvas() {\n      this.pixelFindCanvasEl = pt(), this.pixelFindContext = this.pixelFindCanvasEl.getContext(\"2d\", {\n        willReadFrequently: !0\n      }), this.setTargetFindTolerance(this.targetFindTolerance);\n    }\n    getTopContext() {\n      return this.elements.upper.ctx;\n    }\n    getSelectionContext() {\n      return this.elements.upper.ctx;\n    }\n    getSelectionElement() {\n      return this.elements.upper.el;\n    }\n    getActiveObject() {\n      return this._activeObject;\n    }\n    getActiveObjects() {\n      const t = this._activeObject;\n      return ie(t) ? t.getObjects() : t ? [t] : [];\n    }\n    _fireSelectionEvents(t, e) {\n      let s = !1,\n        i = !1;\n      const r = this.getActiveObjects(),\n        n = [],\n        o = [];\n      t.forEach(t => {\n        r.includes(t) || (s = !0, t.fire(\"deselected\", {\n          e: e,\n          target: t\n        }), o.push(t));\n      }), r.forEach(i => {\n        t.includes(i) || (s = !0, i.fire(\"selected\", {\n          e: e,\n          target: i\n        }), n.push(i));\n      }), t.length > 0 && r.length > 0 ? (i = !0, s && this.fire(\"selection:updated\", {\n        e: e,\n        selected: n,\n        deselected: o\n      })) : r.length > 0 ? (i = !0, this.fire(\"selection:created\", {\n        e: e,\n        selected: n\n      })) : t.length > 0 && (i = !0, this.fire(\"selection:cleared\", {\n        e: e,\n        deselected: o\n      })), i && (this._objectsToRender = void 0);\n    }\n    setActiveObject(t, e) {\n      const s = this.getActiveObjects(),\n        i = this._setActiveObject(t, e);\n      return this._fireSelectionEvents(s, e), i;\n    }\n    _setActiveObject(t, e) {\n      const s = this._activeObject;\n      return s !== t && !(!this._discardActiveObject(e, t) && this._activeObject) && !t.onSelect({\n        e: e\n      }) && (this._activeObject = t, ie(t) && s !== t && t.set(\"canvas\", this), t.setCoords(), !0);\n    }\n    _discardActiveObject(t, e) {\n      const s = this._activeObject;\n      return !!s && !s.onDeselect({\n        e: t,\n        object: e\n      }) && (this._currentTransform && this._currentTransform.target === s && this.endCurrentTransform(t), ie(s) && s === this._hoveredTarget && (this._hoveredTarget = void 0), this._activeObject = void 0, !0);\n    }\n    discardActiveObject(t) {\n      const e = this.getActiveObjects(),\n        s = this.getActiveObject();\n      e.length && this.fire(\"before:selection:cleared\", {\n        e: t,\n        deselected: [s]\n      });\n      const i = this._discardActiveObject(t);\n      return this._fireSelectionEvents(e, t), i;\n    }\n    endCurrentTransform(t) {\n      const e = this._currentTransform;\n      this._finalizeCurrentTransform(t), e && e.target && (e.target.isMoving = !1), this._currentTransform = null;\n    }\n    _finalizeCurrentTransform(t) {\n      const e = this._currentTransform,\n        s = e.target,\n        i = {\n          e: t,\n          target: s,\n          transform: e,\n          action: e.action\n        };\n      s._scaling && (s._scaling = !1), s.setCoords(), e.actionPerformed && (this.fire(\"object:modified\", i), s.fire(Q, i));\n    }\n    setViewportTransform(t) {\n      super.setViewportTransform(t);\n      const e = this._activeObject;\n      e && e.setCoords();\n    }\n    destroy() {\n      const t = this._activeObject;\n      ie(t) && (t.removeAll(), t.dispose()), delete this._activeObject, super.destroy(), this.pixelFindContext = null, this.pixelFindCanvasEl = void 0;\n    }\n    clear() {\n      this.discardActiveObject(), this._activeObject = void 0, this.clearContext(this.contextTop), super.clear();\n    }\n    drawControls(t) {\n      const e = this._activeObject;\n      e && e._renderControls(t);\n    }\n    _toObject(t, e, s) {\n      const i = this._realizeGroupTransformOnObject(t),\n        r = super._toObject(t, e, s);\n      return t.set(i), r;\n    }\n    _realizeGroupTransformOnObject(t) {\n      const {\n        group: e\n      } = t;\n      if (e && ie(e) && this._activeObject === e) {\n        const s = Yt(t, [\"angle\", \"flipX\", \"flipY\", M, H, N, U, q, P]);\n        return _e(t, e.calcOwnMatrix()), s;\n      }\n      return {};\n    }\n    _setSVGObject(t, e, s) {\n      const i = this._realizeGroupTransformOnObject(e);\n      super._setSVGObject(t, e, s), e.set(i);\n    }\n  }\n  e(gn, \"ownDefaults\", {\n    uniformScaling: !0,\n    uniScaleKey: \"shiftKey\",\n    centeredScaling: !1,\n    centeredRotation: !1,\n    centeredKey: \"altKey\",\n    altActionKey: \"shiftKey\",\n    selection: !0,\n    selectionKey: \"shiftKey\",\n    selectionColor: \"rgba(100, 100, 255, 0.3)\",\n    selectionDashArray: [],\n    selectionBorderColor: \"rgba(255, 255, 255, 0.3)\",\n    selectionLineWidth: 1,\n    selectionFullyContained: !1,\n    hoverCursor: \"move\",\n    moveCursor: \"move\",\n    defaultCursor: \"default\",\n    freeDrawingCursor: \"crosshair\",\n    notAllowedCursor: \"not-allowed\",\n    perPixelTargetFind: !1,\n    targetFindTolerance: 0,\n    skipTargetFind: !1,\n    stopContextMenu: !1,\n    fireRightClick: !1,\n    fireMiddleClick: !1,\n    enablePointerEvents: !1,\n    containerClass: \"canvas-container\",\n    preserveObjectStacking: !1\n  });\n  class fn {\n    constructor(t) {\n      e(this, \"targets\", []), e(this, \"__disposer\", void 0);\n      const s = () => {\n          const {\n            hiddenTextarea: e\n          } = t.getActiveObject() || {};\n          e && e.focus();\n        },\n        i = t.upperCanvasEl;\n      i.addEventListener(\"click\", s), this.__disposer = () => i.removeEventListener(\"click\", s);\n    }\n    exitTextEditing() {\n      this.target = void 0, this.targets.forEach(t => {\n        t.isEditing && t.exitEditing();\n      });\n    }\n    add(t) {\n      this.targets.push(t);\n    }\n    remove(t) {\n      this.unregister(t), it(this.targets, t);\n    }\n    register(t) {\n      this.target = t;\n    }\n    unregister(t) {\n      t === this.target && (this.target = void 0);\n    }\n    onMouseMove(t) {\n      var e;\n      (null === (e = this.target) || void 0 === e ? void 0 : e.isEditing) && this.target.updateSelectionOnMouseMove(t);\n    }\n    clear() {\n      this.targets = [], this.target = void 0;\n    }\n    dispose() {\n      this.clear(), this.__disposer(), delete this.__disposer;\n    }\n  }\n  const pn = [\"target\", \"oldTarget\", \"fireCanvas\", \"e\"],\n    mn = {\n      passive: !1\n    },\n    vn = (t, e) => {\n      const s = t.getViewportPoint(e),\n        i = t.getScenePoint(e);\n      return {\n        viewportPoint: s,\n        scenePoint: i,\n        pointer: s,\n        absolutePointer: i\n      };\n    },\n    yn = function (t) {\n      for (var e = arguments.length, s = new Array(e > 1 ? e - 1 : 0), i = 1; i < e; i++) s[i - 1] = arguments[i];\n      return t.addEventListener(...s);\n    },\n    _n = function (t) {\n      for (var e = arguments.length, s = new Array(e > 1 ? e - 1 : 0), i = 1; i < e; i++) s[i - 1] = arguments[i];\n      return t.removeEventListener(...s);\n    },\n    xn = {\n      mouse: {\n        in: \"over\",\n        out: \"out\",\n        targetIn: \"mouseover\",\n        targetOut: \"mouseout\",\n        canvasIn: \"mouse:over\",\n        canvasOut: \"mouse:out\"\n      },\n      drag: {\n        in: \"enter\",\n        out: \"leave\",\n        targetIn: \"dragenter\",\n        targetOut: \"dragleave\",\n        canvasIn: \"drag:enter\",\n        canvasOut: \"drag:leave\"\n      }\n    };\n  class Cn extends gn {\n    constructor(t) {\n      super(t, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}), e(this, \"_isClick\", void 0), e(this, \"textEditingManager\", new fn(this)), [\"_onMouseDown\", \"_onTouchStart\", \"_onMouseMove\", \"_onMouseUp\", \"_onTouchEnd\", \"_onResize\", \"_onMouseWheel\", \"_onMouseOut\", \"_onMouseEnter\", \"_onContextMenu\", \"_onDoubleClick\", \"_onDragStart\", \"_onDragEnd\", \"_onDragProgress\", \"_onDragOver\", \"_onDragEnter\", \"_onDragLeave\", \"_onDrop\"].forEach(t => {\n        this[t] = this[t].bind(this);\n      }), this.addOrRemove(yn, \"add\");\n    }\n    _getEventPrefix() {\n      return this.enablePointerEvents ? \"pointer\" : \"mouse\";\n    }\n    addOrRemove(t, e) {\n      const s = this.upperCanvasEl,\n        i = this._getEventPrefix();\n      t(oe(s), \"resize\", this._onResize), t(s, i + \"down\", this._onMouseDown), t(s, \"\".concat(i, \"move\"), this._onMouseMove, mn), t(s, \"\".concat(i, \"out\"), this._onMouseOut), t(s, \"\".concat(i, \"enter\"), this._onMouseEnter), t(s, \"wheel\", this._onMouseWheel), t(s, \"contextmenu\", this._onContextMenu), t(s, \"dblclick\", this._onDoubleClick), t(s, \"dragstart\", this._onDragStart), t(s, \"dragend\", this._onDragEnd), t(s, \"dragover\", this._onDragOver), t(s, \"dragenter\", this._onDragEnter), t(s, \"dragleave\", this._onDragLeave), t(s, \"drop\", this._onDrop), this.enablePointerEvents || t(s, \"touchstart\", this._onTouchStart, mn);\n    }\n    removeListeners() {\n      this.addOrRemove(_n, \"remove\");\n      const t = this._getEventPrefix(),\n        e = ne(this.upperCanvasEl);\n      _n(e, \"\".concat(t, \"up\"), this._onMouseUp), _n(e, \"touchend\", this._onTouchEnd, mn), _n(e, \"\".concat(t, \"move\"), this._onMouseMove, mn), _n(e, \"touchmove\", this._onMouseMove, mn), clearTimeout(this._willAddMouseDown);\n    }\n    _onMouseWheel(t) {\n      this.__onMouseWheel(t);\n    }\n    _onMouseOut(t) {\n      const e = this._hoveredTarget,\n        s = i({\n          e: t\n        }, vn(this, t));\n      this.fire(\"mouse:out\", i(i({}, s), {}, {\n        target: e\n      })), this._hoveredTarget = void 0, e && e.fire(\"mouseout\", i({}, s)), this._hoveredTargets.forEach(t => {\n        this.fire(\"mouse:out\", i(i({}, s), {}, {\n          target: t\n        })), t && t.fire(\"mouseout\", i({}, s));\n      }), this._hoveredTargets = [];\n    }\n    _onMouseEnter(t) {\n      this._currentTransform || this.findTarget(t) || (this.fire(\"mouse:over\", i({\n        e: t\n      }, vn(this, t))), this._hoveredTarget = void 0, this._hoveredTargets = []);\n    }\n    _onDragStart(t) {\n      this._isClick = !1;\n      const e = this.getActiveObject();\n      if (e && e.onDragStart(t)) {\n        this._dragSource = e;\n        const s = {\n          e: t,\n          target: e\n        };\n        return this.fire(\"dragstart\", s), e.fire(\"dragstart\", s), void yn(this.upperCanvasEl, \"drag\", this._onDragProgress);\n      }\n      me(t);\n    }\n    _renderDragEffects(t, e, s) {\n      let i = !1;\n      const r = this._dropTarget;\n      r && r !== e && r !== s && (r.clearContextTop(), i = !0), null == e || e.clearContextTop(), s !== e && (null == s || s.clearContextTop());\n      const n = this.contextTop;\n      n.save(), n.transform(...this.viewportTransform), e && (n.save(), e.transform(n), e.renderDragSourceEffect(t), n.restore(), i = !0), s && (n.save(), s.transform(n), s.renderDropTargetEffect(t), n.restore(), i = !0), n.restore(), i && (this.contextTopDirty = !0);\n    }\n    _onDragEnd(t) {\n      const e = !!t.dataTransfer && t.dataTransfer.dropEffect !== j,\n        s = e ? this._activeObject : void 0,\n        i = {\n          e: t,\n          target: this._dragSource,\n          subTargets: this.targets,\n          dragSource: this._dragSource,\n          didDrop: e,\n          dropTarget: s\n        };\n      _n(this.upperCanvasEl, \"drag\", this._onDragProgress), this.fire(\"dragend\", i), this._dragSource && this._dragSource.fire(\"dragend\", i), delete this._dragSource, this._onMouseUp(t);\n    }\n    _onDragProgress(t) {\n      const e = {\n        e: t,\n        target: this._dragSource,\n        dragSource: this._dragSource,\n        dropTarget: this._draggedoverTarget\n      };\n      this.fire(\"drag\", e), this._dragSource && this._dragSource.fire(\"drag\", e);\n    }\n    findDragTargets(t) {\n      this.targets = [];\n      return {\n        target: this._searchPossibleTargets(this._objects, this.getViewportPoint(t)),\n        targets: [...this.targets]\n      };\n    }\n    _onDragOver(t) {\n      const e = \"dragover\",\n        {\n          target: s,\n          targets: i\n        } = this.findDragTargets(t),\n        r = this._dragSource,\n        n = {\n          e: t,\n          target: s,\n          subTargets: i,\n          dragSource: r,\n          canDrop: !1,\n          dropTarget: void 0\n        };\n      let o;\n      this.fire(e, n), this._fireEnterLeaveEvents(s, n), s && (s.canDrop(t) && (o = s), s.fire(e, n));\n      for (let s = 0; s < i.length; s++) {\n        const r = i[s];\n        r.canDrop(t) && (o = r), r.fire(e, n);\n      }\n      this._renderDragEffects(t, r, o), this._dropTarget = o;\n    }\n    _onDragEnter(t) {\n      const {\n          target: e,\n          targets: s\n        } = this.findDragTargets(t),\n        i = {\n          e: t,\n          target: e,\n          subTargets: s,\n          dragSource: this._dragSource\n        };\n      this.fire(\"dragenter\", i), this._fireEnterLeaveEvents(e, i);\n    }\n    _onDragLeave(t) {\n      const e = {\n        e: t,\n        target: this._draggedoverTarget,\n        subTargets: this.targets,\n        dragSource: this._dragSource\n      };\n      this.fire(\"dragleave\", e), this._fireEnterLeaveEvents(void 0, e), this._renderDragEffects(t, this._dragSource), this._dropTarget = void 0, this.targets = [], this._hoveredTargets = [];\n    }\n    _onDrop(t) {\n      const {\n          target: e,\n          targets: s\n        } = this.findDragTargets(t),\n        r = this._basicEventHandler(\"drop:before\", i({\n          e: t,\n          target: e,\n          subTargets: s,\n          dragSource: this._dragSource\n        }, vn(this, t)));\n      r.didDrop = !1, r.dropTarget = void 0, this._basicEventHandler(\"drop\", r), this.fire(\"drop:after\", r);\n    }\n    _onContextMenu(t) {\n      const e = this.findTarget(t),\n        s = this.targets || [],\n        i = this._basicEventHandler(\"contextmenu:before\", {\n          e: t,\n          target: e,\n          subTargets: s\n        });\n      return this.stopContextMenu && me(t), this._basicEventHandler(\"contextmenu\", i), !1;\n    }\n    _onDoubleClick(t) {\n      this._cacheTransformEventData(t), this._handleEvent(t, \"dblclick\"), this._resetTransformEventData();\n    }\n    getPointerId(t) {\n      const e = t.changedTouches;\n      return e ? e[0] && e[0].identifier : this.enablePointerEvents ? t.pointerId : -1;\n    }\n    _isMainEvent(t) {\n      return !0 === t.isPrimary || !1 !== t.isPrimary && (\"touchend\" === t.type && 0 === t.touches.length || !t.changedTouches || t.changedTouches[0].identifier === this.mainTouchId);\n    }\n    _onTouchStart(t) {\n      let e = !this.allowTouchScrolling;\n      const s = this._activeObject;\n      void 0 === this.mainTouchId && (this.mainTouchId = this.getPointerId(t)), this.__onMouseDown(t), (this.isDrawingMode || s && this._target === s) && (e = !0), e && t.preventDefault(), this._resetTransformEventData();\n      const i = this.upperCanvasEl,\n        r = this._getEventPrefix(),\n        n = ne(i);\n      yn(n, \"touchend\", this._onTouchEnd, mn), e && yn(n, \"touchmove\", this._onMouseMove, mn), _n(i, \"\".concat(r, \"down\"), this._onMouseDown);\n    }\n    _onMouseDown(t) {\n      this.__onMouseDown(t), this._resetTransformEventData();\n      const e = this.upperCanvasEl,\n        s = this._getEventPrefix();\n      _n(e, \"\".concat(s, \"move\"), this._onMouseMove, mn);\n      const i = ne(e);\n      yn(i, \"\".concat(s, \"up\"), this._onMouseUp), yn(i, \"\".concat(s, \"move\"), this._onMouseMove, mn);\n    }\n    _onTouchEnd(t) {\n      if (t.touches.length > 0) return;\n      this.__onMouseUp(t), this._resetTransformEventData(), delete this.mainTouchId;\n      const e = this._getEventPrefix(),\n        s = ne(this.upperCanvasEl);\n      _n(s, \"touchend\", this._onTouchEnd, mn), _n(s, \"touchmove\", this._onMouseMove, mn), this._willAddMouseDown && clearTimeout(this._willAddMouseDown), this._willAddMouseDown = setTimeout(() => {\n        yn(this.upperCanvasEl, \"\".concat(e, \"down\"), this._onMouseDown), this._willAddMouseDown = 0;\n      }, 400);\n    }\n    _onMouseUp(t) {\n      this.__onMouseUp(t), this._resetTransformEventData();\n      const e = this.upperCanvasEl,\n        s = this._getEventPrefix();\n      if (this._isMainEvent(t)) {\n        const t = ne(this.upperCanvasEl);\n        _n(t, \"\".concat(s, \"up\"), this._onMouseUp), _n(t, \"\".concat(s, \"move\"), this._onMouseMove, mn), yn(e, \"\".concat(s, \"move\"), this._onMouseMove, mn);\n      }\n    }\n    _onMouseMove(t) {\n      const e = this.getActiveObject();\n      !this.allowTouchScrolling && (!e || !e.shouldStartDragging(t)) && t.preventDefault && t.preventDefault(), this.__onMouseMove(t);\n    }\n    _onResize() {\n      this.calcOffset(), this._resetTransformEventData();\n    }\n    _shouldRender(t) {\n      const e = this.getActiveObject();\n      return !!e != !!t || e && t && e !== t;\n    }\n    __onMouseUp(t) {\n      var e;\n      this._cacheTransformEventData(t), this._handleEvent(t, \"up:before\");\n      const s = this._currentTransform,\n        i = this._isClick,\n        r = this._target,\n        {\n          button: n\n        } = t;\n      if (n) return (this.fireMiddleClick && 1 === n || this.fireRightClick && 2 === n) && this._handleEvent(t, \"up\"), void this._resetTransformEventData();\n      if (this.isDrawingMode && this._isCurrentlyDrawing) return void this._onMouseUpInDrawingMode(t);\n      if (!this._isMainEvent(t)) return;\n      let o,\n        a,\n        h = !1;\n      if (s && (this._finalizeCurrentTransform(t), h = s.actionPerformed), !i) {\n        const e = r === this._activeObject;\n        this.handleSelection(t), h || (h = this._shouldRender(r) || !e && r === this._activeObject);\n      }\n      if (r) {\n        const e = r.findControl(this.getViewportPoint(t), pe(t)),\n          {\n            key: i,\n            control: n\n          } = e || {};\n        if (a = i, r.selectable && r !== this._activeObject && \"up\" === r.activeOn) this.setActiveObject(r, t), h = !0;else if (n) {\n          const e = n.getMouseUpHandler(t, r, n);\n          e && (o = this.getScenePoint(t), e.call(n, t, s, o.x, o.y));\n        }\n        r.isMoving = !1;\n      }\n      if (s && (s.target !== r || s.corner !== a)) {\n        const e = s.target && s.target.controls[s.corner],\n          i = e && e.getMouseUpHandler(t, s.target, e);\n        o = o || this.getScenePoint(t), i && i.call(e, t, s, o.x, o.y);\n      }\n      this._setCursorFromEvent(t, r), this._handleEvent(t, \"up\"), this._groupSelector = null, this._currentTransform = null, r && (r.__corner = void 0), h ? this.requestRenderAll() : i || null !== (e = this._activeObject) && void 0 !== e && e.isEditing || this.renderTop();\n    }\n    _basicEventHandler(t, e) {\n      const {\n        target: s,\n        subTargets: i = []\n      } = e;\n      this.fire(t, e), s && s.fire(t, e);\n      for (let r = 0; r < i.length; r++) i[r] !== s && i[r].fire(t, e);\n      return e;\n    }\n    _handleEvent(t, e) {\n      const s = this._target,\n        r = this.targets || [],\n        n = i(i({\n          e: t,\n          target: s,\n          subTargets: r\n        }, vn(this, t)), {}, {\n          transform: this._currentTransform\n        }, \"up:before\" === e || \"up\" === e ? {\n          isClick: this._isClick,\n          currentTarget: this.findTarget(t),\n          currentSubTargets: this.targets\n        } : {});\n      this.fire(\"mouse:\".concat(e), n), s && s.fire(\"mouse\".concat(e), n);\n      for (let t = 0; t < r.length; t++) r[t] !== s && r[t].fire(\"mouse\".concat(e), n);\n    }\n    _onMouseDownInDrawingMode(t) {\n      this._isCurrentlyDrawing = !0, this.getActiveObject() && (this.discardActiveObject(t), this.requestRenderAll());\n      const e = this.getScenePoint(t);\n      this.freeDrawingBrush && this.freeDrawingBrush.onMouseDown(e, {\n        e: t,\n        pointer: e\n      }), this._handleEvent(t, \"down\");\n    }\n    _onMouseMoveInDrawingMode(t) {\n      if (this._isCurrentlyDrawing) {\n        const e = this.getScenePoint(t);\n        this.freeDrawingBrush && this.freeDrawingBrush.onMouseMove(e, {\n          e: t,\n          pointer: e\n        });\n      }\n      this.setCursor(this.freeDrawingCursor), this._handleEvent(t, \"move\");\n    }\n    _onMouseUpInDrawingMode(t) {\n      const e = this.getScenePoint(t);\n      this.freeDrawingBrush ? this._isCurrentlyDrawing = !!this.freeDrawingBrush.onMouseUp({\n        e: t,\n        pointer: e\n      }) : this._isCurrentlyDrawing = !1, this._handleEvent(t, \"up\");\n    }\n    __onMouseDown(t) {\n      this._isClick = !0, this._cacheTransformEventData(t), this._handleEvent(t, \"down:before\");\n      let e = this._target;\n      const {\n        button: s\n      } = t;\n      if (s) return (this.fireMiddleClick && 1 === s || this.fireRightClick && 2 === s) && this._handleEvent(t, \"down\"), void this._resetTransformEventData();\n      if (this.isDrawingMode) return void this._onMouseDownInDrawingMode(t);\n      if (!this._isMainEvent(t)) return;\n      if (this._currentTransform) return;\n      let i = this._shouldRender(e),\n        r = !1;\n      if (this.handleMultiSelection(t, e) ? (e = this._activeObject, r = !0, i = !0) : this._shouldClearSelection(t, e) && this.discardActiveObject(t), this.selection && (!e || !e.selectable && !e.isEditing && e !== this._activeObject)) {\n        const e = this.getScenePoint(t);\n        this._groupSelector = {\n          x: e.x,\n          y: e.y,\n          deltaY: 0,\n          deltaX: 0\n        };\n      }\n      if (e) {\n        const s = e === this._activeObject;\n        e.selectable && \"down\" === e.activeOn && this.setActiveObject(e, t);\n        const i = e.findControl(this.getViewportPoint(t), pe(t));\n        if (e === this._activeObject && (i || !r)) {\n          this._setupCurrentTransform(t, e, s);\n          const r = i ? i.control : void 0,\n            n = this.getScenePoint(t),\n            o = r && r.getMouseDownHandler(t, e, r);\n          o && o.call(r, t, this._currentTransform, n.x, n.y);\n        }\n      }\n      i && (this._objectsToRender = void 0), this._handleEvent(t, \"down\"), i && this.requestRenderAll();\n    }\n    _resetTransformEventData() {\n      this._target = this._pointer = this._absolutePointer = void 0;\n    }\n    _cacheTransformEventData(t) {\n      this._resetTransformEventData(), this._pointer = this.getViewportPoint(t), this._absolutePointer = Te(this._pointer, void 0, this.viewportTransform), this._target = this._currentTransform ? this._currentTransform.target : this.findTarget(t);\n    }\n    __onMouseMove(t) {\n      if (this._isClick = !1, this._cacheTransformEventData(t), this._handleEvent(t, \"move:before\"), this.isDrawingMode) return void this._onMouseMoveInDrawingMode(t);\n      if (!this._isMainEvent(t)) return;\n      const e = this._groupSelector;\n      if (e) {\n        const s = this.getScenePoint(t);\n        e.deltaX = s.x - e.x, e.deltaY = s.y - e.y, this.renderTop();\n      } else if (this._currentTransform) this._transformObject(t);else {\n        const e = this.findTarget(t);\n        this._setCursorFromEvent(t, e), this._fireOverOutEvents(t, e);\n      }\n      this.textEditingManager.onMouseMove(t), this._handleEvent(t, \"move\"), this._resetTransformEventData();\n    }\n    _fireOverOutEvents(t, e) {\n      const s = this._hoveredTarget,\n        i = this._hoveredTargets,\n        r = this.targets,\n        n = Math.max(i.length, r.length);\n      this.fireSyntheticInOutEvents(\"mouse\", {\n        e: t,\n        target: e,\n        oldTarget: s,\n        fireCanvas: !0\n      });\n      for (let e = 0; e < n; e++) this.fireSyntheticInOutEvents(\"mouse\", {\n        e: t,\n        target: r[e],\n        oldTarget: i[e]\n      });\n      this._hoveredTarget = e, this._hoveredTargets = this.targets.concat();\n    }\n    _fireEnterLeaveEvents(t, e) {\n      const s = this._draggedoverTarget,\n        r = this._hoveredTargets,\n        n = this.targets,\n        o = Math.max(r.length, n.length);\n      this.fireSyntheticInOutEvents(\"drag\", i(i({}, e), {}, {\n        target: t,\n        oldTarget: s,\n        fireCanvas: !0\n      }));\n      for (let t = 0; t < o; t++) this.fireSyntheticInOutEvents(\"drag\", i(i({}, e), {}, {\n        target: n[t],\n        oldTarget: r[t]\n      }));\n      this._draggedoverTarget = t;\n    }\n    fireSyntheticInOutEvents(t, e) {\n      let {\n          target: s,\n          oldTarget: n,\n          fireCanvas: o,\n          e: a\n        } = e,\n        h = r(e, pn);\n      const {\n          targetIn: c,\n          targetOut: l,\n          canvasIn: u,\n          canvasOut: d\n        } = xn[t],\n        g = n !== s;\n      if (n && g) {\n        const t = i(i({}, h), {}, {\n          e: a,\n          target: n,\n          nextTarget: s\n        }, vn(this, a));\n        o && this.fire(d, t), n.fire(l, t);\n      }\n      if (s && g) {\n        const t = i(i({}, h), {}, {\n          e: a,\n          target: s,\n          previousTarget: n\n        }, vn(this, a));\n        o && this.fire(u, t), s.fire(c, t);\n      }\n    }\n    __onMouseWheel(t) {\n      this._cacheTransformEventData(t), this._handleEvent(t, \"wheel\"), this._resetTransformEventData();\n    }\n    _transformObject(t) {\n      const e = this.getScenePoint(t),\n        s = this._currentTransform,\n        i = s.target,\n        r = i.group ? Te(e, void 0, i.group.calcTransformMatrix()) : e;\n      s.shiftKey = t.shiftKey, s.altKey = !!this.centeredKey && t[this.centeredKey], this._performTransformAction(t, s, r), s.actionPerformed && this.requestRenderAll();\n    }\n    _performTransformAction(t, e, s) {\n      const {\n          action: i,\n          actionHandler: r,\n          target: n\n        } = e,\n        o = !!r && r(t, e, s.x, s.y);\n      o && n.setCoords(), \"drag\" === i && o && (e.target.isMoving = !0, this.setCursor(e.target.moveCursor || this.moveCursor)), e.actionPerformed = e.actionPerformed || o;\n    }\n    _setCursorFromEvent(t, e) {\n      if (!e) return void this.setCursor(this.defaultCursor);\n      let s = e.hoverCursor || this.hoverCursor;\n      const i = ie(this._activeObject) ? this._activeObject : null,\n        r = (!i || e.group !== i) && e.findControl(this.getViewportPoint(t));\n      if (r) {\n        const s = r.control;\n        this.setCursor(s.cursorStyleHandler(t, s, e));\n      } else e.subTargetCheck && this.targets.concat().reverse().map(t => {\n        s = t.hoverCursor || s;\n      }), this.setCursor(s);\n    }\n    handleMultiSelection(t, e) {\n      const s = this._activeObject,\n        i = ie(s);\n      if (s && this._isSelectionKeyPressed(t) && this.selection && e && e.selectable && (s !== e || i) && (i || !e.isDescendantOf(s) && !s.isDescendantOf(e)) && !e.onSelect({\n        e: t\n      }) && !s.getActiveControl()) {\n        if (i) {\n          const i = s.getObjects();\n          if (e === s) {\n            const s = this.getViewportPoint(t);\n            if (!(e = this.searchPossibleTargets(i, s) || this.searchPossibleTargets(this._objects, s)) || !e.selectable) return !1;\n          }\n          e.group === s ? (s.remove(e), this._hoveredTarget = e, this._hoveredTargets = [...this.targets], 1 === s.size() && this._setActiveObject(s.item(0), t)) : (s.multiSelectAdd(e), this._hoveredTarget = s, this._hoveredTargets = [...this.targets]), this._fireSelectionEvents(i, t);\n        } else {\n          s.isEditing && s.exitEditing();\n          const i = new (tt.getClass(\"ActiveSelection\"))([], {\n            canvas: this\n          });\n          i.multiSelectAdd(s, e), this._hoveredTarget = i, this._setActiveObject(i, t), this._fireSelectionEvents([s], t);\n        }\n        return !0;\n      }\n      return !1;\n    }\n    handleSelection(t) {\n      if (!this.selection || !this._groupSelector) return !1;\n      const {\n          x: e,\n          y: s,\n          deltaX: i,\n          deltaY: r\n        } = this._groupSelector,\n        n = new ot(e, s),\n        o = n.add(new ot(i, r)),\n        a = n.min(o),\n        h = n.max(o).subtract(a),\n        c = this.collectObjects({\n          left: a.x,\n          top: a.y,\n          width: h.x,\n          height: h.y\n        }, {\n          includeIntersecting: !this.selectionFullyContained\n        }),\n        l = n.eq(o) ? c[0] ? [c[0]] : [] : c.length > 1 ? c.filter(e => !e.onSelect({\n          e: t\n        })).reverse() : c;\n      if (1 === l.length) this.setActiveObject(l[0], t);else if (l.length > 1) {\n        const e = tt.getClass(\"ActiveSelection\");\n        this.setActiveObject(new e(l, {\n          canvas: this\n        }), t);\n      }\n      return this._groupSelector = null, !0;\n    }\n    clear() {\n      this.textEditingManager.clear(), super.clear();\n    }\n    destroy() {\n      this.removeListeners(), this.textEditingManager.dispose(), super.destroy();\n    }\n  }\n  const bn = {\n      x1: 0,\n      y1: 0,\n      x2: 0,\n      y2: 0\n    },\n    Sn = i(i({}, bn), {}, {\n      r1: 0,\n      r2: 0\n    }),\n    wn = (t, e) => isNaN(t) && \"number\" == typeof e ? e : t,\n    Tn = /^(\\d+\\.\\d+)%|(\\d+)%$/;\n  function On(t) {\n    return t && Tn.test(t);\n  }\n  function kn(t, e) {\n    const s = \"number\" == typeof t ? t : \"string\" == typeof t ? parseFloat(t) / (On(t) ? 100 : 1) : NaN;\n    return gs(0, wn(s, e), 1);\n  }\n  const Dn = /\\s*;\\s*/,\n    Mn = /\\s*:\\s*/;\n  function Pn(t, e) {\n    let s, i;\n    const r = t.getAttribute(\"style\");\n    if (r) {\n      const t = r.split(Dn);\n      \"\" === t[t.length - 1] && t.pop();\n      for (let e = t.length; e--;) {\n        const [r, n] = t[e].split(Mn).map(t => t.trim());\n        \"stop-color\" === r ? s = n : \"stop-opacity\" === r && (i = n);\n      }\n    }\n    const n = new qt(s || t.getAttribute(\"stop-color\") || \"rgb(0,0,0)\");\n    return {\n      offset: kn(t.getAttribute(\"offset\"), 0),\n      color: n.toRgb(),\n      opacity: wn(parseFloat(i || t.getAttribute(\"stop-opacity\") || \"\"), 1) * n.getAlpha() * e\n    };\n  }\n  function En(t, e) {\n    const s = [],\n      i = t.getElementsByTagName(\"stop\"),\n      r = kn(e, 1);\n    for (let t = i.length; t--;) s.push(Pn(i[t], r));\n    return s;\n  }\n  function An(t) {\n    return \"linearGradient\" === t.nodeName || \"LINEARGRADIENT\" === t.nodeName ? \"linear\" : \"radial\";\n  }\n  function jn(t) {\n    return \"userSpaceOnUse\" === t.getAttribute(\"gradientUnits\") ? \"pixels\" : \"percentage\";\n  }\n  function Fn(t, e) {\n    return t.getAttribute(e);\n  }\n  function Ln(t, e) {\n    return function (t, e) {\n      let s,\n        {\n          width: i,\n          height: r,\n          gradientUnits: n\n        } = e;\n      return Object.keys(t).reduce((e, o) => {\n        const a = t[o];\n        return \"Infinity\" === a ? s = 1 : \"-Infinity\" === a ? s = 0 : (s = \"string\" == typeof a ? parseFloat(a) : a, \"string\" == typeof a && On(a) && (s *= .01, \"pixels\" === n && (\"x1\" !== o && \"x2\" !== o && \"r2\" !== o || (s *= i), \"y1\" !== o && \"y2\" !== o || (s *= r)))), e[o] = s, e;\n      }, {});\n    }(\"linear\" === An(t) ? function (t) {\n      return {\n        x1: Fn(t, \"x1\") || 0,\n        y1: Fn(t, \"y1\") || 0,\n        x2: Fn(t, \"x2\") || \"100%\",\n        y2: Fn(t, \"y2\") || 0\n      };\n    }(t) : function (t) {\n      return {\n        x1: Fn(t, \"fx\") || Fn(t, \"cx\") || \"50%\",\n        y1: Fn(t, \"fy\") || Fn(t, \"cy\") || \"50%\",\n        r1: 0,\n        x2: Fn(t, \"cx\") || \"50%\",\n        y2: Fn(t, \"cy\") || \"50%\",\n        r2: Fn(t, \"r\") || \"50%\"\n      };\n    }(t), i(i({}, e), {}, {\n      gradientUnits: jn(t)\n    }));\n  }\n  class Rn {\n    constructor(t) {\n      const {\n        type: e = \"linear\",\n        gradientUnits: s = \"pixels\",\n        coords: r = {},\n        colorStops: n = [],\n        offsetX: o = 0,\n        offsetY: a = 0,\n        gradientTransform: h,\n        id: c\n      } = t || {};\n      Object.assign(this, {\n        type: e,\n        gradientUnits: s,\n        coords: i(i({}, \"radial\" === e ? Sn : bn), r),\n        colorStops: n,\n        offsetX: o,\n        offsetY: a,\n        gradientTransform: h,\n        id: c ? \"\".concat(c, \"_\").concat(ft()) : ft()\n      });\n    }\n    addColorStop(t) {\n      for (const e in t) {\n        const s = new qt(t[e]);\n        this.colorStops.push({\n          offset: parseFloat(e),\n          color: s.toRgb(),\n          opacity: s.getAlpha()\n        });\n      }\n      return this;\n    }\n    toObject(t) {\n      return i(i({}, Yt(this, t)), {}, {\n        type: this.type,\n        coords: i({}, this.coords),\n        colorStops: this.colorStops.map(t => i({}, t)),\n        offsetX: this.offsetX,\n        offsetY: this.offsetY,\n        gradientUnits: this.gradientUnits,\n        gradientTransform: this.gradientTransform ? [...this.gradientTransform] : void 0\n      });\n    }\n    toSVG(t) {\n      let {\n        additionalTransform: e\n      } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      const s = [],\n        r = this.gradientTransform ? this.gradientTransform.concat() : T.concat(),\n        n = \"pixels\" === this.gradientUnits ? \"userSpaceOnUse\" : \"objectBoundingBox\",\n        o = this.colorStops.map(t => i({}, t)).sort((t, e) => t.offset - e.offset);\n      let a = -this.offsetX,\n        h = -this.offsetY;\n      var c;\n      \"objectBoundingBox\" === n ? (a /= t.width, h /= t.height) : (a += t.width / 2, h += t.height / 2), (c = t) && \"function\" == typeof c._renderPathCommands && \"percentage\" !== this.gradientUnits && (a -= t.pathOffset.x, h -= t.pathOffset.y), r[4] -= a, r[5] -= h;\n      const l = ['id=\"SVGID_'.concat(this.id, '\"'), 'gradientUnits=\"'.concat(n, '\"'), 'gradientTransform=\"'.concat(e ? e + \" \" : \"\").concat(Zt(r), '\"'), \"\"].join(\" \");\n      if (\"linear\" === this.type) {\n        const {\n          x1: t,\n          y1: e,\n          x2: i,\n          y2: r\n        } = this.coords;\n        s.push(\"<linearGradient \", l, ' x1=\"', t, '\" y1=\"', e, '\" x2=\"', i, '\" y2=\"', r, '\">\\n');\n      } else if (\"radial\" === this.type) {\n        const {\n            x1: t,\n            y1: e,\n            x2: i,\n            y2: r,\n            r1: n,\n            r2: a\n          } = this.coords,\n          h = n > a;\n        s.push(\"<radialGradient \", l, ' cx=\"', h ? t : i, '\" cy=\"', h ? e : r, '\" r=\"', h ? n : a, '\" fx=\"', h ? i : t, '\" fy=\"', h ? r : e, '\">\\n'), h && (o.reverse(), o.forEach(t => {\n          t.offset = 1 - t.offset;\n        }));\n        const c = Math.min(n, a);\n        if (c > 0) {\n          const t = c / Math.max(n, a);\n          o.forEach(e => {\n            e.offset += t * (1 - e.offset);\n          });\n        }\n      }\n      return o.forEach(t => {\n        let {\n          color: e,\n          offset: i,\n          opacity: r\n        } = t;\n        s.push(\"<stop \", 'offset=\"', 100 * i + \"%\", '\" style=\"stop-color:', e, void 0 !== r ? \";stop-opacity: \" + r : \";\", '\"/>\\n');\n      }), s.push(\"linear\" === this.type ? \"</linearGradient>\" : \"</radialGradient>\", \"\\n\"), s.join(\"\");\n    }\n    toLive(t) {\n      const {\n          x1: e,\n          y1: s,\n          x2: i,\n          y2: r,\n          r1: n,\n          r2: o\n        } = this.coords,\n        a = \"linear\" === this.type ? t.createLinearGradient(e, s, i, r) : t.createRadialGradient(e, s, n, i, r, o);\n      return this.colorStops.forEach(t => {\n        let {\n          color: e,\n          opacity: s,\n          offset: i\n        } = t;\n        a.addColorStop(i, void 0 !== s ? new qt(e).setAlpha(s).toRgba() : e);\n      }), a;\n    }\n    static async fromObject(t) {\n      const {\n        colorStops: e,\n        gradientTransform: s\n      } = t;\n      return new this(i(i({}, t), {}, {\n        colorStops: e ? e.map(t => i({}, t)) : void 0,\n        gradientTransform: s ? [...s] : void 0\n      }));\n    }\n    static fromElement(t, e, s) {\n      const r = jn(t),\n        n = e._findCenterFromElement();\n      return new this(i({\n        id: t.getAttribute(\"id\") || void 0,\n        type: An(t),\n        coords: Ln(t, {\n          width: s.viewBoxWidth || s.width,\n          height: s.viewBoxHeight || s.height\n        }),\n        colorStops: En(t, s.opacity),\n        gradientUnits: r,\n        gradientTransform: or(t.getAttribute(\"gradientTransform\") || \"\")\n      }, \"pixels\" === r ? {\n        offsetX: e.width / 2 - n.x,\n        offsetY: e.height / 2 - n.y\n      } : {\n        offsetX: 0,\n        offsetY: 0\n      }));\n    }\n  }\n  e(Rn, \"type\", \"Gradient\"), tt.setClass(Rn, \"gradient\"), tt.setClass(Rn, \"linear\"), tt.setClass(Rn, \"radial\");\n  const In = [\"type\", \"source\", \"patternTransform\"];\n  class Bn {\n    get type() {\n      return \"pattern\";\n    }\n    set type(t) {\n      h(\"warn\", \"Setting type has no effect\", t);\n    }\n    constructor(t) {\n      e(this, \"repeat\", \"repeat\"), e(this, \"offsetX\", 0), e(this, \"offsetY\", 0), e(this, \"crossOrigin\", \"\"), this.id = ft(), Object.assign(this, t);\n    }\n    isImageSource() {\n      return !!this.source && \"string\" == typeof this.source.src;\n    }\n    isCanvasSource() {\n      return !!this.source && !!this.source.toDataURL;\n    }\n    sourceToString() {\n      return this.isImageSource() ? this.source.src : this.isCanvasSource() ? this.source.toDataURL() : \"\";\n    }\n    toLive(t) {\n      return this.source && (!this.isImageSource() || this.source.complete && 0 !== this.source.naturalWidth && 0 !== this.source.naturalHeight) ? t.createPattern(this.source, this.repeat) : null;\n    }\n    toObject() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n      const {\n        repeat: e,\n        crossOrigin: s\n      } = this;\n      return i(i({}, Yt(this, t)), {}, {\n        type: \"pattern\",\n        source: this.sourceToString(),\n        repeat: e,\n        crossOrigin: s,\n        offsetX: Kt(this.offsetX, a.NUM_FRACTION_DIGITS),\n        offsetY: Kt(this.offsetY, a.NUM_FRACTION_DIGITS),\n        patternTransform: this.patternTransform ? [...this.patternTransform] : null\n      });\n    }\n    toSVG(t) {\n      let {\n        width: e,\n        height: s\n      } = t;\n      const {\n          source: i,\n          repeat: r,\n          id: n\n        } = this,\n        o = wn(this.offsetX / e, 0),\n        a = wn(this.offsetY / s, 0),\n        h = \"repeat-y\" === r || \"no-repeat\" === r ? 1 + Math.abs(o || 0) : wn(i.width / e, 0),\n        c = \"repeat-x\" === r || \"no-repeat\" === r ? 1 + Math.abs(a || 0) : wn(i.height / s, 0);\n      return ['<pattern id=\"SVGID_'.concat(n, '\" x=\"').concat(o, '\" y=\"').concat(a, '\" width=\"').concat(h, '\" height=\"').concat(c, '\">'), '<image x=\"0\" y=\"0\" width=\"'.concat(i.width, '\" height=\"').concat(i.height, '\" xlink:href=\"').concat(this.sourceToString(), '\"></image>'), \"</pattern>\", \"\"].join(\"\\n\");\n    }\n    static async fromObject(t, e) {\n      let {\n          type: s,\n          source: n,\n          patternTransform: o\n        } = t,\n        a = r(t, In);\n      const h = await It(n, i(i({}, e), {}, {\n        crossOrigin: a.crossOrigin\n      }));\n      return new this(i(i({}, a), {}, {\n        patternTransform: o && o.slice(0),\n        source: h\n      }));\n    }\n  }\n  e(Bn, \"type\", \"Pattern\"), tt.setClass(Bn), tt.setClass(Bn, \"pattern\");\n  class Xn {\n    constructor(t) {\n      e(this, \"color\", \"rgb(0, 0, 0)\"), e(this, \"width\", 1), e(this, \"shadow\", null), e(this, \"strokeLineCap\", \"round\"), e(this, \"strokeLineJoin\", \"round\"), e(this, \"strokeMiterLimit\", 10), e(this, \"strokeDashArray\", null), e(this, \"limitedToCanvasSize\", !1), this.canvas = t;\n    }\n    _setBrushStyles(t) {\n      t.strokeStyle = this.color, t.lineWidth = this.width, t.lineCap = this.strokeLineCap, t.miterLimit = this.strokeMiterLimit, t.lineJoin = this.strokeLineJoin, t.setLineDash(this.strokeDashArray || []);\n    }\n    _saveAndTransform(t) {\n      const e = this.canvas.viewportTransform;\n      t.save(), t.transform(e[0], e[1], e[2], e[3], e[4], e[5]);\n    }\n    needsFullRender() {\n      return new qt(this.color).getAlpha() < 1 || !!this.shadow;\n    }\n    _setShadow() {\n      if (!this.shadow || !this.canvas) return;\n      const t = this.canvas,\n        e = this.shadow,\n        s = t.contextTop,\n        i = t.getZoom() * t.getRetinaScaling();\n      s.shadowColor = e.color, s.shadowBlur = e.blur * i, s.shadowOffsetX = e.offsetX * i, s.shadowOffsetY = e.offsetY * i;\n    }\n    _resetShadow() {\n      const t = this.canvas.contextTop;\n      t.shadowColor = \"\", t.shadowBlur = t.shadowOffsetX = t.shadowOffsetY = 0;\n    }\n    _isOutSideCanvas(t) {\n      return t.x < 0 || t.x > this.canvas.getWidth() || t.y < 0 || t.y > this.canvas.getHeight();\n    }\n  }\n  const Yn = [\"path\", \"left\", \"top\"],\n    Wn = [\"d\"];\n  class Vn extends _i {\n    constructor(t) {\n      let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n        {\n          path: s,\n          left: i,\n          top: n\n        } = e,\n        o = r(e, Yn);\n      super(), Object.assign(this, Vn.ownDefaults), this.setOptions(o), this._setPath(t || [], !0), \"number\" == typeof i && this.set(M, i), \"number\" == typeof n && this.set(P, n);\n    }\n    _setPath(t, e) {\n      this.path = Yr(Array.isArray(t) ? t : rn(t)), this.setBoundingBox(e);\n    }\n    _findCenterFromElement() {\n      const t = this._calcBoundsFromPath();\n      return new ot(t.left + t.width / 2, t.top + t.height / 2);\n    }\n    _renderPathCommands(t) {\n      const e = -this.pathOffset.x,\n        s = -this.pathOffset.y;\n      t.beginPath();\n      for (const i of this.path) switch (i[0]) {\n        case \"L\":\n          t.lineTo(i[1] + e, i[2] + s);\n          break;\n        case \"M\":\n          t.moveTo(i[1] + e, i[2] + s);\n          break;\n        case \"C\":\n          t.bezierCurveTo(i[1] + e, i[2] + s, i[3] + e, i[4] + s, i[5] + e, i[6] + s);\n          break;\n        case \"Q\":\n          t.quadraticCurveTo(i[1] + e, i[2] + s, i[3] + e, i[4] + s);\n          break;\n        case \"Z\":\n          t.closePath();\n      }\n    }\n    _render(t) {\n      this._renderPathCommands(t), this._renderPaintInOrder(t);\n    }\n    toString() {\n      return \"#<Path (\".concat(this.complexity(), '): { \"top\": ').concat(this.top, ', \"left\": ').concat(this.left, \" }>\");\n    }\n    toObject() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n      return i(i({}, super.toObject(t)), {}, {\n        path: this.path.map(t => t.slice())\n      });\n    }\n    toDatalessObject() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n      const e = this.toObject(t);\n      return this.sourcePath && (delete e.path, e.sourcePath = this.sourcePath), e;\n    }\n    _toSVG() {\n      const t = on(this.path, a.NUM_FRACTION_DIGITS);\n      return [\"<path \", \"COMMON_PARTS\", 'd=\"'.concat(t, '\" stroke-linecap=\"round\" />\\n')];\n    }\n    _getOffsetTransform() {\n      const t = a.NUM_FRACTION_DIGITS;\n      return \" translate(\".concat(Kt(-this.pathOffset.x, t), \", \").concat(Kt(-this.pathOffset.y, t), \")\");\n    }\n    toClipPathSVG(t) {\n      const e = this._getOffsetTransform();\n      return \"\\t\" + this._createBaseClipPathSVGMarkup(this._toSVG(), {\n        reviver: t,\n        additionalTransform: e\n      });\n    }\n    toSVG(t) {\n      const e = this._getOffsetTransform();\n      return this._createBaseSVGMarkup(this._toSVG(), {\n        reviver: t,\n        additionalTransform: e\n      });\n    }\n    complexity() {\n      return this.path.length;\n    }\n    setDimensions() {\n      this.setBoundingBox();\n    }\n    setBoundingBox(t) {\n      const {\n        width: e,\n        height: s,\n        pathOffset: i\n      } = this._calcDimensions();\n      this.set({\n        width: e,\n        height: s,\n        pathOffset: i\n      }), t && this.setPositionByOrigin(i, D, D);\n    }\n    _calcBoundsFromPath() {\n      const t = [];\n      let e = 0,\n        s = 0,\n        i = 0,\n        r = 0;\n      for (const n of this.path) switch (n[0]) {\n        case \"L\":\n          i = n[1], r = n[2], t.push({\n            x: e,\n            y: s\n          }, {\n            x: i,\n            y: r\n          });\n          break;\n        case \"M\":\n          i = n[1], r = n[2], e = i, s = r;\n          break;\n        case \"C\":\n          t.push(...Br(i, r, n[1], n[2], n[3], n[4], n[5], n[6])), i = n[5], r = n[6];\n          break;\n        case \"Q\":\n          t.push(...Br(i, r, n[1], n[2], n[1], n[2], n[3], n[4])), i = n[3], r = n[4];\n          break;\n        case \"Z\":\n          i = e, r = s;\n      }\n      return ve(t);\n    }\n    _calcDimensions() {\n      const t = this._calcBoundsFromPath();\n      return i(i({}, t), {}, {\n        pathOffset: new ot(t.left + t.width / 2, t.top + t.height / 2)\n      });\n    }\n    static fromObject(t) {\n      return this._fromObject(t, {\n        extraParam: \"path\"\n      });\n    }\n    static async fromElement(t, e, s) {\n      const n = dr(t, this.ATTRIBUTE_NAMES, s),\n        {\n          d: o\n        } = n;\n      return new this(o, i(i(i({}, r(n, Wn)), e), {}, {\n        left: void 0,\n        top: void 0\n      }));\n    }\n  }\n  e(Vn, \"type\", \"Path\"), e(Vn, \"cacheProperties\", [...ps, \"path\", \"fillRule\"]), e(Vn, \"ATTRIBUTE_NAMES\", [...Fi, \"d\"]), tt.setClass(Vn), tt.setSVGClass(Vn);\n  class Gn extends Xn {\n    constructor(t) {\n      super(t), e(this, \"decimate\", .4), e(this, \"drawStraightLine\", !1), e(this, \"straightLineKey\", \"shiftKey\"), this._points = [], this._hasStraightLine = !1;\n    }\n    needsFullRender() {\n      return super.needsFullRender() || this._hasStraightLine;\n    }\n    static drawSegment(t, e, s) {\n      const i = e.midPointFrom(s);\n      return t.quadraticCurveTo(e.x, e.y, i.x, i.y), i;\n    }\n    onMouseDown(t, e) {\n      let {\n        e: s\n      } = e;\n      this.canvas._isMainEvent(s) && (this.drawStraightLine = !!this.straightLineKey && s[this.straightLineKey], this._prepareForDrawing(t), this._addPoint(t), this._render());\n    }\n    onMouseMove(t, e) {\n      let {\n        e: s\n      } = e;\n      if (this.canvas._isMainEvent(s) && (this.drawStraightLine = !!this.straightLineKey && s[this.straightLineKey], (!0 !== this.limitedToCanvasSize || !this._isOutSideCanvas(t)) && this._addPoint(t) && this._points.length > 1)) if (this.needsFullRender()) this.canvas.clearContext(this.canvas.contextTop), this._render();else {\n        const t = this._points,\n          e = t.length,\n          s = this.canvas.contextTop;\n        this._saveAndTransform(s), this.oldEnd && (s.beginPath(), s.moveTo(this.oldEnd.x, this.oldEnd.y)), this.oldEnd = Gn.drawSegment(s, t[e - 2], t[e - 1]), s.stroke(), s.restore();\n      }\n    }\n    onMouseUp(t) {\n      let {\n        e: e\n      } = t;\n      return !this.canvas._isMainEvent(e) || (this.drawStraightLine = !1, this.oldEnd = void 0, this._finalizeAndAddPath(), !1);\n    }\n    _prepareForDrawing(t) {\n      this._reset(), this._addPoint(t), this.canvas.contextTop.moveTo(t.x, t.y);\n    }\n    _addPoint(t) {\n      return !(this._points.length > 1 && t.eq(this._points[this._points.length - 1])) && (this.drawStraightLine && this._points.length > 1 && (this._hasStraightLine = !0, this._points.pop()), this._points.push(t), !0);\n    }\n    _reset() {\n      this._points = [], this._setBrushStyles(this.canvas.contextTop), this._setShadow(), this._hasStraightLine = !1;\n    }\n    _render() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.canvas.contextTop,\n        e = this._points[0],\n        s = this._points[1];\n      if (this._saveAndTransform(t), t.beginPath(), 2 === this._points.length && e.x === s.x && e.y === s.y) {\n        const t = this.width / 1e3;\n        e.x -= t, s.x += t;\n      }\n      t.moveTo(e.x, e.y);\n      for (let i = 1; i < this._points.length; i++) Gn.drawSegment(t, e, s), e = this._points[i], s = this._points[i + 1];\n      t.lineTo(e.x, e.y), t.stroke(), t.restore();\n    }\n    convertPointsToSVGPath(t) {\n      const e = this.width / 1e3;\n      return nn(t, e);\n    }\n    createPath(t) {\n      const e = new Vn(t, {\n        fill: null,\n        stroke: this.color,\n        strokeWidth: this.width,\n        strokeLineCap: this.strokeLineCap,\n        strokeMiterLimit: this.strokeMiterLimit,\n        strokeLineJoin: this.strokeLineJoin,\n        strokeDashArray: this.strokeDashArray\n      });\n      return this.shadow && (this.shadow.affectStroke = !0, e.shadow = new ds(this.shadow)), e;\n    }\n    decimatePoints(t, e) {\n      if (t.length <= 2) return t;\n      let s,\n        i = t[0];\n      const r = this.canvas.getZoom(),\n        n = Math.pow(e / r, 2),\n        o = t.length - 1,\n        a = [i];\n      for (let e = 1; e < o - 1; e++) s = Math.pow(i.x - t[e].x, 2) + Math.pow(i.y - t[e].y, 2), s >= n && (i = t[e], a.push(i));\n      return a.push(t[o]), a;\n    }\n    _finalizeAndAddPath() {\n      this.canvas.contextTop.closePath(), this.decimate && (this._points = this.decimatePoints(this._points, this.decimate));\n      const t = this.convertPointsToSVGPath(this._points);\n      if (function (t) {\n        return \"M 0 0 Q 0 0 0 0 L 0 0\" === on(t);\n      }(t)) return void this.canvas.requestRenderAll();\n      const e = this.createPath(t);\n      this.canvas.clearContext(this.canvas.contextTop), this.canvas.fire(\"before:path:created\", {\n        path: e\n      }), this.canvas.add(e), this.canvas.requestRenderAll(), e.setCoords(), this._resetShadow(), this.canvas.fire(\"path:created\", {\n        path: e\n      });\n    }\n  }\n  const zn = [\"left\", \"top\", \"radius\"],\n    Hn = [\"radius\", \"startAngle\", \"endAngle\", \"counterClockwise\"];\n  class Nn extends _i {\n    static getDefaults() {\n      return i(i({}, super.getDefaults()), Nn.ownDefaults);\n    }\n    constructor(t) {\n      super(), Object.assign(this, Nn.ownDefaults), this.setOptions(t);\n    }\n    _set(t, e) {\n      return super._set(t, e), \"radius\" === t && this.setRadius(e), this;\n    }\n    _render(t) {\n      t.beginPath(), t.arc(0, 0, this.radius, xt(this.startAngle), xt(this.endAngle), this.counterClockwise), this._renderPaintInOrder(t);\n    }\n    getRadiusX() {\n      return this.get(\"radius\") * this.get(H);\n    }\n    getRadiusY() {\n      return this.get(\"radius\") * this.get(N);\n    }\n    setRadius(t) {\n      this.radius = t, this.set({\n        width: 2 * t,\n        height: 2 * t\n      });\n    }\n    toObject() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n      return super.toObject([...Hn, ...t]);\n    }\n    _toSVG() {\n      const t = (this.endAngle - this.startAngle) % 360;\n      if (0 === t) return [\"<circle \", \"COMMON_PARTS\", 'cx=\"0\" cy=\"0\" ', 'r=\"', \"\".concat(this.radius), '\" />\\n'];\n      {\n        const {\n            radius: e\n          } = this,\n          s = xt(this.startAngle),\n          i = xt(this.endAngle),\n          r = rt(s) * e,\n          n = nt(s) * e,\n          o = rt(i) * e,\n          a = nt(i) * e,\n          h = t > 180 ? 1 : 0,\n          c = this.counterClockwise ? 0 : 1;\n        return ['<path d=\"M '.concat(r, \" \").concat(n, \" A \").concat(e, \" \").concat(e, \" 0 \").concat(h, \" \").concat(c, \" \").concat(o, \" \").concat(a, '\" '), \"COMMON_PARTS\", \" />\\n\"];\n      }\n    }\n    static async fromElement(t, e, s) {\n      const n = dr(t, this.ATTRIBUTE_NAMES, s),\n        {\n          left: o = 0,\n          top: a = 0,\n          radius: h = 0\n        } = n;\n      return new this(i(i({}, r(n, zn)), {}, {\n        radius: h,\n        left: o - h,\n        top: a - h\n      }));\n    }\n    static fromObject(t) {\n      return super._fromObject(t);\n    }\n  }\n  e(Nn, \"type\", \"Circle\"), e(Nn, \"cacheProperties\", [...ps, ...Hn]), e(Nn, \"ownDefaults\", {\n    radius: 0,\n    startAngle: 0,\n    endAngle: 360,\n    counterClockwise: !1\n  }), e(Nn, \"ATTRIBUTE_NAMES\", [\"cx\", \"cy\", \"r\", ...Fi]), tt.setClass(Nn), tt.setSVGClass(Nn);\n  const Un = [\"x1\", \"y1\", \"x2\", \"y2\"],\n    qn = [\"x1\", \"y1\", \"x2\", \"y2\"],\n    Kn = [\"x1\", \"x2\", \"y1\", \"y2\"];\n  class Jn extends _i {\n    constructor() {\n      let [t, e, s, i] = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [0, 0, 0, 0],\n        r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      super(), Object.assign(this, Jn.ownDefaults), this.setOptions(r), this.x1 = t, this.x2 = s, this.y1 = e, this.y2 = i, this._setWidthHeight();\n      const {\n        left: n,\n        top: o\n      } = r;\n      \"number\" == typeof n && this.set(M, n), \"number\" == typeof o && this.set(P, o);\n    }\n    _setWidthHeight() {\n      const {\n        x1: t,\n        y1: e,\n        x2: s,\n        y2: i\n      } = this;\n      this.width = Math.abs(s - t), this.height = Math.abs(i - e);\n      const {\n          left: r,\n          top: n,\n          width: o,\n          height: a\n        } = ve([{\n          x: t,\n          y: e\n        }, {\n          x: s,\n          y: i\n        }]),\n        h = new ot(r + o / 2, n + a / 2);\n      this.setPositionByOrigin(h, D, D);\n    }\n    _set(t, e) {\n      return super._set(t, e), Kn.includes(t) && this._setWidthHeight(), this;\n    }\n    _render(t) {\n      t.beginPath();\n      const e = this.calcLinePoints();\n      t.moveTo(e.x1, e.y1), t.lineTo(e.x2, e.y2), t.lineWidth = this.strokeWidth;\n      const s = t.strokeStyle;\n      var i;\n      te(this.stroke) ? t.strokeStyle = this.stroke.toLive(t) : t.strokeStyle = null !== (i = this.stroke) && void 0 !== i ? i : t.fillStyle;\n      this.stroke && this._renderStroke(t), t.strokeStyle = s;\n    }\n    _findCenterFromElement() {\n      return new ot((this.x1 + this.x2) / 2, (this.y1 + this.y2) / 2);\n    }\n    toObject() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n      return i(i({}, super.toObject(t)), this.calcLinePoints());\n    }\n    _getNonTransformedDimensions() {\n      const t = super._getNonTransformedDimensions();\n      return \"butt\" === this.strokeLineCap && (0 === this.width && (t.y -= this.strokeWidth), 0 === this.height && (t.x -= this.strokeWidth)), t;\n    }\n    calcLinePoints() {\n      const {\n          x1: t,\n          x2: e,\n          y1: s,\n          y2: i,\n          width: r,\n          height: n\n        } = this,\n        o = t <= e ? -1 : 1,\n        a = s <= i ? -1 : 1;\n      return {\n        x1: o * r / 2,\n        x2: o * -r / 2,\n        y1: a * n / 2,\n        y2: a * -n / 2\n      };\n    }\n    _toSVG() {\n      const {\n        x1: t,\n        x2: e,\n        y1: s,\n        y2: i\n      } = this.calcLinePoints();\n      return [\"<line \", \"COMMON_PARTS\", 'x1=\"'.concat(t, '\" y1=\"').concat(s, '\" x2=\"').concat(e, '\" y2=\"').concat(i, '\" />\\n')];\n    }\n    static async fromElement(t, e, s) {\n      const i = dr(t, this.ATTRIBUTE_NAMES, s),\n        {\n          x1: n = 0,\n          y1: o = 0,\n          x2: a = 0,\n          y2: h = 0\n        } = i;\n      return new this([n, o, a, h], r(i, Un));\n    }\n    static fromObject(t) {\n      let {\n          x1: e,\n          y1: s,\n          x2: n,\n          y2: o\n        } = t,\n        a = r(t, qn);\n      return this._fromObject(i(i({}, a), {}, {\n        points: [e, s, n, o]\n      }), {\n        extraParam: \"points\"\n      });\n    }\n  }\n  e(Jn, \"type\", \"Line\"), e(Jn, \"cacheProperties\", [...ps, ...Kn]), e(Jn, \"ATTRIBUTE_NAMES\", Fi.concat(Kn)), tt.setClass(Jn), tt.setSVGClass(Jn);\n  class Qn extends _i {\n    static getDefaults() {\n      return i(i({}, super.getDefaults()), Qn.ownDefaults);\n    }\n    constructor(t) {\n      super(), Object.assign(this, Qn.ownDefaults), this.setOptions(t);\n    }\n    _render(t) {\n      const e = this.width / 2,\n        s = this.height / 2;\n      t.beginPath(), t.moveTo(-e, s), t.lineTo(0, -s), t.lineTo(e, s), t.closePath(), this._renderPaintInOrder(t);\n    }\n    _toSVG() {\n      const t = this.width / 2,\n        e = this.height / 2;\n      return [\"<polygon \", \"COMMON_PARTS\", 'points=\"', \"\".concat(-t, \" \").concat(e, \",0 \").concat(-e, \",\").concat(t, \" \").concat(e), '\" />'];\n    }\n  }\n  e(Qn, \"type\", \"Triangle\"), e(Qn, \"ownDefaults\", {\n    width: 100,\n    height: 100\n  }), tt.setClass(Qn), tt.setSVGClass(Qn);\n  const Zn = [\"rx\", \"ry\"];\n  class $n extends _i {\n    static getDefaults() {\n      return i(i({}, super.getDefaults()), $n.ownDefaults);\n    }\n    constructor(t) {\n      super(), Object.assign(this, $n.ownDefaults), this.setOptions(t);\n    }\n    _set(t, e) {\n      switch (super._set(t, e), t) {\n        case \"rx\":\n          this.rx = e, this.set(\"width\", 2 * e);\n          break;\n        case \"ry\":\n          this.ry = e, this.set(\"height\", 2 * e);\n      }\n      return this;\n    }\n    getRx() {\n      return this.get(\"rx\") * this.get(H);\n    }\n    getRy() {\n      return this.get(\"ry\") * this.get(N);\n    }\n    toObject() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n      return super.toObject([...Zn, ...t]);\n    }\n    _toSVG() {\n      return [\"<ellipse \", \"COMMON_PARTS\", 'cx=\"0\" cy=\"0\" rx=\"'.concat(this.rx, '\" ry=\"').concat(this.ry, '\" />\\n')];\n    }\n    _render(t) {\n      t.beginPath(), t.save(), t.transform(1, 0, 0, this.ry / this.rx, 0, 0), t.arc(0, 0, this.rx, 0, S, !1), t.restore(), this._renderPaintInOrder(t);\n    }\n    static async fromElement(t, e, s) {\n      const i = dr(t, this.ATTRIBUTE_NAMES, s);\n      return i.left = (i.left || 0) - i.rx, i.top = (i.top || 0) - i.ry, new this(i);\n    }\n  }\n  function to(t) {\n    if (!t) return [];\n    const e = t.replace(/,/g, \" \").trim().split(/\\s+/),\n      s = [];\n    for (let t = 0; t < e.length; t += 2) s.push({\n      x: parseFloat(e[t]),\n      y: parseFloat(e[t + 1])\n    });\n    return s;\n  }\n  e($n, \"type\", \"Ellipse\"), e($n, \"cacheProperties\", [...ps, ...Zn]), e($n, \"ownDefaults\", {\n    rx: 0,\n    ry: 0\n  }), e($n, \"ATTRIBUTE_NAMES\", [...Fi, \"cx\", \"cy\", \"rx\", \"ry\"]), tt.setClass($n), tt.setSVGClass($n);\n  const eo = [\"left\", \"top\"],\n    so = {\n      exactBoundingBox: !1\n    };\n  class io extends _i {\n    static getDefaults() {\n      return i(i({}, super.getDefaults()), io.ownDefaults);\n    }\n    constructor() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],\n        s = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      super(), e(this, \"strokeDiff\", void 0), Object.assign(this, io.ownDefaults), this.setOptions(s), this.points = t;\n      const {\n        left: i,\n        top: r\n      } = s;\n      this.initialized = !0, this.setBoundingBox(!0), \"number\" == typeof i && this.set(M, i), \"number\" == typeof r && this.set(P, r);\n    }\n    isOpen() {\n      return !0;\n    }\n    _projectStrokeOnPoints(t) {\n      return Ti(this.points, t, this.isOpen());\n    }\n    _calcDimensions(t) {\n      t = i({\n        scaleX: this.scaleX,\n        scaleY: this.scaleY,\n        skewX: this.skewX,\n        skewY: this.skewY,\n        strokeLineCap: this.strokeLineCap,\n        strokeLineJoin: this.strokeLineJoin,\n        strokeMiterLimit: this.strokeMiterLimit,\n        strokeUniform: this.strokeUniform,\n        strokeWidth: this.strokeWidth\n      }, t || {});\n      const e = this.exactBoundingBox ? this._projectStrokeOnPoints(t).map(t => t.projectedPoint) : this.points;\n      if (0 === e.length) return {\n        left: 0,\n        top: 0,\n        width: 0,\n        height: 0,\n        pathOffset: new ot(),\n        strokeOffset: new ot(),\n        strokeDiff: new ot()\n      };\n      const s = ve(e),\n        r = Lt(i(i({}, t), {}, {\n          scaleX: 1,\n          scaleY: 1\n        })),\n        n = ve(this.points.map(t => St(t, r, !0))),\n        o = new ot(this.scaleX, this.scaleY);\n      let a = s.left + s.width / 2,\n        h = s.top + s.height / 2;\n      return this.exactBoundingBox && (a -= h * Math.tan(xt(this.skewX)), h -= a * Math.tan(xt(this.skewY))), i(i({}, s), {}, {\n        pathOffset: new ot(a, h),\n        strokeOffset: new ot(n.left, n.top).subtract(new ot(s.left, s.top)).multiply(o),\n        strokeDiff: new ot(s.width, s.height).subtract(new ot(n.width, n.height)).multiply(o)\n      });\n    }\n    _findCenterFromElement() {\n      const t = ve(this.points);\n      return new ot(t.left + t.width / 2, t.top + t.height / 2);\n    }\n    setDimensions() {\n      this.setBoundingBox();\n    }\n    setBoundingBox(t) {\n      const {\n        left: e,\n        top: s,\n        width: i,\n        height: r,\n        pathOffset: n,\n        strokeOffset: o,\n        strokeDiff: a\n      } = this._calcDimensions();\n      this.set({\n        width: i,\n        height: r,\n        pathOffset: n,\n        strokeOffset: o,\n        strokeDiff: a\n      }), t && this.setPositionByOrigin(new ot(e + i / 2, s + r / 2), D, D);\n    }\n    isStrokeAccountedForInDimensions() {\n      return this.exactBoundingBox;\n    }\n    _getNonTransformedDimensions() {\n      return this.exactBoundingBox ? new ot(this.width, this.height) : super._getNonTransformedDimensions();\n    }\n    _getTransformedDimensions() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n      if (this.exactBoundingBox) {\n        let n;\n        if (Object.keys(t).some(t => this.strokeUniform || this.constructor.layoutProperties.includes(t))) {\n          var e, s;\n          const {\n            width: i,\n            height: r\n          } = this._calcDimensions(t);\n          n = new ot(null !== (e = t.width) && void 0 !== e ? e : i, null !== (s = t.height) && void 0 !== s ? s : r);\n        } else {\n          var i, r;\n          n = new ot(null !== (i = t.width) && void 0 !== i ? i : this.width, null !== (r = t.height) && void 0 !== r ? r : this.height);\n        }\n        return n.multiply(new ot(t.scaleX || this.scaleX, t.scaleY || this.scaleY));\n      }\n      return super._getTransformedDimensions(t);\n    }\n    _set(t, e) {\n      const s = this.initialized && this[t] !== e,\n        i = super._set(t, e);\n      return this.exactBoundingBox && s && ((t === H || t === N) && this.strokeUniform && this.constructor.layoutProperties.includes(\"strokeUniform\") || this.constructor.layoutProperties.includes(t)) && this.setDimensions(), i;\n    }\n    toObject() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n      return i(i({}, super.toObject(t)), {}, {\n        points: this.points.map(t => {\n          let {\n            x: e,\n            y: s\n          } = t;\n          return {\n            x: e,\n            y: s\n          };\n        })\n      });\n    }\n    _toSVG() {\n      const t = [],\n        e = this.pathOffset.x,\n        s = this.pathOffset.y,\n        i = a.NUM_FRACTION_DIGITS;\n      for (let r = 0, n = this.points.length; r < n; r++) t.push(Kt(this.points[r].x - e, i), \",\", Kt(this.points[r].y - s, i), \" \");\n      return [\"<\".concat(this.constructor.type.toLowerCase(), \" \"), \"COMMON_PARTS\", 'points=\"'.concat(t.join(\"\"), '\" />\\n')];\n    }\n    _render(t) {\n      const e = this.points.length,\n        s = this.pathOffset.x,\n        i = this.pathOffset.y;\n      if (e && !isNaN(this.points[e - 1].y)) {\n        t.beginPath(), t.moveTo(this.points[0].x - s, this.points[0].y - i);\n        for (let r = 0; r < e; r++) {\n          const e = this.points[r];\n          t.lineTo(e.x - s, e.y - i);\n        }\n        !this.isOpen() && t.closePath(), this._renderPaintInOrder(t);\n      }\n    }\n    complexity() {\n      return this.points.length;\n    }\n    static async fromElement(t, e, s) {\n      return new this(to(t.getAttribute(\"points\")), i(i({}, r(dr(t, this.ATTRIBUTE_NAMES, s), eo)), e));\n    }\n    static fromObject(t) {\n      return this._fromObject(t, {\n        extraParam: \"points\"\n      });\n    }\n  }\n  e(io, \"ownDefaults\", so), e(io, \"type\", \"Polyline\"), e(io, \"layoutProperties\", [U, q, \"strokeLineCap\", \"strokeLineJoin\", \"strokeMiterLimit\", \"strokeWidth\", \"strokeUniform\", \"points\"]), e(io, \"cacheProperties\", [...ps, \"points\"]), e(io, \"ATTRIBUTE_NAMES\", [...Fi]), tt.setClass(io), tt.setSVGClass(io);\n  class ro extends io {\n    isOpen() {\n      return !1;\n    }\n  }\n  e(ro, \"ownDefaults\", so), e(ro, \"type\", \"Polygon\"), tt.setClass(ro), tt.setSVGClass(ro);\n  const no = [\"fontSize\", \"fontWeight\", \"fontFamily\", \"fontStyle\"],\n    oo = [\"underline\", \"overline\", \"linethrough\"],\n    ao = [...no, \"lineHeight\", \"text\", \"charSpacing\", \"textAlign\", \"styles\", \"path\", \"pathStartOffset\", \"pathSide\", \"pathAlign\"],\n    ho = [...ao, ...oo, \"textBackgroundColor\", \"direction\"],\n    co = [...no, ...oo, J, \"strokeWidth\", K, \"deltaY\", \"textBackgroundColor\"],\n    lo = {\n      _reNewline: F,\n      _reSpacesAndTabs: /[ \\t\\r]/g,\n      _reSpaceAndTab: /[ \\t\\r]/,\n      _reWords: /\\S+/g,\n      fontSize: 40,\n      fontWeight: \"normal\",\n      fontFamily: \"Times New Roman\",\n      underline: !1,\n      overline: !1,\n      linethrough: !1,\n      textAlign: M,\n      fontStyle: \"normal\",\n      lineHeight: 1.16,\n      superscript: {\n        size: .6,\n        baseline: -.35\n      },\n      subscript: {\n        size: .6,\n        baseline: .11\n      },\n      textBackgroundColor: \"\",\n      stroke: null,\n      shadow: null,\n      path: void 0,\n      pathStartOffset: 0,\n      pathSide: M,\n      pathAlign: \"baseline\",\n      _fontSizeFraction: .222,\n      offsets: {\n        underline: .1,\n        linethrough: -.315,\n        overline: -.88\n      },\n      _fontSizeMult: 1.13,\n      charSpacing: 0,\n      deltaY: 0,\n      direction: \"ltr\",\n      CACHE_FONT_SIZE: 400,\n      MIN_TEXT_WIDTH: 2\n    },\n    uo = \"justify\",\n    go = \"justify-left\",\n    fo = \"justify-right\",\n    po = \"justify-center\";\n  class mo extends _i {\n    isEmptyStyles(t) {\n      if (!this.styles) return !0;\n      if (void 0 !== t && !this.styles[t]) return !0;\n      const e = void 0 === t ? this.styles : {\n        line: this.styles[t]\n      };\n      for (const t in e) for (const s in e[t]) for (const i in e[t][s]) return !1;\n      return !0;\n    }\n    styleHas(t, e) {\n      if (!this.styles) return !1;\n      if (void 0 !== e && !this.styles[e]) return !1;\n      const s = void 0 === e ? this.styles : {\n        0: this.styles[e]\n      };\n      for (const e in s) for (const i in s[e]) if (void 0 !== s[e][i][t]) return !0;\n      return !1;\n    }\n    cleanStyle(t) {\n      if (!this.styles) return !1;\n      const e = this.styles;\n      let s,\n        i,\n        r = 0,\n        n = !0,\n        o = 0;\n      for (const o in e) {\n        s = 0;\n        for (const a in e[o]) {\n          const h = e[o][a] || {};\n          r++, void 0 !== h[t] ? (i ? h[t] !== i && (n = !1) : i = h[t], h[t] === this[t] && delete h[t]) : n = !1, 0 !== Object.keys(h).length ? s++ : delete e[o][a];\n        }\n        0 === s && delete e[o];\n      }\n      for (let t = 0; t < this._textLines.length; t++) o += this._textLines[t].length;\n      n && r === o && (this[t] = i, this.removeStyle(t));\n    }\n    removeStyle(t) {\n      if (!this.styles) return;\n      const e = this.styles;\n      let s, i, r;\n      for (i in e) {\n        for (r in s = e[i], s) delete s[r][t], 0 === Object.keys(s[r]).length && delete s[r];\n        0 === Object.keys(s).length && delete e[i];\n      }\n    }\n    _extendStyles(t, e) {\n      const {\n        lineIndex: s,\n        charIndex: r\n      } = this.get2DCursorLocation(t);\n      this._getLineStyle(s) || this._setLineStyle(s);\n      const n = Wt(i(i({}, this._getStyleDeclaration(s, r)), e), t => void 0 !== t);\n      this._setStyleDeclaration(s, r, n);\n    }\n    getSelectionStyles(t, e, s) {\n      const i = [];\n      for (let r = t; r < (e || t); r++) i.push(this.getStyleAtPosition(r, s));\n      return i;\n    }\n    getStyleAtPosition(t, e) {\n      const {\n        lineIndex: s,\n        charIndex: i\n      } = this.get2DCursorLocation(t);\n      return e ? this.getCompleteStyleDeclaration(s, i) : this._getStyleDeclaration(s, i);\n    }\n    setSelectionStyles(t, e, s) {\n      for (let i = e; i < (s || e); i++) this._extendStyles(i, t);\n      this._forceClearCache = !0;\n    }\n    _getStyleDeclaration(t, e) {\n      var s;\n      const i = this.styles && this.styles[t];\n      return i && null !== (s = i[e]) && void 0 !== s ? s : {};\n    }\n    getCompleteStyleDeclaration(t, e) {\n      return i(i({}, Yt(this, this.constructor._styleProperties)), this._getStyleDeclaration(t, e));\n    }\n    _setStyleDeclaration(t, e, s) {\n      this.styles[t][e] = s;\n    }\n    _deleteStyleDeclaration(t, e) {\n      delete this.styles[t][e];\n    }\n    _getLineStyle(t) {\n      return !!this.styles[t];\n    }\n    _setLineStyle(t) {\n      this.styles[t] = {};\n    }\n    _deleteLineStyle(t) {\n      delete this.styles[t];\n    }\n  }\n  e(mo, \"_styleProperties\", co);\n  const vo = /  +/g,\n    yo = /\"/g;\n  function _o(t, e, s, i, r) {\n    return \"\\t\\t\".concat(function (t, e) {\n      let {\n          left: s,\n          top: i,\n          width: r,\n          height: n\n        } = e,\n        o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : a.NUM_FRACTION_DIGITS;\n      const h = $t(K, t, !1),\n        [c, l, u, d] = [s, i, r, n].map(t => Kt(t, o));\n      return \"<rect \".concat(h, ' x=\"').concat(c, '\" y=\"').concat(l, '\" width=\"').concat(u, '\" height=\"').concat(d, '\"></rect>');\n    }(t, {\n      left: e,\n      top: s,\n      width: i,\n      height: r\n    }), \"\\n\");\n  }\n  const xo = [\"textAnchor\", \"textDecoration\", \"dx\", \"dy\", \"top\", \"left\", \"fontSize\", \"strokeWidth\"];\n  let Co;\n  class bo extends mo {\n    static getDefaults() {\n      return i(i({}, super.getDefaults()), bo.ownDefaults);\n    }\n    constructor(t, s) {\n      super(), e(this, \"__charBounds\", []), Object.assign(this, bo.ownDefaults), this.setOptions(s), this.styles || (this.styles = {}), this.text = t, this.initialized = !0, this.path && this.setPathInfo(), this.initDimensions(), this.setCoords();\n    }\n    setPathInfo() {\n      const t = this.path;\n      t && (t.segmentsInfo = Qr(t.path));\n    }\n    _splitText() {\n      const t = this._splitTextIntoLines(this.text);\n      return this.textLines = t.lines, this._textLines = t.graphemeLines, this._unwrappedTextLines = t._unwrappedLines, this._text = t.graphemeText, t;\n    }\n    initDimensions() {\n      this._splitText(), this._clearCache(), this.dirty = !0, this.path ? (this.width = this.path.width, this.height = this.path.height) : (this.width = this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH, this.height = this.calcTextHeight()), this.textAlign.includes(uo) && this.enlargeSpaces();\n    }\n    enlargeSpaces() {\n      let t, e, s, i, r, n, o;\n      for (let a = 0, h = this._textLines.length; a < h; a++) if ((this.textAlign === uo || a !== h - 1 && !this.isEndOfWrapping(a)) && (i = 0, r = this._textLines[a], e = this.getLineWidth(a), e < this.width && (o = this.textLines[a].match(this._reSpacesAndTabs)))) {\n        s = o.length, t = (this.width - e) / s;\n        for (let e = 0; e <= r.length; e++) n = this.__charBounds[a][e], this._reSpaceAndTab.test(r[e]) ? (n.width += t, n.kernedWidth += t, n.left += i, i += t) : n.left += i;\n      }\n    }\n    isEndOfWrapping(t) {\n      return t === this._textLines.length - 1;\n    }\n    missingNewlineOffset(t) {\n      return 1;\n    }\n    get2DCursorLocation(t, e) {\n      const s = e ? this._unwrappedTextLines : this._textLines;\n      let i;\n      for (i = 0; i < s.length; i++) {\n        if (t <= s[i].length) return {\n          lineIndex: i,\n          charIndex: t\n        };\n        t -= s[i].length + this.missingNewlineOffset(i, e);\n      }\n      return {\n        lineIndex: i - 1,\n        charIndex: s[i - 1].length < t ? s[i - 1].length : t\n      };\n    }\n    toString() {\n      return \"#<Text (\".concat(this.complexity(), '): { \"text\": \"').concat(this.text, '\", \"fontFamily\": \"').concat(this.fontFamily, '\" }>');\n    }\n    _getCacheCanvasDimensions() {\n      const t = super._getCacheCanvasDimensions(),\n        e = this.fontSize;\n      return t.width += e * t.zoomX, t.height += e * t.zoomY, t;\n    }\n    _render(t) {\n      const e = this.path;\n      e && !e.isNotVisible() && e._render(t), this._setTextStyles(t), this._renderTextLinesBackground(t), this._renderTextDecoration(t, \"underline\"), this._renderText(t), this._renderTextDecoration(t, \"overline\"), this._renderTextDecoration(t, \"linethrough\");\n    }\n    _renderText(t) {\n      this.paintFirst === J ? (this._renderTextStroke(t), this._renderTextFill(t)) : (this._renderTextFill(t), this._renderTextStroke(t));\n    }\n    _setTextStyles(t, e, s) {\n      if (t.textBaseline = \"alphabetic\", this.path) switch (this.pathAlign) {\n        case D:\n          t.textBaseline = \"middle\";\n          break;\n        case \"ascender\":\n          t.textBaseline = P;\n          break;\n        case \"descender\":\n          t.textBaseline = E;\n      }\n      t.font = this._getFontDeclaration(e, s);\n    }\n    calcTextWidth() {\n      let t = this.getLineWidth(0);\n      for (let e = 1, s = this._textLines.length; e < s; e++) {\n        const s = this.getLineWidth(e);\n        s > t && (t = s);\n      }\n      return t;\n    }\n    _renderTextLine(t, e, s, i, r, n) {\n      this._renderChars(t, e, s, i, r, n);\n    }\n    _renderTextLinesBackground(t) {\n      if (!this.textBackgroundColor && !this.styleHas(\"textBackgroundColor\")) return;\n      const e = t.fillStyle,\n        s = this._getLeftOffset();\n      let i = this._getTopOffset();\n      for (let e = 0, r = this._textLines.length; e < r; e++) {\n        const r = this.getHeightOfLine(e);\n        if (!this.textBackgroundColor && !this.styleHas(\"textBackgroundColor\", e)) {\n          i += r;\n          continue;\n        }\n        const n = this._textLines[e].length,\n          o = this._getLineLeftOffset(e);\n        let a,\n          h,\n          c = 0,\n          l = 0,\n          u = this.getValueOfPropertyAt(e, 0, \"textBackgroundColor\");\n        for (let d = 0; d < n; d++) {\n          const n = this.__charBounds[e][d];\n          h = this.getValueOfPropertyAt(e, d, \"textBackgroundColor\"), this.path ? (t.save(), t.translate(n.renderLeft, n.renderTop), t.rotate(n.angle), t.fillStyle = h, h && t.fillRect(-n.width / 2, -r / this.lineHeight * (1 - this._fontSizeFraction), n.width, r / this.lineHeight), t.restore()) : h !== u ? (a = s + o + l, \"rtl\" === this.direction && (a = this.width - a - c), t.fillStyle = u, u && t.fillRect(a, i, c, r / this.lineHeight), l = n.left, c = n.width, u = h) : c += n.kernedWidth;\n        }\n        h && !this.path && (a = s + o + l, \"rtl\" === this.direction && (a = this.width - a - c), t.fillStyle = h, t.fillRect(a, i, c, r / this.lineHeight)), i += r;\n      }\n      t.fillStyle = e, this._removeShadow(t);\n    }\n    _measureChar(t, e, s, i) {\n      const r = _.getFontCache(e),\n        n = this._getFontDeclaration(e),\n        o = s + t,\n        a = s && n === this._getFontDeclaration(i),\n        h = e.fontSize / this.CACHE_FONT_SIZE;\n      let c, l, u, d;\n      if (s && void 0 !== r[s] && (u = r[s]), void 0 !== r[t] && (d = c = r[t]), a && void 0 !== r[o] && (l = r[o], d = l - u), void 0 === c || void 0 === u || void 0 === l) {\n        const i = function () {\n          if (!Co) {\n            const t = vt({\n              width: 0,\n              height: 0\n            });\n            Co = t.getContext(\"2d\");\n          }\n          return Co;\n        }();\n        this._setTextStyles(i, e, !0), void 0 === c && (d = c = i.measureText(t).width, r[t] = c), void 0 === u && a && s && (u = i.measureText(s).width, r[s] = u), a && void 0 === l && (l = i.measureText(o).width, r[o] = l, d = l - u);\n      }\n      return {\n        width: c * h,\n        kernedWidth: d * h\n      };\n    }\n    getHeightOfChar(t, e) {\n      return this.getValueOfPropertyAt(t, e, \"fontSize\");\n    }\n    measureLine(t) {\n      const e = this._measureLine(t);\n      return 0 !== this.charSpacing && (e.width -= this._getWidthOfCharSpacing()), e.width < 0 && (e.width = 0), e;\n    }\n    _measureLine(t) {\n      let e,\n        s,\n        i = 0;\n      const r = this.pathSide === A,\n        n = this.path,\n        o = this._textLines[t],\n        a = o.length,\n        h = new Array(a);\n      this.__charBounds[t] = h;\n      for (let r = 0; r < a; r++) {\n        const n = o[r];\n        s = this._getGraphemeBox(n, t, r, e), h[r] = s, i += s.kernedWidth, e = n;\n      }\n      if (h[a] = {\n        left: s ? s.left + s.width : 0,\n        width: 0,\n        kernedWidth: 0,\n        height: this.fontSize,\n        deltaY: 0\n      }, n && n.segmentsInfo) {\n        let t = 0;\n        const e = n.segmentsInfo[n.segmentsInfo.length - 1].length;\n        switch (this.textAlign) {\n          case M:\n            t = r ? e - i : 0;\n            break;\n          case D:\n            t = (e - i) / 2;\n            break;\n          case A:\n            t = r ? 0 : e - i;\n        }\n        t += this.pathStartOffset * (r ? -1 : 1);\n        for (let i = r ? a - 1 : 0; r ? i >= 0 : i < a; r ? i-- : i++) s = h[i], t > e ? t %= e : t < 0 && (t += e), this._setGraphemeOnPath(t, s), t += s.kernedWidth;\n      }\n      return {\n        width: i,\n        numOfSpaces: 0\n      };\n    }\n    _setGraphemeOnPath(t, e) {\n      const s = t + e.kernedWidth / 2,\n        i = this.path,\n        r = Zr(i.path, s, i.segmentsInfo);\n      e.renderLeft = r.x - i.pathOffset.x, e.renderTop = r.y - i.pathOffset.y, e.angle = r.angle + (this.pathSide === A ? Math.PI : 0);\n    }\n    _getGraphemeBox(t, e, s, i, r) {\n      const n = this.getCompleteStyleDeclaration(e, s),\n        o = i ? this.getCompleteStyleDeclaration(e, s - 1) : {},\n        a = this._measureChar(t, n, i, o);\n      let h,\n        c = a.kernedWidth,\n        l = a.width;\n      0 !== this.charSpacing && (h = this._getWidthOfCharSpacing(), l += h, c += h);\n      const u = {\n        width: l,\n        left: 0,\n        height: n.fontSize,\n        kernedWidth: c,\n        deltaY: n.deltaY\n      };\n      if (s > 0 && !r) {\n        const t = this.__charBounds[e][s - 1];\n        u.left = t.left + t.width + a.kernedWidth - a.width;\n      }\n      return u;\n    }\n    getHeightOfLine(t) {\n      if (this.__lineHeights[t]) return this.__lineHeights[t];\n      let e = this.getHeightOfChar(t, 0);\n      for (let s = 1, i = this._textLines[t].length; s < i; s++) e = Math.max(this.getHeightOfChar(t, s), e);\n      return this.__lineHeights[t] = e * this.lineHeight * this._fontSizeMult;\n    }\n    calcTextHeight() {\n      let t,\n        e = 0;\n      for (let s = 0, i = this._textLines.length; s < i; s++) t = this.getHeightOfLine(s), e += s === i - 1 ? t / this.lineHeight : t;\n      return e;\n    }\n    _getLeftOffset() {\n      return \"ltr\" === this.direction ? -this.width / 2 : this.width / 2;\n    }\n    _getTopOffset() {\n      return -this.height / 2;\n    }\n    _renderTextCommon(t, e) {\n      t.save();\n      let s = 0;\n      const i = this._getLeftOffset(),\n        r = this._getTopOffset();\n      for (let n = 0, o = this._textLines.length; n < o; n++) {\n        const o = this.getHeightOfLine(n),\n          a = o / this.lineHeight,\n          h = this._getLineLeftOffset(n);\n        this._renderTextLine(e, t, this._textLines[n], i + h, r + s + a, n), s += o;\n      }\n      t.restore();\n    }\n    _renderTextFill(t) {\n      (this.fill || this.styleHas(K)) && this._renderTextCommon(t, \"fillText\");\n    }\n    _renderTextStroke(t) {\n      (this.stroke && 0 !== this.strokeWidth || !this.isEmptyStyles()) && (this.shadow && !this.shadow.affectStroke && this._removeShadow(t), t.save(), this._setLineDash(t, this.strokeDashArray), t.beginPath(), this._renderTextCommon(t, \"strokeText\"), t.closePath(), t.restore());\n    }\n    _renderChars(t, e, s, i, r, n) {\n      const o = this.getHeightOfLine(n),\n        a = this.textAlign.includes(uo),\n        h = this.path,\n        c = !a && 0 === this.charSpacing && this.isEmptyStyles(n) && !h,\n        l = \"ltr\" === this.direction,\n        u = \"ltr\" === this.direction ? 1 : -1,\n        d = e.direction;\n      let g,\n        f,\n        p,\n        m,\n        v,\n        y = \"\",\n        _ = 0;\n      if (e.save(), d !== this.direction && (e.canvas.setAttribute(\"dir\", l ? \"ltr\" : \"rtl\"), e.direction = l ? \"ltr\" : \"rtl\", e.textAlign = l ? M : A), r -= o * this._fontSizeFraction / this.lineHeight, c) return this._renderChar(t, e, n, 0, s.join(\"\"), i, r), void e.restore();\n      for (let o = 0, c = s.length - 1; o <= c; o++) m = o === c || this.charSpacing || h, y += s[o], p = this.__charBounds[n][o], 0 === _ ? (i += u * (p.kernedWidth - p.width), _ += p.width) : _ += p.kernedWidth, a && !m && this._reSpaceAndTab.test(s[o]) && (m = !0), m || (g = g || this.getCompleteStyleDeclaration(n, o), f = this.getCompleteStyleDeclaration(n, o + 1), m = Ei(g, f, !1)), m && (h ? (e.save(), e.translate(p.renderLeft, p.renderTop), e.rotate(p.angle), this._renderChar(t, e, n, o, y, -_ / 2, 0), e.restore()) : (v = i, this._renderChar(t, e, n, o, y, v, r)), y = \"\", g = f, i += u * _, _ = 0);\n      e.restore();\n    }\n    _applyPatternGradientTransformText(t) {\n      const e = this.width + this.strokeWidth,\n        s = this.height + this.strokeWidth,\n        i = vt({\n          width: e,\n          height: s\n        }),\n        r = i.getContext(\"2d\");\n      return i.width = e, i.height = s, r.beginPath(), r.moveTo(0, 0), r.lineTo(e, 0), r.lineTo(e, s), r.lineTo(0, s), r.closePath(), r.translate(e / 2, s / 2), r.fillStyle = t.toLive(r), this._applyPatternGradientTransform(r, t), r.fill(), r.createPattern(i, \"no-repeat\");\n    }\n    handleFiller(t, e, s) {\n      let i, r;\n      return te(s) ? \"percentage\" === s.gradientUnits || s.gradientTransform || s.patternTransform ? (i = -this.width / 2, r = -this.height / 2, t.translate(i, r), t[e] = this._applyPatternGradientTransformText(s), {\n        offsetX: i,\n        offsetY: r\n      }) : (t[e] = s.toLive(t), this._applyPatternGradientTransform(t, s)) : (t[e] = s, {\n        offsetX: 0,\n        offsetY: 0\n      });\n    }\n    _setStrokeStyles(t, e) {\n      let {\n        stroke: s,\n        strokeWidth: i\n      } = e;\n      return t.lineWidth = i, t.lineCap = this.strokeLineCap, t.lineDashOffset = this.strokeDashOffset, t.lineJoin = this.strokeLineJoin, t.miterLimit = this.strokeMiterLimit, this.handleFiller(t, \"strokeStyle\", s);\n    }\n    _setFillStyles(t, e) {\n      let {\n        fill: s\n      } = e;\n      return this.handleFiller(t, \"fillStyle\", s);\n    }\n    _renderChar(t, e, s, i, r, n, o) {\n      const a = this._getStyleDeclaration(s, i),\n        h = this.getCompleteStyleDeclaration(s, i),\n        c = \"fillText\" === t && h.fill,\n        l = \"strokeText\" === t && h.stroke && h.strokeWidth;\n      if (l || c) {\n        if (e.save(), e.font = this._getFontDeclaration(h), a.textBackgroundColor && this._removeShadow(e), a.deltaY && (o += a.deltaY), c) {\n          const t = this._setFillStyles(e, h);\n          e.fillText(r, n - t.offsetX, o - t.offsetY);\n        }\n        if (l) {\n          const t = this._setStrokeStyles(e, h);\n          e.strokeText(r, n - t.offsetX, o - t.offsetY);\n        }\n        e.restore();\n      }\n    }\n    setSuperscript(t, e) {\n      this._setScript(t, e, this.superscript);\n    }\n    setSubscript(t, e) {\n      this._setScript(t, e, this.subscript);\n    }\n    _setScript(t, e, s) {\n      const i = this.get2DCursorLocation(t, !0),\n        r = this.getValueOfPropertyAt(i.lineIndex, i.charIndex, \"fontSize\"),\n        n = this.getValueOfPropertyAt(i.lineIndex, i.charIndex, \"deltaY\"),\n        o = {\n          fontSize: r * s.size,\n          deltaY: n + r * s.baseline\n        };\n      this.setSelectionStyles(o, t, e);\n    }\n    _getLineLeftOffset(t) {\n      const e = this.getLineWidth(t),\n        s = this.width - e,\n        i = this.textAlign,\n        r = this.direction,\n        n = this.isEndOfWrapping(t);\n      let o = 0;\n      return i === uo || i === po && !n || i === fo && !n || i === go && !n ? 0 : (i === D && (o = s / 2), i === A && (o = s), i === po && (o = s / 2), i === fo && (o = s), \"rtl\" === r && (i === A || i === uo || i === fo ? o = 0 : i === M || i === go ? o = -s : i !== D && i !== po || (o = -s / 2)), o);\n    }\n    _clearCache() {\n      this._forceClearCache = !1, this.__lineWidths = [], this.__lineHeights = [], this.__charBounds = [];\n    }\n    getLineWidth(t) {\n      if (void 0 !== this.__lineWidths[t]) return this.__lineWidths[t];\n      const {\n        width: e\n      } = this.measureLine(t);\n      return this.__lineWidths[t] = e, e;\n    }\n    _getWidthOfCharSpacing() {\n      return 0 !== this.charSpacing ? this.fontSize * this.charSpacing / 1e3 : 0;\n    }\n    getValueOfPropertyAt(t, e, s) {\n      var i;\n      return null !== (i = this._getStyleDeclaration(t, e)[s]) && void 0 !== i ? i : this[s];\n    }\n    _renderTextDecoration(t, e) {\n      if (!this[e] && !this.styleHas(e)) return;\n      let s = this._getTopOffset();\n      const i = this._getLeftOffset(),\n        r = this.path,\n        n = this._getWidthOfCharSpacing(),\n        o = this.offsets[e];\n      for (let a = 0, h = this._textLines.length; a < h; a++) {\n        const h = this.getHeightOfLine(a);\n        if (!this[e] && !this.styleHas(e, a)) {\n          s += h;\n          continue;\n        }\n        const c = this._textLines[a],\n          l = h / this.lineHeight,\n          u = this._getLineLeftOffset(a);\n        let d,\n          g,\n          f = 0,\n          p = 0,\n          m = this.getValueOfPropertyAt(a, 0, e),\n          v = this.getValueOfPropertyAt(a, 0, K);\n        const y = s + l * (1 - this._fontSizeFraction);\n        let _ = this.getHeightOfChar(a, 0),\n          x = this.getValueOfPropertyAt(a, 0, \"deltaY\");\n        for (let s = 0, n = c.length; s < n; s++) {\n          const n = this.__charBounds[a][s];\n          d = this.getValueOfPropertyAt(a, s, e), g = this.getValueOfPropertyAt(a, s, K);\n          const h = this.getHeightOfChar(a, s),\n            c = this.getValueOfPropertyAt(a, s, \"deltaY\");\n          if (r && d && g) t.save(), t.fillStyle = v, t.translate(n.renderLeft, n.renderTop), t.rotate(n.angle), t.fillRect(-n.kernedWidth / 2, o * h + c, n.kernedWidth, this.fontSize / 15), t.restore();else if ((d !== m || g !== v || h !== _ || c !== x) && p > 0) {\n            let e = i + u + f;\n            \"rtl\" === this.direction && (e = this.width - e - p), m && v && (t.fillStyle = v, t.fillRect(e, y + o * _ + x, p, this.fontSize / 15)), f = n.left, p = n.width, m = d, v = g, _ = h, x = c;\n          } else p += n.kernedWidth;\n        }\n        let C = i + u + f;\n        \"rtl\" === this.direction && (C = this.width - C - p), t.fillStyle = g, d && g && t.fillRect(C, y + o * _ + x, p - n, this.fontSize / 15), s += h;\n      }\n      this._removeShadow(t);\n    }\n    _getFontDeclaration() {\n      let {\n          fontFamily: t = this.fontFamily,\n          fontStyle: e = this.fontStyle,\n          fontWeight: s = this.fontWeight,\n          fontSize: i = this.fontSize\n        } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n        r = arguments.length > 1 ? arguments[1] : void 0;\n      const n = t.includes(\"'\") || t.includes('\"') || t.includes(\",\") || bo.genericFonts.includes(t.toLowerCase()) ? t : '\"'.concat(t, '\"');\n      return [e, s, \"\".concat(r ? this.CACHE_FONT_SIZE : i, \"px\"), n].join(\" \");\n    }\n    render(t) {\n      this.visible && (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen() || (this._forceClearCache && this.initDimensions(), super.render(t)));\n    }\n    graphemeSplit(t) {\n      return Di(t);\n    }\n    _splitTextIntoLines(t) {\n      const e = t.split(this._reNewline),\n        s = new Array(e.length),\n        i = [\"\\n\"];\n      let r = [];\n      for (let t = 0; t < e.length; t++) s[t] = this.graphemeSplit(e[t]), r = r.concat(s[t], i);\n      return r.pop(), {\n        _unwrappedLines: s,\n        lines: e,\n        graphemeText: r,\n        graphemeLines: s\n      };\n    }\n    toObject() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n      return i(i({}, super.toObject([...ho, ...t])), {}, {\n        styles: Ai(this.styles, this.text)\n      }, this.path ? {\n        path: this.path.toObject()\n      } : {});\n    }\n    set(t, e) {\n      const {\n        textLayoutProperties: s\n      } = this.constructor;\n      super.set(t, e);\n      let i = !1,\n        r = !1;\n      if (\"object\" == typeof t) for (const e in t) \"path\" === e && this.setPathInfo(), i = i || s.includes(e), r = r || \"path\" === e;else i = s.includes(t), r = \"path\" === t;\n      return r && this.setPathInfo(), i && this.initialized && (this.initDimensions(), this.setCoords()), this;\n    }\n    complexity() {\n      return 1;\n    }\n    static async fromElement(t, e, s) {\n      const n = dr(t, bo.ATTRIBUTE_NAMES, s),\n        o = i(i({}, e), n),\n        {\n          textAnchor: a = M,\n          textDecoration: h = \"\",\n          dx: c = 0,\n          dy: l = 0,\n          top: u = 0,\n          left: d = 0,\n          fontSize: g = O,\n          strokeWidth: f = 1\n        } = o,\n        p = r(o, xo),\n        m = new this((t.textContent || \"\").replace(/^\\s+|\\s+$|\\n+/g, \"\").replace(/\\s+/g, \" \"), i({\n          left: d + c,\n          top: u + l,\n          underline: h.includes(\"underline\"),\n          overline: h.includes(\"overline\"),\n          linethrough: h.includes(\"line-through\"),\n          strokeWidth: 0,\n          fontSize: g\n        }, p)),\n        v = m.getScaledHeight() / m.height,\n        y = ((m.height + m.strokeWidth) * m.lineHeight - m.height) * v,\n        _ = m.getScaledHeight() + y;\n      let x = 0;\n      return a === D && (x = m.getScaledWidth() / 2), a === A && (x = m.getScaledWidth()), m.set({\n        left: m.left - x,\n        top: m.top - (_ - m.fontSize * (.07 + m._fontSizeFraction)) / m.lineHeight,\n        strokeWidth: f\n      }), m;\n    }\n    static fromObject(t) {\n      return this._fromObject(i(i({}, t), {}, {\n        styles: ji(t.styles || {}, t.text)\n      }), {\n        extraParam: \"text\"\n      });\n    }\n  }\n  e(bo, \"textLayoutProperties\", ao), e(bo, \"cacheProperties\", [...ps, ...ho]), e(bo, \"ownDefaults\", lo), e(bo, \"type\", \"Text\"), e(bo, \"genericFonts\", [\"serif\", \"sans-serif\", \"monospace\", \"cursive\", \"fantasy\", \"system-ui\", \"ui-serif\", \"ui-sans-serif\", \"ui-monospace\", \"ui-rounded\", \"math\", \"emoji\", \"fangsong\"]), e(bo, \"ATTRIBUTE_NAMES\", Fi.concat(\"x\", \"y\", \"dx\", \"dy\", \"font-family\", \"font-style\", \"font-weight\", \"font-size\", \"letter-spacing\", \"text-decoration\", \"text-anchor\")), yi(bo, [class extends Xe {\n    _toSVG() {\n      const t = this._getSVGLeftTopOffsets(),\n        e = this._getSVGTextAndBg(t.textTop, t.textLeft);\n      return this._wrapSVGTextAndBg(e);\n    }\n    toSVG(t) {\n      return this._createBaseSVGMarkup(this._toSVG(), {\n        reviver: t,\n        noStyle: !0,\n        withShadow: !0\n      });\n    }\n    _getSVGLeftTopOffsets() {\n      return {\n        textLeft: -this.width / 2,\n        textTop: -this.height / 2,\n        lineTop: this.getHeightOfLine(0)\n      };\n    }\n    _wrapSVGTextAndBg(t) {\n      let {\n        textBgRects: e,\n        textSpans: s\n      } = t;\n      const i = this.getSvgTextDecoration(this);\n      return [e.join(\"\"), '\\t\\t<text xml:space=\"preserve\" ', this.fontFamily ? 'font-family=\"'.concat(this.fontFamily.replace(yo, \"'\"), '\" ') : \"\", this.fontSize ? 'font-size=\"'.concat(this.fontSize, '\" ') : \"\", this.fontStyle ? 'font-style=\"'.concat(this.fontStyle, '\" ') : \"\", this.fontWeight ? 'font-weight=\"'.concat(this.fontWeight, '\" ') : \"\", i ? 'text-decoration=\"'.concat(i, '\" ') : \"\", \"rtl\" === this.direction ? 'direction=\"'.concat(this.direction, '\" ') : \"\", 'style=\"', this.getSvgStyles(!0), '\"', this.addPaintOrder(), \" >\", s.join(\"\"), \"</text>\\n\"];\n    }\n    _getSVGTextAndBg(t, e) {\n      const s = [],\n        i = [];\n      let r,\n        n = t;\n      this.backgroundColor && i.push(..._o(this.backgroundColor, -this.width / 2, -this.height / 2, this.width, this.height));\n      for (let t = 0, o = this._textLines.length; t < o; t++) r = this._getLineLeftOffset(t), \"rtl\" === this.direction && (r += this.width), (this.textBackgroundColor || this.styleHas(\"textBackgroundColor\", t)) && this._setSVGTextLineBg(i, t, e + r, n), this._setSVGTextLineText(s, t, e + r, n), n += this.getHeightOfLine(t);\n      return {\n        textSpans: s,\n        textBgRects: i\n      };\n    }\n    _createTextCharSpan(t, e, s, i) {\n      const r = this.getSvgSpanStyles(e, t !== t.trim() || !!t.match(vo)),\n        n = r ? 'style=\"'.concat(r, '\"') : \"\",\n        o = e.deltaY,\n        h = o ? ' dy=\"'.concat(Kt(o, a.NUM_FRACTION_DIGITS), '\" ') : \"\";\n      return '<tspan x=\"'.concat(Kt(s, a.NUM_FRACTION_DIGITS), '\" y=\"').concat(Kt(i, a.NUM_FRACTION_DIGITS), '\" ').concat(h).concat(n, \">\").concat(ki(t), \"</tspan>\");\n    }\n    _setSVGTextLineText(t, e, s, i) {\n      const r = this.getHeightOfLine(e),\n        n = this.textAlign.includes(uo),\n        o = this._textLines[e];\n      let a,\n        h,\n        c,\n        l,\n        u,\n        d = \"\",\n        g = 0;\n      i += r * (1 - this._fontSizeFraction) / this.lineHeight;\n      for (let r = 0, f = o.length - 1; r <= f; r++) u = r === f || this.charSpacing, d += o[r], c = this.__charBounds[e][r], 0 === g ? (s += c.kernedWidth - c.width, g += c.width) : g += c.kernedWidth, n && !u && this._reSpaceAndTab.test(o[r]) && (u = !0), u || (a = a || this.getCompleteStyleDeclaration(e, r), h = this.getCompleteStyleDeclaration(e, r + 1), u = Ei(a, h, !0)), u && (l = this._getStyleDeclaration(e, r), t.push(this._createTextCharSpan(d, l, s, i)), d = \"\", a = h, \"rtl\" === this.direction ? s -= g : s += g, g = 0);\n    }\n    _setSVGTextLineBg(t, e, s, i) {\n      const r = this._textLines[e],\n        n = this.getHeightOfLine(e) / this.lineHeight;\n      let o,\n        a = 0,\n        h = 0,\n        c = this.getValueOfPropertyAt(e, 0, \"textBackgroundColor\");\n      for (let l = 0; l < r.length; l++) {\n        const {\n          left: r,\n          width: u,\n          kernedWidth: d\n        } = this.__charBounds[e][l];\n        o = this.getValueOfPropertyAt(e, l, \"textBackgroundColor\"), o !== c ? (c && t.push(..._o(c, s + h, i, a, n)), h = r, a = u, c = o) : a += d;\n      }\n      o && t.push(..._o(c, s + h, i, a, n));\n    }\n    _getSVGLineTopOffset(t) {\n      let e,\n        s = 0;\n      for (e = 0; e < t; e++) s += this.getHeightOfLine(e);\n      const i = this.getHeightOfLine(e);\n      return {\n        lineTop: s,\n        offset: (this._fontSizeMult - this._fontSizeFraction) * i / (this.lineHeight * this._fontSizeMult)\n      };\n    }\n    getSvgStyles(t) {\n      return \"\".concat(super.getSvgStyles(t), \" white-space: pre;\");\n    }\n    getSvgSpanStyles(t, e) {\n      const {\n          fontFamily: s,\n          strokeWidth: i,\n          stroke: r,\n          fill: n,\n          fontSize: o,\n          fontStyle: a,\n          fontWeight: h,\n          deltaY: c\n        } = t,\n        l = this.getSvgTextDecoration(t);\n      return [r ? $t(J, r) : \"\", i ? \"stroke-width: \".concat(i, \"; \") : \"\", s ? \"font-family: \".concat(s.includes(\"'\") || s.includes('\"') ? s : \"'\".concat(s, \"'\"), \"; \") : \"\", o ? \"font-size: \".concat(o, \"px; \") : \"\", a ? \"font-style: \".concat(a, \"; \") : \"\", h ? \"font-weight: \".concat(h, \"; \") : \"\", l ? \"text-decoration: \".concat(l, \"; \") : l, n ? $t(K, n) : \"\", c ? \"baseline-shift: \".concat(-c, \"; \") : \"\", e ? \"white-space: pre; \" : \"\"].join(\"\");\n    }\n    getSvgTextDecoration(t) {\n      return [\"overline\", \"underline\", \"line-through\"].filter(e => t[e.replace(\"-\", \"\")]).join(\" \");\n    }\n  }]), tt.setClass(bo), tt.setSVGClass(bo);\n  class So {\n    constructor(t) {\n      e(this, \"target\", void 0), e(this, \"__mouseDownInPlace\", !1), e(this, \"__dragStartFired\", !1), e(this, \"__isDraggingOver\", !1), e(this, \"__dragStartSelection\", void 0), e(this, \"__dragImageDisposer\", void 0), e(this, \"_dispose\", void 0), this.target = t;\n      const s = [this.target.on(\"dragenter\", this.dragEnterHandler.bind(this)), this.target.on(\"dragover\", this.dragOverHandler.bind(this)), this.target.on(\"dragleave\", this.dragLeaveHandler.bind(this)), this.target.on(\"dragend\", this.dragEndHandler.bind(this)), this.target.on(\"drop\", this.dropHandler.bind(this))];\n      this._dispose = () => {\n        s.forEach(t => t()), this._dispose = void 0;\n      };\n    }\n    isPointerOverSelection(t) {\n      const e = this.target,\n        s = e.getSelectionStartFromPointer(t);\n      return e.isEditing && s >= e.selectionStart && s <= e.selectionEnd && e.selectionStart < e.selectionEnd;\n    }\n    start(t) {\n      return this.__mouseDownInPlace = this.isPointerOverSelection(t);\n    }\n    isActive() {\n      return this.__mouseDownInPlace;\n    }\n    end(t) {\n      const e = this.isActive();\n      return e && !this.__dragStartFired && (this.target.setCursorByClick(t), this.target.initDelayedCursor(!0)), this.__mouseDownInPlace = !1, this.__dragStartFired = !1, this.__isDraggingOver = !1, e;\n    }\n    getDragStartSelection() {\n      return this.__dragStartSelection;\n    }\n    setDragImage(t, e) {\n      var s;\n      let {\n        selectionStart: i,\n        selectionEnd: r\n      } = e;\n      const n = this.target,\n        o = n.canvas,\n        a = new ot(n.flipX ? -1 : 1, n.flipY ? -1 : 1),\n        h = n._getCursorBoundaries(i),\n        c = new ot(h.left + h.leftOffset, h.top + h.topOffset).multiply(a).transform(n.calcTransformMatrix()),\n        l = o.getScenePoint(t).subtract(c),\n        u = n.getCanvasRetinaScaling(),\n        d = n.getBoundingRect(),\n        g = c.subtract(new ot(d.left, d.top)),\n        f = o.viewportTransform,\n        p = g.add(l).transform(f, !0),\n        m = n.backgroundColor,\n        v = Oi(n.styles);\n      n.backgroundColor = \"\";\n      const y = {\n        stroke: \"transparent\",\n        fill: \"transparent\",\n        textBackgroundColor: \"transparent\"\n      };\n      n.setSelectionStyles(y, 0, i), n.setSelectionStyles(y, r, n.text.length), n.dirty = !0;\n      const _ = n.toCanvasElement({\n        enableRetinaScaling: o.enableRetinaScaling,\n        viewportTransform: !0\n      });\n      n.backgroundColor = m, n.styles = v, n.dirty = !0, an(_, {\n        position: \"fixed\",\n        left: \"\".concat(-_.width, \"px\"),\n        border: j,\n        width: \"\".concat(_.width / u, \"px\"),\n        height: \"\".concat(_.height / u, \"px\")\n      }), this.__dragImageDisposer && this.__dragImageDisposer(), this.__dragImageDisposer = () => {\n        _.remove();\n      }, ne(t.target || this.target.hiddenTextarea).body.appendChild(_), null === (s = t.dataTransfer) || void 0 === s || s.setDragImage(_, p.x, p.y);\n    }\n    onDragStart(t) {\n      this.__dragStartFired = !0;\n      const e = this.target,\n        s = this.isActive();\n      if (s && t.dataTransfer) {\n        const s = this.__dragStartSelection = {\n            selectionStart: e.selectionStart,\n            selectionEnd: e.selectionEnd\n          },\n          r = e._text.slice(s.selectionStart, s.selectionEnd).join(\"\"),\n          n = i({\n            text: e.text,\n            value: r\n          }, s);\n        t.dataTransfer.setData(\"text/plain\", r), t.dataTransfer.setData(\"application/fabric\", JSON.stringify({\n          value: r,\n          styles: e.getSelectionStyles(s.selectionStart, s.selectionEnd, !0)\n        })), t.dataTransfer.effectAllowed = \"copyMove\", this.setDragImage(t, n);\n      }\n      return e.abortCursorAnimation(), s;\n    }\n    canDrop(t) {\n      if (this.target.editable && !this.target.getActiveControl() && !t.defaultPrevented) {\n        if (this.isActive() && this.__dragStartSelection) {\n          const e = this.target.getSelectionStartFromPointer(t),\n            s = this.__dragStartSelection;\n          return e < s.selectionStart || e > s.selectionEnd;\n        }\n        return !0;\n      }\n      return !1;\n    }\n    targetCanDrop(t) {\n      return this.target.canDrop(t);\n    }\n    dragEnterHandler(t) {\n      let {\n        e: e\n      } = t;\n      const s = this.targetCanDrop(e);\n      !this.__isDraggingOver && s && (this.__isDraggingOver = !0);\n    }\n    dragOverHandler(t) {\n      const {\n          e: e\n        } = t,\n        s = this.targetCanDrop(e);\n      !this.__isDraggingOver && s ? this.__isDraggingOver = !0 : this.__isDraggingOver && !s && (this.__isDraggingOver = !1), this.__isDraggingOver && (e.preventDefault(), t.canDrop = !0, t.dropTarget = this.target);\n    }\n    dragLeaveHandler() {\n      (this.__isDraggingOver || this.isActive()) && (this.__isDraggingOver = !1);\n    }\n    dropHandler(t) {\n      var e;\n      const {\n          e: s\n        } = t,\n        i = s.defaultPrevented;\n      this.__isDraggingOver = !1, s.preventDefault();\n      let r = null === (e = s.dataTransfer) || void 0 === e ? void 0 : e.getData(\"text/plain\");\n      if (r && !i) {\n        const e = this.target,\n          i = e.canvas;\n        let n = e.getSelectionStartFromPointer(s);\n        const {\n            styles: o\n          } = s.dataTransfer.types.includes(\"application/fabric\") ? JSON.parse(s.dataTransfer.getData(\"application/fabric\")) : {},\n          a = r[Math.max(0, r.length - 1)],\n          h = 0;\n        if (this.__dragStartSelection) {\n          const t = this.__dragStartSelection.selectionStart,\n            s = this.__dragStartSelection.selectionEnd;\n          n > t && n <= s ? n = t : n > s && (n -= s - t), e.removeChars(t, s), delete this.__dragStartSelection;\n        }\n        e._reNewline.test(a) && (e._reNewline.test(e._text[n]) || n === e._text.length) && (r = r.trimEnd()), t.didDrop = !0, t.dropTarget = e, e.insertChars(r, o, n), i.setActiveObject(e), e.enterEditing(s), e.selectionStart = Math.min(n + h, e._text.length), e.selectionEnd = Math.min(e.selectionStart + r.length, e._text.length), e.hiddenTextarea.value = e.text, e._updateTextarea(), e.hiddenTextarea.focus(), e.fire(G, {\n          index: n + h,\n          action: \"drop\"\n        }), i.fire(\"text:changed\", {\n          target: e\n        }), i.contextTopDirty = !0, i.requestRenderAll();\n      }\n    }\n    dragEndHandler(t) {\n      let {\n        e: e\n      } = t;\n      if (this.isActive() && this.__dragStartFired && this.__dragStartSelection) {\n        var s;\n        const t = this.target,\n          i = this.target.canvas,\n          {\n            selectionStart: r,\n            selectionEnd: n\n          } = this.__dragStartSelection,\n          o = (null === (s = e.dataTransfer) || void 0 === s ? void 0 : s.dropEffect) || j;\n        o === j ? (t.selectionStart = r, t.selectionEnd = n, t._updateTextarea(), t.hiddenTextarea.focus()) : (t.clearContextTop(), \"move\" === o && (t.removeChars(r, n), t.selectionStart = t.selectionEnd = r, t.hiddenTextarea && (t.hiddenTextarea.value = t.text), t._updateTextarea(), t.fire(G, {\n          index: r,\n          action: \"dragend\"\n        }), i.fire(\"text:changed\", {\n          target: t\n        }), i.requestRenderAll()), t.exitEditing());\n      }\n      this.__dragImageDisposer && this.__dragImageDisposer(), delete this.__dragImageDisposer, delete this.__dragStartSelection, this.__isDraggingOver = !1;\n    }\n    dispose() {\n      this._dispose && this._dispose();\n    }\n  }\n  const wo = /[ \\n\\.,;!\\?\\-]/;\n  class To extends bo {\n    constructor() {\n      super(...arguments), e(this, \"_currentCursorOpacity\", 1);\n    }\n    initBehavior() {\n      this._tick = this._tick.bind(this), this._onTickComplete = this._onTickComplete.bind(this), this.updateSelectionOnMouseMove = this.updateSelectionOnMouseMove.bind(this);\n    }\n    onDeselect(t) {\n      return this.isEditing && this.exitEditing(), this.selected = !1, super.onDeselect(t);\n    }\n    _animateCursor(t) {\n      let {\n        toValue: e,\n        duration: s,\n        delay: i,\n        onComplete: r\n      } = t;\n      return js({\n        startValue: this._currentCursorOpacity,\n        endValue: e,\n        duration: s,\n        delay: i,\n        onComplete: r,\n        abort: () => !this.canvas || this.selectionStart !== this.selectionEnd,\n        onChange: t => {\n          this._currentCursorOpacity = t, this.renderCursorOrSelection();\n        }\n      });\n    }\n    _tick(t) {\n      this._currentTickState = this._animateCursor({\n        toValue: 0,\n        duration: this.cursorDuration / 2,\n        delay: Math.max(t || 0, 100),\n        onComplete: this._onTickComplete\n      });\n    }\n    _onTickComplete() {\n      var t;\n      null === (t = this._currentTickCompleteState) || void 0 === t || t.abort(), this._currentTickCompleteState = this._animateCursor({\n        toValue: 1,\n        duration: this.cursorDuration,\n        onComplete: this._tick\n      });\n    }\n    initDelayedCursor(t) {\n      this.abortCursorAnimation(), this._tick(t ? 0 : this.cursorDelay);\n    }\n    abortCursorAnimation() {\n      let t = !1;\n      [this._currentTickState, this._currentTickCompleteState].forEach(e => {\n        e && !e.isDone() && (t = !0, e.abort());\n      }), this._currentCursorOpacity = 1, t && this.clearContextTop();\n    }\n    restartCursorIfNeeded() {\n      [this._currentTickState, this._currentTickCompleteState].some(t => !t || t.isDone()) && this.initDelayedCursor();\n    }\n    selectAll() {\n      return this.selectionStart = 0, this.selectionEnd = this._text.length, this._fireSelectionChanged(), this._updateTextarea(), this;\n    }\n    getSelectedText() {\n      return this._text.slice(this.selectionStart, this.selectionEnd).join(\"\");\n    }\n    findWordBoundaryLeft(t) {\n      let e = 0,\n        s = t - 1;\n      if (this._reSpace.test(this._text[s])) for (; this._reSpace.test(this._text[s]);) e++, s--;\n      for (; /\\S/.test(this._text[s]) && s > -1;) e++, s--;\n      return t - e;\n    }\n    findWordBoundaryRight(t) {\n      let e = 0,\n        s = t;\n      if (this._reSpace.test(this._text[s])) for (; this._reSpace.test(this._text[s]);) e++, s++;\n      for (; /\\S/.test(this._text[s]) && s < this._text.length;) e++, s++;\n      return t + e;\n    }\n    findLineBoundaryLeft(t) {\n      let e = 0,\n        s = t - 1;\n      for (; !/\\n/.test(this._text[s]) && s > -1;) e++, s--;\n      return t - e;\n    }\n    findLineBoundaryRight(t) {\n      let e = 0,\n        s = t;\n      for (; !/\\n/.test(this._text[s]) && s < this._text.length;) e++, s++;\n      return t + e;\n    }\n    searchWordBoundary(t, e) {\n      const s = this._text;\n      let i = t > 0 && this._reSpace.test(s[t]) && (-1 === e || !F.test(s[t - 1])) ? t - 1 : t,\n        r = s[i];\n      for (; i > 0 && i < s.length && !wo.test(r);) i += e, r = s[i];\n      return -1 === e && wo.test(r) && i++, i;\n    }\n    selectWord(t) {\n      t = t || this.selectionStart;\n      const e = this.searchWordBoundary(t, -1),\n        s = Math.max(e, this.searchWordBoundary(t, 1));\n      this.selectionStart = e, this.selectionEnd = s, this._fireSelectionChanged(), this._updateTextarea(), this.renderCursorOrSelection();\n    }\n    selectLine(t) {\n      t = t || this.selectionStart;\n      const e = this.findLineBoundaryLeft(t),\n        s = this.findLineBoundaryRight(t);\n      return this.selectionStart = e, this.selectionEnd = s, this._fireSelectionChanged(), this._updateTextarea(), this;\n    }\n    enterEditing(t) {\n      !this.isEditing && this.editable && (this.enterEditingImpl(), this.fire(\"editing:entered\", t ? {\n        e: t\n      } : void 0), this._fireSelectionChanged(), this.canvas && (this.canvas.fire(\"text:editing:entered\", {\n        target: this,\n        e: t\n      }), this.canvas.requestRenderAll()));\n    }\n    enterEditingImpl() {\n      this.canvas && (this.canvas.calcOffset(), this.canvas.textEditingManager.exitTextEditing()), this.isEditing = !0, this.initHiddenTextarea(), this.hiddenTextarea.focus(), this.hiddenTextarea.value = this.text, this._updateTextarea(), this._saveEditingProps(), this._setEditingProps(), this._textBeforeEdit = this.text, this._tick();\n    }\n    updateSelectionOnMouseMove(t) {\n      if (this.getActiveControl()) return;\n      const e = this.hiddenTextarea;\n      ne(e).activeElement !== e && e.focus();\n      const s = this.getSelectionStartFromPointer(t),\n        i = this.selectionStart,\n        r = this.selectionEnd;\n      (s === this.__selectionStartOnMouseDown && i !== r || i !== s && r !== s) && (s > this.__selectionStartOnMouseDown ? (this.selectionStart = this.__selectionStartOnMouseDown, this.selectionEnd = s) : (this.selectionStart = s, this.selectionEnd = this.__selectionStartOnMouseDown), this.selectionStart === i && this.selectionEnd === r || (this._fireSelectionChanged(), this._updateTextarea(), this.renderCursorOrSelection()));\n    }\n    _setEditingProps() {\n      this.hoverCursor = \"text\", this.canvas && (this.canvas.defaultCursor = this.canvas.moveCursor = \"text\"), this.borderColor = this.editingBorderColor, this.hasControls = this.selectable = !1, this.lockMovementX = this.lockMovementY = !0;\n    }\n    fromStringToGraphemeSelection(t, e, s) {\n      const i = s.slice(0, t),\n        r = this.graphemeSplit(i).length;\n      if (t === e) return {\n        selectionStart: r,\n        selectionEnd: r\n      };\n      const n = s.slice(t, e);\n      return {\n        selectionStart: r,\n        selectionEnd: r + this.graphemeSplit(n).length\n      };\n    }\n    fromGraphemeToStringSelection(t, e, s) {\n      const i = s.slice(0, t).join(\"\").length;\n      if (t === e) return {\n        selectionStart: i,\n        selectionEnd: i\n      };\n      return {\n        selectionStart: i,\n        selectionEnd: i + s.slice(t, e).join(\"\").length\n      };\n    }\n    _updateTextarea() {\n      if (this.cursorOffsetCache = {}, this.hiddenTextarea) {\n        if (!this.inCompositionMode) {\n          const t = this.fromGraphemeToStringSelection(this.selectionStart, this.selectionEnd, this._text);\n          this.hiddenTextarea.selectionStart = t.selectionStart, this.hiddenTextarea.selectionEnd = t.selectionEnd;\n        }\n        this.updateTextareaPosition();\n      }\n    }\n    updateFromTextArea() {\n      if (!this.hiddenTextarea) return;\n      this.cursorOffsetCache = {};\n      const t = this.hiddenTextarea;\n      this.text = t.value, this.set(\"dirty\", !0), this.initDimensions(), this.setCoords();\n      const e = this.fromStringToGraphemeSelection(t.selectionStart, t.selectionEnd, t.value);\n      this.selectionEnd = this.selectionStart = e.selectionEnd, this.inCompositionMode || (this.selectionStart = e.selectionStart), this.updateTextareaPosition();\n    }\n    updateTextareaPosition() {\n      if (this.selectionStart === this.selectionEnd) {\n        const t = this._calcTextareaPosition();\n        this.hiddenTextarea.style.left = t.left, this.hiddenTextarea.style.top = t.top;\n      }\n    }\n    _calcTextareaPosition() {\n      if (!this.canvas) return {\n        left: \"1px\",\n        top: \"1px\"\n      };\n      const t = this.inCompositionMode ? this.compositionStart : this.selectionStart,\n        e = this._getCursorBoundaries(t),\n        s = this.get2DCursorLocation(t),\n        i = s.lineIndex,\n        r = s.charIndex,\n        n = this.getValueOfPropertyAt(i, r, \"fontSize\") * this.lineHeight,\n        o = e.leftOffset,\n        a = this.getCanvasRetinaScaling(),\n        h = this.canvas.upperCanvasEl,\n        c = h.width / a,\n        l = h.height / a,\n        u = c - n,\n        d = l - n,\n        g = new ot(e.left + o, e.top + e.topOffset + n).transform(this.calcTransformMatrix()).transform(this.canvas.viewportTransform).multiply(new ot(h.clientWidth / c, h.clientHeight / l));\n      return g.x < 0 && (g.x = 0), g.x > u && (g.x = u), g.y < 0 && (g.y = 0), g.y > d && (g.y = d), g.x += this.canvas._offset.left, g.y += this.canvas._offset.top, {\n        left: \"\".concat(g.x, \"px\"),\n        top: \"\".concat(g.y, \"px\"),\n        fontSize: \"\".concat(n, \"px\"),\n        charHeight: n\n      };\n    }\n    _saveEditingProps() {\n      this._savedProps = {\n        hasControls: this.hasControls,\n        borderColor: this.borderColor,\n        lockMovementX: this.lockMovementX,\n        lockMovementY: this.lockMovementY,\n        hoverCursor: this.hoverCursor,\n        selectable: this.selectable,\n        defaultCursor: this.canvas && this.canvas.defaultCursor,\n        moveCursor: this.canvas && this.canvas.moveCursor\n      };\n    }\n    _restoreEditingProps() {\n      this._savedProps && (this.hoverCursor = this._savedProps.hoverCursor, this.hasControls = this._savedProps.hasControls, this.borderColor = this._savedProps.borderColor, this.selectable = this._savedProps.selectable, this.lockMovementX = this._savedProps.lockMovementX, this.lockMovementY = this._savedProps.lockMovementY, this.canvas && (this.canvas.defaultCursor = this._savedProps.defaultCursor || this.canvas.defaultCursor, this.canvas.moveCursor = this._savedProps.moveCursor || this.canvas.moveCursor), delete this._savedProps);\n    }\n    _exitEditing() {\n      const t = this.hiddenTextarea;\n      this.selected = !1, this.isEditing = !1, t && (t.blur && t.blur(), t.parentNode && t.parentNode.removeChild(t)), this.hiddenTextarea = null, this.abortCursorAnimation(), this.selectionStart !== this.selectionEnd && this.clearContextTop();\n    }\n    exitEditingImpl() {\n      this._exitEditing(), this.selectionEnd = this.selectionStart, this._restoreEditingProps(), this._forceClearCache && (this.initDimensions(), this.setCoords());\n    }\n    exitEditing() {\n      const t = this._textBeforeEdit !== this.text;\n      return this.exitEditingImpl(), this.fire(\"editing:exited\"), t && this.fire(Q), this.canvas && (this.canvas.fire(\"text:editing:exited\", {\n        target: this\n      }), t && this.canvas.fire(\"object:modified\", {\n        target: this\n      })), this;\n    }\n    _removeExtraneousStyles() {\n      for (const t in this.styles) this._textLines[t] || delete this.styles[t];\n    }\n    removeStyleFromTo(t, e) {\n      const {\n          lineIndex: s,\n          charIndex: i\n        } = this.get2DCursorLocation(t, !0),\n        {\n          lineIndex: r,\n          charIndex: n\n        } = this.get2DCursorLocation(e, !0);\n      if (s !== r) {\n        if (this.styles[s]) for (let t = i; t < this._unwrappedTextLines[s].length; t++) delete this.styles[s][t];\n        if (this.styles[r]) for (let t = n; t < this._unwrappedTextLines[r].length; t++) {\n          const e = this.styles[r][t];\n          e && (this.styles[s] || (this.styles[s] = {}), this.styles[s][i + t - n] = e);\n        }\n        for (let t = s + 1; t <= r; t++) delete this.styles[t];\n        this.shiftLineStyles(r, s - r);\n      } else if (this.styles[s]) {\n        const t = this.styles[s],\n          e = n - i;\n        for (let e = i; e < n; e++) delete t[e];\n        for (const i in this.styles[s]) {\n          const s = parseInt(i, 10);\n          s >= n && (t[s - e] = t[i], delete t[i]);\n        }\n      }\n    }\n    shiftLineStyles(t, e) {\n      const s = Object.assign({}, this.styles);\n      for (const i in this.styles) {\n        const r = parseInt(i, 10);\n        r > t && (this.styles[r + e] = s[r], s[r - e] || delete this.styles[r]);\n      }\n    }\n    insertNewlineStyleObject(t, e, s, r) {\n      const n = {},\n        o = this._unwrappedTextLines[t].length,\n        a = o === e;\n      let h = !1;\n      s || (s = 1), this.shiftLineStyles(t, s);\n      const c = this.styles[t] ? this.styles[t][0 === e ? e : e - 1] : void 0;\n      for (const s in this.styles[t]) {\n        const i = parseInt(s, 10);\n        i >= e && (h = !0, n[i - e] = this.styles[t][s], a && 0 === e || delete this.styles[t][s]);\n      }\n      let l = !1;\n      for (h && !a && (this.styles[t + s] = n, l = !0), (l || o > e) && s--; s > 0;) r && r[s - 1] ? this.styles[t + s] = {\n        0: i({}, r[s - 1])\n      } : c ? this.styles[t + s] = {\n        0: i({}, c)\n      } : delete this.styles[t + s], s--;\n      this._forceClearCache = !0;\n    }\n    insertCharStyleObject(t, e, s, r) {\n      this.styles || (this.styles = {});\n      const n = this.styles[t],\n        o = n ? i({}, n) : {};\n      s || (s = 1);\n      for (const t in o) {\n        const i = parseInt(t, 10);\n        i >= e && (n[i + s] = o[i], o[i - s] || delete n[i]);\n      }\n      if (this._forceClearCache = !0, r) {\n        for (; s--;) Object.keys(r[s]).length && (this.styles[t] || (this.styles[t] = {}), this.styles[t][e + s] = i({}, r[s]));\n        return;\n      }\n      if (!n) return;\n      const a = n[e ? e - 1 : 1];\n      for (; a && s--;) this.styles[t][e + s] = i({}, a);\n    }\n    insertNewStyleBlock(t, e, s) {\n      const i = this.get2DCursorLocation(e, !0),\n        r = [0];\n      let n,\n        o = 0;\n      for (let e = 0; e < t.length; e++) \"\\n\" === t[e] ? (o++, r[o] = 0) : r[o]++;\n      for (r[0] > 0 && (this.insertCharStyleObject(i.lineIndex, i.charIndex, r[0], s), s = s && s.slice(r[0] + 1)), o && this.insertNewlineStyleObject(i.lineIndex, i.charIndex + r[0], o), n = 1; n < o; n++) r[n] > 0 ? this.insertCharStyleObject(i.lineIndex + n, 0, r[n], s) : s && this.styles[i.lineIndex + n] && s[0] && (this.styles[i.lineIndex + n][0] = s[0]), s = s && s.slice(r[n] + 1);\n      r[n] > 0 && this.insertCharStyleObject(i.lineIndex + n, 0, r[n], s);\n    }\n    removeChars(t) {\n      let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : t + 1;\n      this.removeStyleFromTo(t, e), this._text.splice(t, e - t), this.text = this._text.join(\"\"), this.set(\"dirty\", !0), this.initDimensions(), this.setCoords(), this._removeExtraneousStyles();\n    }\n    insertChars(t, e, s) {\n      let i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : s;\n      i > s && this.removeStyleFromTo(s, i);\n      const r = this.graphemeSplit(t);\n      this.insertNewStyleBlock(r, s, e), this._text = [...this._text.slice(0, s), ...r, ...this._text.slice(i)], this.text = this._text.join(\"\"), this.set(\"dirty\", !0), this.initDimensions(), this.setCoords(), this._removeExtraneousStyles();\n    }\n    setSelectionStartEndWithShift(t, e, s) {\n      s <= t ? (e === t ? this._selectionDirection = M : this._selectionDirection === A && (this._selectionDirection = M, this.selectionEnd = t), this.selectionStart = s) : s > t && s < e ? this._selectionDirection === A ? this.selectionEnd = s : this.selectionStart = s : (e === t ? this._selectionDirection = A : this._selectionDirection === M && (this._selectionDirection = A, this.selectionStart = e), this.selectionEnd = s);\n    }\n  }\n  class Oo extends To {\n    initHiddenTextarea() {\n      const t = this.canvas && ne(this.canvas.getElement()) || m(),\n        e = t.createElement(\"textarea\");\n      Object.entries({\n        autocapitalize: \"off\",\n        autocorrect: \"off\",\n        autocomplete: \"off\",\n        spellcheck: \"false\",\n        \"data-fabric\": \"textarea\",\n        wrap: \"off\"\n      }).map(t => {\n        let [s, i] = t;\n        return e.setAttribute(s, i);\n      });\n      const {\n        top: s,\n        left: i,\n        fontSize: r\n      } = this._calcTextareaPosition();\n      e.style.cssText = \"position: absolute; top: \".concat(s, \"; left: \").concat(i, \"; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px; padding-top: \").concat(r, \";\"), (this.hiddenTextareaContainer || t.body).appendChild(e), Object.entries({\n        blur: \"blur\",\n        keydown: \"onKeyDown\",\n        keyup: \"onKeyUp\",\n        input: \"onInput\",\n        copy: \"copy\",\n        cut: \"copy\",\n        paste: \"paste\",\n        compositionstart: \"onCompositionStart\",\n        compositionupdate: \"onCompositionUpdate\",\n        compositionend: \"onCompositionEnd\"\n      }).map(t => {\n        let [s, i] = t;\n        return e.addEventListener(s, this[i].bind(this));\n      }), this.hiddenTextarea = e;\n    }\n    blur() {\n      this.abortCursorAnimation();\n    }\n    onKeyDown(t) {\n      if (!this.isEditing) return;\n      const e = \"rtl\" === this.direction ? this.keysMapRtl : this.keysMap;\n      if (t.keyCode in e) this[e[t.keyCode]](t);else {\n        if (!(t.keyCode in this.ctrlKeysMapDown) || !t.ctrlKey && !t.metaKey) return;\n        this[this.ctrlKeysMapDown[t.keyCode]](t);\n      }\n      t.stopImmediatePropagation(), t.preventDefault(), t.keyCode >= 33 && t.keyCode <= 40 ? (this.inCompositionMode = !1, this.clearContextTop(), this.renderCursorOrSelection()) : this.canvas && this.canvas.requestRenderAll();\n    }\n    onKeyUp(t) {\n      !this.isEditing || this._copyDone || this.inCompositionMode ? this._copyDone = !1 : t.keyCode in this.ctrlKeysMapUp && (t.ctrlKey || t.metaKey) && (this[this.ctrlKeysMapUp[t.keyCode]](t), t.stopImmediatePropagation(), t.preventDefault(), this.canvas && this.canvas.requestRenderAll());\n    }\n    onInput(t) {\n      const e = this.fromPaste;\n      if (this.fromPaste = !1, t && t.stopPropagation(), !this.isEditing) return;\n      const s = () => {\n        this.updateFromTextArea(), this.fire(G), this.canvas && (this.canvas.fire(\"text:changed\", {\n          target: this\n        }), this.canvas.requestRenderAll());\n      };\n      if (\"\" === this.hiddenTextarea.value) return this.styles = {}, void s();\n      const i = this._splitTextIntoLines(this.hiddenTextarea.value).graphemeText,\n        r = this._text.length,\n        n = i.length,\n        o = this.selectionStart,\n        h = this.selectionEnd,\n        c = o !== h;\n      let l,\n        u,\n        d,\n        g,\n        f = n - r;\n      const m = this.fromStringToGraphemeSelection(this.hiddenTextarea.selectionStart, this.hiddenTextarea.selectionEnd, this.hiddenTextarea.value),\n        v = o > m.selectionStart;\n      c ? (u = this._text.slice(o, h), f += h - o) : n < r && (u = v ? this._text.slice(h + f, h) : this._text.slice(o, o - f));\n      const y = i.slice(m.selectionEnd - f, m.selectionEnd);\n      if (u && u.length && (y.length && (l = this.getSelectionStyles(o, o + 1, !1), l = y.map(() => l[0])), c ? (d = o, g = h) : v ? (d = h - u.length, g = h) : (d = h, g = h + u.length), this.removeStyleFromTo(d, g)), y.length) {\n        const {\n          copyPasteData: t\n        } = p();\n        e && y.join(\"\") === t.copiedText && !a.disableStyleCopyPaste && (l = t.copiedTextStyle), this.insertNewStyleBlock(y, o, l);\n      }\n      s();\n    }\n    onCompositionStart() {\n      this.inCompositionMode = !0;\n    }\n    onCompositionEnd() {\n      this.inCompositionMode = !1;\n    }\n    onCompositionUpdate(t) {\n      let {\n        target: e\n      } = t;\n      const {\n        selectionStart: s,\n        selectionEnd: i\n      } = e;\n      this.compositionStart = s, this.compositionEnd = i, this.updateTextareaPosition();\n    }\n    copy() {\n      if (this.selectionStart === this.selectionEnd) return;\n      const {\n        copyPasteData: t\n      } = p();\n      t.copiedText = this.getSelectedText(), a.disableStyleCopyPaste ? t.copiedTextStyle = void 0 : t.copiedTextStyle = this.getSelectionStyles(this.selectionStart, this.selectionEnd, !0), this._copyDone = !0;\n    }\n    paste() {\n      this.fromPaste = !0;\n    }\n    _getWidthBeforeCursor(t, e) {\n      let s,\n        i = this._getLineLeftOffset(t);\n      return e > 0 && (s = this.__charBounds[t][e - 1], i += s.left + s.width), i;\n    }\n    getDownCursorOffset(t, e) {\n      const s = this._getSelectionForOffset(t, e),\n        i = this.get2DCursorLocation(s),\n        r = i.lineIndex;\n      if (r === this._textLines.length - 1 || t.metaKey || 34 === t.keyCode) return this._text.length - s;\n      const n = i.charIndex,\n        o = this._getWidthBeforeCursor(r, n),\n        a = this._getIndexOnLine(r + 1, o);\n      return this._textLines[r].slice(n).length + a + 1 + this.missingNewlineOffset(r);\n    }\n    _getSelectionForOffset(t, e) {\n      return t.shiftKey && this.selectionStart !== this.selectionEnd && e ? this.selectionEnd : this.selectionStart;\n    }\n    getUpCursorOffset(t, e) {\n      const s = this._getSelectionForOffset(t, e),\n        i = this.get2DCursorLocation(s),\n        r = i.lineIndex;\n      if (0 === r || t.metaKey || 33 === t.keyCode) return -s;\n      const n = i.charIndex,\n        o = this._getWidthBeforeCursor(r, n),\n        a = this._getIndexOnLine(r - 1, o),\n        h = this._textLines[r].slice(0, n),\n        c = this.missingNewlineOffset(r - 1);\n      return -this._textLines[r - 1].length + a - h.length + (1 - c);\n    }\n    _getIndexOnLine(t, e) {\n      const s = this._textLines[t];\n      let i,\n        r,\n        n = this._getLineLeftOffset(t),\n        o = 0;\n      for (let a = 0, h = s.length; a < h; a++) if (i = this.__charBounds[t][a].width, n += i, n > e) {\n        r = !0;\n        const t = n - i,\n          s = n,\n          h = Math.abs(t - e);\n        o = Math.abs(s - e) < h ? a : a - 1;\n        break;\n      }\n      return r || (o = s.length - 1), o;\n    }\n    moveCursorDown(t) {\n      this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length || this._moveCursorUpOrDown(\"Down\", t);\n    }\n    moveCursorUp(t) {\n      0 === this.selectionStart && 0 === this.selectionEnd || this._moveCursorUpOrDown(\"Up\", t);\n    }\n    _moveCursorUpOrDown(t, e) {\n      const s = this[\"get\".concat(t, \"CursorOffset\")](e, this._selectionDirection === A);\n      if (e.shiftKey ? this.moveCursorWithShift(s) : this.moveCursorWithoutShift(s), 0 !== s) {\n        const t = this.text.length;\n        this.selectionStart = gs(0, this.selectionStart, t), this.selectionEnd = gs(0, this.selectionEnd, t), this.abortCursorAnimation(), this.initDelayedCursor(), this._fireSelectionChanged(), this._updateTextarea();\n      }\n    }\n    moveCursorWithShift(t) {\n      const e = this._selectionDirection === M ? this.selectionStart + t : this.selectionEnd + t;\n      return this.setSelectionStartEndWithShift(this.selectionStart, this.selectionEnd, e), 0 !== t;\n    }\n    moveCursorWithoutShift(t) {\n      return t < 0 ? (this.selectionStart += t, this.selectionEnd = this.selectionStart) : (this.selectionEnd += t, this.selectionStart = this.selectionEnd), 0 !== t;\n    }\n    moveCursorLeft(t) {\n      0 === this.selectionStart && 0 === this.selectionEnd || this._moveCursorLeftOrRight(\"Left\", t);\n    }\n    _move(t, e, s) {\n      let i;\n      if (t.altKey) i = this[\"findWordBoundary\".concat(s)](this[e]);else {\n        if (!t.metaKey && 35 !== t.keyCode && 36 !== t.keyCode) return this[e] += \"Left\" === s ? -1 : 1, !0;\n        i = this[\"findLineBoundary\".concat(s)](this[e]);\n      }\n      return void 0 !== i && this[e] !== i && (this[e] = i, !0);\n    }\n    _moveLeft(t, e) {\n      return this._move(t, e, \"Left\");\n    }\n    _moveRight(t, e) {\n      return this._move(t, e, \"Right\");\n    }\n    moveCursorLeftWithoutShift(t) {\n      let e = !0;\n      return this._selectionDirection = M, this.selectionEnd === this.selectionStart && 0 !== this.selectionStart && (e = this._moveLeft(t, \"selectionStart\")), this.selectionEnd = this.selectionStart, e;\n    }\n    moveCursorLeftWithShift(t) {\n      return this._selectionDirection === A && this.selectionStart !== this.selectionEnd ? this._moveLeft(t, \"selectionEnd\") : 0 !== this.selectionStart ? (this._selectionDirection = M, this._moveLeft(t, \"selectionStart\")) : void 0;\n    }\n    moveCursorRight(t) {\n      this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length || this._moveCursorLeftOrRight(\"Right\", t);\n    }\n    _moveCursorLeftOrRight(t, e) {\n      const s = \"moveCursor\".concat(t).concat(e.shiftKey ? \"WithShift\" : \"WithoutShift\");\n      this._currentCursorOpacity = 1, this[s](e) && (this.abortCursorAnimation(), this.initDelayedCursor(), this._fireSelectionChanged(), this._updateTextarea());\n    }\n    moveCursorRightWithShift(t) {\n      return this._selectionDirection === M && this.selectionStart !== this.selectionEnd ? this._moveRight(t, \"selectionStart\") : this.selectionEnd !== this._text.length ? (this._selectionDirection = A, this._moveRight(t, \"selectionEnd\")) : void 0;\n    }\n    moveCursorRightWithoutShift(t) {\n      let e = !0;\n      return this._selectionDirection = A, this.selectionStart === this.selectionEnd ? (e = this._moveRight(t, \"selectionStart\"), this.selectionEnd = this.selectionStart) : this.selectionStart = this.selectionEnd, e;\n    }\n  }\n  const ko = t => !!t.button;\n  class Do extends Oo {\n    constructor() {\n      super(...arguments), e(this, \"draggableTextDelegate\", void 0);\n    }\n    initBehavior() {\n      this.on(\"mousedown\", this._mouseDownHandler), this.on(\"mousedown:before\", this._mouseDownHandlerBefore), this.on(\"mouseup\", this.mouseUpHandler), this.on(\"mousedblclick\", this.doubleClickHandler), this.on(\"tripleclick\", this.tripleClickHandler), this.__lastClickTime = +new Date(), this.__lastLastClickTime = +new Date(), this.__lastPointer = {}, this.on(\"mousedown\", this.onMouseDown), this.draggableTextDelegate = new So(this), super.initBehavior();\n    }\n    shouldStartDragging() {\n      return this.draggableTextDelegate.isActive();\n    }\n    onDragStart(t) {\n      return this.draggableTextDelegate.onDragStart(t);\n    }\n    canDrop(t) {\n      return this.draggableTextDelegate.canDrop(t);\n    }\n    onMouseDown(t) {\n      if (!this.canvas) return;\n      this.__newClickTime = +new Date();\n      const e = t.pointer;\n      this.isTripleClick(e) && (this.fire(\"tripleclick\", t), me(t.e)), this.__lastLastClickTime = this.__lastClickTime, this.__lastClickTime = this.__newClickTime, this.__lastPointer = e, this.__lastSelected = this.selected && !this.getActiveControl();\n    }\n    isTripleClick(t) {\n      return this.__newClickTime - this.__lastClickTime < 500 && this.__lastClickTime - this.__lastLastClickTime < 500 && this.__lastPointer.x === t.x && this.__lastPointer.y === t.y;\n    }\n    doubleClickHandler(t) {\n      this.isEditing && this.selectWord(this.getSelectionStartFromPointer(t.e));\n    }\n    tripleClickHandler(t) {\n      this.isEditing && this.selectLine(this.getSelectionStartFromPointer(t.e));\n    }\n    _mouseDownHandler(t) {\n      let {\n        e: e\n      } = t;\n      this.canvas && this.editable && !ko(e) && !this.getActiveControl() && (this.draggableTextDelegate.start(e) || (this.canvas.textEditingManager.register(this), this.selected && (this.inCompositionMode = !1, this.setCursorByClick(e)), this.isEditing && (this.__selectionStartOnMouseDown = this.selectionStart, this.selectionStart === this.selectionEnd && this.abortCursorAnimation(), this.renderCursorOrSelection())));\n    }\n    _mouseDownHandlerBefore(t) {\n      let {\n        e: e\n      } = t;\n      this.canvas && this.editable && !ko(e) && (this.selected = this === this.canvas._activeObject);\n    }\n    mouseUpHandler(t) {\n      let {\n        e: e,\n        transform: s\n      } = t;\n      const i = this.draggableTextDelegate.end(e);\n      if (this.canvas) {\n        this.canvas.textEditingManager.unregister(this);\n        const t = this.canvas._activeObject;\n        if (t && t !== this) return;\n      }\n      !this.editable || this.group && !this.group.interactive || s && s.actionPerformed || ko(e) || i || (this.__lastSelected && !this.getActiveControl() ? (this.selected = !1, this.__lastSelected = !1, this.enterEditing(e), this.selectionStart === this.selectionEnd ? this.initDelayedCursor(!0) : this.renderCursorOrSelection()) : this.selected = !0);\n    }\n    setCursorByClick(t) {\n      const e = this.getSelectionStartFromPointer(t),\n        s = this.selectionStart,\n        i = this.selectionEnd;\n      t.shiftKey ? this.setSelectionStartEndWithShift(s, i, e) : (this.selectionStart = e, this.selectionEnd = e), this.isEditing && (this._fireSelectionChanged(), this._updateTextarea());\n    }\n    getSelectionStartFromPointer(t) {\n      const e = this.canvas.getScenePoint(t).transform(wt(this.calcTransformMatrix())).add(new ot(-this._getLeftOffset(), -this._getTopOffset()));\n      let s = 0,\n        i = 0,\n        r = 0;\n      for (let t = 0; t < this._textLines.length && s <= e.y; t++) s += this.getHeightOfLine(t), r = t, t > 0 && (i += this._textLines[t - 1].length + this.missingNewlineOffset(t - 1));\n      let n = Math.abs(this._getLineLeftOffset(r));\n      const o = this._textLines[r].length,\n        a = this.__charBounds[r];\n      for (let t = 0; t < o; t++) {\n        const s = n + a[t].kernedWidth;\n        if (e.x <= s) {\n          Math.abs(e.x - s) <= Math.abs(e.x - n) && i++;\n          break;\n        }\n        n = s, i++;\n      }\n      return Math.min(this.flipX ? o - i : i, this._text.length);\n    }\n  }\n  const Mo = \"moveCursorUp\",\n    Po = \"moveCursorDown\",\n    Eo = \"moveCursorLeft\",\n    Ao = \"moveCursorRight\",\n    jo = \"exitEditing\",\n    Fo = i({\n      selectionStart: 0,\n      selectionEnd: 0,\n      selectionColor: \"rgba(17,119,255,0.3)\",\n      isEditing: !1,\n      editable: !0,\n      editingBorderColor: \"rgba(102,153,255,0.25)\",\n      cursorWidth: 2,\n      cursorColor: \"\",\n      cursorDelay: 1e3,\n      cursorDuration: 600,\n      caching: !0,\n      hiddenTextareaContainer: null,\n      keysMap: {\n        9: jo,\n        27: jo,\n        33: Mo,\n        34: Po,\n        35: Ao,\n        36: Eo,\n        37: Eo,\n        38: Mo,\n        39: Ao,\n        40: Po\n      },\n      keysMapRtl: {\n        9: jo,\n        27: jo,\n        33: Mo,\n        34: Po,\n        35: Eo,\n        36: Ao,\n        37: Ao,\n        38: Mo,\n        39: Eo,\n        40: Po\n      },\n      ctrlKeysMapDown: {\n        65: \"selectAll\"\n      },\n      ctrlKeysMapUp: {\n        67: \"copy\",\n        88: \"cut\"\n      }\n    }, {\n      _selectionDirection: null,\n      _reSpace: /\\s|\\r?\\n/,\n      inCompositionMode: !1\n    });\n  class Lo extends Do {\n    static getDefaults() {\n      return i(i({}, super.getDefaults()), Lo.ownDefaults);\n    }\n    get type() {\n      const t = super.type;\n      return \"itext\" === t ? \"i-text\" : t;\n    }\n    constructor(t, e) {\n      super(t, i(i({}, Lo.ownDefaults), e)), this.initBehavior();\n    }\n    _set(t, e) {\n      return this.isEditing && this._savedProps && t in this._savedProps ? (this._savedProps[t] = e, this) : (\"canvas\" === t && (this.canvas instanceof Cn && this.canvas.textEditingManager.remove(this), e instanceof Cn && e.textEditingManager.add(this)), super._set(t, e));\n    }\n    setSelectionStart(t) {\n      t = Math.max(t, 0), this._updateAndFire(\"selectionStart\", t);\n    }\n    setSelectionEnd(t) {\n      t = Math.min(t, this.text.length), this._updateAndFire(\"selectionEnd\", t);\n    }\n    _updateAndFire(t, e) {\n      this[t] !== e && (this._fireSelectionChanged(), this[t] = e), this._updateTextarea();\n    }\n    _fireSelectionChanged() {\n      this.fire(\"selection:changed\"), this.canvas && this.canvas.fire(\"text:selection:changed\", {\n        target: this\n      });\n    }\n    initDimensions() {\n      this.isEditing && this.initDelayedCursor(), super.initDimensions();\n    }\n    getSelectionStyles() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.selectionStart || 0,\n        e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selectionEnd,\n        s = arguments.length > 2 ? arguments[2] : void 0;\n      return super.getSelectionStyles(t, e, s);\n    }\n    setSelectionStyles(t) {\n      let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selectionStart || 0,\n        s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.selectionEnd;\n      return super.setSelectionStyles(t, e, s);\n    }\n    get2DCursorLocation() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.selectionStart,\n        e = arguments.length > 1 ? arguments[1] : void 0;\n      return super.get2DCursorLocation(t, e);\n    }\n    render(t) {\n      super.render(t), this.cursorOffsetCache = {}, this.renderCursorOrSelection();\n    }\n    toCanvasElement(t) {\n      const e = this.isEditing;\n      this.isEditing = !1;\n      const s = super.toCanvasElement(t);\n      return this.isEditing = e, s;\n    }\n    renderCursorOrSelection() {\n      if (!this.isEditing) return;\n      const t = this.clearContextTop(!0);\n      if (!t) return;\n      const e = this._getCursorBoundaries();\n      this.selectionStart !== this.selectionEnd || this.inCompositionMode ? this.renderSelection(t, e) : this.renderCursor(t, e), this.canvas.contextTopDirty = !0, t.restore();\n    }\n    _getCursorBoundaries() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.selectionStart,\n        e = arguments.length > 1 ? arguments[1] : void 0;\n      const s = this._getLeftOffset(),\n        i = this._getTopOffset(),\n        r = this._getCursorBoundariesOffsets(t, e);\n      return {\n        left: s,\n        top: i,\n        leftOffset: r.left,\n        topOffset: r.top\n      };\n    }\n    _getCursorBoundariesOffsets(t, e) {\n      return e ? this.__getCursorBoundariesOffsets(t) : this.cursorOffsetCache && \"top\" in this.cursorOffsetCache ? this.cursorOffsetCache : this.cursorOffsetCache = this.__getCursorBoundariesOffsets(t);\n    }\n    __getCursorBoundariesOffsets(t) {\n      let e = 0,\n        s = 0;\n      const {\n        charIndex: i,\n        lineIndex: r\n      } = this.get2DCursorLocation(t);\n      for (let t = 0; t < r; t++) e += this.getHeightOfLine(t);\n      const n = this._getLineLeftOffset(r),\n        o = this.__charBounds[r][i];\n      o && (s = o.left), 0 !== this.charSpacing && i === this._textLines[r].length && (s -= this._getWidthOfCharSpacing());\n      const a = {\n        top: e,\n        left: n + (s > 0 ? s : 0)\n      };\n      return \"rtl\" === this.direction && (this.textAlign === A || this.textAlign === uo || this.textAlign === fo ? a.left *= -1 : this.textAlign === M || this.textAlign === go ? a.left = n - (s > 0 ? s : 0) : this.textAlign !== D && this.textAlign !== po || (a.left = n - (s > 0 ? s : 0))), a;\n    }\n    renderCursorAt(t) {\n      this._renderCursor(this.canvas.contextTop, this._getCursorBoundaries(t, !0), t);\n    }\n    renderCursor(t, e) {\n      this._renderCursor(t, e, this.selectionStart);\n    }\n    getCursorRenderingData() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.selectionStart,\n        e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this._getCursorBoundaries(t);\n      const s = this.get2DCursorLocation(t),\n        i = s.lineIndex,\n        r = s.charIndex > 0 ? s.charIndex - 1 : 0,\n        n = this.getValueOfPropertyAt(i, r, \"fontSize\"),\n        o = this.getObjectScaling().x * this.canvas.getZoom(),\n        a = this.cursorWidth / o,\n        h = this.getValueOfPropertyAt(i, r, \"deltaY\"),\n        c = e.topOffset + (1 - this._fontSizeFraction) * this.getHeightOfLine(i) / this.lineHeight - n * (1 - this._fontSizeFraction);\n      return {\n        color: this.cursorColor || this.getValueOfPropertyAt(i, r, \"fill\"),\n        opacity: this._currentCursorOpacity,\n        left: e.left + e.leftOffset - a / 2,\n        top: c + e.top + h,\n        width: a,\n        height: n\n      };\n    }\n    _renderCursor(t, e, s) {\n      const {\n        color: i,\n        opacity: r,\n        left: n,\n        top: o,\n        width: a,\n        height: h\n      } = this.getCursorRenderingData(s, e);\n      t.fillStyle = i, t.globalAlpha = r, t.fillRect(n, o, a, h);\n    }\n    renderSelection(t, e) {\n      const s = {\n        selectionStart: this.inCompositionMode ? this.hiddenTextarea.selectionStart : this.selectionStart,\n        selectionEnd: this.inCompositionMode ? this.hiddenTextarea.selectionEnd : this.selectionEnd\n      };\n      this._renderSelection(t, s, e);\n    }\n    renderDragSourceEffect() {\n      const t = this.draggableTextDelegate.getDragStartSelection();\n      this._renderSelection(this.canvas.contextTop, t, this._getCursorBoundaries(t.selectionStart, !0));\n    }\n    renderDropTargetEffect(t) {\n      const e = this.getSelectionStartFromPointer(t);\n      this.renderCursorAt(e);\n    }\n    _renderSelection(t, e, s) {\n      const i = e.selectionStart,\n        r = e.selectionEnd,\n        n = this.textAlign.includes(uo),\n        o = this.get2DCursorLocation(i),\n        a = this.get2DCursorLocation(r),\n        h = o.lineIndex,\n        c = a.lineIndex,\n        l = o.charIndex < 0 ? 0 : o.charIndex,\n        u = a.charIndex < 0 ? 0 : a.charIndex;\n      for (let e = h; e <= c; e++) {\n        const i = this._getLineLeftOffset(e) || 0;\n        let r = this.getHeightOfLine(e),\n          o = 0,\n          a = 0,\n          d = 0;\n        if (e === h && (a = this.__charBounds[h][l].left), e >= h && e < c) d = n && !this.isEndOfWrapping(e) ? this.width : this.getLineWidth(e) || 5;else if (e === c) if (0 === u) d = this.__charBounds[c][u].left;else {\n          const t = this._getWidthOfCharSpacing();\n          d = this.__charBounds[c][u - 1].left + this.__charBounds[c][u - 1].width - t;\n        }\n        o = r, (this.lineHeight < 1 || e === c && this.lineHeight > 1) && (r /= this.lineHeight);\n        let g = s.left + i + a,\n          f = r,\n          p = 0;\n        const m = d - a;\n        this.inCompositionMode ? (t.fillStyle = this.compositionColor || \"black\", f = 1, p = r) : t.fillStyle = this.selectionColor, \"rtl\" === this.direction && (this.textAlign === A || this.textAlign === uo || this.textAlign === fo ? g = this.width - g - m : this.textAlign === M || this.textAlign === go ? g = s.left + i - d : this.textAlign !== D && this.textAlign !== po || (g = s.left + i - d)), t.fillRect(g, s.top + s.topOffset + p, m, f), s.topOffset += o;\n      }\n    }\n    getCurrentCharFontSize() {\n      const t = this._getCurrentCharIndex();\n      return this.getValueOfPropertyAt(t.l, t.c, \"fontSize\");\n    }\n    getCurrentCharColor() {\n      const t = this._getCurrentCharIndex();\n      return this.getValueOfPropertyAt(t.l, t.c, K);\n    }\n    _getCurrentCharIndex() {\n      const t = this.get2DCursorLocation(this.selectionStart, !0),\n        e = t.charIndex > 0 ? t.charIndex - 1 : 0;\n      return {\n        l: t.lineIndex,\n        c: e\n      };\n    }\n    dispose() {\n      this.exitEditingImpl(), this.draggableTextDelegate.dispose(), super.dispose();\n    }\n  }\n  e(Lo, \"ownDefaults\", Fo), e(Lo, \"type\", \"IText\"), tt.setClass(Lo), tt.setClass(Lo, \"i-text\");\n  class Ro extends Lo {\n    static getDefaults() {\n      return i(i({}, super.getDefaults()), Ro.ownDefaults);\n    }\n    constructor(t, e) {\n      super(t, i(i({}, Ro.ownDefaults), e));\n    }\n    static createControls() {\n      return {\n        controls: mi()\n      };\n    }\n    initDimensions() {\n      this.initialized && (this.isEditing && this.initDelayedCursor(), this._clearCache(), this.dynamicMinWidth = 0, this._styleMap = this._generateStyleMap(this._splitText()), this.dynamicMinWidth > this.width && this._set(\"width\", this.dynamicMinWidth), this.textAlign.includes(uo) && this.enlargeSpaces(), this.height = this.calcTextHeight());\n    }\n    _generateStyleMap(t) {\n      let e = 0,\n        s = 0,\n        i = 0;\n      const r = {};\n      for (let n = 0; n < t.graphemeLines.length; n++) \"\\n\" === t.graphemeText[i] && n > 0 ? (s = 0, i++, e++) : !this.splitByGrapheme && this._reSpaceAndTab.test(t.graphemeText[i]) && n > 0 && (s++, i++), r[n] = {\n        line: e,\n        offset: s\n      }, i += t.graphemeLines[n].length, s += t.graphemeLines[n].length;\n      return r;\n    }\n    styleHas(t, e) {\n      if (this._styleMap && !this.isWrapping) {\n        const t = this._styleMap[e];\n        t && (e = t.line);\n      }\n      return super.styleHas(t, e);\n    }\n    isEmptyStyles(t) {\n      if (!this.styles) return !0;\n      let e,\n        s = 0,\n        i = t + 1,\n        r = !1;\n      const n = this._styleMap[t],\n        o = this._styleMap[t + 1];\n      n && (t = n.line, s = n.offset), o && (i = o.line, r = i === t, e = o.offset);\n      const a = void 0 === t ? this.styles : {\n        line: this.styles[t]\n      };\n      for (const t in a) for (const i in a[t]) {\n        const n = parseInt(i, 10);\n        if (n >= s && (!r || n < e)) for (const e in a[t][i]) return !1;\n      }\n      return !0;\n    }\n    _getStyleDeclaration(t, e) {\n      if (this._styleMap && !this.isWrapping) {\n        const s = this._styleMap[t];\n        if (!s) return {};\n        t = s.line, e = s.offset + e;\n      }\n      return super._getStyleDeclaration(t, e);\n    }\n    _setStyleDeclaration(t, e, s) {\n      const i = this._styleMap[t];\n      super._setStyleDeclaration(i.line, i.offset + e, s);\n    }\n    _deleteStyleDeclaration(t, e) {\n      const s = this._styleMap[t];\n      super._deleteStyleDeclaration(s.line, s.offset + e);\n    }\n    _getLineStyle(t) {\n      const e = this._styleMap[t];\n      return !!this.styles[e.line];\n    }\n    _setLineStyle(t) {\n      const e = this._styleMap[t];\n      super._setLineStyle(e.line);\n    }\n    _wrapText(t, e) {\n      this.isWrapping = !0;\n      const s = this.getGraphemeDataForRender(t),\n        i = [];\n      for (let t = 0; t < s.wordsData.length; t++) i.push(...this._wrapLine(t, e, s));\n      return this.isWrapping = !1, i;\n    }\n    getGraphemeDataForRender(t) {\n      const e = this.splitByGrapheme,\n        s = e ? \"\" : \" \";\n      let i = 0;\n      return {\n        wordsData: t.map((t, r) => {\n          let n = 0;\n          const o = e ? this.graphemeSplit(t) : this.wordSplit(t);\n          return 0 === o.length ? [{\n            word: [],\n            width: 0\n          }] : o.map(t => {\n            const o = e ? [t] : this.graphemeSplit(t),\n              a = this._measureWord(o, r, n);\n            return i = Math.max(a, i), n += o.length + s.length, {\n              word: o,\n              width: a\n            };\n          });\n        }),\n        largestWordWidth: i\n      };\n    }\n    _measureWord(t, e) {\n      let s,\n        i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,\n        r = 0;\n      for (let n = 0, o = t.length; n < o; n++) {\n        r += this._getGraphemeBox(t[n], e, n + i, s, true).kernedWidth, s = t[n];\n      }\n      return r;\n    }\n    wordSplit(t) {\n      return t.split(this._wordJoiners);\n    }\n    _wrapLine(t, e, s) {\n      let {\n          largestWordWidth: i,\n          wordsData: r\n        } = s,\n        n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0;\n      const o = this._getWidthOfCharSpacing(),\n        a = this.splitByGrapheme,\n        h = [],\n        c = a ? \"\" : \" \";\n      let l = 0,\n        u = [],\n        d = 0,\n        g = 0,\n        f = !0;\n      e -= n;\n      const p = Math.max(e, i, this.dynamicMinWidth),\n        m = r[t];\n      let v;\n      for (d = 0, v = 0; v < m.length; v++) {\n        const {\n          word: e,\n          width: s\n        } = m[v];\n        d += e.length, l += g + s - o, l > p && !f ? (h.push(u), u = [], l = s, f = !0) : l += o, f || a || u.push(c), u = u.concat(e), g = a ? 0 : this._measureWord([c], t, d), d++, f = !1;\n      }\n      return v && h.push(u), i + n > this.dynamicMinWidth && (this.dynamicMinWidth = i - o + n), h;\n    }\n    isEndOfWrapping(t) {\n      return !this._styleMap[t + 1] || this._styleMap[t + 1].line !== this._styleMap[t].line;\n    }\n    missingNewlineOffset(t, e) {\n      return this.splitByGrapheme && !e ? this.isEndOfWrapping(t) ? 1 : 0 : 1;\n    }\n    _splitTextIntoLines(t) {\n      const e = super._splitTextIntoLines(t),\n        s = this._wrapText(e.lines, this.width),\n        i = new Array(s.length);\n      for (let t = 0; t < s.length; t++) i[t] = s[t].join(\"\");\n      return e.lines = i, e.graphemeLines = s, e;\n    }\n    getMinWidth() {\n      return Math.max(this.minWidth, this.dynamicMinWidth);\n    }\n    _removeExtraneousStyles() {\n      const t = new Map();\n      for (const e in this._styleMap) {\n        const s = parseInt(e, 10);\n        if (this._textLines[s]) {\n          const s = this._styleMap[e].line;\n          t.set(\"\".concat(s), !0);\n        }\n      }\n      for (const e in this.styles) t.has(e) || delete this.styles[e];\n    }\n    toObject() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n      return super.toObject([\"minWidth\", \"splitByGrapheme\", ...t]);\n    }\n  }\n  e(Ro, \"type\", \"Textbox\"), e(Ro, \"textLayoutProperties\", [...Lo.textLayoutProperties, \"width\"]), e(Ro, \"ownDefaults\", {\n    minWidth: 20,\n    dynamicMinWidth: 2,\n    lockScalingFlip: !0,\n    noScaleCache: !1,\n    _wordJoiners: /[ \\t\\r]/,\n    splitByGrapheme: !1\n  }), tt.setClass(Ro);\n  class Io extends Cr {\n    shouldPerformLayout(t) {\n      return !!t.target.clipPath && super.shouldPerformLayout(t);\n    }\n    shouldLayoutClipPath() {\n      return !1;\n    }\n    calcLayoutResult(t, e) {\n      const {\n          target: s\n        } = t,\n        {\n          clipPath: i,\n          group: r\n        } = s;\n      if (!i || !this.shouldPerformLayout(t)) return;\n      const {\n          width: n,\n          height: o\n        } = ve(xr(s, i)),\n        a = new ot(n, o);\n      if (i.absolutePositioned) {\n        return {\n          center: Te(i.getRelativeCenterPoint(), void 0, r ? r.calcTransformMatrix() : void 0),\n          size: a\n        };\n      }\n      {\n        const r = i.getRelativeCenterPoint().transform(s.calcOwnMatrix(), !0);\n        if (this.shouldPerformLayout(t)) {\n          const {\n            center: s = new ot(),\n            correction: i = new ot()\n          } = this.calcBoundingBox(e, t) || {};\n          return {\n            center: s.add(r),\n            correction: i.subtract(r),\n            size: a\n          };\n        }\n        return {\n          center: s.getRelativeCenterPoint().add(r),\n          size: a\n        };\n      }\n    }\n  }\n  e(Io, \"type\", \"clip-path\"), tt.setClass(Io);\n  class Bo extends Cr {\n    getInitialSize(t, e) {\n      let {\n          target: s\n        } = t,\n        {\n          size: i\n        } = e;\n      return new ot(s.width || i.x, s.height || i.y);\n    }\n  }\n  e(Bo, \"type\", \"fixed\"), tt.setClass(Bo);\n  class Xo extends Or {\n    subscribeTargets(t) {\n      const e = t.target;\n      t.targets.reduce((t, e) => (e.parent && t.add(e.parent), t), new Set()).forEach(t => {\n        t.layoutManager.subscribeTargets({\n          target: t,\n          targets: [e]\n        });\n      });\n    }\n    unsubscribeTargets(t) {\n      const e = t.target,\n        s = e.getObjects();\n      t.targets.reduce((t, e) => (e.parent && t.add(e.parent), t), new Set()).forEach(t => {\n        !s.some(e => e.parent === t) && t.layoutManager.unsubscribeTargets({\n          target: t,\n          targets: [e]\n        });\n      });\n    }\n  }\n  class Yo extends Mr {\n    static getDefaults() {\n      return i(i({}, super.getDefaults()), Yo.ownDefaults);\n    }\n    constructor() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],\n        e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      super(), Object.assign(this, Yo.ownDefaults), this.setOptions(e);\n      const {\n        left: s,\n        top: i,\n        layoutManager: r\n      } = e;\n      this.groupInit(t, {\n        left: s,\n        top: i,\n        layoutManager: null != r ? r : new Xo()\n      });\n    }\n    _shouldSetNestedCoords() {\n      return !0;\n    }\n    __objectSelectionMonitor() {}\n    multiSelectAdd() {\n      for (var t = arguments.length, e = new Array(t), s = 0; s < t; s++) e[s] = arguments[s];\n      \"selection-order\" === this.multiSelectionStacking ? this.add(...e) : e.forEach(t => {\n        const e = this._objects.findIndex(e => e.isInFrontOf(t)),\n          s = -1 === e ? this.size() : e;\n        this.insertAt(s, t);\n      });\n    }\n    canEnterGroup(t) {\n      return this.getObjects().some(e => e.isDescendantOf(t) || t.isDescendantOf(e)) ? (h(\"error\", \"ActiveSelection: circular object trees are not supported, this call has no effect\"), !1) : super.canEnterGroup(t);\n    }\n    enterGroup(t, e) {\n      t.parent && t.parent === t.group ? t.parent._exitGroup(t) : t.group && t.parent !== t.group && t.group.remove(t), this._enterGroup(t, e);\n    }\n    exitGroup(t, e) {\n      this._exitGroup(t, e), t.parent && t.parent._enterGroup(t, !0);\n    }\n    _onAfterObjectsChange(t, e) {\n      super._onAfterObjectsChange(t, e);\n      const s = new Set();\n      e.forEach(t => {\n        const {\n          parent: e\n        } = t;\n        e && s.add(e);\n      }), t === yr ? s.forEach(t => {\n        t._onAfterObjectsChange(vr, e);\n      }) : s.forEach(t => {\n        t._set(\"dirty\", !0);\n      });\n    }\n    onDeselect() {\n      return this.removeAll(), !1;\n    }\n    toString() {\n      return \"#<ActiveSelection: (\".concat(this.complexity(), \")>\");\n    }\n    shouldCache() {\n      return !1;\n    }\n    isOnACache() {\n      return !1;\n    }\n    _renderControls(t, e, s) {\n      t.save(), t.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n      const r = i(i({\n        hasControls: !1\n      }, s), {}, {\n        forActiveSelection: !0\n      });\n      for (let e = 0; e < this._objects.length; e++) this._objects[e]._renderControls(t, r);\n      super._renderControls(t, e), t.restore();\n    }\n  }\n  e(Yo, \"type\", \"ActiveSelection\"), e(Yo, \"ownDefaults\", {\n    multiSelectionStacking: \"canvas-stacking\"\n  }), tt.setClass(Yo), tt.setClass(Yo, \"activeSelection\");\n  class Wo {\n    constructor() {\n      e(this, \"resources\", {});\n    }\n    applyFilters(t, e, s, i, r) {\n      const n = r.getContext(\"2d\");\n      if (!n) return;\n      n.drawImage(e, 0, 0, s, i);\n      const o = {\n        sourceWidth: s,\n        sourceHeight: i,\n        imageData: n.getImageData(0, 0, s, i),\n        originalEl: e,\n        originalImageData: n.getImageData(0, 0, s, i),\n        canvasEl: r,\n        ctx: n,\n        filterBackend: this\n      };\n      t.forEach(t => {\n        t.applyTo(o);\n      });\n      const {\n        imageData: a\n      } = o;\n      return a.width === s && a.height === i || (r.width = a.width, r.height = a.height), n.putImageData(a, 0, 0), o;\n    }\n  }\n  class Vo {\n    constructor() {\n      let {\n        tileSize: t = a.textureSize\n      } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n      e(this, \"aPosition\", new Float32Array([0, 0, 0, 1, 1, 0, 1, 1])), e(this, \"resources\", {}), this.tileSize = t, this.setupGLContext(t, t), this.captureGPUInfo();\n    }\n    setupGLContext(t, e) {\n      this.dispose(), this.createWebGLCanvas(t, e);\n    }\n    createWebGLCanvas(t, e) {\n      const s = vt({\n          width: t,\n          height: e\n        }),\n        i = s.getContext(\"webgl\", {\n          alpha: !0,\n          premultipliedAlpha: !1,\n          depth: !1,\n          stencil: !1,\n          antialias: !1\n        });\n      i && (i.clearColor(0, 0, 0, 0), this.canvas = s, this.gl = i);\n    }\n    applyFilters(t, e, s, i, r, n) {\n      const o = this.gl,\n        a = r.getContext(\"2d\");\n      if (!o || !a) return;\n      let h;\n      n && (h = this.getCachedTexture(n, e));\n      const c = {\n          originalWidth: e.width || e.naturalWidth || 0,\n          originalHeight: e.height || e.naturalHeight || 0,\n          sourceWidth: s,\n          sourceHeight: i,\n          destinationWidth: s,\n          destinationHeight: i,\n          context: o,\n          sourceTexture: this.createTexture(o, s, i, h ? void 0 : e),\n          targetTexture: this.createTexture(o, s, i),\n          originalTexture: h || this.createTexture(o, s, i, h ? void 0 : e),\n          passes: t.length,\n          webgl: !0,\n          aPosition: this.aPosition,\n          programCache: this.programCache,\n          pass: 0,\n          filterBackend: this,\n          targetCanvas: r\n        },\n        l = o.createFramebuffer();\n      return o.bindFramebuffer(o.FRAMEBUFFER, l), t.forEach(t => {\n        t && t.applyTo(c);\n      }), function (t) {\n        const e = t.targetCanvas,\n          s = e.width,\n          i = e.height,\n          r = t.destinationWidth,\n          n = t.destinationHeight;\n        s === r && i === n || (e.width = r, e.height = n);\n      }(c), this.copyGLTo2D(o, c), o.bindTexture(o.TEXTURE_2D, null), o.deleteTexture(c.sourceTexture), o.deleteTexture(c.targetTexture), o.deleteFramebuffer(l), a.setTransform(1, 0, 0, 1, 0, 0), c;\n    }\n    dispose() {\n      this.canvas && (this.canvas = null, this.gl = null), this.clearWebGLCaches();\n    }\n    clearWebGLCaches() {\n      this.programCache = {}, this.textureCache = {};\n    }\n    createTexture(t, e, s, i, r) {\n      const {\n          NEAREST: n,\n          TEXTURE_2D: o,\n          RGBA: a,\n          UNSIGNED_BYTE: h,\n          CLAMP_TO_EDGE: c,\n          TEXTURE_MAG_FILTER: l,\n          TEXTURE_MIN_FILTER: u,\n          TEXTURE_WRAP_S: d,\n          TEXTURE_WRAP_T: g\n        } = t,\n        f = t.createTexture();\n      return t.bindTexture(o, f), t.texParameteri(o, l, r || n), t.texParameteri(o, u, r || n), t.texParameteri(o, d, c), t.texParameteri(o, g, c), i ? t.texImage2D(o, 0, a, a, h, i) : t.texImage2D(o, 0, a, e, s, 0, a, h, null), f;\n    }\n    getCachedTexture(t, e, s) {\n      const {\n        textureCache: i\n      } = this;\n      if (i[t]) return i[t];\n      {\n        const r = this.createTexture(this.gl, e.width, e.height, e, s);\n        return r && (i[t] = r), r;\n      }\n    }\n    evictCachesForKey(t) {\n      this.textureCache[t] && (this.gl.deleteTexture(this.textureCache[t]), delete this.textureCache[t]);\n    }\n    copyGLTo2D(t, e) {\n      const s = t.canvas,\n        i = e.targetCanvas,\n        r = i.getContext(\"2d\");\n      if (!r) return;\n      r.translate(0, i.height), r.scale(1, -1);\n      const n = s.height - i.height;\n      r.drawImage(s, 0, n, i.width, i.height, 0, 0, i.width, i.height);\n    }\n    copyGLTo2DPutImageData(t, e) {\n      const s = e.targetCanvas.getContext(\"2d\"),\n        i = e.destinationWidth,\n        r = e.destinationHeight,\n        n = i * r * 4;\n      if (!s) return;\n      const o = new Uint8Array(this.imageBuffer, 0, n),\n        a = new Uint8ClampedArray(this.imageBuffer, 0, n);\n      t.readPixels(0, 0, i, r, t.RGBA, t.UNSIGNED_BYTE, o);\n      const h = new ImageData(a, i, r);\n      s.putImageData(h, 0, 0);\n    }\n    captureGPUInfo() {\n      if (this.gpuInfo) return this.gpuInfo;\n      const t = this.gl,\n        e = {\n          renderer: \"\",\n          vendor: \"\"\n        };\n      if (!t) return e;\n      const s = t.getExtension(\"WEBGL_debug_renderer_info\");\n      if (s) {\n        const i = t.getParameter(s.UNMASKED_RENDERER_WEBGL),\n          r = t.getParameter(s.UNMASKED_VENDOR_WEBGL);\n        i && (e.renderer = i.toLowerCase()), r && (e.vendor = r.toLowerCase());\n      }\n      return this.gpuInfo = e, e;\n    }\n  }\n  let Go;\n  function zo() {\n    const {\n      WebGLProbe: t\n    } = p();\n    return t.queryWebGL(pt()), a.enableGLFiltering && t.isSupported(a.textureSize) ? new Vo({\n      tileSize: a.textureSize\n    }) : new Wo();\n  }\n  function Ho() {\n    return !Go && (!(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0]) && (Go = zo()), Go;\n  }\n  const No = [\"filters\", \"resizeFilter\", \"src\", \"crossOrigin\", \"type\"],\n    Uo = [\"cropX\", \"cropY\"];\n  class qo extends _i {\n    static getDefaults() {\n      return i(i({}, super.getDefaults()), qo.ownDefaults);\n    }\n    constructor(t, s) {\n      super(), e(this, \"_lastScaleX\", 1), e(this, \"_lastScaleY\", 1), e(this, \"_filterScalingX\", 1), e(this, \"_filterScalingY\", 1), this.filters = [], Object.assign(this, qo.ownDefaults), this.setOptions(s), this.cacheKey = \"texture\".concat(ft()), this.setElement(\"string\" == typeof t ? (this.canvas && ne(this.canvas.getElement()) || m()).getElementById(t) : t, s);\n    }\n    getElement() {\n      return this._element;\n    }\n    setElement(t) {\n      var e;\n      let s = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      this.removeTexture(this.cacheKey), this.removeTexture(\"\".concat(this.cacheKey, \"_filtered\")), this._element = t, this._originalElement = t, this._setWidthHeight(s), null === (e = t.classList) || void 0 === e || e.add(qo.CSS_CANVAS), 0 !== this.filters.length && this.applyFilters(), this.resizeFilter && this.applyResizeFilters();\n    }\n    removeTexture(t) {\n      const e = Ho(!1);\n      e instanceof Vo && e.evictCachesForKey(t);\n    }\n    dispose() {\n      super.dispose(), this.removeTexture(this.cacheKey), this.removeTexture(\"\".concat(this.cacheKey, \"_filtered\")), this._cacheContext = null, [\"_originalElement\", \"_element\", \"_filteredEl\", \"_cacheCanvas\"].forEach(t => {\n        const e = this[t];\n        e && p().dispose(e), this[t] = void 0;\n      });\n    }\n    getCrossOrigin() {\n      return this._originalElement && (this._originalElement.crossOrigin || null);\n    }\n    getOriginalSize() {\n      const t = this.getElement();\n      return t ? {\n        width: t.naturalWidth || t.width,\n        height: t.naturalHeight || t.height\n      } : {\n        width: 0,\n        height: 0\n      };\n    }\n    _stroke(t) {\n      if (!this.stroke || 0 === this.strokeWidth) return;\n      const e = this.width / 2,\n        s = this.height / 2;\n      t.beginPath(), t.moveTo(-e, -s), t.lineTo(e, -s), t.lineTo(e, s), t.lineTo(-e, s), t.lineTo(-e, -s), t.closePath();\n    }\n    toObject() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n      const e = [];\n      return this.filters.forEach(t => {\n        t && e.push(t.toObject());\n      }), i(i({}, super.toObject([...Uo, ...t])), {}, {\n        src: this.getSrc(),\n        crossOrigin: this.getCrossOrigin(),\n        filters: e\n      }, this.resizeFilter ? {\n        resizeFilter: this.resizeFilter.toObject()\n      } : {});\n    }\n    hasCrop() {\n      return !!this.cropX || !!this.cropY || this.width < this._element.width || this.height < this._element.height;\n    }\n    _toSVG() {\n      const t = [],\n        e = this._element,\n        s = -this.width / 2,\n        i = -this.height / 2;\n      let r = [],\n        n = [],\n        o = \"\",\n        a = \"\";\n      if (!e) return [];\n      if (this.hasCrop()) {\n        const t = ft();\n        r.push('<clipPath id=\"imageCrop_' + t + '\">\\n', '\\t<rect x=\"' + s + '\" y=\"' + i + '\" width=\"' + this.width + '\" height=\"' + this.height + '\" />\\n', \"</clipPath>\\n\"), o = ' clip-path=\"url(#imageCrop_' + t + ')\" ';\n      }\n      if (this.imageSmoothing || (a = ' image-rendering=\"optimizeSpeed\"'), t.push(\"\\t<image \", \"COMMON_PARTS\", 'xlink:href=\"'.concat(this.getSvgSrc(!0), '\" x=\"').concat(s - this.cropX, '\" y=\"').concat(i - this.cropY, '\" width=\"').concat(e.width || e.naturalWidth, '\" height=\"').concat(e.height || e.naturalHeight, '\"').concat(a).concat(o, \"></image>\\n\")), this.stroke || this.strokeDashArray) {\n        const t = this.fill;\n        this.fill = null, n = ['\\t<rect x=\"'.concat(s, '\" y=\"').concat(i, '\" width=\"').concat(this.width, '\" height=\"').concat(this.height, '\" style=\"').concat(this.getSvgStyles(), '\" />\\n')], this.fill = t;\n      }\n      return r = this.paintFirst !== K ? r.concat(n, t) : r.concat(t, n), r;\n    }\n    getSrc(t) {\n      const e = t ? this._element : this._originalElement;\n      return e ? e.toDataURL ? e.toDataURL() : this.srcFromAttribute ? e.getAttribute(\"src\") || \"\" : e.src : this.src || \"\";\n    }\n    getSvgSrc(t) {\n      return this.getSrc(t);\n    }\n    setSrc(t) {\n      let {\n        crossOrigin: e,\n        signal: s\n      } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      return It(t, {\n        crossOrigin: e,\n        signal: s\n      }).then(t => {\n        void 0 !== e && this.set({\n          crossOrigin: e\n        }), this.setElement(t);\n      });\n    }\n    toString() {\n      return '#<Image: { src: \"'.concat(this.getSrc(), '\" }>');\n    }\n    applyResizeFilters() {\n      const t = this.resizeFilter,\n        e = this.minimumScaleTrigger,\n        s = this.getTotalObjectScaling(),\n        i = s.x,\n        r = s.y,\n        n = this._filteredEl || this._originalElement;\n      if (this.group && this.set(\"dirty\", !0), !t || i > e && r > e) return this._element = n, this._filterScalingX = 1, this._filterScalingY = 1, this._lastScaleX = i, void (this._lastScaleY = r);\n      const o = vt(n),\n        {\n          width: a,\n          height: h\n        } = n;\n      this._element = o, this._lastScaleX = t.scaleX = i, this._lastScaleY = t.scaleY = r, Ho().applyFilters([t], n, a, h, this._element), this._filterScalingX = o.width / this._originalElement.width, this._filterScalingY = o.height / this._originalElement.height;\n    }\n    applyFilters() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.filters || [];\n      if (t = t.filter(t => t && !t.isNeutralState()), this.set(\"dirty\", !0), this.removeTexture(\"\".concat(this.cacheKey, \"_filtered\")), 0 === t.length) return this._element = this._originalElement, this._filteredEl = void 0, this._filterScalingX = 1, void (this._filterScalingY = 1);\n      const e = this._originalElement,\n        s = e.naturalWidth || e.width,\n        i = e.naturalHeight || e.height;\n      if (this._element === this._originalElement) {\n        const t = vt({\n          width: s,\n          height: i\n        });\n        this._element = t, this._filteredEl = t;\n      } else this._filteredEl && (this._element = this._filteredEl, this._filteredEl.getContext(\"2d\").clearRect(0, 0, s, i), this._lastScaleX = 1, this._lastScaleY = 1);\n      Ho().applyFilters(t, this._originalElement, s, i, this._element, this.cacheKey), this._originalElement.width === this._element.width && this._originalElement.height === this._element.height || (this._filterScalingX = this._element.width / this._originalElement.width, this._filterScalingY = this._element.height / this._originalElement.height);\n    }\n    _render(t) {\n      t.imageSmoothingEnabled = this.imageSmoothing, !0 !== this.isMoving && this.resizeFilter && this._needsResize() && this.applyResizeFilters(), this._stroke(t), this._renderPaintInOrder(t);\n    }\n    drawCacheOnCanvas(t) {\n      t.imageSmoothingEnabled = this.imageSmoothing, super.drawCacheOnCanvas(t);\n    }\n    shouldCache() {\n      return this.needsItsOwnCache();\n    }\n    _renderFill(t) {\n      const e = this._element;\n      if (!e) return;\n      const s = this._filterScalingX,\n        i = this._filterScalingY,\n        r = this.width,\n        n = this.height,\n        o = Math.max(this.cropX, 0),\n        a = Math.max(this.cropY, 0),\n        h = e.naturalWidth || e.width,\n        c = e.naturalHeight || e.height,\n        l = o * s,\n        u = a * i,\n        d = Math.min(r * s, h - l),\n        g = Math.min(n * i, c - u),\n        f = -r / 2,\n        p = -n / 2,\n        m = Math.min(r, h / s - o),\n        v = Math.min(n, c / i - a);\n      e && t.drawImage(e, l, u, d, g, f, p, m, v);\n    }\n    _needsResize() {\n      const t = this.getTotalObjectScaling();\n      return t.x !== this._lastScaleX || t.y !== this._lastScaleY;\n    }\n    _resetWidthHeight() {\n      this.set(this.getOriginalSize());\n    }\n    _setWidthHeight() {\n      let {\n        width: t,\n        height: e\n      } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n      const s = this.getOriginalSize();\n      this.width = t || s.width, this.height = e || s.height;\n    }\n    parsePreserveAspectRatioAttribute() {\n      const t = Qt(this.preserveAspectRatio || \"\"),\n        e = this.width,\n        s = this.height,\n        i = {\n          width: e,\n          height: s\n        };\n      let r,\n        n = this._element.width,\n        o = this._element.height,\n        a = 1,\n        h = 1,\n        c = 0,\n        l = 0,\n        u = 0,\n        d = 0;\n      return !t || t.alignX === j && t.alignY === j ? (a = e / n, h = s / o) : (\"meet\" === t.meetOrSlice && (a = h = Pr(this._element, i), r = (e - n * a) / 2, \"Min\" === t.alignX && (c = -r), \"Max\" === t.alignX && (c = r), r = (s - o * h) / 2, \"Min\" === t.alignY && (l = -r), \"Max\" === t.alignY && (l = r)), \"slice\" === t.meetOrSlice && (a = h = Er(this._element, i), r = n - e / a, \"Mid\" === t.alignX && (u = r / 2), \"Max\" === t.alignX && (u = r), r = o - s / h, \"Mid\" === t.alignY && (d = r / 2), \"Max\" === t.alignY && (d = r), n = e / a, o = s / h)), {\n        width: n,\n        height: o,\n        scaleX: a,\n        scaleY: h,\n        offsetLeft: c,\n        offsetTop: l,\n        cropX: u,\n        cropY: d\n      };\n    }\n    static fromObject(t, e) {\n      let {\n          filters: s,\n          resizeFilter: n,\n          src: o,\n          crossOrigin: a,\n          type: h\n        } = t,\n        c = r(t, No);\n      return Promise.all([It(o, i(i({}, e), {}, {\n        crossOrigin: a\n      })), s && Bt(s, e), n && Bt([n], e), Xt(c, e)]).then(t => {\n        let [e, s = [], [r] = [], n = {}] = t;\n        return new this(e, i(i({}, c), {}, {\n          src: o,\n          filters: s,\n          resizeFilter: r\n        }, n));\n      });\n    }\n    static fromURL(t) {\n      let {\n          crossOrigin: e = null,\n          signal: s\n        } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n        i = arguments.length > 2 ? arguments[2] : void 0;\n      return It(t, {\n        crossOrigin: e,\n        signal: s\n      }).then(t => new this(t, i));\n    }\n    static async fromElement(t) {\n      let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n        s = arguments.length > 2 ? arguments[2] : void 0;\n      const i = dr(t, this.ATTRIBUTE_NAMES, s);\n      return this.fromURL(i[\"xlink:href\"], e, i).catch(t => (h(\"log\", \"Unable to parse Image\", t), null));\n    }\n  }\n  function Ko(t) {\n    if (!Ke.test(t.nodeName)) return {};\n    const e = t.getAttribute(\"viewBox\");\n    let s,\n      i,\n      r = 1,\n      n = 1,\n      o = 0,\n      a = 0;\n    const h = t.getAttribute(\"width\"),\n      c = t.getAttribute(\"height\"),\n      l = t.getAttribute(\"x\") || 0,\n      u = t.getAttribute(\"y\") || 0,\n      d = !(e && Qe.test(e)),\n      g = !h || !c || \"100%\" === h || \"100%\" === c;\n    let f = \"\",\n      p = 0,\n      m = 0;\n    if (d && (l || u) && t.parentNode && \"#document\" !== t.parentNode.nodeName && (f = \" translate(\" + Jt(l || \"0\") + \" \" + Jt(u || \"0\") + \") \", s = (t.getAttribute(\"transform\") || \"\") + f, t.setAttribute(\"transform\", s), t.removeAttribute(\"x\"), t.removeAttribute(\"y\")), d && g) return {\n      width: 0,\n      height: 0\n    };\n    const v = {\n      width: 0,\n      height: 0\n    };\n    if (d) return v.width = Jt(h), v.height = Jt(c), v;\n    const y = e.match(Qe);\n    o = -parseFloat(y[1]), a = -parseFloat(y[2]);\n    const _ = parseFloat(y[3]),\n      x = parseFloat(y[4]);\n    v.minX = o, v.minY = a, v.viewBoxWidth = _, v.viewBoxHeight = x, g ? (v.width = _, v.height = x) : (v.width = Jt(h), v.height = Jt(c), r = v.width / _, n = v.height / x);\n    const C = Qt(t.getAttribute(\"preserveAspectRatio\") || \"\");\n    if (C.alignX !== j && (\"meet\" === C.meetOrSlice && (n = r = r > n ? n : r), \"slice\" === C.meetOrSlice && (n = r = r > n ? r : n), p = v.width - _ * r, m = v.height - x * r, \"Mid\" === C.alignX && (p /= 2), \"Mid\" === C.alignY && (m /= 2), \"Min\" === C.alignX && (p = 0), \"Min\" === C.alignY && (m = 0)), 1 === r && 1 === n && 0 === o && 0 === a && 0 === l && 0 === u) return v;\n    if ((l || u) && \"#document\" !== t.parentNode.nodeName && (f = \" translate(\" + Jt(l || \"0\") + \" \" + Jt(u || \"0\") + \") \"), s = f + \" matrix(\" + r + \" 0 0 \" + n + \" \" + (o * r + p) + \" \" + (a * n + m) + \") \", \"svg\" === t.nodeName) {\n      for (i = t.ownerDocument.createElementNS(Ge, \"g\"); t.firstChild;) i.appendChild(t.firstChild);\n      t.appendChild(i);\n    } else i = t, i.removeAttribute(\"x\"), i.removeAttribute(\"y\"), s = i.getAttribute(\"transform\") + s;\n    return i.setAttribute(\"transform\", s), v;\n  }\n  e(qo, \"type\", \"Image\"), e(qo, \"cacheProperties\", [...ps, ...Uo]), e(qo, \"ownDefaults\", {\n    strokeWidth: 0,\n    srcFromAttribute: !1,\n    minimumScaleTrigger: .5,\n    cropX: 0,\n    cropY: 0,\n    imageSmoothing: !0\n  }), e(qo, \"CSS_CANVAS\", \"canvas-img\"), e(qo, \"ATTRIBUTE_NAMES\", [...Fi, \"x\", \"y\", \"width\", \"height\", \"preserveAspectRatio\", \"xlink:href\", \"crossOrigin\", \"image-rendering\"]), tt.setClass(qo), tt.setSVGClass(qo);\n  const Jo = t => t.tagName.replace(\"svg:\", \"\"),\n    Qo = Ye([\"pattern\", \"defs\", \"symbol\", \"metadata\", \"clipPath\", \"mask\", \"desc\"]);\n  function Zo(t, e) {\n    let s,\n      i,\n      r,\n      n,\n      o = [];\n    for (r = 0, n = e.length; r < n; r++) s = e[r], i = t.getElementsByTagNameNS(\"http://www.w3.org/2000/svg\", s), o = o.concat(Array.from(i));\n    return o;\n  }\n  const $o = [\"gradientTransform\", \"x1\", \"x2\", \"y1\", \"y2\", \"gradientUnits\", \"cx\", \"cy\", \"r\", \"fx\", \"fy\"],\n    ta = \"xlink:href\";\n  function ea(t, e) {\n    var s;\n    const i = (null === (s = e.getAttribute(ta)) || void 0 === s ? void 0 : s.slice(1)) || \"\",\n      r = t.getElementById(i);\n    if (r && r.getAttribute(ta) && ea(t, r), r && ($o.forEach(t => {\n      const s = r.getAttribute(t);\n      !e.hasAttribute(t) && s && e.setAttribute(t, s);\n    }), !e.children.length)) {\n      const t = r.cloneNode(!0);\n      for (; t.firstChild;) e.appendChild(t.firstChild);\n    }\n    e.removeAttribute(ta);\n  }\n  const sa = [\"linearGradient\", \"radialGradient\", \"svg:linearGradient\", \"svg:radialGradient\"];\n  function ia(t) {\n    const e = t.getElementsByTagName(\"style\");\n    let s, r;\n    const n = {};\n    for (s = 0, r = e.length; s < r; s++) {\n      const t = (e[s].textContent || \"\").replace(/\\/\\*[\\s\\S]*?\\*\\//g, \"\");\n      \"\" !== t.trim() && t.split(\"}\").filter((t, e, s) => s.length > 1 && t.trim()).forEach(t => {\n        if ((t.match(/{/g) || []).length > 1 && t.trim().startsWith(\"@\")) return;\n        const e = t.split(\"{\"),\n          o = {},\n          a = e[1].trim().split(\";\").filter(function (t) {\n            return t.trim();\n          });\n        for (s = 0, r = a.length; s < r; s++) {\n          const t = a[s].split(\":\"),\n            e = t[0].trim(),\n            i = t[1].trim();\n          o[e] = i;\n        }\n        (t = e[0].trim()).split(\",\").forEach(t => {\n          \"\" !== (t = t.replace(/^svg/i, \"\").trim()) && (n[t] = i(i({}, n[t] || {}), o));\n        });\n      });\n    }\n    return n;\n  }\n  const ra = t => tt.getSVGClass(Jo(t).toLowerCase());\n  class na {\n    constructor(t, e, s, i, r) {\n      this.elements = t, this.options = e, this.reviver = s, this.regexUrl = /^url\\(['\"]?#([^'\"]+)['\"]?\\)/g, this.doc = i, this.clipPaths = r, this.gradientDefs = function (t) {\n        const e = Zo(t, sa),\n          s = {};\n        let i = e.length;\n        for (; i--;) {\n          const r = e[i];\n          r.getAttribute(\"xlink:href\") && ea(t, r);\n          const n = r.getAttribute(\"id\");\n          n && (s[n] = r);\n        }\n        return s;\n      }(i), this.cssRules = ia(i);\n    }\n    parse() {\n      return Promise.all(this.elements.map(t => this.createObject(t)));\n    }\n    async createObject(t) {\n      const e = ra(t);\n      if (e) {\n        const s = await e.fromElement(t, this.options, this.cssRules);\n        return this.resolveGradient(s, t, K), this.resolveGradient(s, t, J), s instanceof qo && s._originalElement ? ln(s, s.parsePreserveAspectRatioAttribute()) : ln(s), await this.resolveClipPath(s, t), this.reviver && this.reviver(t, s), s;\n      }\n      return null;\n    }\n    extractPropertyDefinition(t, e, s) {\n      const i = t[e],\n        r = this.regexUrl;\n      if (!r.test(i)) return;\n      r.lastIndex = 0;\n      const n = r.exec(i)[1];\n      return r.lastIndex = 0, s[n];\n    }\n    resolveGradient(t, e, s) {\n      const r = this.extractPropertyDefinition(t, s, this.gradientDefs);\n      if (r) {\n        const n = e.getAttribute(s + \"-opacity\"),\n          o = Rn.fromElement(r, t, i(i({}, this.options), {}, {\n            opacity: n\n          }));\n        t.set(s, o);\n      }\n    }\n    async resolveClipPath(t, e, s) {\n      const i = this.extractPropertyDefinition(t, \"clipPath\", this.clipPaths);\n      if (i) {\n        const r = wt(t.calcTransformMatrix()),\n          n = i[0].parentElement;\n        let o = e;\n        for (; !s && o.parentElement && o.getAttribute(\"clip-path\") !== t.clipPath;) o = o.parentElement;\n        o.parentElement.appendChild(n);\n        const a = or(\"\".concat(o.getAttribute(\"transform\") || \"\", \" \").concat(n.getAttribute(\"originalTransform\") || \"\"));\n        n.setAttribute(\"transform\", \"matrix(\".concat(a.join(\",\"), \")\"));\n        const h = await Promise.all(i.map(t => ra(t).fromElement(t, this.options, this.cssRules).then(t => (ln(t), t.fillRule = t.clipRule, delete t.clipRule, t)))),\n          c = 1 === h.length ? h[0] : new Mr(h),\n          l = Tt(r, c.calcTransformMatrix());\n        c.clipPath && (await this.resolveClipPath(c, o, n.getAttribute(\"clip-path\") ? o : void 0));\n        const {\n          scaleX: u,\n          scaleY: d,\n          angle: g,\n          skewX: f,\n          translateX: p,\n          translateY: m\n        } = Dt(l);\n        c.set({\n          flipX: !1,\n          flipY: !1\n        }), c.set({\n          scaleX: u,\n          scaleY: d,\n          angle: g,\n          skewX: f,\n          skewY: 0\n        }), c.setPositionByOrigin(new ot(p, m), D, D), t.clipPath = c;\n      } else delete t.clipPath;\n    }\n  }\n  const oa = t => qe.test(Jo(t)),\n    aa = () => ({\n      objects: [],\n      elements: [],\n      options: {},\n      allElements: []\n    });\n  async function ha(t, e) {\n    let {\n      crossOrigin: s,\n      signal: r\n    } = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n    if (r && r.aborted) return h(\"log\", new l(\"parseSVGDocument\")), aa();\n    const n = t.documentElement;\n    !function (t) {\n      const e = Zo(t, [\"use\", \"svg:use\"]),\n        s = [\"x\", \"y\", \"xlink:href\", \"href\", \"transform\"];\n      for (const i of e) {\n        const e = i.attributes,\n          r = {};\n        for (const t of e) t.value && (r[t.name] = t.value);\n        const n = (r[\"xlink:href\"] || r.href || \"\").slice(1);\n        if (\"\" === n) return;\n        const o = t.getElementById(n);\n        if (null === o) return;\n        let a = o.cloneNode(!0);\n        const h = a.attributes,\n          c = {};\n        for (const t of h) t.value && (c[t.name] = t.value);\n        const {\n            x: l = 0,\n            y: u = 0,\n            transform: d = \"\"\n          } = r,\n          g = \"\".concat(d, \" \").concat(c.transform || \"\", \" translate(\").concat(l, \", \").concat(u, \")\");\n        if (Ko(a), /^svg$/i.test(a.nodeName)) {\n          const t = a.ownerDocument.createElementNS(Ge, \"g\");\n          Object.entries(c).forEach(e => {\n            let [s, i] = e;\n            return t.setAttributeNS(Ge, s, i);\n          }), t.append(...a.childNodes), a = t;\n        }\n        for (const t of e) {\n          if (!t) continue;\n          const {\n            name: e,\n            value: i\n          } = t;\n          if (!s.includes(e)) if (\"style\" === e) {\n            const t = {};\n            cr(i, t), Object.entries(c).forEach(e => {\n              let [s, i] = e;\n              t[s] = i;\n            }), cr(c.style || \"\", t);\n            const s = Object.entries(t).map(t => t.join(\":\")).join(\";\");\n            a.setAttribute(e, s);\n          } else !c[e] && a.setAttribute(e, i);\n        }\n        a.setAttribute(\"transform\", g), a.setAttribute(\"instantiated_by_use\", \"1\"), a.removeAttribute(\"id\"), i.parentNode.replaceChild(a, i);\n      }\n    }(t);\n    const o = Array.from(n.getElementsByTagName(\"*\")),\n      a = i(i({}, Ko(n)), {}, {\n        crossOrigin: s,\n        signal: r\n      }),\n      c = o.filter(t => (Ko(t), oa(t) && !function (t) {\n        let e = t;\n        for (; e && (e = e.parentElement);) if (e && e.nodeName && Qo.test(Jo(e)) && !e.getAttribute(\"instantiated_by_use\")) return !0;\n        return !1;\n      }(t)));\n    if (!c || c && !c.length) return i(i({}, aa()), {}, {\n      options: a,\n      allElements: o\n    });\n    const u = {};\n    o.filter(t => \"clipPath\" === Jo(t)).forEach(t => {\n      t.setAttribute(\"originalTransform\", t.getAttribute(\"transform\") || \"\");\n      const e = t.getAttribute(\"id\");\n      u[e] = Array.from(t.getElementsByTagName(\"*\")).filter(t => oa(t));\n    });\n    const d = new na(c, a, e, t, u);\n    return {\n      objects: await d.parse(),\n      elements: c,\n      options: a,\n      allElements: o\n    };\n  }\n  const ca = W,\n    la = t => function (e, s, i) {\n      const {\n        points: r,\n        pathOffset: n\n      } = i;\n      return new ot(r[t]).subtract(n).transform(Tt(i.getViewportTransform(), i.calcTransformMatrix()));\n    },\n    ua = (t, e, s, i) => {\n      const {\n          target: r,\n          pointIndex: n\n        } = e,\n        o = r,\n        a = Te(new ot(s, i), void 0, o.calcOwnMatrix());\n      return o.points[n] = a.add(o.pathOffset), o.setDimensions(), !0;\n    },\n    da = (t, e) => function (s, r, n, o) {\n      const a = r.target,\n        h = new ot(a.points[(t > 0 ? t : a.points.length) - 1]),\n        c = h.subtract(a.pathOffset).transform(a.calcOwnMatrix()),\n        l = e(s, i(i({}, r), {}, {\n          pointIndex: t\n        }), n, o),\n        u = h.subtract(a.pathOffset).transform(a.calcOwnMatrix()).subtract(c);\n      return a.left -= u.x, a.top -= u.y, l;\n    },\n    ga = t => Ys(ca, da(t, ua));\n  const fa = (t, e, s) => {\n    const {\n        path: i,\n        pathOffset: r\n      } = t,\n      n = i[e];\n    return new ot(n[s] - r.x, n[s + 1] - r.y).transform(Tt(t.getViewportTransform(), t.calcTransformMatrix()));\n  };\n  function pa(t, e, s) {\n    const {\n      commandIndex: i,\n      pointIndex: r\n    } = this;\n    return fa(s, i, r);\n  }\n  function ma(t, e, s, r) {\n    const {\n        target: n\n      } = e,\n      {\n        commandIndex: o,\n        pointIndex: a\n      } = this,\n      h = ((t, e, s, i, r) => {\n        const {\n            path: n,\n            pathOffset: o\n          } = t,\n          a = n[(i > 0 ? i : n.length) - 1],\n          h = new ot(a[r], a[r + 1]),\n          c = h.subtract(o).transform(t.calcOwnMatrix()),\n          l = Te(new ot(e, s), void 0, t.calcOwnMatrix());\n        n[i][r] = l.x + o.x, n[i][r + 1] = l.y + o.y, t.setDimensions();\n        const u = h.subtract(t.pathOffset).transform(t.calcOwnMatrix()).subtract(c);\n        return t.left -= u.x, t.top -= u.y, t.set(\"dirty\", !0), !0;\n      })(n, s, r, o, a);\n    return De(this.actionName, i(i({}, Le(t, e, s, r)), {}, {\n      commandIndex: o,\n      pointIndex: a\n    })), h;\n  }\n  class va extends Hs {\n    constructor(t) {\n      super(t);\n    }\n    render(t, e, s, r, n) {\n      const o = i(i({}, r), {}, {\n        cornerColor: this.controlFill,\n        cornerStrokeColor: this.controlStroke,\n        transparentCorners: !this.controlFill\n      });\n      super.render(t, e, s, o, n);\n    }\n  }\n  class ya extends va {\n    constructor(t) {\n      super(t);\n    }\n    render(t, e, s, i, r) {\n      const {\n          path: n\n        } = r,\n        {\n          commandIndex: o,\n          pointIndex: a,\n          connectToCommandIndex: h,\n          connectToPointIndex: c\n        } = this;\n      t.save(), t.strokeStyle = this.controlStroke, this.connectionDashArray && t.setLineDash(this.connectionDashArray);\n      const [l] = n[o],\n        u = fa(r, h, c);\n      if (\"Q\" === l) {\n        const i = fa(r, o, a + 2);\n        t.moveTo(i.x, i.y), t.lineTo(e, s);\n      } else t.moveTo(e, s);\n      t.lineTo(u.x, u.y), t.stroke(), t.restore(), super.render(t, e, s, i, r);\n    }\n  }\n  const _a = (t, e, s, r, n, o) => new (s ? ya : va)(i(i({\n    commandIndex: t,\n    pointIndex: e,\n    actionName: \"modifyPath\",\n    positionHandler: pa,\n    actionHandler: ma,\n    connectToCommandIndex: n,\n    connectToPointIndex: o\n  }, r), s ? r.controlPointStyle : r.pointStyle));\n  var xa = Object.freeze({\n    __proto__: null,\n    changeWidth: Vs,\n    createObjectDefaultControls: fi,\n    createPathControls: function (t) {\n      let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      const s = {};\n      let i = \"M\";\n      return t.path.forEach((t, r) => {\n        const n = t[0];\n        switch (\"Z\" !== n && (s[\"c_\".concat(r, \"_\").concat(n)] = _a(r, t.length - 2, !1, e)), n) {\n          case \"C\":\n            s[\"c_\".concat(r, \"_C_CP_1\")] = _a(r, 1, !0, e, r - 1, (t => \"C\" === t ? 5 : \"Q\" === t ? 3 : 1)(i)), s[\"c_\".concat(r, \"_C_CP_2\")] = _a(r, 3, !0, e, r, 5);\n            break;\n          case \"Q\":\n            s[\"c_\".concat(r, \"_Q_CP_1\")] = _a(r, 1, !0, e, r, 3);\n        }\n        i = n;\n      }), s;\n    },\n    createPolyActionHandler: ga,\n    createPolyControls: function (t) {\n      let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      const s = {};\n      for (let r = 0; r < (\"number\" == typeof t ? t : t.points.length); r++) s[\"p\".concat(r)] = new Hs(i({\n        actionName: ca,\n        positionHandler: la(r),\n        actionHandler: ga(r)\n      }, e));\n      return s;\n    },\n    createPolyPositionHandler: la,\n    createResizeControls: pi,\n    createTextboxDefaultControls: mi,\n    dragHandler: Be,\n    factoryPolyActionHandler: da,\n    getLocalPoint: Ie,\n    polyActionHandler: ua,\n    renderCircleControl: Gs,\n    renderSquareControl: zs,\n    rotationStyleHandler: Ns,\n    rotationWithSnapping: Us,\n    scaleCursorStyleHandler: Qs,\n    scaleOrSkewActionName: li,\n    scaleSkewCursorStyleHandler: ui,\n    scalingEqually: $s,\n    scalingX: ti,\n    scalingXOrSkewingY: di,\n    scalingY: ei,\n    scalingYOrSkewingX: gi,\n    skewCursorStyleHandler: ni,\n    skewHandlerX: ai,\n    skewHandlerY: hi,\n    wrapWithFireEvent: Ys,\n    wrapWithFixedAnchor: Ws\n  });\n  const Ca = t => void 0 !== t.webgl,\n    ba = \"precision highp float\",\n    Sa = \"\\n    \".concat(ba, \";\\n    varying vec2 vTexCoord;\\n    uniform sampler2D uTexture;\\n    void main() {\\n      gl_FragColor = texture2D(uTexture, vTexCoord);\\n    }\"),\n    wa = [\"type\"],\n    Ta = [\"type\"],\n    Oa = new RegExp(ba, \"g\");\n  class ka {\n    get type() {\n      return this.constructor.type;\n    }\n    constructor() {\n      let t = r(arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, wa);\n      Object.assign(this, this.constructor.defaults, t);\n    }\n    getFragmentSource() {\n      return Sa;\n    }\n    getVertexSource() {\n      return \"\\n    attribute vec2 aPosition;\\n    varying vec2 vTexCoord;\\n    void main() {\\n      vTexCoord = aPosition;\\n      gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n    }\";\n    }\n    createProgram(t) {\n      let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.getFragmentSource(),\n        s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.getVertexSource();\n      const {\n        WebGLProbe: {\n          GLPrecision: i = \"highp\"\n        }\n      } = p();\n      \"highp\" !== i && (e = e.replace(Oa, ba.replace(\"highp\", i)));\n      const r = t.createShader(t.VERTEX_SHADER),\n        n = t.createShader(t.FRAGMENT_SHADER),\n        o = t.createProgram();\n      if (!r || !n || !o) throw new c(\"Vertex, fragment shader or program creation error\");\n      if (t.shaderSource(r, s), t.compileShader(r), !t.getShaderParameter(r, t.COMPILE_STATUS)) throw new c(\"Vertex shader compile error for \".concat(this.type, \": \").concat(t.getShaderInfoLog(r)));\n      if (t.shaderSource(n, e), t.compileShader(n), !t.getShaderParameter(n, t.COMPILE_STATUS)) throw new c(\"Fragment shader compile error for \".concat(this.type, \": \").concat(t.getShaderInfoLog(n)));\n      if (t.attachShader(o, r), t.attachShader(o, n), t.linkProgram(o), !t.getProgramParameter(o, t.LINK_STATUS)) throw new c('Shader link error for \"'.concat(this.type, '\" ').concat(t.getProgramInfoLog(o)));\n      const a = this.getUniformLocations(t, o) || {};\n      return a.uStepW = t.getUniformLocation(o, \"uStepW\"), a.uStepH = t.getUniformLocation(o, \"uStepH\"), {\n        program: o,\n        attributeLocations: this.getAttributeLocations(t, o),\n        uniformLocations: a\n      };\n    }\n    getAttributeLocations(t, e) {\n      return {\n        aPosition: t.getAttribLocation(e, \"aPosition\")\n      };\n    }\n    getUniformLocations(t, e) {\n      const s = this.constructor.uniformLocations,\n        i = {};\n      for (let r = 0; r < s.length; r++) i[s[r]] = t.getUniformLocation(e, s[r]);\n      return i;\n    }\n    sendAttributeData(t, e, s) {\n      const i = e.aPosition,\n        r = t.createBuffer();\n      t.bindBuffer(t.ARRAY_BUFFER, r), t.enableVertexAttribArray(i), t.vertexAttribPointer(i, 2, t.FLOAT, !1, 0, 0), t.bufferData(t.ARRAY_BUFFER, s, t.STATIC_DRAW);\n    }\n    _setupFrameBuffer(t) {\n      const e = t.context;\n      if (t.passes > 1) {\n        const s = t.destinationWidth,\n          i = t.destinationHeight;\n        t.sourceWidth === s && t.sourceHeight === i || (e.deleteTexture(t.targetTexture), t.targetTexture = t.filterBackend.createTexture(e, s, i)), e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, t.targetTexture, 0);\n      } else e.bindFramebuffer(e.FRAMEBUFFER, null), e.finish();\n    }\n    _swapTextures(t) {\n      t.passes--, t.pass++;\n      const e = t.targetTexture;\n      t.targetTexture = t.sourceTexture, t.sourceTexture = e;\n    }\n    isNeutralState(t) {\n      return !1;\n    }\n    applyTo(t) {\n      Ca(t) ? (this._setupFrameBuffer(t), this.applyToWebGL(t), this._swapTextures(t)) : this.applyTo2d(t);\n    }\n    applyTo2d(t) {}\n    getCacheKey() {\n      return this.type;\n    }\n    retrieveShader(t) {\n      const e = this.getCacheKey();\n      return t.programCache[e] || (t.programCache[e] = this.createProgram(t.context)), t.programCache[e];\n    }\n    applyToWebGL(t) {\n      const e = t.context,\n        s = this.retrieveShader(t);\n      0 === t.pass && t.originalTexture ? e.bindTexture(e.TEXTURE_2D, t.originalTexture) : e.bindTexture(e.TEXTURE_2D, t.sourceTexture), e.useProgram(s.program), this.sendAttributeData(e, s.attributeLocations, t.aPosition), e.uniform1f(s.uniformLocations.uStepW, 1 / t.sourceWidth), e.uniform1f(s.uniformLocations.uStepH, 1 / t.sourceHeight), this.sendUniformData(e, s.uniformLocations), e.viewport(0, 0, t.destinationWidth, t.destinationHeight), e.drawArrays(e.TRIANGLE_STRIP, 0, 4);\n    }\n    bindAdditionalTexture(t, e, s) {\n      t.activeTexture(s), t.bindTexture(t.TEXTURE_2D, e), t.activeTexture(t.TEXTURE0);\n    }\n    unbindAdditionalTexture(t, e) {\n      t.activeTexture(e), t.bindTexture(t.TEXTURE_2D, null), t.activeTexture(t.TEXTURE0);\n    }\n    sendUniformData(t, e) {}\n    createHelpLayer(t) {\n      if (!t.helpLayer) {\n        const {\n            sourceWidth: e,\n            sourceHeight: s\n          } = t,\n          i = vt({\n            width: e,\n            height: s\n          });\n        t.helpLayer = i;\n      }\n    }\n    toObject() {\n      const t = Object.keys(this.constructor.defaults || {});\n      return i({\n        type: this.type\n      }, t.reduce((t, e) => (t[e] = this[e], t), {}));\n    }\n    toJSON() {\n      return this.toObject();\n    }\n    static async fromObject(t, e) {\n      return new this(r(t, Ta));\n    }\n  }\n  e(ka, \"type\", \"BaseFilter\"), e(ka, \"uniformLocations\", []);\n  const Da = {\n    multiply: \"gl_FragColor.rgb *= uColor.rgb;\\n\",\n    screen: \"gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\\n\",\n    add: \"gl_FragColor.rgb += uColor.rgb;\\n\",\n    difference: \"gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\\n\",\n    subtract: \"gl_FragColor.rgb -= uColor.rgb;\\n\",\n    lighten: \"gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\\n\",\n    darken: \"gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\\n\",\n    exclusion: \"gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\\n\",\n    overlay: \"\\n    if (uColor.r < 0.5) {\\n      gl_FragColor.r *= 2.0 * uColor.r;\\n    } else {\\n      gl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\\n    }\\n    if (uColor.g < 0.5) {\\n      gl_FragColor.g *= 2.0 * uColor.g;\\n    } else {\\n      gl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\\n    }\\n    if (uColor.b < 0.5) {\\n      gl_FragColor.b *= 2.0 * uColor.b;\\n    } else {\\n      gl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\\n    }\\n    \",\n    tint: \"\\n    gl_FragColor.rgb *= (1.0 - uColor.a);\\n    gl_FragColor.rgb += uColor.rgb;\\n    \"\n  };\n  class Ma extends ka {\n    getCacheKey() {\n      return \"\".concat(this.type, \"_\").concat(this.mode);\n    }\n    getFragmentSource() {\n      return \"\\n      precision highp float;\\n      uniform sampler2D uTexture;\\n      uniform vec4 uColor;\\n      varying vec2 vTexCoord;\\n      void main() {\\n        vec4 color = texture2D(uTexture, vTexCoord);\\n        gl_FragColor = color;\\n        if (color.a > 0.0) {\\n          \".concat(Da[this.mode], \"\\n        }\\n      }\\n      \");\n    }\n    applyTo2d(t) {\n      let {\n        imageData: {\n          data: e\n        }\n      } = t;\n      const s = new qt(this.color).getSource(),\n        i = this.alpha,\n        r = s[0] * i,\n        n = s[1] * i,\n        o = s[2] * i,\n        a = 1 - i;\n      for (let t = 0; t < e.length; t += 4) {\n        const s = e[t],\n          i = e[t + 1],\n          h = e[t + 2];\n        let c, l, u;\n        switch (this.mode) {\n          case \"multiply\":\n            c = s * r / 255, l = i * n / 255, u = h * o / 255;\n            break;\n          case \"screen\":\n            c = 255 - (255 - s) * (255 - r) / 255, l = 255 - (255 - i) * (255 - n) / 255, u = 255 - (255 - h) * (255 - o) / 255;\n            break;\n          case \"add\":\n            c = s + r, l = i + n, u = h + o;\n            break;\n          case \"difference\":\n            c = Math.abs(s - r), l = Math.abs(i - n), u = Math.abs(h - o);\n            break;\n          case \"subtract\":\n            c = s - r, l = i - n, u = h - o;\n            break;\n          case \"darken\":\n            c = Math.min(s, r), l = Math.min(i, n), u = Math.min(h, o);\n            break;\n          case \"lighten\":\n            c = Math.max(s, r), l = Math.max(i, n), u = Math.max(h, o);\n            break;\n          case \"overlay\":\n            c = r < 128 ? 2 * s * r / 255 : 255 - 2 * (255 - s) * (255 - r) / 255, l = n < 128 ? 2 * i * n / 255 : 255 - 2 * (255 - i) * (255 - n) / 255, u = o < 128 ? 2 * h * o / 255 : 255 - 2 * (255 - h) * (255 - o) / 255;\n            break;\n          case \"exclusion\":\n            c = r + s - 2 * r * s / 255, l = n + i - 2 * n * i / 255, u = o + h - 2 * o * h / 255;\n            break;\n          case \"tint\":\n            c = r + s * a, l = n + i * a, u = o + h * a;\n        }\n        e[t] = c, e[t + 1] = l, e[t + 2] = u;\n      }\n    }\n    sendUniformData(t, e) {\n      const s = new qt(this.color).getSource();\n      s[0] = this.alpha * s[0] / 255, s[1] = this.alpha * s[1] / 255, s[2] = this.alpha * s[2] / 255, s[3] = this.alpha, t.uniform4fv(e.uColor, s);\n    }\n  }\n  e(Ma, \"defaults\", {\n    color: \"#F95C63\",\n    mode: \"multiply\",\n    alpha: 1\n  }), e(Ma, \"type\", \"BlendColor\"), e(Ma, \"uniformLocations\", [\"uColor\"]), tt.setClass(Ma);\n  const Pa = {\n      multiply: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform sampler2D uImage;\\n    uniform vec4 uColor;\\n    varying vec2 vTexCoord;\\n    varying vec2 vTexCoord2;\\n    void main() {\\n      vec4 color = texture2D(uTexture, vTexCoord);\\n      vec4 color2 = texture2D(uImage, vTexCoord2);\\n      color.rgba *= color2.rgba;\\n      gl_FragColor = color;\\n    }\\n    \",\n      mask: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform sampler2D uImage;\\n    uniform vec4 uColor;\\n    varying vec2 vTexCoord;\\n    varying vec2 vTexCoord2;\\n    void main() {\\n      vec4 color = texture2D(uTexture, vTexCoord);\\n      vec4 color2 = texture2D(uImage, vTexCoord2);\\n      color.a = color2.a;\\n      gl_FragColor = color;\\n    }\\n    \"\n    },\n    Ea = [\"type\", \"image\"];\n  class Aa extends ka {\n    getCacheKey() {\n      return \"\".concat(this.type, \"_\").concat(this.mode);\n    }\n    getFragmentSource() {\n      return Pa[this.mode];\n    }\n    getVertexSource() {\n      return \"\\n    attribute vec2 aPosition;\\n    varying vec2 vTexCoord;\\n    varying vec2 vTexCoord2;\\n    uniform mat3 uTransformMatrix;\\n    void main() {\\n      vTexCoord = aPosition;\\n      vTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\\n      gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n    }\\n    \";\n    }\n    applyToWebGL(t) {\n      const e = t.context,\n        s = this.createTexture(t.filterBackend, this.image);\n      this.bindAdditionalTexture(e, s, e.TEXTURE1), super.applyToWebGL(t), this.unbindAdditionalTexture(e, e.TEXTURE1);\n    }\n    createTexture(t, e) {\n      return t.getCachedTexture(e.cacheKey, e.getElement());\n    }\n    calculateMatrix() {\n      const t = this.image,\n        {\n          width: e,\n          height: s\n        } = t.getElement();\n      return [1 / t.scaleX, 0, 0, 0, 1 / t.scaleY, 0, -t.left / e, -t.top / s, 1];\n    }\n    applyTo2d(t) {\n      let {\n        imageData: {\n          data: e,\n          width: s,\n          height: i\n        },\n        filterBackend: {\n          resources: r\n        }\n      } = t;\n      const n = this.image;\n      r.blendImage || (r.blendImage = pt());\n      const o = r.blendImage,\n        a = o.getContext(\"2d\");\n      o.width !== s || o.height !== i ? (o.width = s, o.height = i) : a.clearRect(0, 0, s, i), a.setTransform(n.scaleX, 0, 0, n.scaleY, n.left, n.top), a.drawImage(n.getElement(), 0, 0, s, i);\n      const h = a.getImageData(0, 0, s, i).data;\n      for (let t = 0; t < e.length; t += 4) {\n        const s = e[t],\n          i = e[t + 1],\n          r = e[t + 2],\n          n = e[t + 3],\n          o = h[t],\n          a = h[t + 1],\n          c = h[t + 2],\n          l = h[t + 3];\n        switch (this.mode) {\n          case \"multiply\":\n            e[t] = s * o / 255, e[t + 1] = i * a / 255, e[t + 2] = r * c / 255, e[t + 3] = n * l / 255;\n            break;\n          case \"mask\":\n            e[t + 3] = l;\n        }\n      }\n    }\n    sendUniformData(t, e) {\n      const s = this.calculateMatrix();\n      t.uniform1i(e.uImage, 1), t.uniformMatrix3fv(e.uTransformMatrix, !1, s);\n    }\n    toObject() {\n      return i(i({}, super.toObject()), {}, {\n        image: this.image && this.image.toObject()\n      });\n    }\n    static async fromObject(t, e) {\n      let {\n          type: s,\n          image: n\n        } = t,\n        o = r(t, Ea);\n      return qo.fromObject(n, e).then(t => new this(i(i({}, o), {}, {\n        image: t\n      })));\n    }\n  }\n  e(Aa, \"type\", \"BlendImage\"), e(Aa, \"defaults\", {\n    mode: \"multiply\",\n    alpha: 1\n  }), e(Aa, \"uniformLocations\", [\"uTransformMatrix\", \"uImage\"]), tt.setClass(Aa);\n  class ja extends ka {\n    getFragmentSource() {\n      return \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform vec2 uDelta;\\n    varying vec2 vTexCoord;\\n    const float nSamples = 15.0;\\n    vec3 v3offset = vec3(12.9898, 78.233, 151.7182);\\n    float random(vec3 scale) {\\n      /* use the fragment position for a different seed per-pixel */\\n      return fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\\n    }\\n    void main() {\\n      vec4 color = vec4(0.0);\\n      float total = 0.0;\\n      float offset = random(v3offset);\\n      for (float t = -nSamples; t <= nSamples; t++) {\\n        float percent = (t + offset - 0.5) / nSamples;\\n        float weight = 1.0 - abs(percent);\\n        color += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\\n        total += weight;\\n      }\\n      gl_FragColor = color / total;\\n    }\\n  \";\n    }\n    applyTo(t) {\n      Ca(t) ? (this.aspectRatio = t.sourceWidth / t.sourceHeight, t.passes++, this._setupFrameBuffer(t), this.horizontal = !0, this.applyToWebGL(t), this._swapTextures(t), this._setupFrameBuffer(t), this.horizontal = !1, this.applyToWebGL(t), this._swapTextures(t)) : this.applyTo2d(t);\n    }\n    applyTo2d(t) {\n      t.imageData = this.simpleBlur(t);\n    }\n    simpleBlur(t) {\n      let {\n        ctx: e,\n        imageData: s,\n        filterBackend: {\n          resources: i\n        }\n      } = t;\n      const {\n        width: r,\n        height: n\n      } = s;\n      i.blurLayer1 || (i.blurLayer1 = pt(), i.blurLayer2 = pt());\n      const o = i.blurLayer1,\n        a = i.blurLayer2;\n      o.width === r && o.height === n || (a.width = o.width = r, a.height = o.height = n);\n      const h = o.getContext(\"2d\"),\n        c = a.getContext(\"2d\"),\n        l = 15,\n        u = .06 * this.blur * .5;\n      let d, g, f, p;\n      for (h.putImageData(s, 0, 0), c.clearRect(0, 0, r, n), p = -15; p <= l; p++) d = (Math.random() - .5) / 4, g = p / l, f = u * g * r + d, c.globalAlpha = 1 - Math.abs(g), c.drawImage(o, f, d), h.drawImage(a, 0, 0), c.globalAlpha = 1, c.clearRect(0, 0, a.width, a.height);\n      for (p = -15; p <= l; p++) d = (Math.random() - .5) / 4, g = p / l, f = u * g * n + d, c.globalAlpha = 1 - Math.abs(g), c.drawImage(o, d, f), h.drawImage(a, 0, 0), c.globalAlpha = 1, c.clearRect(0, 0, a.width, a.height);\n      e.drawImage(o, 0, 0);\n      const m = e.getImageData(0, 0, o.width, o.height);\n      return h.globalAlpha = 1, h.clearRect(0, 0, o.width, o.height), m;\n    }\n    sendUniformData(t, e) {\n      const s = this.chooseRightDelta();\n      t.uniform2fv(e.uDelta, s);\n    }\n    isNeutralState() {\n      return 0 === this.blur;\n    }\n    chooseRightDelta() {\n      let t = 1;\n      const e = [0, 0];\n      this.horizontal ? this.aspectRatio > 1 && (t = 1 / this.aspectRatio) : this.aspectRatio < 1 && (t = this.aspectRatio);\n      const s = t * this.blur * .12;\n      return this.horizontal ? e[0] = s : e[1] = s, e;\n    }\n  }\n  e(ja, \"type\", \"Blur\"), e(ja, \"defaults\", {\n    blur: 0\n  }), e(ja, \"uniformLocations\", [\"uDelta\"]), tt.setClass(ja);\n  class Fa extends ka {\n    getFragmentSource() {\n      return \"\\n  precision highp float;\\n  uniform sampler2D uTexture;\\n  uniform float uBrightness;\\n  varying vec2 vTexCoord;\\n  void main() {\\n    vec4 color = texture2D(uTexture, vTexCoord);\\n    color.rgb += uBrightness;\\n    gl_FragColor = color;\\n  }\\n\";\n    }\n    applyTo2d(t) {\n      let {\n        imageData: {\n          data: e\n        }\n      } = t;\n      const s = Math.round(255 * this.brightness);\n      for (let t = 0; t < e.length; t += 4) e[t] += s, e[t + 1] += s, e[t + 2] += s;\n    }\n    isNeutralState() {\n      return 0 === this.brightness;\n    }\n    sendUniformData(t, e) {\n      t.uniform1f(e.uBrightness, this.brightness);\n    }\n  }\n  e(Fa, \"type\", \"Brightness\"), e(Fa, \"defaults\", {\n    brightness: 0\n  }), e(Fa, \"uniformLocations\", [\"uBrightness\"]), tt.setClass(Fa);\n  const La = {\n    matrix: [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0],\n    colorsOnly: !0\n  };\n  class Ra extends ka {\n    getFragmentSource() {\n      return \"\\n  precision highp float;\\n  uniform sampler2D uTexture;\\n  varying vec2 vTexCoord;\\n  uniform mat4 uColorMatrix;\\n  uniform vec4 uConstants;\\n  void main() {\\n    vec4 color = texture2D(uTexture, vTexCoord);\\n    color *= uColorMatrix;\\n    color += uConstants;\\n    gl_FragColor = color;\\n  }\";\n    }\n    applyTo2d(t) {\n      const e = t.imageData.data,\n        s = this.matrix,\n        i = this.colorsOnly;\n      for (let t = 0; t < e.length; t += 4) {\n        const r = e[t],\n          n = e[t + 1],\n          o = e[t + 2];\n        if (e[t] = r * s[0] + n * s[1] + o * s[2] + 255 * s[4], e[t + 1] = r * s[5] + n * s[6] + o * s[7] + 255 * s[9], e[t + 2] = r * s[10] + n * s[11] + o * s[12] + 255 * s[14], !i) {\n          const i = e[t + 3];\n          e[t] += i * s[3], e[t + 1] += i * s[8], e[t + 2] += i * s[13], e[t + 3] = r * s[15] + n * s[16] + o * s[17] + i * s[18] + 255 * s[19];\n        }\n      }\n    }\n    sendUniformData(t, e) {\n      const s = this.matrix,\n        i = [s[0], s[1], s[2], s[3], s[5], s[6], s[7], s[8], s[10], s[11], s[12], s[13], s[15], s[16], s[17], s[18]],\n        r = [s[4], s[9], s[14], s[19]];\n      t.uniformMatrix4fv(e.uColorMatrix, !1, i), t.uniform4fv(e.uConstants, r);\n    }\n    toObject() {\n      return i(i({}, super.toObject()), {}, {\n        matrix: [...this.matrix]\n      });\n    }\n  }\n  function Ia(t, s) {\n    var i;\n    const r = (e(i = class extends Ra {\n      toObject() {\n        return {\n          type: this.type,\n          colorsOnly: this.colorsOnly\n        };\n      }\n    }, \"type\", t), e(i, \"defaults\", {\n      colorsOnly: !1,\n      matrix: s\n    }), i);\n    return tt.setClass(r, t), r;\n  }\n  e(Ra, \"type\", \"ColorMatrix\"), e(Ra, \"defaults\", La), e(Ra, \"uniformLocations\", [\"uColorMatrix\", \"uConstants\"]), tt.setClass(Ra);\n  const Ba = Ia(\"Brownie\", [.5997, .34553, -.27082, 0, .186, -.0377, .86095, .15059, 0, -.1449, .24113, -.07441, .44972, 0, -.02965, 0, 0, 0, 1, 0]),\n    Xa = Ia(\"Vintage\", [.62793, .32021, -.03965, 0, .03784, .02578, .64411, .03259, 0, .02926, .0466, -.08512, .52416, 0, .02023, 0, 0, 0, 1, 0]),\n    Ya = Ia(\"Kodachrome\", [1.12855, -.39673, -.03992, 0, .24991, -.16404, 1.08352, -.05498, 0, .09698, -.16786, -.56034, 1.60148, 0, .13972, 0, 0, 0, 1, 0]),\n    Wa = Ia(\"Technicolor\", [1.91252, -.85453, -.09155, 0, .04624, -.30878, 1.76589, -.10601, 0, -.27589, -.2311, -.75018, 1.84759, 0, .12137, 0, 0, 0, 1, 0]),\n    Va = Ia(\"Polaroid\", [1.438, -.062, -.062, 0, 0, -.122, 1.378, -.122, 0, 0, -.016, -.016, 1.483, 0, 0, 0, 0, 0, 1, 0]),\n    Ga = Ia(\"Sepia\", [.393, .769, .189, 0, 0, .349, .686, .168, 0, 0, .272, .534, .131, 0, 0, 0, 0, 0, 1, 0]),\n    za = Ia(\"BlackWhite\", [1.5, 1.5, 1.5, 0, -1, 1.5, 1.5, 1.5, 0, -1, 1.5, 1.5, 1.5, 0, -1, 0, 0, 0, 1, 0]);\n  class Ha extends ka {\n    constructor() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n      super(t), this.subFilters = t.subFilters || [];\n    }\n    applyTo(t) {\n      Ca(t) && (t.passes += this.subFilters.length - 1), this.subFilters.forEach(e => {\n        e.applyTo(t);\n      });\n    }\n    toObject() {\n      return {\n        type: this.type,\n        subFilters: this.subFilters.map(t => t.toObject())\n      };\n    }\n    isNeutralState() {\n      return !this.subFilters.some(t => !t.isNeutralState());\n    }\n    static fromObject(t, e) {\n      return Promise.all((t.subFilters || []).map(t => tt.getClass(t.type).fromObject(t, e))).then(t => new this({\n        subFilters: t\n      }));\n    }\n  }\n  e(Ha, \"type\", \"Composed\"), tt.setClass(Ha);\n  class Na extends ka {\n    getFragmentSource() {\n      return \"\\n  precision highp float;\\n  uniform sampler2D uTexture;\\n  uniform float uContrast;\\n  varying vec2 vTexCoord;\\n  void main() {\\n    vec4 color = texture2D(uTexture, vTexCoord);\\n    float contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\\n    color.rgb = contrastF * (color.rgb - 0.5) + 0.5;\\n    gl_FragColor = color;\\n  }\";\n    }\n    isNeutralState() {\n      return 0 === this.contrast;\n    }\n    applyTo2d(t) {\n      let {\n        imageData: {\n          data: e\n        }\n      } = t;\n      const s = Math.floor(255 * this.contrast),\n        i = 259 * (s + 255) / (255 * (259 - s));\n      for (let t = 0; t < e.length; t += 4) e[t] = i * (e[t] - 128) + 128, e[t + 1] = i * (e[t + 1] - 128) + 128, e[t + 2] = i * (e[t + 2] - 128) + 128;\n    }\n    sendUniformData(t, e) {\n      t.uniform1f(e.uContrast, this.contrast);\n    }\n  }\n  e(Na, \"type\", \"Contrast\"), e(Na, \"defaults\", {\n    contrast: 0\n  }), e(Na, \"uniformLocations\", [\"uContrast\"]), tt.setClass(Na);\n  const Ua = {\n    Convolute_3_1: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform float uMatrix[9];\\n    uniform float uStepW;\\n    uniform float uStepH;\\n    varying vec2 vTexCoord;\\n    void main() {\\n      vec4 color = vec4(0, 0, 0, 0);\\n      for (float h = 0.0; h < 3.0; h+=1.0) {\\n        for (float w = 0.0; w < 3.0; w+=1.0) {\\n          vec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\\n        }\\n      }\\n      gl_FragColor = color;\\n    }\\n    \",\n    Convolute_3_0: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform float uMatrix[9];\\n    uniform float uStepW;\\n    uniform float uStepH;\\n    varying vec2 vTexCoord;\\n    void main() {\\n      vec4 color = vec4(0, 0, 0, 1);\\n      for (float h = 0.0; h < 3.0; h+=1.0) {\\n        for (float w = 0.0; w < 3.0; w+=1.0) {\\n          vec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\\n        }\\n      }\\n      float alpha = texture2D(uTexture, vTexCoord).a;\\n      gl_FragColor = color;\\n      gl_FragColor.a = alpha;\\n    }\\n    \",\n    Convolute_5_1: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform float uMatrix[25];\\n    uniform float uStepW;\\n    uniform float uStepH;\\n    varying vec2 vTexCoord;\\n    void main() {\\n      vec4 color = vec4(0, 0, 0, 0);\\n      for (float h = 0.0; h < 5.0; h+=1.0) {\\n        for (float w = 0.0; w < 5.0; w+=1.0) {\\n          vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\\n        }\\n      }\\n      gl_FragColor = color;\\n    }\\n    \",\n    Convolute_5_0: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform float uMatrix[25];\\n    uniform float uStepW;\\n    uniform float uStepH;\\n    varying vec2 vTexCoord;\\n    void main() {\\n      vec4 color = vec4(0, 0, 0, 1);\\n      for (float h = 0.0; h < 5.0; h+=1.0) {\\n        for (float w = 0.0; w < 5.0; w+=1.0) {\\n          vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\\n        }\\n      }\\n      float alpha = texture2D(uTexture, vTexCoord).a;\\n      gl_FragColor = color;\\n      gl_FragColor.a = alpha;\\n    }\\n    \",\n    Convolute_7_1: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform float uMatrix[49];\\n    uniform float uStepW;\\n    uniform float uStepH;\\n    varying vec2 vTexCoord;\\n    void main() {\\n      vec4 color = vec4(0, 0, 0, 0);\\n      for (float h = 0.0; h < 7.0; h+=1.0) {\\n        for (float w = 0.0; w < 7.0; w+=1.0) {\\n          vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\\n        }\\n      }\\n      gl_FragColor = color;\\n    }\\n    \",\n    Convolute_7_0: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform float uMatrix[49];\\n    uniform float uStepW;\\n    uniform float uStepH;\\n    varying vec2 vTexCoord;\\n    void main() {\\n      vec4 color = vec4(0, 0, 0, 1);\\n      for (float h = 0.0; h < 7.0; h+=1.0) {\\n        for (float w = 0.0; w < 7.0; w+=1.0) {\\n          vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\\n        }\\n      }\\n      float alpha = texture2D(uTexture, vTexCoord).a;\\n      gl_FragColor = color;\\n      gl_FragColor.a = alpha;\\n    }\\n    \",\n    Convolute_9_1: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform float uMatrix[81];\\n    uniform float uStepW;\\n    uniform float uStepH;\\n    varying vec2 vTexCoord;\\n    void main() {\\n      vec4 color = vec4(0, 0, 0, 0);\\n      for (float h = 0.0; h < 9.0; h+=1.0) {\\n        for (float w = 0.0; w < 9.0; w+=1.0) {\\n          vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\\n        }\\n      }\\n      gl_FragColor = color;\\n    }\\n    \",\n    Convolute_9_0: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform float uMatrix[81];\\n    uniform float uStepW;\\n    uniform float uStepH;\\n    varying vec2 vTexCoord;\\n    void main() {\\n      vec4 color = vec4(0, 0, 0, 1);\\n      for (float h = 0.0; h < 9.0; h+=1.0) {\\n        for (float w = 0.0; w < 9.0; w+=1.0) {\\n          vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\\n        }\\n      }\\n      float alpha = texture2D(uTexture, vTexCoord).a;\\n      gl_FragColor = color;\\n      gl_FragColor.a = alpha;\\n    }\\n    \"\n  };\n  class qa extends ka {\n    getCacheKey() {\n      return \"\".concat(this.type, \"_\").concat(Math.sqrt(this.matrix.length), \"_\").concat(this.opaque ? 1 : 0);\n    }\n    getFragmentSource() {\n      return Ua[this.getCacheKey()];\n    }\n    applyTo2d(t) {\n      const e = t.imageData,\n        s = e.data,\n        i = this.matrix,\n        r = Math.round(Math.sqrt(i.length)),\n        n = Math.floor(r / 2),\n        o = e.width,\n        a = e.height,\n        h = t.ctx.createImageData(o, a),\n        c = h.data,\n        l = this.opaque ? 1 : 0;\n      let u, d, g, f, p, m, v, y, _, x, C, b, S;\n      for (C = 0; C < a; C++) for (x = 0; x < o; x++) {\n        for (p = 4 * (C * o + x), u = 0, d = 0, g = 0, f = 0, S = 0; S < r; S++) for (b = 0; b < r; b++) v = C + S - n, m = x + b - n, v < 0 || v >= a || m < 0 || m >= o || (y = 4 * (v * o + m), _ = i[S * r + b], u += s[y] * _, d += s[y + 1] * _, g += s[y + 2] * _, l || (f += s[y + 3] * _));\n        c[p] = u, c[p + 1] = d, c[p + 2] = g, c[p + 3] = l ? s[p + 3] : f;\n      }\n      t.imageData = h;\n    }\n    sendUniformData(t, e) {\n      t.uniform1fv(e.uMatrix, this.matrix);\n    }\n    toObject() {\n      return i(i({}, super.toObject()), {}, {\n        opaque: this.opaque,\n        matrix: [...this.matrix]\n      });\n    }\n  }\n  e(qa, \"type\", \"Convolute\"), e(qa, \"defaults\", {\n    opaque: !1,\n    matrix: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n  }), e(qa, \"uniformLocations\", [\"uMatrix\", \"uOpaque\", \"uHalfSize\", \"uSize\"]), tt.setClass(qa);\n  const Ka = \"Gamma\";\n  class Ja extends ka {\n    getFragmentSource() {\n      return \"\\n  precision highp float;\\n  uniform sampler2D uTexture;\\n  uniform vec3 uGamma;\\n  varying vec2 vTexCoord;\\n  void main() {\\n    vec4 color = texture2D(uTexture, vTexCoord);\\n    vec3 correction = (1.0 / uGamma);\\n    color.r = pow(color.r, correction.r);\\n    color.g = pow(color.g, correction.g);\\n    color.b = pow(color.b, correction.b);\\n    gl_FragColor = color;\\n    gl_FragColor.rgb *= color.a;\\n  }\\n\";\n    }\n    constructor() {\n      let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n      super(t), this.gamma = t.gamma || this.constructor.defaults.gamma.concat();\n    }\n    applyTo2d(t) {\n      let {\n        imageData: {\n          data: e\n        }\n      } = t;\n      const s = this.gamma,\n        i = 1 / s[0],\n        r = 1 / s[1],\n        n = 1 / s[2];\n      this.rgbValues || (this.rgbValues = {\n        r: new Uint8Array(256),\n        g: new Uint8Array(256),\n        b: new Uint8Array(256)\n      });\n      const o = this.rgbValues;\n      for (let t = 0; t < 256; t++) o.r[t] = 255 * Math.pow(t / 255, i), o.g[t] = 255 * Math.pow(t / 255, r), o.b[t] = 255 * Math.pow(t / 255, n);\n      for (let t = 0; t < e.length; t += 4) e[t] = o.r[e[t]], e[t + 1] = o.g[e[t + 1]], e[t + 2] = o.b[e[t + 2]];\n    }\n    sendUniformData(t, e) {\n      t.uniform3fv(e.uGamma, this.gamma);\n    }\n    isNeutralState() {\n      const {\n        gamma: t\n      } = this;\n      return 1 === t[0] && 1 === t[1] && 1 === t[2];\n    }\n    toObject() {\n      return {\n        type: Ka,\n        gamma: this.gamma.concat()\n      };\n    }\n  }\n  e(Ja, \"type\", Ka), e(Ja, \"defaults\", {\n    gamma: [1, 1, 1]\n  }), e(Ja, \"uniformLocations\", [\"uGamma\"]), tt.setClass(Ja);\n  const Qa = {\n    average: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    varying vec2 vTexCoord;\\n    void main() {\\n      vec4 color = texture2D(uTexture, vTexCoord);\\n      float average = (color.r + color.b + color.g) / 3.0;\\n      gl_FragColor = vec4(average, average, average, color.a);\\n    }\\n    \",\n    lightness: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform int uMode;\\n    varying vec2 vTexCoord;\\n    void main() {\\n      vec4 col = texture2D(uTexture, vTexCoord);\\n      float average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\\n      gl_FragColor = vec4(average, average, average, col.a);\\n    }\\n    \",\n    luminosity: \"\\n    precision highp float;\\n    uniform sampler2D uTexture;\\n    uniform int uMode;\\n    varying vec2 vTexCoord;\\n    void main() {\\n      vec4 col = texture2D(uTexture, vTexCoord);\\n      float average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\\n      gl_FragColor = vec4(average, average, average, col.a);\\n    }\\n    \"\n  };\n  class Za extends ka {\n    applyTo2d(t) {\n      let {\n        imageData: {\n          data: e\n        }\n      } = t;\n      for (let t, s = 0; s < e.length; s += 4) {\n        const i = e[s],\n          r = e[s + 1],\n          n = e[s + 2];\n        switch (this.mode) {\n          case \"average\":\n            t = (i + r + n) / 3;\n            break;\n          case \"lightness\":\n            t = (Math.min(i, r, n) + Math.max(i, r, n)) / 2;\n            break;\n          case \"luminosity\":\n            t = .21 * i + .72 * r + .07 * n;\n        }\n        e[s + 2] = e[s + 1] = e[s] = t;\n      }\n    }\n    getCacheKey() {\n      return \"\".concat(this.type, \"_\").concat(this.mode);\n    }\n    getFragmentSource() {\n      return Qa[this.mode];\n    }\n    sendUniformData(t, e) {\n      t.uniform1i(e.uMode, 1);\n    }\n    isNeutralState() {\n      return !1;\n    }\n  }\n  e(Za, \"type\", \"Grayscale\"), e(Za, \"defaults\", {\n    mode: \"average\"\n  }), e(Za, \"uniformLocations\", [\"uMode\"]), tt.setClass(Za);\n  const $a = i(i({}, La), {}, {\n    rotation: 0\n  });\n  class th extends Ra {\n    calculateMatrix() {\n      const t = this.rotation * Math.PI,\n        e = rt(t),\n        s = nt(t),\n        i = 1 / 3,\n        r = Math.sqrt(i) * s,\n        n = 1 - e;\n      this.matrix = [e + n / 3, i * n - r, i * n + r, 0, 0, i * n + r, e + i * n, i * n - r, 0, 0, i * n - r, i * n + r, e + i * n, 0, 0, 0, 0, 0, 1, 0];\n    }\n    isNeutralState() {\n      return 0 === this.rotation;\n    }\n    applyTo(t) {\n      this.calculateMatrix(), super.applyTo(t);\n    }\n    toObject() {\n      return {\n        type: this.type,\n        rotation: this.rotation\n      };\n    }\n  }\n  e(th, \"type\", \"HueRotation\"), e(th, \"defaults\", $a), tt.setClass(th);\n  class eh extends ka {\n    applyTo2d(t) {\n      let {\n        imageData: {\n          data: e\n        }\n      } = t;\n      for (let t = 0; t < e.length; t += 4) e[t] = 255 - e[t], e[t + 1] = 255 - e[t + 1], e[t + 2] = 255 - e[t + 2], this.alpha && (e[t + 3] = 255 - e[t + 3]);\n    }\n    getFragmentSource() {\n      return \"\\n  precision highp float;\\n  uniform sampler2D uTexture;\\n  uniform int uInvert;\\n  uniform int uAlpha;\\n  varying vec2 vTexCoord;\\n  void main() {\\n    vec4 color = texture2D(uTexture, vTexCoord);\\n    if (uInvert == 1) {\\n      if (uAlpha == 1) {\\n        gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,1.0 -color.a);\\n      } else {\\n        gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\\n      }\\n    } else {\\n      gl_FragColor = color;\\n    }\\n  }\\n\";\n    }\n    isNeutralState() {\n      return !this.invert;\n    }\n    sendUniformData(t, e) {\n      t.uniform1i(e.uInvert, Number(this.invert)), t.uniform1i(e.uAlpha, Number(this.alpha));\n    }\n  }\n  e(eh, \"type\", \"Invert\"), e(eh, \"defaults\", {\n    alpha: !1,\n    invert: !0\n  }), e(eh, \"uniformLocations\", [\"uInvert\", \"uAlpha\"]), tt.setClass(eh);\n  class sh extends ka {\n    getFragmentSource() {\n      return \"\\n  precision highp float;\\n  uniform sampler2D uTexture;\\n  uniform float uStepH;\\n  uniform float uNoise;\\n  uniform float uSeed;\\n  varying vec2 vTexCoord;\\n  float rand(vec2 co, float seed, float vScale) {\\n    return fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\\n  }\\n  void main() {\\n    vec4 color = texture2D(uTexture, vTexCoord);\\n    color.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\\n    gl_FragColor = color;\\n  }\\n\";\n    }\n    applyTo2d(t) {\n      let {\n        imageData: {\n          data: e\n        }\n      } = t;\n      const s = this.noise;\n      for (let t = 0; t < e.length; t += 4) {\n        const i = (.5 - Math.random()) * s;\n        e[t] += i, e[t + 1] += i, e[t + 2] += i;\n      }\n    }\n    sendUniformData(t, e) {\n      t.uniform1f(e.uNoise, this.noise / 255), t.uniform1f(e.uSeed, Math.random());\n    }\n    isNeutralState() {\n      return 0 === this.noise;\n    }\n  }\n  e(sh, \"type\", \"Noise\"), e(sh, \"defaults\", {\n    noise: 0\n  }), e(sh, \"uniformLocations\", [\"uNoise\", \"uSeed\"]), tt.setClass(sh);\n  class ih extends ka {\n    applyTo2d(t) {\n      let {\n        imageData: {\n          data: e,\n          width: s,\n          height: i\n        }\n      } = t;\n      for (let t = 0; t < i; t += this.blocksize) for (let r = 0; r < s; r += this.blocksize) {\n        const n = 4 * t * s + 4 * r,\n          o = e[n],\n          a = e[n + 1],\n          h = e[n + 2],\n          c = e[n + 3];\n        for (let n = t; n < Math.min(t + this.blocksize, i); n++) for (let t = r; t < Math.min(r + this.blocksize, s); t++) {\n          const i = 4 * n * s + 4 * t;\n          e[i] = o, e[i + 1] = a, e[i + 2] = h, e[i + 3] = c;\n        }\n      }\n    }\n    isNeutralState() {\n      return 1 === this.blocksize;\n    }\n    getFragmentSource() {\n      return \"\\n  precision highp float;\\n  uniform sampler2D uTexture;\\n  uniform float uBlocksize;\\n  uniform float uStepW;\\n  uniform float uStepH;\\n  varying vec2 vTexCoord;\\n  void main() {\\n    float blockW = uBlocksize * uStepW;\\n    float blockH = uBlocksize * uStepH;\\n    int posX = int(vTexCoord.x / blockW);\\n    int posY = int(vTexCoord.y / blockH);\\n    float fposX = float(posX);\\n    float fposY = float(posY);\\n    vec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\\n    vec4 color = texture2D(uTexture, squareCoords);\\n    gl_FragColor = color;\\n  }\\n\";\n    }\n    sendUniformData(t, e) {\n      t.uniform1f(e.uBlocksize, this.blocksize);\n    }\n  }\n  e(ih, \"type\", \"Pixelate\"), e(ih, \"defaults\", {\n    blocksize: 4\n  }), e(ih, \"uniformLocations\", [\"uBlocksize\"]), tt.setClass(ih);\n  class rh extends ka {\n    getFragmentSource() {\n      return \"\\nprecision highp float;\\nuniform sampler2D uTexture;\\nuniform vec4 uLow;\\nuniform vec4 uHigh;\\nvarying vec2 vTexCoord;\\nvoid main() {\\n  gl_FragColor = texture2D(uTexture, vTexCoord);\\n  if(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\\n    gl_FragColor.a = 0.0;\\n  }\\n}\\n\";\n    }\n    applyTo2d(t) {\n      let {\n        imageData: {\n          data: e\n        }\n      } = t;\n      const s = 255 * this.distance,\n        i = new qt(this.color).getSource(),\n        r = [i[0] - s, i[1] - s, i[2] - s],\n        n = [i[0] + s, i[1] + s, i[2] + s];\n      for (let t = 0; t < e.length; t += 4) {\n        const s = e[t],\n          i = e[t + 1],\n          o = e[t + 2];\n        s > r[0] && i > r[1] && o > r[2] && s < n[0] && i < n[1] && o < n[2] && (e[t + 3] = 0);\n      }\n    }\n    sendUniformData(t, e) {\n      const s = new qt(this.color).getSource(),\n        i = this.distance,\n        r = [0 + s[0] / 255 - i, 0 + s[1] / 255 - i, 0 + s[2] / 255 - i, 1],\n        n = [s[0] / 255 + i, s[1] / 255 + i, s[2] / 255 + i, 1];\n      t.uniform4fv(e.uLow, r), t.uniform4fv(e.uHigh, n);\n    }\n  }\n  e(rh, \"type\", \"RemoveColor\"), e(rh, \"defaults\", {\n    color: \"#FFFFFF\",\n    distance: .02,\n    useAlpha: !1\n  }), e(rh, \"uniformLocations\", [\"uLow\", \"uHigh\"]), tt.setClass(rh);\n  class nh extends ka {\n    sendUniformData(t, e) {\n      t.uniform2fv(e.uDelta, this.horizontal ? [1 / this.width, 0] : [0, 1 / this.height]), t.uniform1fv(e.uTaps, this.taps);\n    }\n    getFilterWindow() {\n      const t = this.tempScale;\n      return Math.ceil(this.lanczosLobes / t);\n    }\n    getCacheKey() {\n      const t = this.getFilterWindow();\n      return \"\".concat(this.type, \"_\").concat(t);\n    }\n    getFragmentSource() {\n      const t = this.getFilterWindow();\n      return this.generateShader(t);\n    }\n    getTaps() {\n      const t = this.lanczosCreate(this.lanczosLobes),\n        e = this.tempScale,\n        s = this.getFilterWindow(),\n        i = new Array(s);\n      for (let r = 1; r <= s; r++) i[r - 1] = t(r * e);\n      return i;\n    }\n    generateShader(t) {\n      const e = new Array(t);\n      for (let s = 1; s <= t; s++) e[s - 1] = \"\".concat(s, \".0 * uDelta\");\n      return \"\\n      precision highp float;\\n      uniform sampler2D uTexture;\\n      uniform vec2 uDelta;\\n      varying vec2 vTexCoord;\\n      uniform float uTaps[\".concat(t, \"];\\n      void main() {\\n        vec4 color = texture2D(uTexture, vTexCoord);\\n        float sum = 1.0;\\n        \").concat(e.map((t, e) => \"\\n              color += texture2D(uTexture, vTexCoord + \".concat(t, \") * uTaps[\").concat(e, \"] + texture2D(uTexture, vTexCoord - \").concat(t, \") * uTaps[\").concat(e, \"];\\n              sum += 2.0 * uTaps[\").concat(e, \"];\\n            \")).join(\"\\n\"), \"\\n        gl_FragColor = color / sum;\\n      }\\n    \");\n    }\n    applyToForWebgl(t) {\n      t.passes++, this.width = t.sourceWidth, this.horizontal = !0, this.dW = Math.round(this.width * this.scaleX), this.dH = t.sourceHeight, this.tempScale = this.dW / this.width, this.taps = this.getTaps(), t.destinationWidth = this.dW, super.applyTo(t), t.sourceWidth = t.destinationWidth, this.height = t.sourceHeight, this.horizontal = !1, this.dH = Math.round(this.height * this.scaleY), this.tempScale = this.dH / this.height, this.taps = this.getTaps(), t.destinationHeight = this.dH, super.applyTo(t), t.sourceHeight = t.destinationHeight;\n    }\n    applyTo(t) {\n      Ca(t) ? this.applyToForWebgl(t) : this.applyTo2d(t);\n    }\n    isNeutralState() {\n      return 1 === this.scaleX && 1 === this.scaleY;\n    }\n    lanczosCreate(t) {\n      return e => {\n        if (e >= t || e <= -t) return 0;\n        if (e < 1.1920929e-7 && e > -1.1920929e-7) return 1;\n        const s = (e *= Math.PI) / t;\n        return Math.sin(e) / e * Math.sin(s) / s;\n      };\n    }\n    applyTo2d(t) {\n      const e = t.imageData,\n        s = this.scaleX,\n        i = this.scaleY;\n      this.rcpScaleX = 1 / s, this.rcpScaleY = 1 / i;\n      const r = e.width,\n        n = e.height,\n        o = Math.round(r * s),\n        a = Math.round(n * i);\n      let h;\n      h = \"sliceHack\" === this.resizeType ? this.sliceByTwo(t, r, n, o, a) : \"hermite\" === this.resizeType ? this.hermiteFastResize(t, r, n, o, a) : \"bilinear\" === this.resizeType ? this.bilinearFiltering(t, r, n, o, a) : \"lanczos\" === this.resizeType ? this.lanczosResize(t, r, n, o, a) : new ImageData(o, a), t.imageData = h;\n    }\n    sliceByTwo(t, e, s, i, r) {\n      const n = t.imageData,\n        o = .5;\n      let a = !1,\n        h = !1,\n        c = e * o,\n        l = s * o;\n      const u = t.filterBackend.resources;\n      let d = 0,\n        g = 0;\n      const f = e;\n      let p = 0;\n      u.sliceByTwo || (u.sliceByTwo = pt());\n      const m = u.sliceByTwo;\n      (m.width < 1.5 * e || m.height < s) && (m.width = 1.5 * e, m.height = s);\n      const v = m.getContext(\"2d\");\n      for (v.clearRect(0, 0, 1.5 * e, s), v.putImageData(n, 0, 0), i = Math.floor(i), r = Math.floor(r); !a || !h;) e = c, s = l, i < Math.floor(c * o) ? c = Math.floor(c * o) : (c = i, a = !0), r < Math.floor(l * o) ? l = Math.floor(l * o) : (l = r, h = !0), v.drawImage(m, d, g, e, s, f, p, c, l), d = f, g = p, p += l;\n      return v.getImageData(d, g, i, r);\n    }\n    lanczosResize(t, e, s, i, r) {\n      const n = t.imageData.data,\n        o = t.ctx.createImageData(i, r),\n        a = o.data,\n        h = this.lanczosCreate(this.lanczosLobes),\n        c = this.rcpScaleX,\n        l = this.rcpScaleY,\n        u = 2 / this.rcpScaleX,\n        d = 2 / this.rcpScaleY,\n        g = Math.ceil(c * this.lanczosLobes / 2),\n        f = Math.ceil(l * this.lanczosLobes / 2),\n        p = {},\n        m = {\n          x: 0,\n          y: 0\n        },\n        v = {\n          x: 0,\n          y: 0\n        };\n      return function t(y) {\n        let _, x, C, b, S, w, T, O, k, D, M;\n        for (m.x = (y + .5) * c, v.x = Math.floor(m.x), _ = 0; _ < r; _++) {\n          for (m.y = (_ + .5) * l, v.y = Math.floor(m.y), S = 0, w = 0, T = 0, O = 0, k = 0, x = v.x - g; x <= v.x + g; x++) if (!(x < 0 || x >= e)) {\n            D = Math.floor(1e3 * Math.abs(x - m.x)), p[D] || (p[D] = {});\n            for (let t = v.y - f; t <= v.y + f; t++) t < 0 || t >= s || (M = Math.floor(1e3 * Math.abs(t - m.y)), p[D][M] || (p[D][M] = h(Math.sqrt(Math.pow(D * u, 2) + Math.pow(M * d, 2)) / 1e3)), C = p[D][M], C > 0 && (b = 4 * (t * e + x), S += C, w += C * n[b], T += C * n[b + 1], O += C * n[b + 2], k += C * n[b + 3]));\n          }\n          b = 4 * (_ * i + y), a[b] = w / S, a[b + 1] = T / S, a[b + 2] = O / S, a[b + 3] = k / S;\n        }\n        return ++y < i ? t(y) : o;\n      }(0);\n    }\n    bilinearFiltering(t, e, s, i, r) {\n      let n,\n        o,\n        a,\n        h,\n        c,\n        l,\n        u,\n        d,\n        g,\n        f,\n        p,\n        m,\n        v,\n        y = 0;\n      const _ = this.rcpScaleX,\n        x = this.rcpScaleY,\n        C = 4 * (e - 1),\n        b = t.imageData.data,\n        S = t.ctx.createImageData(i, r),\n        w = S.data;\n      for (u = 0; u < r; u++) for (d = 0; d < i; d++) for (c = Math.floor(_ * d), l = Math.floor(x * u), g = _ * d - c, f = x * u - l, v = 4 * (l * e + c), p = 0; p < 4; p++) n = b[v + p], o = b[v + 4 + p], a = b[v + C + p], h = b[v + C + 4 + p], m = n * (1 - g) * (1 - f) + o * g * (1 - f) + a * f * (1 - g) + h * g * f, w[y++] = m;\n      return S;\n    }\n    hermiteFastResize(t, e, s, i, r) {\n      const n = this.rcpScaleX,\n        o = this.rcpScaleY,\n        a = Math.ceil(n / 2),\n        h = Math.ceil(o / 2),\n        c = t.imageData.data,\n        l = t.ctx.createImageData(i, r),\n        u = l.data;\n      for (let t = 0; t < r; t++) for (let s = 0; s < i; s++) {\n        const r = 4 * (s + t * i);\n        let l = 0,\n          d = 0,\n          g = 0,\n          f = 0,\n          p = 0,\n          m = 0,\n          v = 0;\n        const y = (t + .5) * o;\n        for (let i = Math.floor(t * o); i < (t + 1) * o; i++) {\n          const t = Math.abs(y - (i + .5)) / h,\n            r = (s + .5) * n,\n            o = t * t;\n          for (let t = Math.floor(s * n); t < (s + 1) * n; t++) {\n            let s = Math.abs(r - (t + .5)) / a;\n            const n = Math.sqrt(o + s * s);\n            n > 1 && n < -1 || (l = 2 * n * n * n - 3 * n * n + 1, l > 0 && (s = 4 * (t + i * e), v += l * c[s + 3], g += l, c[s + 3] < 255 && (l = l * c[s + 3] / 250), f += l * c[s], p += l * c[s + 1], m += l * c[s + 2], d += l));\n          }\n        }\n        u[r] = f / d, u[r + 1] = p / d, u[r + 2] = m / d, u[r + 3] = v / g;\n      }\n      return l;\n    }\n  }\n  e(nh, \"type\", \"Resize\"), e(nh, \"defaults\", {\n    resizeType: \"hermite\",\n    scaleX: 1,\n    scaleY: 1,\n    lanczosLobes: 3\n  }), e(nh, \"uniformLocations\", [\"uDelta\", \"uTaps\"]), tt.setClass(nh);\n  class oh extends ka {\n    getFragmentSource() {\n      return \"\\n  precision highp float;\\n  uniform sampler2D uTexture;\\n  uniform float uSaturation;\\n  varying vec2 vTexCoord;\\n  void main() {\\n    vec4 color = texture2D(uTexture, vTexCoord);\\n    float rgMax = max(color.r, color.g);\\n    float rgbMax = max(rgMax, color.b);\\n    color.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\\n    color.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\\n    color.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\\n    gl_FragColor = color;\\n  }\\n\";\n    }\n    applyTo2d(t) {\n      let {\n        imageData: {\n          data: e\n        }\n      } = t;\n      const s = -this.saturation;\n      for (let t = 0; t < e.length; t += 4) {\n        const i = e[t],\n          r = e[t + 1],\n          n = e[t + 2],\n          o = Math.max(i, r, n);\n        e[t] += o !== i ? (o - i) * s : 0, e[t + 1] += o !== r ? (o - r) * s : 0, e[t + 2] += o !== n ? (o - n) * s : 0;\n      }\n    }\n    sendUniformData(t, e) {\n      t.uniform1f(e.uSaturation, -this.saturation);\n    }\n    isNeutralState() {\n      return 0 === this.saturation;\n    }\n  }\n  e(oh, \"type\", \"Saturation\"), e(oh, \"defaults\", {\n    saturation: 0\n  }), e(oh, \"uniformLocations\", [\"uSaturation\"]), tt.setClass(oh);\n  class ah extends ka {\n    getFragmentSource() {\n      return \"\\n  precision highp float;\\n  uniform sampler2D uTexture;\\n  uniform float uVibrance;\\n  varying vec2 vTexCoord;\\n  void main() {\\n    vec4 color = texture2D(uTexture, vTexCoord);\\n    float max = max(color.r, max(color.g, color.b));\\n    float avg = (color.r + color.g + color.b) / 3.0;\\n    float amt = (abs(max - avg) * 2.0) * uVibrance;\\n    color.r += max != color.r ? (max - color.r) * amt : 0.00;\\n    color.g += max != color.g ? (max - color.g) * amt : 0.00;\\n    color.b += max != color.b ? (max - color.b) * amt : 0.00;\\n    gl_FragColor = color;\\n  }\\n\";\n    }\n    applyTo2d(t) {\n      let {\n        imageData: {\n          data: e\n        }\n      } = t;\n      const s = -this.vibrance;\n      for (let t = 0; t < e.length; t += 4) {\n        const i = e[t],\n          r = e[t + 1],\n          n = e[t + 2],\n          o = Math.max(i, r, n),\n          a = (i + r + n) / 3,\n          h = 2 * Math.abs(o - a) / 255 * s;\n        e[t] += o !== i ? (o - i) * h : 0, e[t + 1] += o !== r ? (o - r) * h : 0, e[t + 2] += o !== n ? (o - n) * h : 0;\n      }\n    }\n    sendUniformData(t, e) {\n      t.uniform1f(e.uVibrance, -this.vibrance);\n    }\n    isNeutralState() {\n      return 0 === this.vibrance;\n    }\n  }\n  e(ah, \"type\", \"Vibrance\"), e(ah, \"defaults\", {\n    vibrance: 0\n  }), e(ah, \"uniformLocations\", [\"uVibrance\"]), tt.setClass(ah);\n  var hh = Object.freeze({\n    __proto__: null,\n    BaseFilter: ka,\n    BlackWhite: za,\n    BlendColor: Ma,\n    BlendImage: Aa,\n    Blur: ja,\n    Brightness: Fa,\n    Brownie: Ba,\n    ColorMatrix: Ra,\n    Composed: Ha,\n    Contrast: Na,\n    Convolute: qa,\n    Gamma: Ja,\n    Grayscale: Za,\n    HueRotation: th,\n    Invert: eh,\n    Kodachrome: Ya,\n    Noise: sh,\n    Pixelate: ih,\n    Polaroid: Va,\n    RemoveColor: rh,\n    Resize: nh,\n    Saturation: oh,\n    Sepia: Ga,\n    Technicolor: Wa,\n    Vibrance: ah,\n    Vintage: Xa\n  });\n  t.ActiveSelection = Yo, t.BaseBrush = Xn, t.BaseFabricObject = Xs, t.Canvas = Cn, t.Canvas2dFilterBackend = Wo, t.CanvasDOMManager = dn, t.Circle = Nn, t.CircleBrush = class extends Xn {\n    constructor(t) {\n      super(t), e(this, \"width\", 10), this.points = [];\n    }\n    drawDot(t) {\n      const e = this.addPoint(t),\n        s = this.canvas.contextTop;\n      this._saveAndTransform(s), this.dot(s, e), s.restore();\n    }\n    dot(t, e) {\n      t.fillStyle = e.fill, t.beginPath(), t.arc(e.x, e.y, e.radius, 0, 2 * Math.PI, !1), t.closePath(), t.fill();\n    }\n    onMouseDown(t) {\n      this.points = [], this.canvas.clearContext(this.canvas.contextTop), this._setShadow(), this.drawDot(t);\n    }\n    _render() {\n      const t = this.canvas.contextTop,\n        e = this.points;\n      this._saveAndTransform(t);\n      for (let s = 0; s < e.length; s++) this.dot(t, e[s]);\n      t.restore();\n    }\n    onMouseMove(t) {\n      !0 === this.limitedToCanvasSize && this._isOutSideCanvas(t) || (this.needsFullRender() ? (this.canvas.clearContext(this.canvas.contextTop), this.addPoint(t), this._render()) : this.drawDot(t));\n    }\n    onMouseUp() {\n      const t = this.canvas.renderOnAddRemove;\n      this.canvas.renderOnAddRemove = !1;\n      const e = [];\n      for (let t = 0; t < this.points.length; t++) {\n        const s = this.points[t],\n          i = new Nn({\n            radius: s.radius,\n            left: s.x,\n            top: s.y,\n            originX: D,\n            originY: D,\n            fill: s.fill\n          });\n        this.shadow && (i.shadow = new ds(this.shadow)), e.push(i);\n      }\n      const s = new Mr(e, {\n        canvas: this.canvas\n      });\n      this.canvas.fire(\"before:path:created\", {\n        path: s\n      }), this.canvas.add(s), this.canvas.fire(\"path:created\", {\n        path: s\n      }), this.canvas.clearContext(this.canvas.contextTop), this._resetShadow(), this.canvas.renderOnAddRemove = t, this.canvas.requestRenderAll();\n    }\n    addPoint(t) {\n      let {\n        x: e,\n        y: s\n      } = t;\n      const i = {\n        x: e,\n        y: s,\n        radius: hn(Math.max(0, this.width - 20), this.width + 20) / 2,\n        fill: new qt(this.color).setAlpha(hn(0, 100) / 100).toRgba()\n      };\n      return this.points.push(i), i;\n    }\n  }, t.ClipPathLayout = Io, t.Color = qt, t.Control = Hs, t.Ellipse = $n, t.FabricImage = qo, t.FabricObject = _i, t.FabricText = bo, t.FitContentLayout = br, t.FixedLayout = Bo, t.Gradient = Rn, t.Group = Mr, t.IText = Lo, t.Image = qo, t.InteractiveFabricObject = vi, t.Intersection = Ls, t.LayoutManager = Or, t.LayoutStrategy = Cr, t.Line = Jn, t.Object = _i, t.Observable = st, t.Path = Vn, t.Pattern = Bn, t.PatternBrush = class extends Gn {\n    constructor(t) {\n      super(t);\n    }\n    getPatternSrc() {\n      const t = pt(),\n        e = t.getContext(\"2d\");\n      return t.width = t.height = 25, e && (e.fillStyle = this.color, e.beginPath(), e.arc(10, 10, 10, 0, 2 * Math.PI, !1), e.closePath(), e.fill()), t;\n    }\n    getPattern(t) {\n      return t.createPattern(this.source || this.getPatternSrc(), \"repeat\");\n    }\n    _setBrushStyles(t) {\n      super._setBrushStyles(t);\n      const e = this.getPattern(t);\n      e && (t.strokeStyle = e);\n    }\n    createPath(t) {\n      const e = super.createPath(t),\n        s = e._getLeftTopCoords().scalarAdd(e.strokeWidth / 2);\n      return e.stroke = new Bn({\n        source: this.source || this.getPatternSrc(),\n        offsetX: -s.x,\n        offsetY: -s.y\n      }), e;\n    }\n  }, t.PencilBrush = Gn, t.Point = ot, t.Polygon = ro, t.Polyline = io, t.Rect = pr, t.Shadow = ds, t.SprayBrush = class extends Xn {\n    constructor(t) {\n      super(t), e(this, \"width\", 10), e(this, \"density\", 20), e(this, \"dotWidth\", 1), e(this, \"dotWidthVariance\", 1), e(this, \"randomOpacity\", !1), e(this, \"optimizeOverlapping\", !0), this.sprayChunks = [], this.sprayChunk = [];\n    }\n    onMouseDown(t) {\n      this.sprayChunks = [], this.canvas.clearContext(this.canvas.contextTop), this._setShadow(), this.addSprayChunk(t), this.renderChunck(this.sprayChunk);\n    }\n    onMouseMove(t) {\n      !0 === this.limitedToCanvasSize && this._isOutSideCanvas(t) || (this.addSprayChunk(t), this.renderChunck(this.sprayChunk));\n    }\n    onMouseUp() {\n      const t = this.canvas.renderOnAddRemove;\n      this.canvas.renderOnAddRemove = !1;\n      const e = [];\n      for (let t = 0; t < this.sprayChunks.length; t++) {\n        const s = this.sprayChunks[t];\n        for (let t = 0; t < s.length; t++) {\n          const i = s[t],\n            r = new pr({\n              width: i.width,\n              height: i.width,\n              left: i.x + 1,\n              top: i.y + 1,\n              originX: D,\n              originY: D,\n              fill: this.color\n            });\n          e.push(r);\n        }\n      }\n      const s = new Mr(this.optimizeOverlapping ? function (t) {\n        const e = {},\n          s = [];\n        for (let i, r = 0; r < t.length; r++) i = \"\".concat(t[r].left).concat(t[r].top), e[i] || (e[i] = !0, s.push(t[r]));\n        return s;\n      }(e) : e, {\n        objectCaching: !0,\n        subTargetCheck: !1,\n        interactive: !1\n      });\n      this.shadow && s.set(\"shadow\", new ds(this.shadow)), this.canvas.fire(\"before:path:created\", {\n        path: s\n      }), this.canvas.add(s), this.canvas.fire(\"path:created\", {\n        path: s\n      }), this.canvas.clearContext(this.canvas.contextTop), this._resetShadow(), this.canvas.renderOnAddRemove = t, this.canvas.requestRenderAll();\n    }\n    renderChunck(t) {\n      const e = this.canvas.contextTop;\n      e.fillStyle = this.color, this._saveAndTransform(e);\n      for (let s = 0; s < t.length; s++) {\n        const i = t[s];\n        e.globalAlpha = i.opacity, e.fillRect(i.x, i.y, i.width, i.width);\n      }\n      e.restore();\n    }\n    _render() {\n      const t = this.canvas.contextTop;\n      t.fillStyle = this.color, this._saveAndTransform(t);\n      for (let t = 0; t < this.sprayChunks.length; t++) this.renderChunck(this.sprayChunks[t]);\n      t.restore();\n    }\n    addSprayChunk(t) {\n      this.sprayChunk = [];\n      const e = this.width / 2;\n      for (let s = 0; s < this.density; s++) this.sprayChunk.push({\n        x: hn(t.x - e, t.x + e),\n        y: hn(t.y - e, t.y + e),\n        width: this.dotWidthVariance ? hn(Math.max(1, this.dotWidth - this.dotWidthVariance), this.dotWidth + this.dotWidthVariance) : this.dotWidth,\n        opacity: this.randomOpacity ? hn(0, 100) / 100 : 1\n      });\n      this.sprayChunks.push(this.sprayChunk);\n    }\n  }, t.StaticCanvas = de, t.StaticCanvasDOMManager = le, t.Text = bo, t.Textbox = Ro, t.Triangle = Qn, t.WebGLFilterBackend = Vo, t.cache = _, t.classRegistry = tt, t.config = a, t.controlsUtils = xa, t.createCollectionMixin = ct, t.filters = hh, t.getCSSRules = ia, t.getEnv = p, t.getFabricDocument = m, t.getFabricWindow = v, t.getFilterBackend = Ho, t.iMatrix = T, t.initFilterBackend = zo, t.isPutImageFaster = (t, e) => {\n    const s = vt({\n        width: t,\n        height: e\n      }),\n      i = pt().getContext(\"webgl\"),\n      r = {\n        imageBuffer: new ArrayBuffer(t * e * 4)\n      },\n      n = {\n        destinationWidth: t,\n        destinationHeight: e,\n        targetCanvas: s\n      };\n    let o;\n    o = v().performance.now(), Vo.prototype.copyGLTo2D.call(r, i, n);\n    const a = v().performance.now() - o;\n    o = v().performance.now(), Vo.prototype.copyGLTo2DPutImageData.call(r, i, n);\n    return a > v().performance.now() - o;\n  }, t.isWebGLPipelineState = Ca, t.loadSVGFromString = function (t, e, s) {\n    return ha(new (v().DOMParser)().parseFromString(t.trim(), \"text/xml\"), e, s);\n  }, t.loadSVGFromURL = function (t, e) {\n    let s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n    return new Promise((e, i) => {\n      cn(t.replace(/^\\n\\s*/, \"\").trim(), {\n        onComplete: t => {\n          const s = t.responseXML;\n          s && e(s), i();\n        },\n        signal: s.signal\n      });\n    }).then(t => ha(t, e, s)).catch(() => aa());\n  }, t.parseAttributes = dr, t.parseFontDeclaration = hr, t.parsePointsAttribute = to, t.parseSVGDocument = ha, t.parseStyleAttribute = lr, t.parseTransformAttribute = or, t.runningAnimations = et, t.setEnv = t => {\n    f = t;\n  }, t.setFilterBackend = function (t) {\n    Go = t;\n  }, t.util = un, t.version = x;\n});","map":{"version":3,"names":["o","constructor","e","window","devicePixelRatio","a","t","configure","arguments","length","Object","assign","addFonts","fontPaths","i","removeFonts","forEach","clearFonts","restoreDefaults","s","reduce","h","log","Array","console","c","Error","concat","l","u","d","testPrecision","createShader","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","queryWebGL","getContext","maxTextureSize","getParameter","MAX_TEXTURE_SIZE","GLPrecision","find","getExtension","loseContext","isSupported","g","f","p","document","isTouchSupported","navigator","maxTouchPoints","WebGLProbe","dispose","copyPasteData","m","v","y","Math","max","_","getFontCache","fontFamily","fontStyle","fontWeight","toLowerCase","charWidthsCache","r","n","clearFontCache","limitDimsByArea","perfLimitSizeTotal","sqrt","floor","x","C","b","PI","S","w","T","freeze","O","k","D","M","P","E","A","j","F","L","R","I","B","X","Y","W","V","G","z","H","N","U","q","K","J","Q","Z","$","tt","Map","has","getClass","get","setClass","set","type","getSVGClass","setSVGClass","et","remove","indexOf","splice","cancelAll","abort","cancelByCanvas","filter","target","canvas","cancelByTarget","st","on","__eventListeners","entries","off","push","once","call","_removeEventListener","fire","it","rt","abs","cos","nt","sign","sin","ot","add","addEquals","scalarAdd","scalarAddEquals","subtract","subtractEquals","scalarSubtract","scalarSubtractEquals","multiply","scalarMultiply","scalarMultiplyEquals","divide","scalarDivide","scalarDivideEquals","eq","lt","lte","gt","gte","lerp","min","distanceFrom","midPointFrom","toString","setXY","setX","setY","setFromPoint","swap","clone","rotate","at","transform","ht","isArray","_objects","ct","_onObjectAdded","_onObjectRemoved","_onStackOrderChanged","insertAt","forEachObject","getObjects","isType","item","isEmpty","size","contains","includes","some","complexity","sendObjectToBack","unshift","bringObjectToFront","sendObjectBackwards","findNewLowerIndex","bringObjectForward","findNewUpperIndex","moveObjectTo","isOverlapping","collectObjects","left","top","width","height","includeIntersecting","selectable","visible","intersectsWithRect","isContainedWithinRect","containsPoint","_setOptions","_setObject","_set","toggle","ut","requestAnimationFrame","dt","cancelAnimationFrame","ft","pt","createElement","mt","vt","yt","toDataURL","_t","Promise","toBlob","xt","Ct","bt","every","St","wt","Tt","Ot","reduceRight","kt","atan2","Dt","pow","angle","scaleX","scaleY","skewX","skewY","translateX","translateY","Mt","createTranslateMatrix","Pt","Et","createScaleMatrix","At","tan","jt","Ft","Lt","flipX","flipY","Rt","It","loadImage","signal","crossOrigin","aborted","src","addEventListener","done","onload","onerror","removeEventListener","Bt","enlivenObjects","reviver","all","map","fromObject","then","catch","finally","Xt","enlivenObjectEnlivables","values","keys","Yt","pick","Wt","Vt","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","Gt","zt","round","Ht","fromAlphaToFloat","parseFloat","endsWith","Nt","toUpperCase","padStart","Ut","qt","setSource","_source","_tryParsingColor","sourceFromHex","sourceFromRgb","sourceFromHsl","isUnrecognised","getSource","toRgb","toRgba","join","toHsl","toHsla","toHex","toHexa","slice","getAlpha","setAlpha","toGrayscale","toBlackWhite","overlayWith","fromRgb","fromRgba","match","fromHsl","fromHsla","parseAngletoDegrees","fromHex","split","parseInt","Kt","Number","toFixed","Jt","parseUnit","exec","DPI","Qt","trim","meetOrSlice","alignX","alignY","Zt","NUM_FRACTION_DIGITS","$t","colorPropToSVG","toLive","id","te","ee","toObject","se","offsetX","ie","re","ne","documentElement","body","scrollLeft","scrollTop","parentNode","host","nodeType","style","position","ownerDocument","oe","defaultView","ae","setCanvasDimensions","setAttribute","scale","he","ce","onselectstart","userSelect","le","createLowerCanvas","lower","el","ctx","getElementById","hasAttribute","_originalCanvasStyle","cssText","classList","cleanupDOM","removeAttribute","setDimensions","setCSSDimensions","calcOffset","getComputedStyle","borderLeftWidth","borderTopWidth","paddingLeft","paddingTop","getBoundingClientRect","clientLeft","clientTop","ue","backgroundVpt","backgroundColor","overlayVpt","overlayColor","includeDefaultValues","svgViewportTransformation","renderOnAddRemove","skipOffscreen","enableRetinaScaling","imageSmoothingEnabled","controlsAboveOverlay","allowTouchScrolling","viewportTransform","de","lowerCanvasEl","elements","contextContainer","getDefaults","ownDefaults","initElements","_setDimensionsImpl","skipControlsDrawing","calcViewportBoundaries","requestRenderAll","setCoords","getRetinaScaling","_offset","getWidth","getHeight","setWidth","setHeight","cssOnly","backstoreOnly","hasLostContext","getZoom","setViewportTransform","zoomToPoint","setZoom","absolutePan","relativePan","getElement","clearContext","clearRect","clear","backgroundImage","overlayImage","renderAll","cancelRequestedRender","destroyed","renderCanvas","renderAndReset","nextRenderHandle","disposed","vptCoords","tl","tr","bl","br","drawControls","clipPath","patternQuality","_renderBackground","save","_renderObjects","restore","shouldCache","_transformDone","renderCache","forClipping","drawClipPathOnCanvas","_renderOverlay","__cleanupTask","globalCompositeOperation","zoomX","zoomY","drawImage","_cacheCanvas","cacheTranslationX","cacheTranslationY","render","_renderBackgroundOrOverlay","beginPath","moveTo","lineTo","closePath","fillStyle","offsetY","gradientTransform","patternTransform","fill","getCenter","getCenterPoint","centerObjectH","_centerObject","centerObjectV","centerObject","viewportCenterObject","getVpCenter","viewportCenterObjectH","viewportCenterObjectV","toDatalessJSON","toDatalessObject","_toObjectMethod","toJSON","excludeFromExport","_toObject","version","objects","__serializeBgOverlay","background","overlay","toSVG","_setSVGPreamble","_setSVGHeader","clipPathId","_setSVGBgOverlayColor","_setSVGBgOverlayImage","_setSVGObjects","suppressPreamble","encoding","viewBox","createSVGFontFacesMarkup","createSVGRefElementsMarkup","createSVGClipPathMarkup","toClipPathSVG","additionalTransform","_renderText","styles","_setSVGObject","repeat","source","loadFromJSON","reject","JSON","parse","cloneWithoutData","format","quality","multiplier","toCanvasElement","destroy","kill","ge","fe","changedTouches","clientX","clientY","pe","pointerType","me","preventDefault","stopPropagation","ve","ye","_e","xe","calcOwnMatrix","setPositionByOrigin","Ce","be","Se","we","calcPlaneChangeMatrix","Te","sendPointToPlane","Oe","sendVectorToPlane","ke","De","Me","center","bottom","right","Pe","Ee","Ae","originX","originY","je","Fe","Le","pointer","Re","getTotalAngle","Ie","corner","controls","padding","getRelativeCenterPoint","translateToGivenOrigin","Be","Xe","getSvgStyles","fillRule","strokeWidth","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","opacity","getSvgFilter","stroke","shadow","getSvgCommons","getSvgTransform","calcTransformMatrix","_toSVG","_createBaseSVGMarkup","_createBaseClipPathSVGMarkup","noStyle","withShadow","strokeUniform","absolutePositioned","addPaintOrder","paintFirst","Ye","RegExp","We","Ve","String","raw","Ge","ze","He","cx","cy","display","visibility","Ne","Ue","qe","Ke","Je","Qe","Ze","$e","ts","es","ss","is","as","hs","rs","ns","os","getOrthonormalVector","cs","ls","us","ds","parseShadow","color","replace","blur","affectStroke","nonScaling","gs","fs","ps","ms","minScaleLimit","objectCaching","inverted","centeredRotation","centeredScaling","dirty","vs","asin","ys","_s","xs","Cs","bs","__proto__","defaultEasing","easeInBack","easeInBounce","easeInCirc","easeInCubic","easeInElastic","easeInExpo","easeInOutBack","easeInOutBounce","easeInOutCirc","easeInOutCubic","easeInOutElastic","easeInOutExpo","easeInOutQuad","easeInOutQuart","easeInOutQuint","easeInOutSine","easeInQuad","easeInQuart","easeInQuint","easeInSine","easeOutBack","easeOutBounce","easeOutCirc","easeOutCubic","easeOutElastic","easeOutExpo","easeOutQuad","easeOutQuart","easeOutQuint","easeOutSine","Ss","ws","startValue","byValue","duration","delay","easing","onStart","onChange","onComplete","tick","bind","_onStart","_onChange","_onComplete","_abort","value","endValue","calculate","state","_state","isDone","start","startTime","Date","register","setTimeout","durationProgress","valueProgress","unregister","Ts","Os","ks","Ds","Ms","Ps","Es","As","js","Fs","Ls","status","points","append","isPointContained","isPointInPolygon","intersectSegmentSegment","intersectLineLine","intersectSegmentLine","intersectLinePolygon","intersectSegmentPolygon","intersectPolygonPolygon","intersectPolygonRectangle","Rs","getX","getXY","getY","getRelativeX","setRelativeX","getRelativeY","setRelativeY","getRelativeXY","group","setRelativeXY","isStrokeAccountedForInDimensions","getCoords","aCoords","calcACoords","intersectsWithObject","isContainedWithinObject","getBoundingRect","isOnScreen","isPartiallyOnScreen","getScaledWidth","_getTransformedDimensions","getScaledHeight","scaleToWidth","scaleToHeight","getCanvasRetinaScaling","getViewportTransform","transformMatrixKey","matrixCache","key","ownMatrixCache","_getNonTransformedDimensions","_calculateCurrentDimensions","translateToCenterPoint","translateToOriginPoint","getPointByOrigin","_getLeftTopCoords","Is","Bs","Xs","setOptions","_createCacheCanvas","_cacheContext","_updateCacheCanvas","_limitCacheSize","maxCacheSideLimit","minCacheSideLimit","capped","_getCacheCanvasDimensions","getTotalObjectScaling","ceil","setTransform","translate","contextTop","getObjectScaling","getObjectOpacity","_constrainScale","cacheProperties","parent","stateProperties","isNotVisible","_setupCompositeOperation","drawSelectionBackground","_setOpacity","_setShadow","drawCacheOnCanvas","_removeCacheCanvas","drawObject","isCacheDirty","parentClipPaths","hasStroke","hasFill","needsItsOwnCache","ownCaching","isOnACache","willDrawShadow","drawClipPathOnCache","_setClippingProperties","_render","_drawClipPath","createClipPathLayer","fillRect","_removeShadow","globalAlpha","_setStrokeStyles","lineWidth","lineCap","lineDashOffset","lineJoin","miterLimit","gradientUnits","_applyPatternForTransformedGradient","strokeStyle","_applyPatternGradientTransform","_setFillStyles","_setLineDash","setLineDash","shadowColor","shadowBlur","browserShadowBlurConstant","shadowOffsetX","shadowOffsetY","_renderPaintInOrder","_renderStroke","_renderFill","createPattern","_findCenterFromElement","cloneAsImage","canvasProvider","withoutTransform","withoutShadow","setOnGroup","animate","_animate","colorProperties","isDescendantOf","getAncestors","findCommonAncestors","fork","otherFork","common","hasCommonAncestors","isInFrontOf","pop","customProperties","_removeDefaultValues","getPrototypeOf","_fromObject","extraParam","Ys","Ws","Vs","Gs","sizeX","cornerSize","sizeY","transparentCorners","cornerStrokeColor","cornerColor","arc","zs","strokeRect","Hs","shouldActivate","getActiveObject","isControlVisible","getActionHandler","actionHandler","getMouseDownHandler","mouseDownHandler","getMouseUpHandler","mouseUpHandler","cursorStyleHandler","cursorStyle","getActionName","actionName","getVisibility","_controlsVisibility","setVisibility","positionHandler","calcCornerCoords","touchSizeX","touchSizeY","cornerStyle","Ns","lockRotation","Us","ex","ey","theta","snapAngle","snapThreshold","qs","uniScaleKey","uniformScaling","Ks","Js","Qs","Zs","by","gestureScale","signX","signY","original","$s","ti","ei","si","ii","counterAxis","skew","lockSkewing","origin","flip","ri","ni","oi","skewingSide","atan","ai","hi","ci","altActionKey","li","ui","di","gi","fi","ml","mr","mb","mtr","withConnection","pi","mi","vi","createControls","noScaleCache","_currentTransform","action","startsWith","getActiveControl","__corner","control","coord","oCoords","findControl","hasControls","touchCorner","calcOCoords","forEachControl","_calcCornerCoords","touchCornerSize","selectionBackgroundColor","_activeObject","strokeBorders","_drawBorders","borderColor","borderDashArray","drawControlsConnectingLines","_renderControls","hasBorders","borderScaleFactor","isMoving","borderOpacityWhenMoving","drawBorders","forActiveSelection","cornerDashArray","setControlVisible","setControlsVisibility","clearContextTop","onDeselect","onSelect","shouldStartDragging","onDragStart","canDrop","renderDragSourceEffect","renderDropTargetEffect","yi","getOwnPropertyNames","prototype","defineProperty","getOwnPropertyDescriptor","create","lockMovementX","lockMovementY","lockScalingX","lockScalingY","lockSkewingX","lockSkewingY","lockScalingFlip","evented","perPixelTargetFind","activeOn","hoverCursor","moveCursor","_i","xi","data","getImageData","Ci","options","strokeProjectionMagnitude","strokeUniformScalar","createSideVector","projectOrthogonally","applySkew","calcOrthogonalProjection","isSkewed","scaleUnitVector","bi","Si","getOrthogonalRotationFactor","AB","AC","alpha","bisector","projectBevel","projectMiter","projectRoundNoSkew","projectRoundWithSkew","projectRound","projectPoints","project","originPoint","projectedPoint","wi","projectButt","projectSquare","Ti","projectStrokeOnPoints","Oi","ki","Di","Mi","charCodeAt","isNaN","charAt","Pi","capitalize","escapeXml","graphemeSplit","Ei","hasStyleChanged","fontSize","textBackgroundColor","deltaY","overline","underline","linethrough","Ai","end","ji","Fi","Li","nodeName","getAttribute","Ri","parentElement","Ii","Bi","Xi","Yi","Wi","Vi","Gi","zi","Hi","Ni","Ui","qi","Ki","Ji","Qi","Zi","$i","er","sr","ir","rr","nr","or","test","matchAll","ar","transformMatrix","hr","lineHeight","cr","lr","ur","dr","font","gr","fr","pr","_initRxRy","rx","ry","bezierCurveTo","fromElement","ATTRIBUTE_NAMES","Boolean","vr","yr","_r","xr","Cr","calcLayoutResult","shouldPerformLayout","calcBoundingBox","prevStrategy","strategy","shouldLayoutClipPath","getInitialSize","overrides","relativeCorrection","Sr","wr","Tr","Or","_subscriptions","performLayout","bubbles","_prevLayoutStrategy","onBeforeLayout","getLayoutResult","commitLayout","onAfterLayout","attachHandlers","trigger","subscribe","unsubscribe","delete","unsubscribeTargets","targets","subscribeTargets","context","deep","layoutManager","correction","result","prevCenter","nextCenter","offset","layoutObjects","layoutObject","path","kr","Dr","Mr","groupInit","__objectSelectionTracker","__objectSelectionMonitor","__objectSelectionDisposer","enterGroup","canEnterGroup","_filterObjectsBeforeEnteringGroup","_onAfterObjectsChange","exitGroup","_shouldSetNestedCoords","subTargetCheck","removeAll","_activeObjects","_watchObject","_enterGroup","_exitGroup","preserveObjectStacking","triggerLayout","__serializeObjects","_createSVGBgRect","interactive","Pr","Er","Ar","jr","Fr","Lr","Rr","Ir","Br","cachesBoundsOfCurve","boundsOfCurveCache","Vr","Xr","Yr","Wr","Gr","zr","Hr","Nr","Ur","qr","Kr","Jr","iterator","angleFinder","Qr","command","destX","destY","Zr","getPointOnPath","$r","tn","en","sn","rn","lastIndex","nn","getSmoothPathFromPoints","an","setProperty","hn","random","cn","XMLHttpRequest","removeListener","ontimeout","onreadystatechange","readyState","open","send","ln","cropX","cropY","offsetLeft","offsetTop","un","addTransformToObject","animateColor","applyTransformToObject","calcAngleBetweenVectors","calcDimensionsMatrix","calcVectorRotation","cancelAnimFrame","capValue","composeMatrix","copyCanvasElement","createCanvasElement","createImage","createRotateMatrix","createSkewXMatrix","createSkewYMatrix","createVector","crossProduct","degreesToRadians","dotProduct","ease","findScaleToCover","findScaleToFit","getBoundsOfCurve","getPathSegmentsInfo","getPointer","getRandomInt","getRegularPolygonPath","getSvgAttributes","getUnitVector","groupSVGElements","invertTransform","isBetweenVectors","isIdentityMatrix","isTouchEvent","isTransparent","joinPath","magnitude","makeBoundingBoxFromPoints","makePathSimpler","matrixToSVG","mergeClipPaths","multiplyTransformMatrices","multiplyTransformMatrixArray","parsePath","parsePreserveAspectRatioAttribute","qrDecompose","radiansToDegrees","removeFromArray","removeTransformFromObject","removeTransformMatrixForSvgParsing","request","requestAnimFrame","resetObjectTransform","rotatePoint","rotateVector","saveObjectTransform","sendObjectToPlane","setStyle","sizeAfterTransform","string","stylesFromArray","stylesToArray","transformPath","transformPoint","dn","containerClass","createUpperCanvas","upper","applyCanvasStyle","createContainerElement","replaceChild","container","className","removeChild","gn","upperCanvasEl","wrapperEl","_objectsToRender","deselected","_discardActiveObject","_hoveredTarget","_hoveredTargets","_chooseObjectsToRender","contextTopDirty","_groupSelector","isDrawingMode","renderTopLayer","_isCurrentlyDrawing","freeDrawingBrush","selection","_drawSelection","renderTop","setTargetFindTolerance","targetFindTolerance","pixelFindCanvasEl","pixelFindContext","isTargetTransparent","_isSelectionKeyPressed","selectionKey","_shouldClearSelection","getActiveObjects","_shouldCenterTransform","_getOriginFromCorner","_setupCurrentTransform","getScenePoint","centeredKey","actionPerformed","lastX","lastY","shiftKey","altKey","setCursor","cursor","deltaX","selectionLineWidth","selectionColor","selectionBorderColor","selectionDashArray","findTarget","skipTargetFind","getViewportPoint","searchPossibleTargets","altSelectionKey","_pointIsInObjectSelectionArea","_checkTarget","isEditing","_searchPossibleTargets","_pointer","_absolutePointer","_resetTransformEventData","_setBrushStyles","willReadFrequently","getTopContext","getSelectionContext","getSelectionElement","_fireSelectionEvents","selected","setActiveObject","_setActiveObject","object","endCurrentTransform","discardActiveObject","_finalizeCurrentTransform","_scaling","_realizeGroupTransformOnObject","selectionFullyContained","defaultCursor","freeDrawingCursor","notAllowedCursor","stopContextMenu","fireRightClick","fireMiddleClick","enablePointerEvents","fn","hiddenTextarea","focus","__disposer","exitTextEditing","exitEditing","onMouseMove","updateSelectionOnMouseMove","pn","mn","passive","vn","viewportPoint","scenePoint","absolutePointer","yn","addListener","_n","xn","mouse","in","out","targetIn","targetOut","canvasIn","canvasOut","drag","Cn","addOrRemove","_getEventPrefix","_onResize","_onMouseDown","_onMouseMove","_onMouseOut","_onMouseEnter","_onMouseWheel","_onContextMenu","_onDoubleClick","_onDragStart","_onDragEnd","_onDragOver","_onDragEnter","_onDragLeave","_onDrop","_onTouchStart","removeListeners","_onMouseUp","_onTouchEnd","clearTimeout","_willAddMouseDown","__onMouseWheel","_isClick","_dragSource","_onDragProgress","_renderDragEffects","_dropTarget","dataTransfer","dropEffect","subTargets","dragSource","didDrop","dropTarget","_draggedoverTarget","findDragTargets","_fireEnterLeaveEvents","_basicEventHandler","_cacheTransformEventData","_handleEvent","getPointerId","identifier","pointerId","_isMainEvent","isPrimary","touches","mainTouchId","__onMouseDown","_target","__onMouseUp","__onMouseMove","_shouldRender","button","_onMouseUpInDrawingMode","handleSelection","_setCursorFromEvent","isClick","currentTarget","currentSubTargets","_onMouseDownInDrawingMode","onMouseDown","_onMouseMoveInDrawingMode","onMouseUp","handleMultiSelection","_transformObject","_fireOverOutEvents","textEditingManager","fireSyntheticInOutEvents","oldTarget","fireCanvas","nextTarget","previousTarget","_performTransformAction","reverse","multiSelectAdd","bn","x1","y1","x2","y2","Sn","r1","r2","wn","Tn","On","kn","NaN","Dn","Mn","Pn","En","getElementsByTagName","An","jn","Fn","Ln","Rn","coords","colorStops","addColorStop","sort","_renderPathCommands","pathOffset","createLinearGradient","createRadialGradient","viewBoxWidth","viewBoxHeight","In","Bn","isImageSource","isCanvasSource","sourceToString","complete","naturalWidth","naturalHeight","Xn","_saveAndTransform","needsFullRender","_resetShadow","_isOutSideCanvas","Yn","Wn","Vn","_setPath","setBoundingBox","_calcBoundsFromPath","quadraticCurveTo","sourcePath","_getOffsetTransform","_calcDimensions","Gn","_points","_hasStraightLine","drawSegment","drawStraightLine","straightLineKey","_prepareForDrawing","_addPoint","limitedToCanvasSize","oldEnd","_finalizeAndAddPath","_reset","convertPointsToSVGPath","createPath","decimatePoints","decimate","zn","Hn","Nn","setRadius","radius","startAngle","endAngle","counterClockwise","getRadiusX","getRadiusY","Un","qn","Kn","Jn","_setWidthHeight","calcLinePoints","Qn","Zn","$n","getRx","getRy","to","eo","so","exactBoundingBox","io","initialized","isOpen","_projectStrokeOnPoints","strokeOffset","strokeDiff","layoutProperties","ro","no","oo","ao","ho","co","lo","_reNewline","_reSpacesAndTabs","_reSpaceAndTab","_reWords","textAlign","superscript","baseline","subscript","pathStartOffset","pathSide","pathAlign","_fontSizeFraction","offsets","_fontSizeMult","charSpacing","direction","CACHE_FONT_SIZE","MIN_TEXT_WIDTH","uo","go","fo","po","mo","isEmptyStyles","line","styleHas","cleanStyle","_textLines","removeStyle","_extendStyles","lineIndex","charIndex","get2DCursorLocation","_getLineStyle","_setLineStyle","_getStyleDeclaration","_setStyleDeclaration","getSelectionStyles","getStyleAtPosition","getCompleteStyleDeclaration","setSelectionStyles","_forceClearCache","_styleProperties","_deleteStyleDeclaration","_deleteLineStyle","vo","yo","_o","xo","Co","bo","text","setPathInfo","initDimensions","segmentsInfo","_splitText","_splitTextIntoLines","textLines","lines","graphemeLines","_unwrappedTextLines","_unwrappedLines","_text","graphemeText","_clearCache","calcTextWidth","cursorWidth","calcTextHeight","enlargeSpaces","isEndOfWrapping","getLineWidth","__charBounds","kernedWidth","missingNewlineOffset","_setTextStyles","_renderTextLinesBackground","_renderTextDecoration","_renderTextStroke","_renderTextFill","textBaseline","_getFontDeclaration","_renderTextLine","_renderChars","_getLeftOffset","_getTopOffset","getHeightOfLine","_getLineLeftOffset","getValueOfPropertyAt","renderLeft","_measureChar","measureText","getHeightOfChar","measureLine","_measureLine","_getWidthOfCharSpacing","_getGraphemeBox","_setGraphemeOnPath","numOfSpaces","__lineHeights","_renderTextCommon","_renderChar","_applyPatternGradientTransformText","handleFiller","fillText","strokeText","setSuperscript","_setScript","setSubscript","__lineWidths","genericFonts","textLayoutProperties","textAnchor","textDecoration","dx","dy","textContent","_getSVGLeftTopOffsets","_getSVGTextAndBg","textTop","textLeft","_wrapSVGTextAndBg","lineTop","textBgRects","textSpans","getSvgTextDecoration","_setSVGTextLineBg","_setSVGTextLineText","_createTextCharSpan","getSvgSpanStyles","_getSVGLineTopOffset","So","dragEnterHandler","dragOverHandler","dragLeaveHandler","dragEndHandler","dropHandler","_dispose","isPointerOverSelection","getSelectionStartFromPointer","selectionStart","selectionEnd","__mouseDownInPlace","isActive","__dragStartFired","setCursorByClick","initDelayedCursor","__isDraggingOver","getDragStartSelection","__dragStartSelection","setDragImage","_getCursorBoundaries","leftOffset","topOffset","border","__dragImageDisposer","appendChild","setData","stringify","effectAllowed","abortCursorAnimation","editable","defaultPrevented","targetCanDrop","getData","types","removeChars","trimEnd","insertChars","enterEditing","_updateTextarea","index","wo","To","initBehavior","_tick","_onTickComplete","_animateCursor","toValue","_currentCursorOpacity","renderCursorOrSelection","_currentTickState","cursorDuration","_currentTickCompleteState","cursorDelay","restartCursorIfNeeded","selectAll","_fireSelectionChanged","getSelectedText","findWordBoundaryLeft","_reSpace","findWordBoundaryRight","findLineBoundaryLeft","findLineBoundaryRight","searchWordBoundary","selectWord","selectLine","enterEditingImpl","initHiddenTextarea","_saveEditingProps","_setEditingProps","_textBeforeEdit","activeElement","__selectionStartOnMouseDown","editingBorderColor","fromStringToGraphemeSelection","fromGraphemeToStringSelection","cursorOffsetCache","inCompositionMode","updateTextareaPosition","updateFromTextArea","_calcTextareaPosition","compositionStart","clientWidth","clientHeight","charHeight","_savedProps","_restoreEditingProps","_exitEditing","exitEditingImpl","_removeExtraneousStyles","removeStyleFromTo","shiftLineStyles","insertNewlineStyleObject","insertCharStyleObject","insertNewStyleBlock","setSelectionStartEndWithShift","_selectionDirection","Oo","autocapitalize","autocorrect","autocomplete","spellcheck","wrap","hiddenTextareaContainer","keydown","keyup","input","copy","cut","paste","compositionstart","compositionupdate","compositionend","onKeyDown","keysMapRtl","keysMap","keyCode","ctrlKeysMapDown","ctrlKey","metaKey","stopImmediatePropagation","onKeyUp","_copyDone","ctrlKeysMapUp","onInput","fromPaste","copiedText","disableStyleCopyPaste","copiedTextStyle","onCompositionStart","onCompositionEnd","onCompositionUpdate","compositionEnd","_getWidthBeforeCursor","getDownCursorOffset","_getSelectionForOffset","_getIndexOnLine","getUpCursorOffset","moveCursorDown","_moveCursorUpOrDown","moveCursorUp","moveCursorWithShift","moveCursorWithoutShift","moveCursorLeft","_moveCursorLeftOrRight","_move","_moveLeft","_moveRight","moveCursorLeftWithoutShift","moveCursorLeftWithShift","moveCursorRight","moveCursorRightWithShift","moveCursorRightWithoutShift","ko","Do","_mouseDownHandler","_mouseDownHandlerBefore","doubleClickHandler","tripleClickHandler","__lastClickTime","__lastLastClickTime","__lastPointer","draggableTextDelegate","__newClickTime","isTripleClick","__lastSelected","Mo","Po","Eo","Ao","jo","Fo","cursorColor","caching","Lo","setSelectionStart","_updateAndFire","setSelectionEnd","renderSelection","renderCursor","_getCursorBoundariesOffsets","__getCursorBoundariesOffsets","renderCursorAt","_renderCursor","getCursorRenderingData","_renderSelection","compositionColor","getCurrentCharFontSize","_getCurrentCharIndex","getCurrentCharColor","Ro","dynamicMinWidth","_styleMap","_generateStyleMap","splitByGrapheme","isWrapping","_wrapText","getGraphemeDataForRender","wordsData","_wrapLine","wordSplit","word","_measureWord","largestWordWidth","_wordJoiners","getMinWidth","minWidth","Io","Bo","Xo","Set","Yo","multiSelectionStacking","findIndex","Wo","applyFilters","sourceWidth","sourceHeight","imageData","originalEl","originalImageData","canvasEl","filterBackend","applyTo","putImageData","Vo","tileSize","textureSize","Float32Array","setupGLContext","captureGPUInfo","createWebGLCanvas","premultipliedAlpha","depth","stencil","antialias","clearColor","gl","getCachedTexture","originalWidth","originalHeight","destinationWidth","destinationHeight","sourceTexture","createTexture","targetTexture","originalTexture","passes","webgl","aPosition","programCache","pass","targetCanvas","createFramebuffer","bindFramebuffer","FRAMEBUFFER","copyGLTo2D","bindTexture","TEXTURE_2D","deleteTexture","deleteFramebuffer","clearWebGLCaches","textureCache","NEAREST","RGBA","UNSIGNED_BYTE","CLAMP_TO_EDGE","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","texParameteri","texImage2D","evictCachesForKey","copyGLTo2DPutImageData","Uint8Array","imageBuffer","Uint8ClampedArray","readPixels","ImageData","gpuInfo","renderer","vendor","UNMASKED_RENDERER_WEBGL","UNMASKED_VENDOR_WEBGL","Go","zo","enableGLFiltering","Ho","No","Uo","qo","filters","cacheKey","setElement","_element","removeTexture","_originalElement","CSS_CANVAS","resizeFilter","applyResizeFilters","getCrossOrigin","getOriginalSize","_stroke","getSrc","hasCrop","imageSmoothing","getSvgSrc","srcFromAttribute","setSrc","minimumScaleTrigger","_filteredEl","_filterScalingX","_filterScalingY","_lastScaleX","_lastScaleY","isNeutralState","_needsResize","_resetWidthHeight","preserveAspectRatio","fromURL","Ko","minX","minY","createElementNS","firstChild","Jo","tagName","Qo","Zo","getElementsByTagNameNS","from","$o","ta","ea","children","cloneNode","sa","ia","ra","na","regexUrl","doc","clipPaths","gradientDefs","cssRules","createObject","resolveGradient","resolveClipPath","extractPropertyDefinition","clipRule","oa","aa","allElements","ha","attributes","name","href","setAttributeNS","childNodes","ca","la","ua","pointIndex","da","ga","fa","pa","commandIndex","ma","va","controlFill","controlStroke","ya","connectToCommandIndex","connectToPointIndex","connectionDashArray","_a","controlPointStyle","pointStyle","xa","changeWidth","createObjectDefaultControls","createPathControls","createPolyActionHandler","createPolyControls","createPolyPositionHandler","createResizeControls","createTextboxDefaultControls","dragHandler","factoryPolyActionHandler","getLocalPoint","polyActionHandler","renderCircleControl","renderSquareControl","rotationStyleHandler","rotationWithSnapping","scaleCursorStyleHandler","scaleOrSkewActionName","scaleSkewCursorStyleHandler","scalingEqually","scalingX","scalingXOrSkewingY","scalingY","scalingYOrSkewingX","skewCursorStyleHandler","skewHandlerX","skewHandlerY","wrapWithFireEvent","wrapWithFixedAnchor","Ca","ba","Sa","wa","Ta","Oa","ka","defaults","getFragmentSource","getVertexSource","createProgram","VERTEX_SHADER","getShaderInfoLog","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","getUniformLocations","uStepW","getUniformLocation","uStepH","program","attributeLocations","getAttributeLocations","uniformLocations","getAttribLocation","sendAttributeData","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","bufferData","STATIC_DRAW","_setupFrameBuffer","framebufferTexture2D","COLOR_ATTACHMENT0","finish","_swapTextures","applyToWebGL","applyTo2d","getCacheKey","retrieveShader","useProgram","uniform1f","sendUniformData","viewport","drawArrays","TRIANGLE_STRIP","bindAdditionalTexture","activeTexture","TEXTURE0","unbindAdditionalTexture","createHelpLayer","helpLayer","Da","screen","difference","lighten","darken","exclusion","tint","Ma","mode","uniform4fv","uColor","Pa","mask","Ea","Aa","image","TEXTURE1","calculateMatrix","resources","blendImage","uniform1i","uImage","uniformMatrix3fv","uTransformMatrix","ja","aspectRatio","horizontal","simpleBlur","blurLayer1","blurLayer2","chooseRightDelta","uniform2fv","uDelta","Fa","brightness","uBrightness","La","matrix","colorsOnly","Ra","uniformMatrix4fv","uColorMatrix","uConstants","Ia","Ba","Xa","Ya","Wa","Va","Ga","za","Ha","subFilters","Na","contrast","uContrast","Ua","Convolute_3_1","Convolute_3_0","Convolute_5_1","Convolute_5_0","Convolute_7_1","Convolute_7_0","Convolute_9_1","Convolute_9_0","qa","opaque","createImageData","uniform1fv","uMatrix","Ka","Ja","gamma","rgbValues","uniform3fv","uGamma","Qa","average","lightness","luminosity","Za","uMode","$a","rotation","th","eh","invert","uInvert","uAlpha","sh","noise","uNoise","uSeed","ih","blocksize","uBlocksize","rh","distance","uLow","uHigh","useAlpha","nh","uTaps","taps","getFilterWindow","tempScale","lanczosLobes","generateShader","getTaps","lanczosCreate","applyToForWebgl","dW","dH","rcpScaleX","rcpScaleY","resizeType","sliceByTwo","hermiteFastResize","bilinearFiltering","lanczosResize","oh","saturation","uSaturation","ah","vibrance","uVibrance","hh","BaseFilter","BlackWhite","BlendColor","BlendImage","Blur","Brightness","Brownie","ColorMatrix","Composed","Contrast","Convolute","Gamma","Grayscale","HueRotation","Invert","Kodachrome","Noise","Pixelate","Polaroid","RemoveColor","Resize","Saturation","Sepia","Technicolor","Vibrance","Vintage","ActiveSelection","BaseBrush","BaseFabricObject","Canvas","Canvas2dFilterBackend","CanvasDOMManager","Circle","CircleBrush","drawDot","addPoint","dot","ClipPathLayout","Color","Control","Ellipse","FabricImage","FabricObject","FabricText","FitContentLayout","FixedLayout","Gradient","Group","IText","Image","InteractiveFabricObject","Intersection","LayoutManager","LayoutStrategy","Line","Observable","Path","Pattern","PatternBrush","getPatternSrc","getPattern","PencilBrush","Point","Polygon","Polyline","Rect","Shadow","SprayBrush","sprayChunks","sprayChunk","addSprayChunk","renderChunck","optimizeOverlapping","density","dotWidthVariance","dotWidth","randomOpacity","StaticCanvas","StaticCanvasDOMManager","Text","Textbox","Triangle","WebGLFilterBackend","cache","classRegistry","config","controlsUtils","createCollectionMixin","getCSSRules","getEnv","getFabricDocument","getFabricWindow","getFilterBackend","iMatrix","initFilterBackend","isPutImageFaster","ArrayBuffer","performance","now","isWebGLPipelineState","loadSVGFromString","DOMParser","parseFromString","loadSVGFromURL","responseXML","parseAttributes","parseFontDeclaration","parsePointsAttribute","parseSVGDocument","parseStyleAttribute","parseTransformAttribute","runningAnimations","setEnv","setFilterBackend","util"],"sources":["C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\config.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\internals\\console.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\GLProbes\\GLProbe.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\GLProbes\\WebGLProbe.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\env\\browser.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\env\\index.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\cache.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\constants.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\ClassRegistry.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\animation\\AnimationRegistry.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\Observable.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\internals\\removeFromArray.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\cos.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\sin.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\Point.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\Collection.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\CommonMethods.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\animation\\AnimationFrameProvider.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\internals\\uid.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\dom.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\radiansDegreesConversion.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\matrix.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\objectEnlive.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\pick.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\color\\color_map.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\color\\util.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\color\\Color.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\color\\constants.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\toFixed.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\svgParsing.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\typeAssertions.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\dom_misc.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\canvas\\DOMManagers\\util.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\canvas\\DOMManagers\\StaticCanvasDOMManager.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\canvas\\StaticCanvasOptions.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\canvas\\StaticCanvas.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\dom_event.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\boundingBoxFromPoints.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\objectTransforms.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\planeChange.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\controls\\fireEvent.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\resolveOrigin.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\controls\\util.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\controls\\drag.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\Object\\FabricObjectSVGExportMixin.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\getSvgRegex.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\constants.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\vectors.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\Shadow.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\capValue.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\Object\\defaultValues.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\animation\\easing.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\animation\\AnimationBase.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\animation\\ValueAnimation.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\animation\\ArrayAnimation.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\animation\\ColorAnimation.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\animation\\animate.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\Intersection.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\Object\\ObjectGeometry.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\Object\\Object.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\controls\\wrapWithFireEvent.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\controls\\wrapWithFixedAnchor.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\controls\\changeWidth.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\controls\\controlRendering.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\controls\\Control.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\controls\\rotate.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\controls\\scale.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\controls\\skew.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\controls\\scaleSkew.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\controls\\commonControls.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\Object\\InteractiveObject.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\applyMixins.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\Object\\FabricObject.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\isTransparent.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\projectStroke\\StrokeProjectionsBase.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\projectStroke\\StrokeLineJoinProjections.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\projectStroke\\StrokeLineCapProjections.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\projectStroke\\index.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\internals\\findRight.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\internals\\cloneStyles.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\lang_string.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\textStyles.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\attributes.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\selectorMatches.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\elementMatchesRule.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\doesSomeParentMatch.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\normalizeAttr.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\internals\\cleanupSvgAttribute.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\parseTransformAttribute.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\normalizeValue.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\parseFontDeclaration.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\parseStyleString.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\parseStyleAttribute.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\parseStyleObject.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\setStrokeFillOpacity.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\parseAttributes.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\getGlobalStylesForElement.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\Rect.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\LayoutManager\\constants.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\LayoutManager\\LayoutStrategies\\utils.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\LayoutManager\\LayoutStrategies\\LayoutStrategy.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\LayoutManager\\LayoutStrategies\\FitContentLayout.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\LayoutManager\\LayoutManager.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\Group.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\groupSVGElements.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\findScaleTo.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\path\\regex.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\path\\index.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\dom_style.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\mergeClipPaths.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\internals\\getRandomInt.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\internals\\dom_request.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\transform_matrix_removal.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\misc\\rotatePoint.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\canvas\\DOMManagers\\CanvasDOMManager.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\canvas\\SelectableCanvas.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\canvas\\CanvasOptions.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\canvas\\TextEditingManager.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\canvas\\Canvas.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\gradient\\constants.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\util\\internals\\ifNaN.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\percent.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\gradient\\parser\\parseColorStops.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\gradient\\parser\\misc.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\gradient\\parser\\parseCoords.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\gradient\\Gradient.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\Pattern\\Pattern.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\brushes\\BaseBrush.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\Path.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\brushes\\PencilBrush.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\Circle.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\Line.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\Triangle.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\Ellipse.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\parsePointsAttribute.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\Polyline.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\Polygon.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\Text\\constants.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\Text\\StyledText.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\Text\\TextSVGExportMixin.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\Text\\Text.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\IText\\DraggableTextDelegate.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\IText\\ITextBehavior.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\IText\\ITextKeyBehavior.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\IText\\ITextClickBehavior.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\IText\\constants.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\IText\\IText.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\Textbox.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\LayoutManager\\LayoutStrategies\\ClipPathLayout.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\LayoutManager\\LayoutStrategies\\FixedLayout.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\LayoutManager\\ActiveSelectionLayoutManager.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\ActiveSelection.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\Canvas2dFilterBackend.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\WebGLFilterBackend.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\FilterBackend.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\shapes\\Image.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\applyViewboxTransform.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\getTagName.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\hasInvalidAncestor.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\getMultipleNodes.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\recursivelyParseGradientsXlink.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\getGradientDefs.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\getCSSRules.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\elements_parser.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\parseSVGDocument.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\parseUseDirectives.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\controls\\polyControl.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\controls\\pathControl.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\utils.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\shaders\\baseFilter.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\BaseFilter.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\shaders\\blendColor.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\BlendColor.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\shaders\\blendImage.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\BlendImage.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\Blur.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\shaders\\blur.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\Brightness.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\shaders\\brightness.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\shaders\\colorMatrix.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\ColorMatrix.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\ColorMatrixFilters.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\Composed.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\Contrast.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\shaders\\constrast.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\shaders\\convolute.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\Convolute.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\shaders\\gamma.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\Gamma.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\shaders\\grayscale.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\Grayscale.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\HueRotation.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\Invert.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\shaders\\invert.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\Noise.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\shaders\\noise.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\Pixelate.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\shaders\\pixelate.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\RemoveColor.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\shaders\\removeColor.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\Resize.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\Saturation.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\shaders\\saturation.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\Vibrance.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\filters\\shaders\\vibrance.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\brushes\\CircleBrush.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\brushes\\PatternBrush.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\brushes\\SprayBrush.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\loadSVGFromString.ts","C:\\Users\\JS\\testinge\\node_modules\\fabric\\src\\parser\\loadSVGFromURL.ts"],"sourcesContent":["export type TConfiguration = Partial<BaseConfiguration>;\n\nclass BaseConfiguration {\n  /**\n   * Browser-specific constant to adjust CanvasRenderingContext2D.shadowBlur value,\n   * which is unitless and not rendered equally across browsers.\n   *\n   * Values that work quite well (as of October 2017) are:\n   * - Chrome: 1.5\n   * - Edge: 1.75\n   * - Firefox: 0.9\n   * - Safari: 0.95\n   *\n   * @since 2.0.0\n   * @type Number\n   * @default 1\n   */\n  browserShadowBlurConstant = 1;\n\n  /**\n   * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.\n   */\n  DPI = 96;\n\n  /**\n   * Device Pixel Ratio\n   * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n   */\n  devicePixelRatio =\n    typeof window !== 'undefined' ? window.devicePixelRatio : 1; // eslint-disable-line no-restricted-globals\n\n  /**\n   * Pixel limit for cache canvases. 1Mpx , 4Mpx should be fine.\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  perfLimitSizeTotal = 2097152;\n\n  /**\n   * Pixel limit for cache canvases width or height. IE fixes the maximum at 5000\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  maxCacheSideLimit = 4096;\n\n  /**\n   * Lowest pixel limit for cache canvases, set at 256PX\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  minCacheSideLimit = 256;\n\n  /**\n   * When 'true', style information is not retained when copy/pasting text, making\n   * pasted text use destination style.\n   * Defaults to 'false'.\n   * @type Boolean\n   * @default\n   * @deprecated\n   */\n  disableStyleCopyPaste = false;\n\n  /**\n   * Enable webgl for filtering picture is available\n   * A filtering backend will be initialized, this will both take memory and\n   * time since a default 2048x2048 canvas will be created for the gl context\n   * @since 2.0.0\n   * @type Boolean\n   * @default\n   */\n  enableGLFiltering = true;\n\n  /**\n   * if webgl is enabled and available, textureSize will determine the size\n   * of the canvas backend\n   *\n   * In order to support old hardware set to `2048` to avoid OOM\n   *\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  textureSize = 4096;\n\n  /**\n   * Skip performance testing of setupGLContext and force the use of putImageData that seems to be the one that works best on\n   * Chrome + old hardware. if your users are experiencing empty images after filtering you may try to force this to true\n   * this has to be set before instantiating the filtering backend ( before filtering the first image )\n   * @type Boolean\n   * @default false\n   */\n  forceGLPutImageData = false;\n\n  /**\n   * If disabled boundsOfCurveCache is not used. For apps that make heavy usage of pencil drawing probably disabling it is better\n   * With the standard behaviour of fabric to translate all curves in absolute commands and by not subtracting the starting point from\n   * the curve is very hard to hit any cache.\n   * Enable only if you know why it could be useful.\n   * Candidate for removal/simplification\n   * @default false\n   */\n  cachesBoundsOfCurve = false;\n\n  /**\n   * Map of font files\n   * Map<fontFamily, pathToFile> of font files\n   */\n  fontPaths: Record</** fontFamily */ string, /** pathToFile */ string> = {};\n\n  /**\n   * Defines the number of fraction digits to use when serializing object values.\n   * Used in exporting methods (`toObject`, `toJSON`, `toSVG`)\n   * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.\n   */\n  NUM_FRACTION_DIGITS = 4;\n}\n\nexport class Configuration extends BaseConfiguration {\n  constructor(config?: TConfiguration) {\n    super();\n    this.configure(config);\n  }\n\n  configure(config: TConfiguration = {}) {\n    Object.assign(this, config);\n  }\n\n  /**\n   * Map<fontFamily, pathToFile> of font files\n   */\n  addFonts(\n    paths: Record</** fontFamily */ string, /** pathToFile */ string> = {},\n  ) {\n    this.fontPaths = {\n      ...this.fontPaths,\n      ...paths,\n    };\n  }\n\n  removeFonts(fontFamilys: string[] = []) {\n    fontFamilys.forEach((fontFamily) => {\n      delete this.fontPaths[fontFamily];\n    });\n  }\n\n  clearFonts() {\n    this.fontPaths = {};\n  }\n\n  restoreDefaults<T extends BaseConfiguration>(keys?: (keyof T)[]) {\n    const defaults = new BaseConfiguration() as T;\n    const config =\n      keys?.reduce((acc, key) => {\n        acc[key] = defaults[key];\n        return acc;\n      }, {} as T) || defaults;\n    this.configure(config);\n  }\n}\n\nexport const config = new Configuration();\n","export const log = (\n  severity: 'log' | 'warn' | 'error',\n  ...optionalParams: any[]\n) =>\n  // eslint-disable-next-line no-restricted-syntax\n  console[severity]('fabric', ...optionalParams);\n\nexport class FabricError extends Error {\n  constructor(message?: string, options?: ErrorOptions) {\n    super(`fabric: ${message}`, options);\n  }\n}\n\nexport class SignalAbortedError extends FabricError {\n  constructor(context: string) {\n    super(`${context} 'options.signal' is in 'aborted' state`);\n  }\n}\n","export type GLPrecision = 'lowp' | 'mediump' | 'highp';\n\nexport abstract class GLProbe {\n  declare GLPrecision: GLPrecision | undefined;\n  abstract queryWebGL(canvas: HTMLCanvasElement): void;\n  abstract isSupported(textureSize: number): boolean;\n}\n","import { log } from '../../util/internals/console';\nimport { GLProbe } from './GLProbe';\nimport type { GLPrecision } from './GLProbe';\n\n/**\n * Lazy initialize WebGL constants\n */\nexport class WebGLProbe extends GLProbe {\n  declare maxTextureSize?: number;\n\n  /**\n   * Tests if webgl supports certain precision\n   * @param {WebGL} Canvas WebGL context to test on\n   * @param {GLPrecision} Precision to test can be any of following\n   * @returns {Boolean} Whether the user's browser WebGL supports given precision.\n   */\n  private testPrecision(\n    gl: WebGLRenderingContext,\n    precision: GLPrecision,\n  ): boolean {\n    const fragmentSource = `precision ${precision} float;\\nvoid main(){}`;\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    if (!fragmentShader) {\n      return false;\n    }\n    gl.shaderSource(fragmentShader, fragmentSource);\n    gl.compileShader(fragmentShader);\n    return !!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS);\n  }\n\n  /**\n   * query browser for WebGL\n   */\n  queryWebGL(canvas: HTMLCanvasElement) {\n    const gl = canvas.getContext('webgl');\n    if (gl) {\n      this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n      this.GLPrecision = (['highp', 'mediump', 'lowp'] as const).find(\n        (precision) => this.testPrecision(gl, precision),\n      );\n      gl.getExtension('WEBGL_lose_context')!.loseContext();\n      log('log', `WebGL: max texture size ${this.maxTextureSize}`);\n    }\n  }\n\n  isSupported(textureSize: number) {\n    return !!this.maxTextureSize && this.maxTextureSize >= textureSize;\n  }\n}\n","/* eslint-disable no-restricted-globals */\nimport { WebGLProbe } from '../filters/GLProbes/WebGLProbe';\nimport type { TCopyPasteData, TFabricEnv } from './types';\n\nconst copyPasteData: TCopyPasteData = {};\n\nexport const getEnv = (): TFabricEnv => {\n  return {\n    document,\n    window,\n    isTouchSupported:\n      'ontouchstart' in window ||\n      'ontouchstart' in document ||\n      (window && window.navigator && window.navigator.maxTouchPoints > 0),\n    WebGLProbe: new WebGLProbe(),\n    dispose() {\n      // noop\n    },\n    copyPasteData,\n  };\n};\n","/**\n * This file is consumed by fabric.\n * The `./node` and `./browser` files define the env variable that is used by this module.\n * The `./browser` module is defined to be the default env and doesn't set the env at all.\n * This is done in order to support isomorphic usage for browser and node applications\n * since window and document aren't defined at time of import in SSR, we can't set env so we avoid it by deferring to the default env.\n */\n\nimport { config } from '../config';\nimport { getEnv as getBrowserEnv } from './browser';\nimport type { TFabricEnv } from './types';\nimport type { DOMWindow } from 'jsdom';\n\nlet env: TFabricEnv;\n\n/**\n * Sets the environment variables used by fabric.\\\n * This is exposed for special cases, such as configuring a test environment, and should be used with care.\n *\n * **CAUTION**: Must be called before using the package.\n *\n * @example\n * <caption>Passing `window` and `document` objects to fabric (in case they are mocked or something)</caption>\n * import { getEnv, setEnv } from 'fabric';\n * // we want fabric to use the `window` and `document` objects exposed by the environment we are running in.\n * setEnv({ ...getEnv(), window, document });\n * // done with setup, using fabric is now safe\n */\nexport const setEnv = (value: TFabricEnv) => {\n  env = value;\n};\n\n/**\n * In order to support SSR we **MUST** access the browser env only after the window has loaded\n */\nexport const getEnv = () => env || (env = getBrowserEnv());\n\nexport const getFabricDocument = (): Document => getEnv().document;\n\nexport const getFabricWindow = (): (Window & typeof globalThis) | DOMWindow =>\n  getEnv().window;\n\n/**\n * @returns the config value if defined, fallbacks to the environment value\n */\nexport const getDevicePixelRatio = () =>\n  Math.max(config.devicePixelRatio ?? getFabricWindow().devicePixelRatio, 1);\n","import { config } from './config';\nimport type { TRectBounds } from './typedefs';\n\nexport class Cache {\n  /**\n   * Cache of widths of chars in text rendering.\n   */\n  charWidthsCache: Record<\n    /** fontFamily */ string,\n    Record<\n      /** fontStyleCacheKey */ string,\n      Record</** char */ string, /** width */ number>\n    >\n  > = {};\n\n  /**\n   * @return {Object} reference to cache\n   */\n  getFontCache({\n    fontFamily,\n    fontStyle,\n    fontWeight,\n  }: {\n    fontFamily: string;\n    fontStyle: string;\n    fontWeight: string | number;\n  }) {\n    fontFamily = fontFamily.toLowerCase();\n    if (!this.charWidthsCache[fontFamily]) {\n      this.charWidthsCache[fontFamily] = {};\n    }\n    const fontCache = this.charWidthsCache[fontFamily];\n    const cacheKey = `${fontStyle.toLowerCase()}_${(\n      fontWeight + ''\n    ).toLowerCase()}`;\n    if (!fontCache[cacheKey]) {\n      fontCache[cacheKey] = {};\n    }\n    return fontCache[cacheKey];\n  }\n\n  /**\n   * Clear char widths cache for the given font family or all the cache if no\n   * fontFamily is specified.\n   * Use it if you know you are loading fonts in a lazy way and you are not waiting\n   * for custom fonts to load properly when adding text objects to the canvas.\n   * If a text object is added when its own font is not loaded yet, you will get wrong\n   * measurement and so wrong bounding boxes.\n   * After the font cache is cleared, either change the textObject text content or call\n   * initDimensions() to trigger a recalculation\n   * @param {String} [fontFamily] font family to clear\n   */\n  clearFontCache(fontFamily?: string) {\n    fontFamily = (fontFamily || '').toLowerCase();\n    if (!fontFamily) {\n      this.charWidthsCache = {};\n    } else if (this.charWidthsCache[fontFamily]) {\n      delete this.charWidthsCache[fontFamily];\n    }\n  }\n\n  /**\n   * Given current aspect ratio, determines the max width and height that can\n   * respect the total allowed area for the cache.\n   * @param {number} ar aspect ratio\n   * @return {number[]} Limited dimensions X and Y\n   */\n  limitDimsByArea(ar: number) {\n    const { perfLimitSizeTotal } = config;\n    const roughWidth = Math.sqrt(perfLimitSizeTotal * ar);\n    // we are not returning a point on purpose, to avoid circular dependencies\n    // this is an internal utility\n    return [\n      Math.floor(roughWidth),\n      Math.floor(perfLimitSizeTotal / roughWidth),\n    ];\n  }\n\n  /**\n   * This object keeps the results of the boundsOfCurve calculation mapped by the joined arguments necessary to calculate it.\n   * It does speed up calculation, if you parse and add always the same paths, but in case of heavy usage of freedrawing\n   * you do not get any speed benefit and you get a big object in memory.\n   * The object was a private variable before, while now is appended to the lib so that you have access to it and you\n   * can eventually clear it.\n   * It was an internal variable, is accessible since version 2.3.4\n   */\n  boundsOfCurveCache: Record<string, TRectBounds> = {};\n}\n\nexport const cache = new Cache();\n","import type { TMat2D } from './typedefs';\n// use this syntax so babel plugin see this import here\nimport { version } from '../package.json';\n\nexport const VERSION = version;\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function noop() {}\n\nexport const halfPI = Math.PI / 2;\nexport const twoMathPi = Math.PI * 2;\nexport const PiBy180 = Math.PI / 180;\n\nexport const iMatrix = Object.freeze([1, 0, 0, 1, 0, 0]) as TMat2D;\nexport const DEFAULT_SVG_FONT_SIZE = 16;\nexport const ALIASING_LIMIT = 2;\n\n/* \"magic number\" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */\nexport const kRect = 1 - 0.5522847498;\n\nexport const CENTER = 'center';\nexport const LEFT = 'left';\nexport const TOP = 'top';\nexport const BOTTOM = 'bottom';\nexport const RIGHT = 'right';\nexport const NONE = 'none';\n\nexport const reNewline = /\\r?\\n/;\n\nexport const MOVING = 'moving';\nexport const SCALING = 'scaling';\nexport const ROTATING = 'rotating';\nexport const ROTATE = 'rotate';\nexport const SKEWING = 'skewing';\nexport const RESIZING = 'resizing';\nexport const MODIFY_POLY = 'modifyPoly';\nexport const MODIFY_PATH = 'modifyPath';\nexport const CHANGED = 'changed';\nexport const SCALE = 'scale';\nexport const SCALE_X = 'scaleX';\nexport const SCALE_Y = 'scaleY';\nexport const SKEW_X = 'skewX';\nexport const SKEW_Y = 'skewY';\nexport const FILL = 'fill';\nexport const STROKE = 'stroke';\nexport const MODIFIED = 'modified';\n","import { FabricError } from './util/internals/console';\n\n/*\n * This Map connects the objects type value with their\n * class implementation. It used from any object to understand which are\n * the classes to enlive when requesting a object.type = 'path' for example.\n * Objects uses it for clipPath, Canvas uses it for everything.\n * This is necessary for generic code to run and enlive instances from serialized representation.\n * You can customize which classes get enlived from SVG parsing using this classRegistry.\n * The Registry start empty and gets filled in depending which files you import.\n * If you want to be able to parse arbitrary SVGs or JSON representation of canvases, coming from\n * different sources you will need to import all fabric because you may need all classes.\n */\n\nexport const JSON = 'json';\nexport const SVG = 'svg';\n\nexport class ClassRegistry {\n  declare [JSON]: Map<string, any>;\n  declare [SVG]: Map<string, any>;\n\n  constructor() {\n    this[JSON] = new Map();\n    this[SVG] = new Map();\n  }\n\n  has(classType: string): boolean {\n    return this[JSON].has(classType);\n  }\n\n  getClass<T>(classType: string): T {\n    const constructor = this[JSON].get(classType);\n    if (!constructor) {\n      throw new FabricError(`No class registered for ${classType}`);\n    }\n    return constructor;\n  }\n\n  setClass(classConstructor: any, classType?: string) {\n    if (classType) {\n      this[JSON].set(classType, classConstructor);\n    } else {\n      this[JSON].set(classConstructor.type, classConstructor);\n      // legacy\n      // @TODO: needs to be removed in fabric 7 or 8\n      this[JSON].set(classConstructor.type.toLowerCase(), classConstructor);\n    }\n  }\n\n  getSVGClass(SVGTagName: string): any {\n    return this[SVG].get(SVGTagName);\n  }\n\n  setSVGClass(classConstructor: any, SVGTagName?: string) {\n    this[SVG].set(\n      SVGTagName ?? classConstructor.type.toLowerCase(),\n      classConstructor,\n    );\n  }\n}\n\nexport const classRegistry = new ClassRegistry();\n","import type { StaticCanvas } from '../../canvas/StaticCanvas';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport type { AnimationBase } from './AnimationBase';\n\n/**\n * Array holding all running animations\n */\nclass AnimationRegistry extends Array<AnimationBase> {\n  /**\n   * Remove a single animation using an animation context\n   * @param {AnimationBase} context\n   */\n  remove(context: AnimationBase) {\n    const index = this.indexOf(context);\n    index > -1 && this.splice(index, 1);\n  }\n\n  /**\n   * Cancel all running animations on the next frame\n   */\n  cancelAll() {\n    const animations = this.splice(0);\n    animations.forEach((animation) => animation.abort());\n    return animations;\n  }\n\n  /**\n   * Cancel all running animations attached to a canvas on the next frame\n   * @param {StaticCanvas} canvas\n   */\n  cancelByCanvas(canvas: StaticCanvas) {\n    if (!canvas) {\n      return [];\n    }\n    const animations = this.filter(\n      (animation) =>\n        animation.target === canvas ||\n        (typeof animation.target === 'object' &&\n          (animation.target as FabricObject)?.canvas === canvas),\n    );\n    animations.forEach((animation) => animation.abort());\n    return animations;\n  }\n\n  /**\n   * Cancel all running animations for target on the next frame\n   * @param target\n   */\n  cancelByTarget(target: AnimationBase['target']) {\n    if (!target) {\n      return [];\n    }\n    const animations = this.filter((animation) => animation.target === target);\n    animations.forEach((animation) => animation.abort());\n    return animations;\n  }\n}\n\nexport const runningAnimations = new AnimationRegistry();\n","export type TEventCallback<T = any> = (options: T) => any;\n\ntype EventRegistryObject<E> = {\n  [K in keyof E]?: TEventCallback<E[K]>;\n};\n\n/**\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#events}\n * @see {@link http://fabricjs.com/events|Events demo}\n */\nexport class Observable<EventSpec> {\n  private __eventListeners: Record<keyof EventSpec, TEventCallback[]> =\n    {} as Record<keyof EventSpec, TEventCallback[]>;\n\n  /**\n   * Observes specified event\n   * @alias on\n   * @param {string} eventName Event name (eg. 'after:render')\n   * @param {EventRegistryObject} handlers key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n   * @return {Function} disposer\n   */\n  on<K extends keyof EventSpec, E extends EventSpec[K]>(\n    eventName: K,\n    handler: TEventCallback<E>,\n  ): VoidFunction;\n  on(handlers: EventRegistryObject<EventSpec>): VoidFunction;\n  on<K extends keyof EventSpec, E extends EventSpec[K]>(\n    arg0: K | EventRegistryObject<EventSpec>,\n    handler?: TEventCallback<E>,\n  ): VoidFunction {\n    if (!this.__eventListeners) {\n      this.__eventListeners = {} as Record<keyof EventSpec, TEventCallback[]>;\n    }\n    if (typeof arg0 === 'object') {\n      // one object with key/value pairs was passed\n      Object.entries(arg0).forEach(([eventName, handler]) => {\n        this.on(eventName as K, handler as TEventCallback);\n      });\n      return () => this.off(arg0);\n    } else if (handler) {\n      const eventName = arg0;\n      if (!this.__eventListeners[eventName]) {\n        this.__eventListeners[eventName] = [];\n      }\n      this.__eventListeners[eventName].push(handler);\n      return () => this.off(eventName, handler);\n    } else {\n      // noop\n      return () => false;\n    }\n  }\n\n  /**\n   * Observes specified event **once**\n   * @alias once\n   * @param {string} eventName Event name (eg. 'after:render')\n   * @param {EventRegistryObject} handlers key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n   * @return {Function} disposer\n   */\n  once<K extends keyof EventSpec, E extends EventSpec[K]>(\n    eventName: K,\n    handler: TEventCallback<E>,\n  ): VoidFunction;\n  once(handlers: EventRegistryObject<EventSpec>): VoidFunction;\n  once<K extends keyof EventSpec, E extends EventSpec[K]>(\n    arg0: K | EventRegistryObject<EventSpec>,\n    handler?: TEventCallback<E>,\n  ): VoidFunction {\n    if (typeof arg0 === 'object') {\n      // one object with key/value pairs was passed\n      const disposers: VoidFunction[] = [];\n      Object.entries(arg0).forEach(([eventName, handler]) => {\n        disposers.push(this.once(eventName as K, handler as TEventCallback));\n      });\n      return () => disposers.forEach((d) => d());\n    } else if (handler) {\n      const disposer = this.on<K, E>(\n        arg0,\n        function onceHandler(this: Observable<EventSpec>, ...args) {\n          handler.call(this, ...args);\n          disposer();\n        },\n      );\n      return disposer;\n    } else {\n      // noop\n      return () => false;\n    }\n  }\n\n  /**\n   * @private\n   * @param {string} eventName\n   * @param {Function} [handler]\n   */\n  private _removeEventListener<K extends keyof EventSpec>(\n    eventName: K,\n    handler?: TEventCallback,\n  ) {\n    if (!this.__eventListeners[eventName]) {\n      return;\n    }\n\n    if (handler) {\n      const eventListener = this.__eventListeners[eventName];\n      const index = eventListener.indexOf(handler);\n      index > -1 && eventListener.splice(index, 1);\n    } else {\n      this.__eventListeners[eventName] = [];\n    }\n  }\n\n  /**\n   * Unsubscribe all event listeners for eventname.\n   * Do not use this pattern. You could kill internal fabricJS events.\n   * We know we should have protected events for internal flows, but we don't have yet\n   * @deprecated\n   * @param {string} eventName event name (eg. 'after:render')\n   */\n  off<K extends keyof EventSpec>(eventName: K): void;\n  /**\n   * unsubscribe an event listener\n   * @param {string} eventName event name (eg. 'after:render')\n   * @param {TEventCallback} handler event listener to unsubscribe\n   */\n  off<K extends keyof EventSpec>(eventName: K, handler: TEventCallback): void;\n  /**\n   * unsubscribe event listeners\n   * @param handlers handlers key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   */\n  off(handlers: EventRegistryObject<EventSpec>): void;\n  /**\n   * unsubscribe all event listeners\n   */\n  off(): void;\n  off<K extends keyof EventSpec>(\n    arg0?: K | EventRegistryObject<EventSpec>,\n    handler?: TEventCallback,\n  ) {\n    if (!this.__eventListeners) {\n      return;\n    }\n\n    // remove all key/value pairs (event name -> event handler)\n    if (typeof arg0 === 'undefined') {\n      for (const eventName in this.__eventListeners) {\n        this._removeEventListener(eventName);\n      }\n    }\n    // one object with key/value pairs was passed\n    else if (typeof arg0 === 'object') {\n      Object.entries(arg0).forEach(([eventName, handler]) => {\n        this._removeEventListener(eventName as K, handler as TEventCallback);\n      });\n    } else {\n      this._removeEventListener(arg0, handler);\n    }\n  }\n\n  /**\n   * Fires event with an optional options object\n   * @param {String} eventName Event name to fire\n   * @param {Object} [options] Options object\n   */\n  fire<K extends keyof EventSpec>(eventName: K, options?: EventSpec[K]) {\n    if (!this.__eventListeners) {\n      return;\n    }\n\n    const listenersForEvent = this.__eventListeners[eventName]?.concat();\n    if (listenersForEvent) {\n      for (let i = 0; i < listenersForEvent.length; i++) {\n        listenersForEvent[i].call(this, options || {});\n      }\n    }\n  }\n}\n","/**\n * Removes value from an array.\n * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`\n * @param {Array} array\n * @param {*} value\n * @return {Array} original array\n */\nexport const removeFromArray = <T>(array: T[], value: T): T[] => {\n  const idx = array.indexOf(value);\n  if (idx !== -1) {\n    array.splice(idx, 1);\n  }\n  return array;\n};\n","import type { TRadian } from '../../typedefs';\nimport { halfPI } from '../../constants';\n\n/**\n * Calculate the cos of an angle, avoiding returning floats for known results\n * This function is here just to avoid getting 0.999999999999999 when dealing\n * with numbers that are really 1 or 0.\n * @param {TRadian} angle the angle\n * @return {Number} the cosin value for angle.\n */\nexport const cos = (angle: TRadian): number => {\n  if (angle === 0) {\n    return 1;\n  }\n  const angleSlice = Math.abs(angle) / halfPI;\n  switch (angleSlice) {\n    case 1:\n    case 3:\n      return 0;\n    case 2:\n      return -1;\n  }\n  return Math.cos(angle);\n};\n","import type { TRadian } from '../../typedefs';\nimport { halfPI } from '../../constants';\n\n/**\n * Calculate the cos of an angle, avoiding returning floats for known results\n * This function is here just to avoid getting 0.999999999999999 when dealing\n * with numbers that are really 1 or 0.\n * @param {TRadian} angle the angle\n * @return {Number} the sin value for angle.\n */\nexport const sin = (angle: TRadian): number => {\n  if (angle === 0) {\n    return 0;\n  }\n  const angleSlice = angle / halfPI;\n  const value = Math.sign(angle);\n  switch (angleSlice) {\n    case 1:\n      return value;\n    case 2:\n      return 0;\n    case 3:\n      return -value;\n  }\n  return Math.sin(angle);\n};\n","import type { TMat2D, TRadian } from './typedefs';\nimport { cos } from './util/misc/cos';\nimport { sin } from './util/misc/sin';\n\nexport interface XY {\n  x: number;\n  y: number;\n}\n\n/**\n * Adaptation of work of Kevin Lindsey(kevin@kevlindev.com)\n */\nexport class Point implements XY {\n  declare x: number;\n\n  declare y: number;\n\n  constructor();\n  constructor(x: number, y: number);\n  constructor(point?: XY);\n  constructor(arg0: number | XY = 0, y = 0) {\n    if (typeof arg0 === 'object') {\n      this.x = arg0.x;\n      this.y = arg0.y;\n    } else {\n      this.x = arg0;\n      this.y = y;\n    }\n  }\n\n  /**\n   * Adds another point to this one and returns another one\n   * @param {XY} that\n   * @return {Point} new Point instance with added values\n   */\n  add(that: XY): Point {\n    return new Point(this.x + that.x, this.y + that.y);\n  }\n\n  /**\n   * Adds another point to this one\n   * @param {XY} that\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  addEquals(that: XY): Point {\n    this.x += that.x;\n    this.y += that.y;\n    return this;\n  }\n\n  /**\n   * Adds value to this point and returns a new one\n   * @param {Number} scalar\n   * @return {Point} new Point with added value\n   */\n  scalarAdd(scalar: number): Point {\n    return new Point(this.x + scalar, this.y + scalar);\n  }\n\n  /**\n   * Adds value to this point\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarAddEquals(scalar: number): Point {\n    this.x += scalar;\n    this.y += scalar;\n    return this;\n  }\n\n  /**\n   * Subtracts another point from this point and returns a new one\n   * @param {XY} that\n   * @return {Point} new Point object with subtracted values\n   */\n  subtract(that: XY): Point {\n    return new Point(this.x - that.x, this.y - that.y);\n  }\n\n  /**\n   * Subtracts another point from this point\n   * @param {XY} that\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  subtractEquals(that: XY): Point {\n    this.x -= that.x;\n    this.y -= that.y;\n    return this;\n  }\n\n  /**\n   * Subtracts value from this point and returns a new one\n   * @param {Number} scalar\n   * @return {Point}\n   */\n  scalarSubtract(scalar: number): Point {\n    return new Point(this.x - scalar, this.y - scalar);\n  }\n\n  /**\n   * Subtracts value from this point\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarSubtractEquals(scalar: number): Point {\n    this.x -= scalar;\n    this.y -= scalar;\n    return this;\n  }\n\n  /**\n   * Multiplies this point by another value and returns a new one\n   * @param {XY} that\n   * @return {Point}\n   */\n  multiply(that: XY): Point {\n    return new Point(this.x * that.x, this.y * that.y);\n  }\n\n  /**\n   * Multiplies this point by a value and returns a new one\n   * @param {Number} scalar\n   * @return {Point}\n   */\n  scalarMultiply(scalar: number): Point {\n    return new Point(this.x * scalar, this.y * scalar);\n  }\n\n  /**\n   * Multiplies this point by a value\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarMultiplyEquals(scalar: number): Point {\n    this.x *= scalar;\n    this.y *= scalar;\n    return this;\n  }\n\n  /**\n   * Divides this point by another and returns a new one\n   * @param {XY} that\n   * @return {Point}\n   */\n  divide(that: XY): Point {\n    return new Point(this.x / that.x, this.y / that.y);\n  }\n\n  /**\n   * Divides this point by a value and returns a new one\n   * @param {Number} scalar\n   * @return {Point}\n   */\n  scalarDivide(scalar: number): Point {\n    return new Point(this.x / scalar, this.y / scalar);\n  }\n\n  /**\n   * Divides this point by a value\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarDivideEquals(scalar: number): Point {\n    this.x /= scalar;\n    this.y /= scalar;\n    return this;\n  }\n\n  /**\n   * Returns true if this point is equal to another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  eq(that: XY): boolean {\n    return this.x === that.x && this.y === that.y;\n  }\n\n  /**\n   * Returns true if this point is less than another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  lt(that: XY): boolean {\n    return this.x < that.x && this.y < that.y;\n  }\n\n  /**\n   * Returns true if this point is less than or equal to another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  lte(that: XY): boolean {\n    return this.x <= that.x && this.y <= that.y;\n  }\n\n  /**\n\n   * Returns true if this point is greater another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  gt(that: XY): boolean {\n    return this.x > that.x && this.y > that.y;\n  }\n\n  /**\n   * Returns true if this point is greater than or equal to another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  gte(that: XY): boolean {\n    return this.x >= that.x && this.y >= that.y;\n  }\n\n  /**\n   * Returns new point which is the result of linear interpolation with this one and another one\n   * @param {XY} that\n   * @param {Number} t , position of interpolation, between 0 and 1 default 0.5\n   * @return {Point}\n   */\n  lerp(that: XY, t = 0.5): Point {\n    t = Math.max(Math.min(1, t), 0);\n    return new Point(\n      this.x + (that.x - this.x) * t,\n      this.y + (that.y - this.y) * t,\n    );\n  }\n\n  /**\n   * Returns distance from this point and another one\n   * @param {XY} that\n   * @return {Number}\n   */\n  distanceFrom(that: XY): number {\n    const dx = this.x - that.x,\n      dy = this.y - that.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  /**\n   * Returns the point between this point and another one\n   * @param {XY} that\n   * @return {Point}\n   */\n  midPointFrom(that: XY): Point {\n    return this.lerp(that);\n  }\n\n  /**\n   * Returns a new point which is the min of this and another one\n   * @param {XY} that\n   * @return {Point}\n   */\n  min(that: XY): Point {\n    return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));\n  }\n\n  /**\n   * Returns a new point which is the max of this and another one\n   * @param {XY} that\n   * @return {Point}\n   */\n  max(that: XY): Point {\n    return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));\n  }\n\n  /**\n   * Returns string representation of this point\n   * @return {String}\n   */\n  toString(): string {\n    return `${this.x},${this.y}`;\n  }\n\n  /**\n   * Sets x/y of this point\n   * @param {Number} x\n   * @param {Number} y\n   * @chainable\n   */\n  setXY(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Sets x of this point\n   * @param {Number} x\n   * @chainable\n   */\n  setX(x: number) {\n    this.x = x;\n    return this;\n  }\n\n  /**\n   * Sets y of this point\n   * @param {Number} y\n   * @chainable\n   */\n  setY(y: number) {\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Sets x/y of this point from another point\n   * @param {XY} that\n   * @chainable\n   */\n  setFromPoint(that: XY) {\n    this.x = that.x;\n    this.y = that.y;\n    return this;\n  }\n\n  /**\n   * Swaps x/y of this point and another point\n   * @param {XY} that\n   */\n  swap(that: XY) {\n    const x = this.x,\n      y = this.y;\n    this.x = that.x;\n    this.y = that.y;\n    that.x = x;\n    that.y = y;\n  }\n\n  /**\n   * return a cloned instance of the point\n   * @return {Point}\n   */\n  clone(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * Rotates `point` around `origin` with `radians`\n   * @static\n   * @memberOf fabric.util\n   * @param {XY} origin The origin of the rotation\n   * @param {TRadian} radians The radians of the angle for the rotation\n   * @return {Point} The new rotated point\n   */\n  rotate(radians: TRadian, origin: XY = ZERO): Point {\n    // TODO benchmark and verify the add and subtract how much cost\n    // and then in case early return if no origin is passed\n    const sinus = sin(radians),\n      cosinus = cos(radians);\n    const p = this.subtract(origin);\n    const rotated = new Point(\n      p.x * cosinus - p.y * sinus,\n      p.x * sinus + p.y * cosinus,\n    );\n    return rotated.add(origin);\n  }\n\n  /**\n   * Apply transform t to point p\n   * @static\n   * @memberOf fabric.util\n   * @param  {TMat2D} t The transform\n   * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n   * @return {Point} The transformed point\n   */\n  transform(t: TMat2D, ignoreOffset = false): Point {\n    return new Point(\n      t[0] * this.x + t[2] * this.y + (ignoreOffset ? 0 : t[4]),\n      t[1] * this.x + t[3] * this.y + (ignoreOffset ? 0 : t[5]),\n    );\n  }\n}\n\nexport const ZERO = new Point(0, 0);\n","import type { Constructor, TBBox } from './typedefs';\nimport { removeFromArray } from './util/internals/removeFromArray';\nimport { Point } from './Point';\nimport type { ActiveSelection } from './shapes/ActiveSelection';\nimport type { Group } from './shapes/Group';\nimport type { InteractiveFabricObject } from './shapes/Object/InteractiveObject';\nimport type { FabricObject } from './shapes/Object/FabricObject';\n\nexport const isCollection = (\n  fabricObject?: FabricObject,\n): fabricObject is Group | ActiveSelection => {\n  return !!fabricObject && Array.isArray((fabricObject as Group)._objects);\n};\n\nexport function createCollectionMixin<TBase extends Constructor>(Base: TBase) {\n  class Collection extends Base {\n    /**\n     * @type {FabricObject[]}\n     * @TODO needs to end up in the constructor too\n     */\n    _objects: FabricObject[] = [];\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onObjectAdded(object: FabricObject) {\n      // subclasses should override this method\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onObjectRemoved(object: FabricObject) {\n      // subclasses should override this method\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onStackOrderChanged(object: FabricObject) {\n      // subclasses should override this method\n    }\n\n    /**\n     * Adds objects to collection\n     * Objects should be instances of (or inherit from) FabricObject\n     * @param {...FabricObject[]} objects to add\n     * @returns {number} new array length\n     */\n    add(...objects: FabricObject[]): number {\n      const size = this._objects.push(...objects);\n      objects.forEach((object) => this._onObjectAdded(object));\n      return size;\n    }\n\n    /**\n     * Inserts an object into collection at specified index\n     * @param {number} index Index to insert object at\n     * @param {...FabricObject[]} objects Object(s) to insert\n     * @returns {number} new array length\n     */\n    insertAt(index: number, ...objects: FabricObject[]) {\n      this._objects.splice(index, 0, ...objects);\n      objects.forEach((object) => this._onObjectAdded(object));\n      return this._objects.length;\n    }\n\n    /**\n     * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)\n     * @private\n     * @param {...FabricObject[]} objects objects to remove\n     * @returns {FabricObject[]} removed objects\n     */\n    remove(...objects: FabricObject[]) {\n      const array = this._objects,\n        removed: FabricObject[] = [];\n      objects.forEach((object) => {\n        const index = array.indexOf(object);\n        // only call onObjectRemoved if an object was actually removed\n        if (index !== -1) {\n          array.splice(index, 1);\n          removed.push(object);\n          this._onObjectRemoved(object);\n        }\n      });\n      return removed;\n    }\n\n    /**\n     * Executes given function for each object in this group\n     * A simple shortcut for getObjects().forEach, before es6 was more complicated,\n     * now is just a shortcut.\n     * @param {Function} callback\n     *                   Callback invoked with current object as first argument,\n     *                   index - as second and an array of all objects - as third.\n     */\n    forEachObject(\n      callback: (\n        object: FabricObject,\n        index: number,\n        array: FabricObject[],\n      ) => any,\n    ) {\n      this.getObjects().forEach((object, index, objects) =>\n        callback(object, index, objects),\n      );\n    }\n\n    /**\n     * Returns an array of children objects of this instance\n     * @param {...String} [types] When specified, only objects of these types are returned\n     * @return {Array}\n     */\n    getObjects(...types: string[]) {\n      if (types.length === 0) {\n        return [...this._objects];\n      }\n      return this._objects.filter((o) => o.isType(...types));\n    }\n\n    /**\n     * Returns object at specified index\n     * @param {Number} index\n     * @return {Object} object at index\n     */\n    item(index: number) {\n      return this._objects[index];\n    }\n\n    /**\n     * Returns true if collection contains no objects\n     * @return {Boolean} true if collection is empty\n     */\n    isEmpty() {\n      return this._objects.length === 0;\n    }\n\n    /**\n     * Returns a size of a collection (i.e: length of an array containing its objects)\n     * @return {Number} Collection size\n     */\n    size() {\n      return this._objects.length;\n    }\n\n    /**\n     * Returns true if collection contains an object.\\\n     * **Prefer using {@link FabricObject#isDescendantOf} for performance reasons**\n     * instead of `a.contains(b)` use `b.isDescendantOf(a)`\n     * @param {Object} object Object to check against\n     * @param {Boolean} [deep=false] `true` to check all descendants, `false` to check only `_objects`\n     * @return {Boolean} `true` if collection contains an object\n     */\n    contains(object: FabricObject, deep?: boolean): boolean {\n      if (this._objects.includes(object)) {\n        return true;\n      } else if (deep) {\n        return this._objects.some(\n          (obj) =>\n            obj instanceof Collection &&\n            (obj as unknown as Collection).contains(object, true),\n        );\n      }\n      return false;\n    }\n\n    /**\n     * Returns number representation of a collection complexity\n     * @return {Number} complexity\n     */\n    complexity() {\n      return this._objects.reduce((memo, current) => {\n        memo += current.complexity ? current.complexity() : 0;\n        return memo;\n      }, 0);\n    }\n\n    /**\n     * Moves an object or the objects of a multiple selection\n     * to the bottom of the stack of drawn objects\n     * @param {fabric.Object} object Object to send to back\n     * @returns {boolean} true if change occurred\n     */\n    sendObjectToBack(object: FabricObject) {\n      if (!object || object === this._objects[0]) {\n        return false;\n      }\n      removeFromArray(this._objects, object);\n      this._objects.unshift(object);\n      this._onStackOrderChanged(object);\n      return true;\n    }\n\n    /**\n     * Moves an object or the objects of a multiple selection\n     * to the top of the stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @returns {boolean} true if change occurred\n     */\n    bringObjectToFront(object: FabricObject) {\n      if (!object || object === this._objects[this._objects.length - 1]) {\n        return false;\n      }\n      removeFromArray(this._objects, object);\n      this._objects.push(object);\n      this._onStackOrderChanged(object);\n      return true;\n    }\n\n    /**\n     * Moves an object or a selection down in stack of drawn objects\n     * An optional parameter, `intersecting` allows to move the object in behind\n     * the first intersecting object. Where intersection is calculated with\n     * bounding box. If no intersection is found, there will not be change in the\n     * stack.\n     * @param {fabric.Object} object Object to send\n     * @param {boolean} [intersecting] If `true`, send object behind next lower intersecting object\n     * @returns {boolean} true if change occurred\n     */\n    sendObjectBackwards(object: FabricObject, intersecting?: boolean) {\n      if (!object) {\n        return false;\n      }\n      const idx = this._objects.indexOf(object);\n      if (idx !== 0) {\n        // if object is not on the bottom of stack\n        const newIdx = this.findNewLowerIndex(object, idx, intersecting);\n        removeFromArray(this._objects, object);\n        this._objects.splice(newIdx, 0, object);\n        this._onStackOrderChanged(object);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Moves an object or a selection up in stack of drawn objects\n     * An optional parameter, intersecting allows to move the object in front\n     * of the first intersecting object. Where intersection is calculated with\n     * bounding box. If no intersection is found, there will not be change in the\n     * stack.\n     * @param {fabric.Object} object Object to send\n     * @param {boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n     * @returns {boolean} true if change occurred\n     */\n    bringObjectForward(object: FabricObject, intersecting?: boolean) {\n      if (!object) {\n        return false;\n      }\n      const idx = this._objects.indexOf(object);\n      if (idx !== this._objects.length - 1) {\n        // if object is not on top of stack (last item in an array)\n        const newIdx = this.findNewUpperIndex(object, idx, intersecting);\n        removeFromArray(this._objects, object);\n        this._objects.splice(newIdx, 0, object);\n        this._onStackOrderChanged(object);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Moves an object to specified level in stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @param {number} index Position to move to\n     * @returns {boolean} true if change occurred\n     */\n    moveObjectTo(object: FabricObject, index: number) {\n      if (object === this._objects[index]) {\n        return false;\n      }\n      removeFromArray(this._objects, object);\n      this._objects.splice(index, 0, object);\n      this._onStackOrderChanged(object);\n      return true;\n    }\n\n    findNewLowerIndex(\n      object: FabricObject,\n      idx: number,\n      intersecting?: boolean,\n    ) {\n      let newIdx;\n\n      if (intersecting) {\n        newIdx = idx;\n        // traverse down the stack looking for the nearest intersecting object\n        for (let i = idx - 1; i >= 0; --i) {\n          if (object.isOverlapping(this._objects[i])) {\n            newIdx = i;\n            break;\n          }\n        }\n      } else {\n        newIdx = idx - 1;\n      }\n\n      return newIdx;\n    }\n\n    findNewUpperIndex(\n      object: FabricObject,\n      idx: number,\n      intersecting?: boolean,\n    ) {\n      let newIdx;\n\n      if (intersecting) {\n        newIdx = idx;\n        // traverse up the stack looking for the nearest intersecting object\n        for (let i = idx + 1; i < this._objects.length; ++i) {\n          if (object.isOverlapping(this._objects[i])) {\n            newIdx = i;\n            break;\n          }\n        }\n      } else {\n        newIdx = idx + 1;\n      }\n\n      return newIdx;\n    }\n\n    /**\n     * Given a bounding box, return all the objects of the collection that are contained in the bounding box.\n     * If `includeIntersecting` is true, return also the objects that intersect the bounding box as well.\n     * This is meant to work with selection. Is not a generic method.\n     * @param {TBBox} bbox a bounding box in scene coordinates\n     * @param {{ includeIntersecting?: boolean }} options an object with includeIntersecting\n     * @returns array of objects contained in the bounding box, ordered from top to bottom stacking wise\n     */\n    collectObjects(\n      { left, top, width, height }: TBBox,\n      { includeIntersecting = true }: { includeIntersecting?: boolean } = {},\n    ) {\n      const objects: InteractiveFabricObject[] = [],\n        tl = new Point(left, top),\n        br = tl.add(new Point(width, height));\n\n      // we iterate reverse order to collect top first in case of click.\n      for (let i = this._objects.length - 1; i >= 0; i--) {\n        const object = this._objects[i] as unknown as InteractiveFabricObject;\n        if (\n          object.selectable &&\n          object.visible &&\n          ((includeIntersecting && object.intersectsWithRect(tl, br)) ||\n            object.isContainedWithinRect(tl, br) ||\n            (includeIntersecting && object.containsPoint(tl)) ||\n            (includeIntersecting && object.containsPoint(br)))\n        ) {\n          objects.push(object);\n        }\n      }\n\n      return objects;\n    }\n  }\n\n  // https://github.com/microsoft/TypeScript/issues/32080\n  return Collection as typeof Collection & TBase;\n}\n","import { Observable } from './Observable';\n\nexport class CommonMethods<EventSpec> extends Observable<EventSpec> {\n  /**\n   * Sets object's properties from options, for initialization only\n   * @protected\n   * @param {Object} [options] Options object\n   */\n  protected _setOptions(options: any = {}) {\n    for (const prop in options) {\n      this.set(prop, options[prop]);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setObject(obj: Record<string, any>) {\n    for (const prop in obj) {\n      this._set(prop, obj[prop]);\n    }\n  }\n\n  /**\n   * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\n   * @param {String|Object} key Property name or object (if object, iterate over the object properties)\n   * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\n   */\n  set(key: string | Record<string, any>, value?: any) {\n    if (typeof key === 'object') {\n      this._setObject(key);\n    } else {\n      this._set(key, value);\n    }\n    return this;\n  }\n\n  _set(key: string, value: any) {\n    this[key as keyof this] = value;\n  }\n\n  /**\n   * Toggles specified property from `true` to `false` or from `false` to `true`\n   * @param {String} property Property to toggle\n   */\n  toggle(property: string) {\n    const value = this.get(property);\n    if (typeof value === 'boolean') {\n      this.set(property, !value);\n    }\n    return this;\n  }\n\n  /**\n   * Basic getter\n   * @param {String} property Property name\n   * @return {*} value of a property\n   */\n  get(property: string): any {\n    return this[property as keyof this];\n  }\n}\n","import { getFabricWindow } from '../../env';\n\nexport function requestAnimFrame(callback: FrameRequestCallback): number {\n  return getFabricWindow().requestAnimationFrame(callback);\n}\n\nexport function cancelAnimFrame(handle: number): void {\n  return getFabricWindow().cancelAnimationFrame(handle);\n}\n","let id = 0;\n\nexport const uid = () => id++;\n","import { getFabricDocument } from '../../env';\nimport type { ImageFormat, TSize } from '../../typedefs';\nimport { FabricError } from '../internals/console';\n/**\n * Creates canvas element\n * @return {CanvasElement} initialized canvas element\n */\nexport const createCanvasElement = (): HTMLCanvasElement => {\n  const element = getFabricDocument().createElement('canvas');\n  if (!element || typeof element.getContext === 'undefined') {\n    throw new FabricError('Failed to create `canvas` element');\n  }\n  return element;\n};\n\n/**\n * Creates image element (works on client and node)\n * @return {HTMLImageElement} HTML image element\n */\nexport const createImage = (): HTMLImageElement =>\n  getFabricDocument().createElement('img');\n\n/**\n * Creates a canvas element that is a copy of another and is also painted\n * @param {CanvasElement} canvas to copy size and content of\n * @return {CanvasElement} initialized canvas element\n */\nexport const copyCanvasElement = (\n  canvas: HTMLCanvasElement,\n): HTMLCanvasElement => {\n  const newCanvas = createCanvasElementFor(canvas);\n  newCanvas.getContext('2d')?.drawImage(canvas, 0, 0);\n  return newCanvas;\n};\n\nexport const createCanvasElementFor = (\n  canvas: HTMLCanvasElement | ImageData | HTMLImageElement | TSize,\n): HTMLCanvasElement => {\n  const newCanvas = createCanvasElement();\n  newCanvas.width = canvas.width;\n  newCanvas.height = canvas.height;\n  return newCanvas;\n};\n\n/**\n * since 2.6.0 moved from canvas instance to utility.\n * possibly useless\n * @param {CanvasElement} canvasEl to copy size and content of\n * @param {String} format 'jpeg' or 'png', in some browsers 'webp' is ok too\n * @param {Number} quality <= 1 and > 0\n * @return {String} data url\n */\nexport const toDataURL = (\n  canvasEl: HTMLCanvasElement,\n  format: ImageFormat,\n  quality: number,\n) => canvasEl.toDataURL(`image/${format}`, quality);\n\nexport const isHTMLCanvas = (\n  canvas?: HTMLCanvasElement | string,\n): canvas is HTMLCanvasElement => {\n  return !!canvas && (canvas as HTMLCanvasElement).getContext !== undefined;\n};\n\nexport const toBlob = (\n  canvasEl: HTMLCanvasElement,\n  format?: ImageFormat,\n  quality?: number,\n) =>\n  new Promise((resolve, _) => {\n    canvasEl.toBlob(resolve, `image/${format}`, quality);\n  }) as Promise<Blob | null>;\n","import type { TRadian, TDegree } from '../../typedefs';\nimport { PiBy180 } from '../../constants';\n\n/**\n * Transforms degrees to radians.\n * @param {TDegree} degrees value in degrees\n * @return {TRadian} value in radians\n */\nexport const degreesToRadians = (degrees: TDegree): TRadian =>\n  (degrees * PiBy180) as TRadian;\n\n/**\n * Transforms radians to degrees.\n * @param {TRadian} radians value in radians\n * @return {TDegree} value in degrees\n */\nexport const radiansToDegrees = (radians: TRadian): TDegree =>\n  (radians / PiBy180) as TDegree;\n","import { iMatrix } from '../../constants';\nimport type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport type { TDegree, TRadian, TMat2D } from '../../typedefs';\nimport { cos } from './cos';\nimport { degreesToRadians, radiansToDegrees } from './radiansDegreesConversion';\nimport { sin } from './sin';\n\nexport type TRotateMatrixArgs = {\n  angle?: TDegree;\n};\n\nexport type TTranslateMatrixArgs = {\n  translateX?: number;\n  translateY?: number;\n};\n\nexport type TScaleMatrixArgs = {\n  scaleX?: number;\n  scaleY?: number;\n  flipX?: boolean;\n  flipY?: boolean;\n  skewX?: TDegree;\n  skewY?: TDegree;\n};\n\nexport type TComposeMatrixArgs = TTranslateMatrixArgs &\n  TRotateMatrixArgs &\n  TScaleMatrixArgs;\n\nexport type TQrDecomposeOut = Required<\n  Omit<TComposeMatrixArgs, 'flipX' | 'flipY'>\n>;\n\nexport const isIdentityMatrix = (mat: TMat2D) =>\n  mat.every((value, index) => value === iMatrix[index]);\n\n/**\n * Apply transform t to point p\n * @deprecated use {@link Point#transform}\n * @param  {Point | XY} p The point to transform\n * @param  {Array} t The transform\n * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n * @return {Point} The transformed point\n */\nexport const transformPoint = (\n  p: XY,\n  t: TMat2D,\n  ignoreOffset?: boolean,\n): Point => new Point(p).transform(t, ignoreOffset);\n\n/**\n * Invert transformation t\n * @param {Array} t The transform\n * @return {Array} The inverted transform\n */\nexport const invertTransform = (t: TMat2D): TMat2D => {\n  const a = 1 / (t[0] * t[3] - t[1] * t[2]),\n    r = [a * t[3], -a * t[1], -a * t[2], a * t[0], 0, 0] as TMat2D,\n    { x, y } = new Point(t[4], t[5]).transform(r, true);\n  r[4] = -x;\n  r[5] = -y;\n  return r;\n};\n\n/**\n * Multiply matrix A by matrix B to nest transformations\n * @param  {TMat2D} a First transformMatrix\n * @param  {TMat2D} b Second transformMatrix\n * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices\n * @return {TMat2D} The product of the two transform matrices\n */\nexport const multiplyTransformMatrices = (\n  a: TMat2D,\n  b: TMat2D,\n  is2x2?: boolean,\n): TMat2D =>\n  [\n    a[0] * b[0] + a[2] * b[1],\n    a[1] * b[0] + a[3] * b[1],\n    a[0] * b[2] + a[2] * b[3],\n    a[1] * b[2] + a[3] * b[3],\n    is2x2 ? 0 : a[0] * b[4] + a[2] * b[5] + a[4],\n    is2x2 ? 0 : a[1] * b[4] + a[3] * b[5] + a[5],\n  ] as TMat2D;\n\n/**\n * Multiplies {@link matrices} such that a matrix defines the plane for the rest of the matrices **after** it\n *\n * `multiplyTransformMatrixArray([A, B, C, D])` is equivalent to `A(B(C(D)))`\n *\n * @param matrices an array of matrices\n * @param [is2x2] flag to multiply matrices as 2x2 matrices\n * @returns the multiplication product\n */\nexport const multiplyTransformMatrixArray = (\n  matrices: (TMat2D | undefined | null | false)[],\n  is2x2?: boolean,\n) =>\n  matrices.reduceRight(\n    (product: TMat2D, curr) =>\n      curr && product\n        ? multiplyTransformMatrices(curr, product, is2x2)\n        : curr || product,\n    undefined as unknown as TMat2D,\n  ) || iMatrix.concat();\n\nexport const calcPlaneRotation = ([a, b]: TMat2D) =>\n  Math.atan2(b, a) as TRadian;\n\n/**\n * Decomposes standard 2x3 matrix into transform components\n * @param  {TMat2D} a transformMatrix\n * @return {Object} Components of transform\n */\nexport const qrDecompose = (a: TMat2D): TQrDecomposeOut => {\n  const angle = calcPlaneRotation(a),\n    denom = Math.pow(a[0], 2) + Math.pow(a[1], 2),\n    scaleX = Math.sqrt(denom),\n    scaleY = (a[0] * a[3] - a[2] * a[1]) / scaleX,\n    skewX = Math.atan2(a[0] * a[2] + a[1] * a[3], denom);\n  return {\n    angle: radiansToDegrees(angle),\n    scaleX,\n    scaleY,\n    skewX: radiansToDegrees(skewX),\n    skewY: 0 as TDegree,\n    translateX: a[4] || 0,\n    translateY: a[5] || 0,\n  };\n};\n\n/**\n * Generate a translation matrix\n *\n * A translation matrix in the form of\n * [ 1 0 x ]\n * [ 0 1 y ]\n * [ 0 0 1 ]\n *\n * See @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#translate for more details\n *\n * @param {number} x translation on X axis\n * @param {number} [y] translation on Y axis\n * @returns {TMat2D} matrix\n */\nexport const createTranslateMatrix = (x: number, y = 0): TMat2D => [\n  1,\n  0,\n  0,\n  1,\n  x,\n  y,\n];\n\n/**\n * Generate a rotation matrix around around a point (x,y), defaulting to (0,0)\n *\n * A matrix in the form of\n * [cos(a) -sin(a) -x*cos(a)+y*sin(a)+x]\n * [sin(a)  cos(a) -x*sin(a)-y*cos(a)+y]\n * [0       0      1                 ]\n *\n *\n * @param {TDegree} angle rotation in degrees\n * @param {XY} [pivotPoint] pivot point to rotate around\n * @returns {TMat2D} matrix\n */\nexport function createRotateMatrix(\n  { angle = 0 }: TRotateMatrixArgs = {},\n  { x = 0, y = 0 }: Partial<XY> = {},\n): TMat2D {\n  const angleRadiant = degreesToRadians(angle),\n    cosValue = cos(angleRadiant),\n    sinValue = sin(angleRadiant);\n  return [\n    cosValue,\n    sinValue,\n    -sinValue,\n    cosValue,\n    x ? x - (cosValue * x - sinValue * y) : 0,\n    y ? y - (sinValue * x + cosValue * y) : 0,\n  ];\n}\n\n/**\n * Generate a scale matrix around the point (0,0)\n *\n * A matrix in the form of\n * [x 0 0]\n * [0 y 0]\n * [0 0 1]\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#scale\n *\n * @param {number} x scale on X axis\n * @param {number} [y] scale on Y axis\n * @returns {TMat2D} matrix\n */\nexport const createScaleMatrix = (x: number, y: number = x): TMat2D => [\n  x,\n  0,\n  0,\n  y,\n  0,\n  0,\n];\n\nexport const angleToSkew = (angle: TDegree) =>\n  Math.tan(degreesToRadians(angle));\n\nexport const skewToAngle = (value: TRadian) =>\n  radiansToDegrees(Math.atan(value));\n\n/**\n * Generate a skew matrix for the X axis\n *\n * A matrix in the form of\n * [1 x 0]\n * [0 1 0]\n * [0 0 1]\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#skewx\n *\n * @param {TDegree} skewValue translation on X axis\n * @returns {TMat2D} matrix\n */\nexport const createSkewXMatrix = (skewValue: TDegree): TMat2D => [\n  1,\n  0,\n  angleToSkew(skewValue),\n  1,\n  0,\n  0,\n];\n\n/**\n * Generate a skew matrix for the Y axis\n *\n * A matrix in the form of\n * [1 0 0]\n * [y 1 0]\n * [0 0 1]\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#skewy\n *\n * @param {TDegree} skewValue translation on Y axis\n * @returns {TMat2D} matrix\n */\nexport const createSkewYMatrix = (skewValue: TDegree): TMat2D => [\n  1,\n  angleToSkew(skewValue),\n  0,\n  1,\n  0,\n  0,\n];\n\n/**\n * Returns a transform matrix starting from an object of the same kind of\n * the one returned from qrDecompose, useful also if you want to calculate some\n * transformations from an object that is not enlived yet.\n * is called DimensionsTransformMatrix because those properties are the one that influence\n * the size of the resulting box of the object.\n * @param  {Object} options\n * @param  {Number} [options.scaleX]\n * @param  {Number} [options.scaleY]\n * @param  {Boolean} [options.flipX]\n * @param  {Boolean} [options.flipY]\n * @param  {Number} [options.skewX]\n * @param  {Number} [options.skewY]\n * @return {Number[]} transform matrix\n */\nexport const calcDimensionsMatrix = ({\n  scaleX = 1,\n  scaleY = 1,\n  flipX = false,\n  flipY = false,\n  skewX = 0 as TDegree,\n  skewY = 0 as TDegree,\n}: TScaleMatrixArgs) => {\n  let matrix = createScaleMatrix(\n    flipX ? -scaleX : scaleX,\n    flipY ? -scaleY : scaleY,\n  );\n  if (skewX) {\n    matrix = multiplyTransformMatrices(matrix, createSkewXMatrix(skewX), true);\n  }\n  if (skewY) {\n    matrix = multiplyTransformMatrices(matrix, createSkewYMatrix(skewY), true);\n  }\n  return matrix;\n};\n\n/**\n * Returns a transform matrix starting from an object of the same kind of\n * the one returned from qrDecompose, useful also if you want to calculate some\n * transformations from an object that is not enlived yet\n * Before changing this function look at: src/benchmarks/calcTransformMatrix.mjs\n * @param  {Object} options\n * @param  {Number} [options.angle]\n * @param  {Number} [options.scaleX]\n * @param  {Number} [options.scaleY]\n * @param  {Boolean} [options.flipX]\n * @param  {Boolean} [options.flipY]\n * @param  {Number} [options.skewX]\n * @param  {Number} [options.skewY]\n * @param  {Number} [options.translateX]\n * @param  {Number} [options.translateY]\n * @return {Number[]} transform matrix\n */\nexport const composeMatrix = (options: TComposeMatrixArgs): TMat2D => {\n  const { translateX = 0, translateY = 0, angle = 0 as TDegree } = options;\n  let matrix = createTranslateMatrix(translateX, translateY);\n  if (angle) {\n    matrix = multiplyTransformMatrices(matrix, createRotateMatrix({ angle }));\n  }\n  const scaleMatrix = calcDimensionsMatrix(options);\n  if (!isIdentityMatrix(scaleMatrix)) {\n    matrix = multiplyTransformMatrices(matrix, scaleMatrix);\n  }\n  return matrix;\n};\n","import { noop } from '../../constants';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport type {\n  Abortable,\n  Constructor,\n  TCrossOrigin,\n  TFiller,\n} from '../../typedefs';\nimport { createImage } from './dom';\nimport { classRegistry } from '../../ClassRegistry';\nimport type { BaseFilter } from '../../filters/BaseFilter';\nimport type { FabricObject as BaseFabricObject } from '../../shapes/Object/Object';\nimport { FabricError, SignalAbortedError } from '../internals/console';\nimport type { Shadow } from '../../Shadow';\n\nexport type LoadImageOptions = Abortable & {\n  /**\n   * cors value for the image loading, default to anonymous\n   */\n  crossOrigin?: TCrossOrigin;\n};\n\n/**\n * Loads image element from given url and resolve it, or catch.\n * @param {String} url URL representing an image\n * @param {LoadImageOptions} [options] image loading options\n * @returns {Promise<HTMLImageElement>} the loaded image.\n */\nexport const loadImage = (\n  url: string,\n  { signal, crossOrigin = null }: LoadImageOptions = {},\n) =>\n  new Promise<HTMLImageElement>(function (resolve, reject) {\n    if (signal && signal.aborted) {\n      return reject(new SignalAbortedError('loadImage'));\n    }\n    const img = createImage();\n    let abort: EventListenerOrEventListenerObject;\n    if (signal) {\n      abort = function (err: Event) {\n        img.src = '';\n        reject(err);\n      };\n      signal.addEventListener('abort', abort, { once: true });\n    }\n    const done = function () {\n      img.onload = img.onerror = null;\n      abort && signal?.removeEventListener('abort', abort);\n      resolve(img);\n    };\n    if (!url) {\n      done();\n      return;\n    }\n    img.onload = done;\n    img.onerror = function () {\n      abort && signal?.removeEventListener('abort', abort);\n      reject(new FabricError(`Error loading ${img.src}`));\n    };\n    crossOrigin && (img.crossOrigin = crossOrigin);\n    img.src = url;\n  });\n\nexport type EnlivenObjectOptions = Abortable & {\n  /**\n   * Method for further parsing of object elements,\n   * called after each fabric object created.\n   */\n  reviver?: <\n    T extends\n      | BaseFabricObject\n      | FabricObject\n      | BaseFilter<string>\n      | Shadow\n      | TFiller,\n  >(\n    serializedObj: Record<string, any>,\n    instance: T,\n  ) => void;\n};\n\n/**\n * @TODO type this correctly.\n * Creates corresponding fabric instances from their object representations\n * @param {Object[]} objects Objects to enliven\n * @param {EnlivenObjectOptions} [options]\n * @param {(serializedObj: object, instance: FabricObject) => any} [options.reviver] Method for further parsing of object elements,\n * called after each fabric object created.\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @returns {Promise<FabricObject[]>}\n */\nexport const enlivenObjects = <\n  T extends\n    | BaseFabricObject\n    | FabricObject\n    | BaseFilter<string>\n    | Shadow\n    | TFiller,\n>(\n  objects: any[],\n  { signal, reviver = noop }: EnlivenObjectOptions = {},\n) =>\n  new Promise<T[]>((resolve, reject) => {\n    const instances: T[] = [];\n    signal && signal.addEventListener('abort', reject, { once: true });\n    Promise.all(\n      objects.map((obj) =>\n        classRegistry\n          .getClass<\n            Constructor<T> & {\n              fromObject(options: any, context: Abortable): Promise<T>;\n            }\n          >(obj.type)\n          .fromObject(obj, { signal })\n          .then((fabricInstance) => {\n            reviver(obj, fabricInstance);\n            instances.push(fabricInstance);\n            return fabricInstance;\n          }),\n      ),\n    )\n      .then(resolve)\n      .catch((error) => {\n        // cleanup\n        instances.forEach((instance) => {\n          (instance as FabricObject).dispose &&\n            (instance as FabricObject).dispose();\n        });\n        reject(error);\n      })\n      .finally(() => {\n        signal && signal.removeEventListener('abort', reject);\n      });\n  });\n\n/**\n * Creates corresponding fabric instances residing in an object, e.g. `clipPath`\n * @param {Object} object with properties to enlive ( fill, stroke, clipPath, path )\n * @param {object} [options]\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @returns {Promise<Record<string, FabricObject | TFiller | null>>} the input object with enlived values\n */\nexport const enlivenObjectEnlivables = <\n  R = Record<string, FabricObject | TFiller | null>,\n>(\n  serializedObject: any,\n  { signal }: Abortable = {},\n) =>\n  new Promise<R>((resolve, reject) => {\n    const instances: (FabricObject | TFiller | Shadow)[] = [];\n    signal && signal.addEventListener('abort', reject, { once: true });\n    // enlive every possible property\n    const promises = Object.values(serializedObject).map((value: any) => {\n      if (!value) {\n        return value;\n      }\n      /**\n       * clipPath or shadow or gradient or text on a path or a pattern,\n       * or the backgroundImage or overlayImage of canvas\n       * If we have a type and there is a classe registered for it, we enlive it.\n       * If there is no class registered for it we return the value as is\n       * */\n      if (value.type && classRegistry.has(value.type)) {\n        return enlivenObjects<FabricObject | Shadow | TFiller>([value], {\n          signal,\n        }).then(([enlived]) => {\n          instances.push(enlived);\n          return enlived;\n        });\n      }\n      return value;\n    });\n    const keys = Object.keys(serializedObject);\n    Promise.all(promises)\n      .then((enlived) => {\n        return enlived.reduce((acc, instance, index) => {\n          acc[keys[index]] = instance;\n          return acc;\n        }, {});\n      })\n      .then(resolve)\n      .catch((error) => {\n        // cleanup\n        instances.forEach((instance: any) => {\n          instance.dispose && instance.dispose();\n        });\n        reject(error);\n      })\n      .finally(() => {\n        signal && signal.removeEventListener('abort', reject);\n      });\n  });\n","/**\n * Populates an object with properties of another object\n * @param {Object} source Source object\n * @param {string[]} properties Properties names to include\n * @returns object populated with the picked keys\n */\nexport const pick = <T extends Record<string, any>>(\n  source: T,\n  keys: (keyof T)[] = [],\n) => {\n  return keys.reduce((o, key) => {\n    if (key in source) {\n      o[key] = source[key];\n    }\n    return o;\n  }, {} as Partial<T>);\n};\n\nexport const pickBy = <T extends Record<string, any>>(\n  source: T,\n  predicate: <K extends keyof T>(value: T[K], key: K, collection: T) => boolean,\n) => {\n  return (Object.keys(source) as (keyof T)[]).reduce((o, key) => {\n    if (predicate(source[key], key, source)) {\n      o[key] = source[key];\n    }\n    return o;\n  }, {} as Partial<T>);\n};\n","/**\n * Map of the 148 color names with HEX code\n * @see: https://www.w3.org/TR/css3-color/#svg-color\n */\nexport const ColorNameMap = {\n  aliceblue: '#F0F8FF',\n  antiquewhite: '#FAEBD7',\n  aqua: '#0FF',\n  aquamarine: '#7FFFD4',\n  azure: '#F0FFFF',\n  beige: '#F5F5DC',\n  bisque: '#FFE4C4',\n  black: '#000',\n  blanchedalmond: '#FFEBCD',\n  blue: '#00F',\n  blueviolet: '#8A2BE2',\n  brown: '#A52A2A',\n  burlywood: '#DEB887',\n  cadetblue: '#5F9EA0',\n  chartreuse: '#7FFF00',\n  chocolate: '#D2691E',\n  coral: '#FF7F50',\n  cornflowerblue: '#6495ED',\n  cornsilk: '#FFF8DC',\n  crimson: '#DC143C',\n  cyan: '#0FF',\n  darkblue: '#00008B',\n  darkcyan: '#008B8B',\n  darkgoldenrod: '#B8860B',\n  darkgray: '#A9A9A9',\n  darkgrey: '#A9A9A9',\n  darkgreen: '#006400',\n  darkkhaki: '#BDB76B',\n  darkmagenta: '#8B008B',\n  darkolivegreen: '#556B2F',\n  darkorange: '#FF8C00',\n  darkorchid: '#9932CC',\n  darkred: '#8B0000',\n  darksalmon: '#E9967A',\n  darkseagreen: '#8FBC8F',\n  darkslateblue: '#483D8B',\n  darkslategray: '#2F4F4F',\n  darkslategrey: '#2F4F4F',\n  darkturquoise: '#00CED1',\n  darkviolet: '#9400D3',\n  deeppink: '#FF1493',\n  deepskyblue: '#00BFFF',\n  dimgray: '#696969',\n  dimgrey: '#696969',\n  dodgerblue: '#1E90FF',\n  firebrick: '#B22222',\n  floralwhite: '#FFFAF0',\n  forestgreen: '#228B22',\n  fuchsia: '#F0F',\n  gainsboro: '#DCDCDC',\n  ghostwhite: '#F8F8FF',\n  gold: '#FFD700',\n  goldenrod: '#DAA520',\n  gray: '#808080',\n  grey: '#808080',\n  green: '#008000',\n  greenyellow: '#ADFF2F',\n  honeydew: '#F0FFF0',\n  hotpink: '#FF69B4',\n  indianred: '#CD5C5C',\n  indigo: '#4B0082',\n  ivory: '#FFFFF0',\n  khaki: '#F0E68C',\n  lavender: '#E6E6FA',\n  lavenderblush: '#FFF0F5',\n  lawngreen: '#7CFC00',\n  lemonchiffon: '#FFFACD',\n  lightblue: '#ADD8E6',\n  lightcoral: '#F08080',\n  lightcyan: '#E0FFFF',\n  lightgoldenrodyellow: '#FAFAD2',\n  lightgray: '#D3D3D3',\n  lightgrey: '#D3D3D3',\n  lightgreen: '#90EE90',\n  lightpink: '#FFB6C1',\n  lightsalmon: '#FFA07A',\n  lightseagreen: '#20B2AA',\n  lightskyblue: '#87CEFA',\n  lightslategray: '#789',\n  lightslategrey: '#789',\n  lightsteelblue: '#B0C4DE',\n  lightyellow: '#FFFFE0',\n  lime: '#0F0',\n  limegreen: '#32CD32',\n  linen: '#FAF0E6',\n  magenta: '#F0F',\n  maroon: '#800000',\n  mediumaquamarine: '#66CDAA',\n  mediumblue: '#0000CD',\n  mediumorchid: '#BA55D3',\n  mediumpurple: '#9370DB',\n  mediumseagreen: '#3CB371',\n  mediumslateblue: '#7B68EE',\n  mediumspringgreen: '#00FA9A',\n  mediumturquoise: '#48D1CC',\n  mediumvioletred: '#C71585',\n  midnightblue: '#191970',\n  mintcream: '#F5FFFA',\n  mistyrose: '#FFE4E1',\n  moccasin: '#FFE4B5',\n  navajowhite: '#FFDEAD',\n  navy: '#000080',\n  oldlace: '#FDF5E6',\n  olive: '#808000',\n  olivedrab: '#6B8E23',\n  orange: '#FFA500',\n  orangered: '#FF4500',\n  orchid: '#DA70D6',\n  palegoldenrod: '#EEE8AA',\n  palegreen: '#98FB98',\n  paleturquoise: '#AFEEEE',\n  palevioletred: '#DB7093',\n  papayawhip: '#FFEFD5',\n  peachpuff: '#FFDAB9',\n  peru: '#CD853F',\n  pink: '#FFC0CB',\n  plum: '#DDA0DD',\n  powderblue: '#B0E0E6',\n  purple: '#800080',\n  rebeccapurple: '#639',\n  red: '#F00',\n  rosybrown: '#BC8F8F',\n  royalblue: '#4169E1',\n  saddlebrown: '#8B4513',\n  salmon: '#FA8072',\n  sandybrown: '#F4A460',\n  seagreen: '#2E8B57',\n  seashell: '#FFF5EE',\n  sienna: '#A0522D',\n  silver: '#C0C0C0',\n  skyblue: '#87CEEB',\n  slateblue: '#6A5ACD',\n  slategray: '#708090',\n  slategrey: '#708090',\n  snow: '#FFFAFA',\n  springgreen: '#00FF7F',\n  steelblue: '#4682B4',\n  tan: '#D2B48C',\n  teal: '#008080',\n  thistle: '#D8BFD8',\n  tomato: '#FF6347',\n  turquoise: '#40E0D0',\n  violet: '#EE82EE',\n  wheat: '#F5DEB3',\n  white: '#FFF',\n  whitesmoke: '#F5F5F5',\n  yellow: '#FF0',\n  yellowgreen: '#9ACD32',\n};\n","import type { TRGBAColorSource } from './typedefs';\n\n/**\n * @param {Number} p\n * @param {Number} q\n * @param {Number} t\n * @return {Number}\n */\nexport const hue2rgb = (p: number, q: number, t: number): number => {\n  if (t < 0) {\n    t += 1;\n  }\n  if (t > 1) {\n    t -= 1;\n  }\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n  if (t < 1 / 2) {\n    return q;\n  }\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n  return p;\n};\n\n/**\n * Adapted from {@link https://gist.github.com/mjackson/5311256 https://gist.github.com/mjackson}\n * @param {Number} r Red color value\n * @param {Number} g Green color value\n * @param {Number} b Blue color value\n * @param {Number} a Alpha color value pass through\n * @return {TRGBColorSource} Hsl color\n */\nexport const rgb2Hsl = (\n  r: number,\n  g: number,\n  b: number,\n  a: number,\n): TRGBAColorSource => {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  const maxValue = Math.max(r, g, b),\n    minValue = Math.min(r, g, b);\n\n  let h!: number, s: number;\n  const l = (maxValue + minValue) / 2;\n\n  if (maxValue === minValue) {\n    h = s = 0; // achromatic\n  } else {\n    const d = maxValue - minValue;\n    s = l > 0.5 ? d / (2 - maxValue - minValue) : d / (maxValue + minValue);\n    switch (maxValue) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n\n  return [Math.round(h * 360), Math.round(s * 100), Math.round(l * 100), a];\n};\n\nexport const fromAlphaToFloat = (value = '1') =>\n  parseFloat(value) / (value.endsWith('%') ? 100 : 1);\n\n/**\n * Convert a value in the inclusive range [0, 255] to hex\n */\nexport const hexify = (value: number) =>\n  Math.min(Math.round(value), 255).toString(16).toUpperCase().padStart(2, '0');\n\n/**\n * Calculate the grey average value for rgb and pass through alpha\n */\nexport const greyAverage = ([\n  r,\n  g,\n  b,\n  a = 1,\n]: TRGBAColorSource): TRGBAColorSource => {\n  const avg = Math.round(r * 0.3 + g * 0.59 + b * 0.11);\n  return [avg, avg, avg, a];\n};\n","import { radiansToDegrees } from '../util/misc/radiansDegreesConversion';\nimport { ColorNameMap } from './color_map';\nimport { reHSLa, reHex, reRGBa } from './constants';\nimport type { TRGBAColorSource, TColorArg } from './typedefs';\nimport {\n  hue2rgb,\n  hexify,\n  rgb2Hsl,\n  fromAlphaToFloat,\n  greyAverage,\n} from './util';\n\n/**\n * @class Color common color operations\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors colors}\n */\nexport class Color {\n  private declare _source: TRGBAColorSource;\n  isUnrecognised = false;\n\n  /**\n   *\n   * @param {string} [color] optional in hex or rgb(a) or hsl format or from known color list\n   */\n  constructor(color?: TColorArg) {\n    if (!color) {\n      // we default to black as canvas does\n      this.setSource([0, 0, 0, 1]);\n    } else if (color instanceof Color) {\n      this.setSource([...color._source]);\n    } else if (Array.isArray(color)) {\n      const [r, g, b, a = 1] = color;\n      this.setSource([r, g, b, a]);\n    } else {\n      this.setSource(this._tryParsingColor(color));\n    }\n  }\n\n  /**\n   * @private\n   * @param {string} [color] Color value to parse\n   * @returns {TRGBAColorSource}\n   */\n  protected _tryParsingColor(color: string) {\n    color = color.toLowerCase();\n    if (color in ColorNameMap) {\n      color = ColorNameMap[color as keyof typeof ColorNameMap];\n    }\n    return color === 'transparent'\n      ? ([255, 255, 255, 0] as TRGBAColorSource)\n      : Color.sourceFromHex(color) ||\n          Color.sourceFromRgb(color) ||\n          Color.sourceFromHsl(color) ||\n          // color is not recognized\n          // we default to black as canvas does\n          // eslint-disable-next-line no-constant-binary-expression\n          ((this.isUnrecognised = true) && ([0, 0, 0, 1] as TRGBAColorSource));\n  }\n\n  /**\n   * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n   * @return {TRGBAColorSource}\n   */\n  getSource() {\n    return this._source;\n  }\n\n  /**\n   * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n   * @param {TRGBAColorSource} source\n   */\n  setSource(source: TRGBAColorSource) {\n    this._source = source;\n  }\n\n  /**\n   * Returns color representation in RGB format\n   * @return {String} ex: rgb(0-255,0-255,0-255)\n   */\n  toRgb() {\n    const [r, g, b] = this.getSource();\n    return `rgb(${r},${g},${b})`;\n  }\n\n  /**\n   * Returns color representation in RGBA format\n   * @return {String} ex: rgba(0-255,0-255,0-255,0-1)\n   */\n  toRgba() {\n    return `rgba(${this.getSource().join(',')})`;\n  }\n\n  /**\n   * Returns color representation in HSL format\n   * @return {String} ex: hsl(0-360,0%-100%,0%-100%)\n   */\n  toHsl() {\n    const [h, s, l] = rgb2Hsl(...this.getSource());\n    return `hsl(${h},${s}%,${l}%)`;\n  }\n\n  /**\n   * Returns color representation in HSLA format\n   * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)\n   */\n  toHsla() {\n    const [h, s, l, a] = rgb2Hsl(...this.getSource());\n    return `hsla(${h},${s}%,${l}%,${a})`;\n  }\n\n  /**\n   * Returns color representation in HEX format\n   * @return {String} ex: FF5555\n   */\n  toHex() {\n    const fullHex = this.toHexa();\n    return fullHex.slice(0, 6);\n  }\n\n  /**\n   * Returns color representation in HEXA format\n   * @return {String} ex: FF5555CC\n   */\n  toHexa() {\n    const [r, g, b, a] = this.getSource();\n    return `${hexify(r)}${hexify(g)}${hexify(b)}${hexify(Math.round(a * 255))}`;\n  }\n\n  /**\n   * Gets value of alpha channel for this color\n   * @return {Number} 0-1\n   */\n  getAlpha() {\n    return this.getSource()[3];\n  }\n\n  /**\n   * Sets value of alpha channel for this color\n   * @param {Number} alpha Alpha value 0-1\n   * @return {Color} thisArg\n   */\n  setAlpha(alpha: number) {\n    this._source[3] = alpha;\n    return this;\n  }\n\n  /**\n   * Transforms color to its grayscale representation\n   * @return {Color} thisArg\n   */\n  toGrayscale() {\n    this.setSource(greyAverage(this.getSource()));\n    return this;\n  }\n\n  /**\n   * Transforms color to its black and white representation\n   * @param {Number} threshold\n   * @return {Color} thisArg\n   */\n  toBlackWhite(threshold: number) {\n    const [average, , , a] = greyAverage(this.getSource()),\n      bOrW = average < (threshold || 127) ? 0 : 255;\n    this.setSource([bOrW, bOrW, bOrW, a]);\n    return this;\n  }\n\n  /**\n   * Overlays color with another color\n   * @param {String|Color} otherColor\n   * @return {Color} thisArg\n   */\n  overlayWith(otherColor: string | Color) {\n    if (!(otherColor instanceof Color)) {\n      otherColor = new Color(otherColor);\n    }\n\n    const source = this.getSource(),\n      otherAlpha = 0.5,\n      otherSource = otherColor.getSource(),\n      [R, G, B] = source.map((value, index) =>\n        Math.round(value * (1 - otherAlpha) + otherSource[index] * otherAlpha),\n      );\n\n    this.setSource([R, G, B, source[3]]);\n    return this;\n  }\n\n  /**\n   * Returns new color object, when given a color in RGB format\n   * @memberOf Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255)\n   * @return {Color}\n   */\n  static fromRgb(color: string): Color {\n    return Color.fromRgba(color);\n  }\n\n  /**\n   * Returns new color object, when given a color in RGBA format\n   * @static\n   * @function\n   * @memberOf Color\n   * @param {String} color\n   * @return {Color}\n   */\n  static fromRgba(color: string): Color {\n    return new Color(Color.sourceFromRgb(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format\n   * @memberOf Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)\n   * @return {TRGBAColorSource | undefined} source\n   */\n  static sourceFromRgb(color: string): TRGBAColorSource | undefined {\n    const match = color.match(reRGBa());\n    if (match) {\n      const [r, g, b] = match.slice(1, 4).map((value) => {\n        const parsedValue = parseFloat(value);\n        return value.endsWith('%')\n          ? Math.round(parsedValue * 2.55)\n          : parsedValue;\n      });\n      return [r, g, b, fromAlphaToFloat(match[4])];\n    }\n  }\n\n  /**\n   * Returns new color object, when given a color in HSL format\n   * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)\n   * @memberOf Color\n   * @return {Color}\n   */\n  static fromHsl(color: string): Color {\n    return Color.fromHsla(color);\n  }\n\n  /**\n   * Returns new color object, when given a color in HSLA format\n   * @static\n   * @function\n   * @memberOf Color\n   * @param {String} color\n   * @return {Color}\n   */\n  static fromHsla(color: string): Color {\n    return new Color(Color.sourceFromHsl(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.\n   * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n   * @memberOf Color\n   * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)\n   * @return {TRGBAColorSource | undefined} source\n   * @see http://http://www.w3.org/TR/css3-color/#hsl-color\n   */\n  static sourceFromHsl(color: string): TRGBAColorSource | undefined {\n    const match = color.match(reHSLa());\n    if (!match) {\n      return;\n    }\n    const match1degrees = Color.parseAngletoDegrees(match[1]);\n\n    const h = (((match1degrees % 360) + 360) % 360) / 360,\n      s = parseFloat(match[2]) / 100,\n      l = parseFloat(match[3]) / 100;\n    let r: number, g: number, b: number;\n\n    if (s === 0) {\n      r = g = b = l;\n    } else {\n      const q = l <= 0.5 ? l * (s + 1) : l + s - l * s,\n        p = l * 2 - q;\n\n      r = hue2rgb(p, q, h + 1 / 3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1 / 3);\n    }\n\n    return [\n      Math.round(r * 255),\n      Math.round(g * 255),\n      Math.round(b * 255),\n      fromAlphaToFloat(match[4]),\n    ];\n  }\n\n  /**\n   * Returns new color object, when given a color in HEX format\n   * @static\n   * @memberOf Color\n   * @param {String} color Color value ex: FF5555\n   * @return {Color}\n   */\n  static fromHex(color: string): Color {\n    return new Color(Color.sourceFromHex(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HEX format\n   * @static\n   * @memberOf Color\n   * @param {String} color ex: FF5555 or FF5544CC (RGBa)\n   * @return {TRGBAColorSource | undefined} source\n   */\n  static sourceFromHex(color: string): TRGBAColorSource | undefined {\n    if (color.match(reHex())) {\n      const value = color.slice(color.indexOf('#') + 1),\n        isShortNotation = value.length <= 4;\n      let expandedValue: string[];\n      if (isShortNotation) {\n        expandedValue = value.split('').map((hex) => hex + hex);\n      } else {\n        expandedValue = value.match(/.{2}/g)!;\n      }\n      const [r, g, b, a = 255] = expandedValue.map((hexCouple) =>\n        parseInt(hexCouple, 16),\n      );\n      return [r, g, b, a / 255];\n    }\n  }\n\n  /**\n   * Converts a string that could be any angle notation (50deg, 0.5turn, 2rad)\n   * into degrees without the 'deg' suffix\n   * @static\n   * @memberOf Color\n   * @param {String} value ex: 0deg, 0.5turn, 2rad\n   * @return {Number} number in degrees or NaN if inputs are invalid\n   */\n  static parseAngletoDegrees(value: string): number {\n    const lowercase = value.toLowerCase();\n    const numeric = parseFloat(lowercase);\n\n    if (lowercase.includes('rad')) {\n      return radiansToDegrees(numeric);\n    }\n\n    if (lowercase.includes('turn')) {\n      return numeric * 360;\n    }\n\n    // Value is probably just a number already in degrees eg '50'\n    return numeric;\n  }\n}\n","/**\n * Regex matching color in RGB or RGBA formats (ex: `rgb(0, 0, 0)`, `rgba(255, 100, 10, 0.5)`, `rgba( 255 , 100 , 10 , 0.5 )`, `rgb(1,1,1)`, `rgba(100%, 60%, 10%, 0.5)`)\n * Also matching rgba(r g b / a) as per new specs\n * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/rgb\n * Formal syntax at the time of writing:\n * <rgb()> =\n *  rgb( [ <percentage> | none ]{3} [ / [ <alpha-value> | none ] ]? )  |\n *  rgb( [ <number> | none ]{3} [ / [ <alpha-value> | none ] ]? )\n * <alpha-value> = <number> | <percentage>\n *\n * For learners this is how you can read this regex\n * Regular expression for matching an rgba or rgb CSS color value\n *\n * /^          # Beginning of the string\n * rgba?       # \"rgb\" or \"rgba\"\n * \\(\\s*       # Opening parenthesis and optional whitespace\n * (\\d{0,3}    # 0 to three digits R channel\n *  (?:\\.\\d+)? # Optional decimal with one or more digits\n * )           # End of capturing group for the first color component\n * %?          # Optional percent sign after the first color component\n * \\s*         # Optional whitespace\n * [\\s|,]      # Separator between color components can be a space or comma\n * \\s*         # Optional whitespace\n * (\\d{0,3}    # 0 to three digits G channel\n *  (?:\\.\\d+)? # Optional decimal with one or more digits\n * )           # End of capturing group for the second color component\n * %?          # Optional percent sign after the second color component\n * \\s*         # Optional whitespace\n * [\\s|,]      # Separator between color components can be a space or comma\n * \\s*         # Optional whitespace\n * (\\d{0,3}    # 0 to three digits B channel\n *  (?:\\.\\d+)? # Optional decimal with one or more digits\n * )           # End of capturing group for the third color component\n * %?          # Optional percent sign after the third color component\n * \\s*         # Optional whitespace\n * (?:         # Beginning of non-capturing group for alpha value\n *  \\s*        # Optional whitespace\n *  [,/]       # Comma or slash separator for alpha value\n *  \\s*        # Optional whitespace\n *  (\\d{0,3}   # Zero to three digits\n *    (?:\\.\\d+)? # Optional decimal with one or more digits\n *  )          # End of capturing group for alpha value\n *  %?         # Optional percent sign after alpha value\n *  \\s*        # Optional whitespace\n * )?          # End of non-capturing group for alpha value (optional)\n * \\)          # Closing parenthesis\n * $           # End of the string\n *\n * The alpha channel can be in the format 0.4 .7 or 1 or 73%\n *\n * WARNING this regex doesn't fail on off spec colors. it matches everything that could be a color.\n * So the spec does not allow for `rgba(30 , 45%  35, 49%)` but this will work anyways for us\n */\nexport const reRGBa = () =>\n  /^rgba?\\(\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*(?:\\s*[,/]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*)?\\)$/i;\n\n/**\n * Regex matching color in HSL or HSLA formats (ex: hsl(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))\n * Also matching rgba(r g b / a) as per new specs\n * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl\n * Formal syntax at the time of writing:\n * <hsl()> =\n *   hsl( [ <hue> | none ] [ <percentage> | none ] [ <percentage> | none ] [ / [ <alpha-value> | none ] ]? )\n *\n * <hue> =\n *   <number>  |\n *   <angle>\n *\n * <alpha-value> =\n *   <number>      |\n *   <percentage>\n *\n * For learners this is how you can read this regex\n * Regular expression for matching an hsla or hsl CSS color value\n *\n * /^hsla?\\(         // Matches the beginning of the string and the opening parenthesis of \"hsl\" or \"hsla\"\n * \\s*               // Matches any whitespace characters (space, tab, etc.) zero or more times\n * (\\d{0,3}          // Hue: 0 to three digits - start capture in a group\n * (?:\\.\\d+)?        // Hue: Optional (non capture group) decimal with one or more digits.\n * (?:deg|turn|rad)? // Hue: Optionally include suffix deg or turn or rad\n * )                 // Hue: End capture group\n * \\s*               // Matches any whitespace characters zero or more times\n * [\\s|,]            // Matches a space, tab or comma\n * \\s*               // Matches any whitespace characters zero or more times\n * (\\d{0,3}          // Saturation: 0 to three digits - start capture in a group\n * (?:\\.\\d+)?        // Saturation: Optional decimal with one or more digits in a non-capturing group\n * %?)               // Saturation: match optional % character and end capture group\n * \\s*               // Matches any whitespace characters zero or more times\n * [\\s|,]            // Matches a space, tab or comma\n * \\s*               // Matches any whitespace characters zero or more times\n * (\\d{0,3}          // Lightness: 0 to three digits - start capture in a group\n * (?:\\.\\d+)?        // Lightness: Optional decimal with one or more digits in a non-capturing group\n * %?)                // Lightness: match % character and end capture group\n * \\s*               // Matches any whitespace characters zero or more times\n * (?:               // Alpha: Begins a non-capturing group for the alpha value\n *   \\s*             // Matches any whitespace characters zero or more times\n *   [,/]            // Matches a comma or forward slash\n *   \\s*             // Matches any whitespace characters zero or more times\n *   (\\d*(?:\\.\\d+)?%?) // Matches zero or more digits, optionally followed by a decimal point and one or more digits, followed by an optional percentage sign and captures it in a group\n *   \\s*             // Matches any whitespace characters zero or more times\n * )?                // Makes the alpha value group optional\n * \\)                // Matches the closing parenthesis\n * $/i               // Matches the end of the string and sets the regular expression to case-insensitive mode\n *\n * WARNING this regex doesn't fail on off spec colors. It matches everything that could be a color.\n * So the spec does not allow `hsl(30 , 45%  35, 49%)` but this will work anyways for us.\n */\nexport const reHSLa = () =>\n  /^hsla?\\(\\s*([+-]?\\d{0,3}(?:\\.\\d+)?(?:deg|turn|rad)?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*(?:\\s*[,/]\\s*(\\d*(?:\\.\\d+)?%?)\\s*)?\\)$/i;\n\n/**\n * Regex matching color in HEX format (ex: #FF5544CC, #FF5555, 010155, aff)\n */\nexport const reHex = () => /^#?(([0-9a-f]){3,4}|([0-9a-f]{2}){3,4})$/i;\n","/**\n * A wrapper around Number#toFixed, which contrary to native method returns number, not string.\n * @param {number|string} number number to operate on\n * @param {number} fractionDigits number of fraction digits to \"leave\"\n * @return {number}\n */\nexport const toFixed = (number: number | string, fractionDigits: number) =>\n  parseFloat(Number(number).toFixed(fractionDigits));\n","import { Color } from '../../color/Color';\nimport { config } from '../../config';\nimport { DEFAULT_SVG_FONT_SIZE, FILL, NONE } from '../../constants';\nimport type {\n  TBBox,\n  TMat2D,\n  SVGElementName,\n  SupportedSVGUnit,\n} from '../../typedefs';\nimport { toFixed } from './toFixed';\n\n/**\n * Returns array of attributes for given svg that fabric parses\n * @param {SVGElementName} type Type of svg element (eg. 'circle')\n * @return {Array} string names of supported attributes\n */\nexport const getSvgAttributes = (type: SVGElementName) => {\n  const commonAttributes = ['instantiated_by_use', 'style', 'id', 'class'];\n  switch (type) {\n    case 'linearGradient':\n      return commonAttributes.concat([\n        'x1',\n        'y1',\n        'x2',\n        'y2',\n        'gradientUnits',\n        'gradientTransform',\n      ]);\n    case 'radialGradient':\n      return commonAttributes.concat([\n        'gradientUnits',\n        'gradientTransform',\n        'cx',\n        'cy',\n        'r',\n        'fx',\n        'fy',\n        'fr',\n      ]);\n    case 'stop':\n      return commonAttributes.concat(['offset', 'stop-color', 'stop-opacity']);\n  }\n  return commonAttributes;\n};\n\n/**\n * Converts from attribute value to pixel value if applicable.\n * Returns converted pixels or original value not converted.\n * @param {string} value number to operate on\n * @param {number} fontSize\n * @return {number}\n */\nexport const parseUnit = (value: string, fontSize = DEFAULT_SVG_FONT_SIZE) => {\n  const unit = /\\D{0,2}$/.exec(value),\n    number = parseFloat(value);\n  const dpi = config.DPI;\n  switch (unit?.[0] as SupportedSVGUnit) {\n    case 'mm':\n      return (number * dpi) / 25.4;\n\n    case 'cm':\n      return (number * dpi) / 2.54;\n\n    case 'in':\n      return number * dpi;\n\n    case 'pt':\n      return (number * dpi) / 72; // or * 4 / 3\n\n    case 'pc':\n      return ((number * dpi) / 72) * 12; // or * 16\n\n    case 'em':\n      return number * fontSize;\n\n    default:\n      return number;\n  }\n};\n\nexport type MeetOrSlice = 'meet' | 'slice';\n\nexport type MinMidMax = 'Min' | 'Mid' | 'Max' | 'none';\n\nexport type TPreserveArParsed = {\n  meetOrSlice: MeetOrSlice;\n  alignX: MinMidMax;\n  alignY: MinMidMax;\n};\n\n// align can be either none or undefined or a combination of mid/max\nconst parseAlign = (align: string): MinMidMax[] => {\n  //divide align in alignX and alignY\n  if (align && align !== NONE) {\n    return [align.slice(1, 4) as MinMidMax, align.slice(5, 8) as MinMidMax];\n  } else if (align === NONE) {\n    return [align, align];\n  }\n  return ['Mid', 'Mid'];\n};\n\n/**\n * Parse preserveAspectRatio attribute from element\n * https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/preserveAspectRatio\n * @param {string} attribute to be parsed\n * @return {Object} an object containing align and meetOrSlice attribute\n */\nexport const parsePreserveAspectRatioAttribute = (\n  attribute: string,\n): TPreserveArParsed => {\n  const [firstPart, secondPart] = attribute.trim().split(' ') as [\n    MinMidMax,\n    MeetOrSlice | undefined,\n  ];\n  const [alignX, alignY] = parseAlign(firstPart);\n  return {\n    meetOrSlice: secondPart || 'meet',\n    alignX,\n    alignY,\n  };\n};\n\n/**\n * given an array of 6 number returns something like `\"matrix(...numbers)\"`\n * @param {TMat2D} transform an array with 6 numbers\n * @return {String} transform matrix for svg\n */\nexport const matrixToSVG = (transform: TMat2D) =>\n  'matrix(' +\n  transform\n    .map((value) => toFixed(value, config.NUM_FRACTION_DIGITS))\n    .join(' ') +\n  ')';\n\n/**\n * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values\n * we work around it by \"moving\" alpha channel into opacity attribute and setting fill's alpha to 1\n * @param prop\n * @param value\n * @param {boolean} inlineStyle The default is inline style, the separator used is \":\", The other is \"=\"\n * @returns\n */\nexport const colorPropToSVG = (\n  prop: string,\n  value?: any,\n  inlineStyle = true,\n) => {\n  let colorValue;\n  let opacityValue;\n  if (!value) {\n    colorValue = 'none';\n  } else if (value.toLive) {\n    colorValue = `url(#SVGID_${value.id})`;\n  } else {\n    const color = new Color(value),\n      opacity = color.getAlpha();\n\n    colorValue = color.toRgb();\n    if (opacity !== 1) {\n      opacityValue = opacity.toString();\n    }\n  }\n  if (inlineStyle) {\n    return `${prop}: ${colorValue}; ${\n      opacityValue ? `${prop}-opacity: ${opacityValue}; ` : ''\n    }`;\n  } else {\n    return `${prop}=\"${colorValue}\" ${\n      opacityValue ? `${prop}-opacity=\"${opacityValue}\" ` : ''\n    }`;\n  }\n};\n\nexport const createSVGRect = (\n  color: string,\n  { left, top, width, height }: TBBox,\n  precision = config.NUM_FRACTION_DIGITS,\n) => {\n  const svgColor = colorPropToSVG(FILL, color, false);\n  const [x, y, w, h] = [left, top, width, height].map((value) =>\n    toFixed(value, precision),\n  );\n  return `<rect ${svgColor} x=\"${x}\" y=\"${y}\" width=\"${w}\" height=\"${h}\"></rect>`;\n};\n","import type { FabricObject } from '../shapes/Object/Object';\nimport type { TFiller } from '../typedefs';\nimport type { FabricText } from '../shapes/Text/Text';\nimport type { Pattern } from '../Pattern';\nimport type { Path } from '../shapes/Path';\nimport type { ActiveSelection } from '../shapes/ActiveSelection';\n\nexport const isFiller = (\n  filler: TFiller | string | null,\n): filler is TFiller => {\n  return !!filler && (filler as TFiller).toLive !== undefined;\n};\n\nexport const isSerializableFiller = (\n  filler: TFiller | string | null,\n): filler is TFiller => {\n  return !!filler && typeof (filler as TFiller).toObject === 'function';\n};\n\nexport const isPattern = (filler: TFiller): filler is Pattern => {\n  return (\n    !!filler && (filler as Pattern).offsetX !== undefined && 'source' in filler\n  );\n};\n\nexport const isTextObject = (\n  fabricObject?: FabricObject,\n): fabricObject is FabricText => {\n  return (\n    !!fabricObject &&\n    typeof (fabricObject as FabricText)._renderText === 'function'\n  );\n};\n\nexport const isPath = (fabricObject?: FabricObject): fabricObject is Path => {\n  // we could use instanceof but that would mean pulling in Text code for a simple check\n  // @todo discuss what to do and how to do\n  return (\n    !!fabricObject &&\n    typeof (fabricObject as Path)._renderPathCommands === 'function'\n  );\n};\n\nexport const isActiveSelection = (\n  fabricObject?: FabricObject,\n): fabricObject is ActiveSelection =>\n  !!fabricObject && 'multiSelectionStacking' in fabricObject;\n","/**\n * Returns element scroll offsets\n * @param {HTMLElement} element Element to operate on\n * @return {Object} Object with left/top values\n */\nexport function getScrollLeftTop(element: HTMLElement | null) {\n  const doc = element && getDocumentFromElement(element);\n  let left = 0,\n    top = 0;\n  if (!element || !doc) {\n    return { left, top };\n  }\n  let elementLoop: HTMLElement | Document | ShadowRoot = element;\n  const docElement = doc.documentElement,\n    body = doc.body || {\n      scrollLeft: 0,\n      scrollTop: 0,\n    };\n  // While loop checks (and then sets element to) .parentNode OR .host\n  //  to account for ShadowDOM. We still want to traverse up out of ShadowDOM,\n  //  but the .parentNode of a root ShadowDOM node will always be null, instead\n  //  it should be accessed through .host. See http://stackoverflow.com/a/24765528/4383938\n  while (\n    elementLoop &&\n    (elementLoop.parentNode || (elementLoop as unknown as ShadowRoot).host)\n  ) {\n    elementLoop = (elementLoop.parentNode ||\n      (elementLoop as unknown as ShadowRoot).host) as\n      | HTMLElement\n      | Document\n      | ShadowRoot;\n    if (elementLoop === doc) {\n      left = body.scrollLeft || docElement.scrollLeft || 0;\n      top = body.scrollTop || docElement.scrollTop || 0;\n    } else {\n      left += (elementLoop as HTMLElement).scrollLeft || 0;\n      top += (elementLoop as HTMLElement).scrollTop || 0;\n    }\n\n    if (\n      elementLoop.nodeType === 1 &&\n      (elementLoop as HTMLElement).style.position === 'fixed'\n    ) {\n      break;\n    }\n  }\n\n  return { left, top };\n}\n\nexport const getDocumentFromElement = (el: HTMLElement) =>\n  el.ownerDocument || null;\n\nexport const getWindowFromElement = (el: HTMLElement) =>\n  el.ownerDocument?.defaultView || null;\n","import { NONE } from '../../constants';\nimport type { TSize } from '../../typedefs';\nimport {\n  getDocumentFromElement,\n  getWindowFromElement,\n  getScrollLeftTop,\n} from '../../util/dom_misc';\n\nexport const setCanvasDimensions = (\n  el: HTMLCanvasElement,\n  ctx: CanvasRenderingContext2D,\n  { width, height }: TSize,\n  retinaScaling = 1,\n) => {\n  el.width = width;\n  el.height = height;\n  if (retinaScaling > 1) {\n    el.setAttribute('width', (width * retinaScaling).toString());\n    el.setAttribute('height', (height * retinaScaling).toString());\n    ctx.scale(retinaScaling, retinaScaling);\n  }\n};\n\nexport type CSSDimensions = {\n  width: number | string;\n  height: number | string;\n};\n\nexport const setCSSDimensions = (\n  el: HTMLElement,\n  { width, height }: Partial<CSSDimensions>,\n) => {\n  width && (el.style.width = typeof width === 'number' ? `${width}px` : width);\n  height &&\n    (el.style.height = typeof height === 'number' ? `${height}px` : height);\n};\n\n/**\n * Returns offset for a given element\n * @param {HTMLElement} element Element to get offset for\n * @return {Object} Object with \"left\" and \"top\" properties\n */\nexport function getElementOffset(element: HTMLElement) {\n  const doc = element && getDocumentFromElement(element),\n    offset = { left: 0, top: 0 };\n\n  if (!doc) {\n    return offset;\n  }\n  const elemStyle: CSSStyleDeclaration =\n    getWindowFromElement(element)?.getComputedStyle(element, null) ||\n    ({} as CSSStyleDeclaration);\n  offset.left += parseInt(elemStyle.borderLeftWidth, 10) || 0;\n  offset.top += parseInt(elemStyle.borderTopWidth, 10) || 0;\n  offset.left += parseInt(elemStyle.paddingLeft, 10) || 0;\n  offset.top += parseInt(elemStyle.paddingTop, 10) || 0;\n\n  let box = { left: 0, top: 0 };\n\n  const docElem = doc.documentElement;\n  if (typeof element.getBoundingClientRect !== 'undefined') {\n    box = element.getBoundingClientRect();\n  }\n\n  const scrollLeftTop = getScrollLeftTop(element);\n\n  return {\n    left:\n      box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,\n    top: box.top + scrollLeftTop.top - (docElem.clientTop || 0) + offset.top,\n  };\n}\n\n/**\n * Makes element unselectable\n * @param {HTMLElement} element Element to make unselectable\n * @return {HTMLElement} Element that was passed in\n */\nexport function makeElementUnselectable(element: HTMLElement) {\n  if (typeof element.onselectstart !== 'undefined') {\n    element.onselectstart = () => false;\n  }\n  element.style.userSelect = NONE;\n  return element;\n}\n","import { getEnv, getFabricDocument } from '../../env';\nimport type { TSize } from '../../typedefs';\nimport type { CSSDimensions } from './util';\nimport { setCSSDimensions, getElementOffset } from './util';\nimport { createCanvasElement, isHTMLCanvas } from '../../util/misc/dom';\nimport { setCanvasDimensions } from './util';\nimport { FabricError } from '../../util/internals/console';\n\nexport type CanvasItem = {\n  el: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n};\n\nexport class StaticCanvasDOMManager {\n  /**\n   * Keeps a copy of the canvas style before setting retina scaling and other potions\n   * in order to return it to original state on dispose\n   * @type string\n   */\n  private _originalCanvasStyle?: string;\n\n  lower: CanvasItem;\n\n  constructor(arg0?: string | HTMLCanvasElement) {\n    const el = this.createLowerCanvas(arg0);\n    this.lower = { el, ctx: el.getContext('2d')! };\n  }\n\n  protected createLowerCanvas(arg0?: HTMLCanvasElement | string) {\n    // canvasEl === 'HTMLCanvasElement' does not work on jsdom/node\n    const el = isHTMLCanvas(arg0)\n      ? arg0\n      : (arg0 &&\n          (getFabricDocument().getElementById(arg0) as HTMLCanvasElement)) ||\n        createCanvasElement();\n    if (el.hasAttribute('data-fabric')) {\n      throw new FabricError(\n        'Trying to initialize a canvas that has already been initialized. Did you forget to dispose the canvas?',\n      );\n    }\n    this._originalCanvasStyle = el.style.cssText;\n    el.setAttribute('data-fabric', 'main');\n    el.classList.add('lower-canvas');\n    return el;\n  }\n\n  cleanupDOM({ width, height }: TSize) {\n    const { el } = this.lower;\n    // restore canvas style and attributes\n    el.classList.remove('lower-canvas');\n    el.removeAttribute('data-fabric');\n    // restore canvas size to original size in case retina scaling was applied\n    el.setAttribute('width', `${width}`);\n    el.setAttribute('height', `${height}`);\n    el.style.cssText = this._originalCanvasStyle || '';\n    this._originalCanvasStyle = undefined;\n  }\n\n  setDimensions(size: TSize, retinaScaling: number) {\n    const { el, ctx } = this.lower;\n    setCanvasDimensions(el, ctx, size, retinaScaling);\n  }\n\n  setCSSDimensions(size: Partial<CSSDimensions>) {\n    setCSSDimensions(this.lower.el, size);\n  }\n\n  /**\n   * Calculates canvas element offset relative to the document\n   */\n  calcOffset() {\n    return getElementOffset(this.lower.el);\n  }\n\n  dispose() {\n    getEnv().dispose(this.lower.el);\n    // @ts-expect-error disposing\n    delete this.lower;\n  }\n}\n","import { iMatrix } from '../constants';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TFiller, TMat2D, TOptions } from '../typedefs';\n\ninterface CanvasDrawableOptions {\n  /**\n   * if set to false background image is not affected by viewport transform\n   * @since 1.6.3\n   * @type Boolean\n   * @todo we should really find a different way to do this\n   * @default\n   */\n  backgroundVpt: boolean;\n\n  /**\n   * Background color of canvas instance.\n   * @type {(String|TFiller)}\n   * @default\n   */\n  backgroundColor: TFiller | string;\n\n  /**\n   * Background image of canvas instance.\n   * since 2.4.0 image caching is active, please when putting an image as background, add to the\n   * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\n   * vale. As an alternative you can disable image objectCaching\n   * @type FabricObject\n   * @default\n   */\n  backgroundImage?: FabricObject;\n\n  /**\n   * if set to false overlay image is not affected by viewport transform\n   * @since 1.6.3\n   * @type Boolean\n   * @todo we should really find a different way to do this\n   * @default\n   */\n  overlayVpt: boolean;\n\n  /**\n   * Overlay color of canvas instance.\n   * @since 1.3.9\n   * @type {(String|TFiller)}\n   * @default\n   */\n  overlayColor: TFiller | string;\n\n  /**\n   * Overlay image of canvas instance.\n   * since 2.4.0 image caching is active, please when putting an image as overlay, add to the\n   * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\n   * vale. As an alternative you can disable image objectCaching\n   * @type FabricObject\n   * @default\n   */\n  overlayImage?: FabricObject;\n}\n\ninterface CanvasRenderingOptions {\n  /**\n   * Indicates whether {@link StaticCanvas#add}, {@link StaticCanvas#insertAt} and {@link StaticCanvas#remove},\n   * {@link StaticCanvas#moveTo}, {@link StaticCanvas#clear} and many more, should also re-render canvas.\n   * Disabling this option will not give a performance boost when adding/removing a lot of objects to/from canvas at once\n   * since the renders are queued and executed one per frame.\n   * Disabling is suggested anyway and managing the renders of the app manually is not a big effort ( canvas.requestRenderAll() )\n   * Left default to true to do not break documentation and old app, fiddles.\n   * @type Boolean\n   * @default\n   */\n  renderOnAddRemove: boolean;\n\n  /**\n   * Based on vptCoords and object.aCoords, skip rendering of objects that\n   * are not included in current viewport.\n   * May greatly help in applications with crowded canvas and use of zoom/pan\n   * If One of the corner of the bounding box of the object is on the canvas\n   * the objects get rendered.\n   * @type Boolean\n   * @default true\n   */\n  skipOffscreen: boolean;\n\n  /**\n   * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens\n   * @type Boolean\n   * @default\n   */\n  enableRetinaScaling: boolean;\n\n  /**\n   * Indicates whether this canvas will use image smoothing, this is on by default in browsers\n   * @type Boolean\n   * @default\n   */\n  imageSmoothingEnabled: boolean;\n\n  /**\n   * a fabricObject that, without stroke define a clipping area with their shape. filled in black\n   * the clipPath object gets used when the canvas has rendered, and the context is placed in the\n   * top left corner of the canvas.\n   * clipPath will clip away controls, if you do not want this to happen use controlsAboveOverlay = true\n   * @type FabricObject\n   */\n  clipPath?: FabricObject;\n}\n\nexport interface CanvasExportOptions {\n  /**\n   * Indicates whether toObject/toDatalessObject should include default values\n   * if set to false, takes precedence over the object value.\n   * @type Boolean\n   * @default\n   */\n  includeDefaultValues: boolean;\n\n  /**\n   * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,\n   * a zoomed canvas will then produce zoomed SVG output.\n   * @type Boolean\n   * @default\n   */\n  svgViewportTransformation: boolean;\n}\n\nexport interface StaticCanvasOptions\n  extends CanvasDrawableOptions,\n    CanvasRenderingOptions,\n    CanvasExportOptions {\n  /**\n   * Width in virtual/logical pixels of the canvas.\n   * The canvas can be larger than width if retina scaling is active\n   * @type number\n   */\n  width: number;\n\n  /**\n   * Height in virtual/logical pixels of the canvas.\n   * The canvas can be taller than width if retina scaling is active\n   * @type height\n   */\n  height: number;\n\n  /**\n   * Indicates whether object controls (borders/controls) are rendered above overlay image\n   * @type Boolean\n   * @default\n   *\n   * @todo move to Canvas\n   */\n  controlsAboveOverlay: boolean;\n\n  /**\n   * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas\n   * It gives PRIORITY to DOM scrolling, it doesn't make it always possible.\n   * If is true, when using a touch event on the canvas, the canvas will scroll if scroll is possible.\n   * If we are in drawing mode or if we are selecting an object the canvas preventDefault and so it won't scroll\n   * @type Boolean\n   * @default\n   *\n   * @todo move to Canvas\n   */\n  allowTouchScrolling: boolean;\n\n  /**\n   * The transformation (a Canvas 2D API transform matrix) which focuses the viewport\n   * @type Array\n   * @example <caption>Default transform</caption>\n   * canvas.viewportTransform = [1, 0, 0, 1, 0, 0];\n   * @example <caption>Scale by 70% and translate toward bottom-right by 50, without skewing</caption>\n   * canvas.viewportTransform = [0.7, 0, 0, 0.7, 50, 50];\n   * @default\n   */\n  viewportTransform: TMat2D;\n}\n\nexport const staticCanvasDefaults: TOptions<StaticCanvasOptions> = {\n  backgroundVpt: true,\n  backgroundColor: '',\n  overlayVpt: true,\n  overlayColor: '',\n\n  includeDefaultValues: true,\n  svgViewportTransformation: true,\n\n  renderOnAddRemove: true,\n  skipOffscreen: true,\n  enableRetinaScaling: true,\n  imageSmoothingEnabled: true,\n\n  /**\n   * @todo move to Canvas\n   */\n  controlsAboveOverlay: false,\n  /**\n   * @todo move to Canvas\n   */\n  allowTouchScrolling: false,\n\n  viewportTransform: [...iMatrix],\n};\n","import { config } from '../config';\nimport { CENTER, VERSION } from '../constants';\nimport type { CanvasEvents, StaticCanvasEvents } from '../EventTypeDefs';\nimport type { Gradient } from '../gradient/Gradient';\nimport { createCollectionMixin, isCollection } from '../Collection';\nimport { CommonMethods } from '../CommonMethods';\nimport type { Pattern } from '../Pattern';\nimport { Point } from '../Point';\nimport type { TCachedFabricObject } from '../shapes/Object/Object';\nimport type {\n  Abortable,\n  Constructor,\n  TCornerPoint,\n  TDataUrlOptions,\n  TFiller,\n  TMat2D,\n  TSize,\n  TSVGReviver,\n  TToCanvasElementOptions,\n  TValidToObjectMethod,\n  TOptions,\n} from '../typedefs';\nimport {\n  cancelAnimFrame,\n  requestAnimFrame,\n} from '../util/animation/AnimationFrameProvider';\nimport { runningAnimations } from '../util/animation/AnimationRegistry';\nimport { uid } from '../util/internals/uid';\nimport { createCanvasElementFor, toBlob, toDataURL } from '../util/misc/dom';\nimport { invertTransform, transformPoint } from '../util/misc/matrix';\nimport type { EnlivenObjectOptions } from '../util/misc/objectEnlive';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n} from '../util/misc/objectEnlive';\nimport { pick } from '../util/misc/pick';\nimport { matrixToSVG } from '../util/misc/svgParsing';\nimport { toFixed } from '../util/misc/toFixed';\nimport { isFiller, isPattern, isTextObject } from '../util/typeAssertions';\nimport { StaticCanvasDOMManager } from './DOMManagers/StaticCanvasDOMManager';\nimport type { CSSDimensions } from './DOMManagers/util';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { StaticCanvasOptions } from './StaticCanvasOptions';\nimport { staticCanvasDefaults } from './StaticCanvasOptions';\nimport { log, FabricError } from '../util/internals/console';\nimport { getDevicePixelRatio } from '../env';\n\n/**\n * Having both options in TCanvasSizeOptions set to true transform the call in a calcOffset\n * Better try to restrict with types to avoid confusion.\n */\nexport type TCanvasSizeOptions =\n  | {\n      backstoreOnly?: true;\n      cssOnly?: false;\n    }\n  | {\n      backstoreOnly?: false;\n      cssOnly?: true;\n    };\n\nexport type TSVGExportOptions = {\n  suppressPreamble?: boolean;\n  viewBox?: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n  encoding?: 'UTF-8'; // test Encoding type and see what happens\n  width?: string;\n  height?: string;\n  reviver?: TSVGReviver;\n};\n\n/**\n * Static canvas class\n * @see {@link http://fabricjs.com/static_canvas|StaticCanvas demo}\n * @fires before:render\n * @fires after:render\n * @fires canvas:cleared\n * @fires object:added\n * @fires object:removed\n */\n// TODO: fix `EventSpec` inheritance https://github.com/microsoft/TypeScript/issues/26154#issuecomment-1366616260\nexport class StaticCanvas<\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    EventSpec extends StaticCanvasEvents = StaticCanvasEvents,\n  >\n  extends createCollectionMixin(CommonMethods<CanvasEvents>)\n  implements StaticCanvasOptions\n{\n  declare width: number;\n  declare height: number;\n\n  // background\n  declare backgroundVpt: boolean;\n  declare backgroundColor: TFiller | string;\n  declare backgroundImage?: FabricObject;\n  // overlay\n  declare overlayVpt: boolean;\n  declare overlayColor: TFiller | string;\n  declare overlayImage?: FabricObject;\n\n  declare clipPath?: FabricObject;\n\n  declare includeDefaultValues: boolean;\n\n  // rendering config\n  declare renderOnAddRemove: boolean;\n  declare skipOffscreen: boolean;\n  declare enableRetinaScaling: boolean;\n  declare imageSmoothingEnabled: boolean;\n\n  /**\n   * @todo move to Canvas\n   */\n  declare controlsAboveOverlay: boolean;\n\n  /**\n   * @todo move to Canvas\n   */\n  declare allowTouchScrolling: boolean;\n\n  declare viewportTransform: TMat2D;\n\n  /**\n   * The viewport bounding box in scene plane coordinates, see {@link calcViewportBoundaries}\n   */\n  declare vptCoords: TCornerPoint;\n\n  /**\n   * A reference to the canvas actual HTMLCanvasElement.\n   * Can be use to read the raw pixels, but never write or manipulate\n   * @type HTMLCanvasElement\n   */\n  get lowerCanvasEl() {\n    return this.elements.lower?.el;\n  }\n\n  get contextContainer() {\n    return this.elements.lower?.ctx;\n  }\n\n  /**\n   * If true the Canvas is in the process or has been disposed/destroyed.\n   * No more rendering operation will be executed on this canvas.\n   * @type boolean\n   */\n  declare destroyed?: boolean;\n\n  /**\n   * Started the process of disposing but not done yet.\n   * WIll likely complete the render cycle already scheduled but stopping adding more.\n   * @type boolean\n   */\n  declare disposed?: boolean;\n\n  declare _offset: { left: number; top: number };\n  protected declare hasLostContext: boolean;\n  protected declare nextRenderHandle: number;\n\n  declare elements: StaticCanvasDOMManager;\n\n  /**\n   * When true control drawing is skipped.\n   * This boolean is used to avoid toDataURL to export controls.\n   * Usage of this boolean to build up other flows and features is not supported\n   * @type Boolean\n   * @default false\n   */\n  protected declare skipControlsDrawing: boolean;\n\n  static ownDefaults = staticCanvasDefaults;\n\n  // reference to\n  protected declare __cleanupTask?: {\n    (): void;\n    kill: (reason?: any) => void;\n  };\n\n  static getDefaults(): Record<string, any> {\n    return StaticCanvas.ownDefaults;\n  }\n\n  constructor(\n    el?: string | HTMLCanvasElement,\n    options: TOptions<StaticCanvasOptions> = {},\n  ) {\n    super();\n    Object.assign(\n      this,\n      (this.constructor as typeof StaticCanvas).getDefaults(),\n    );\n    this.set(options);\n    this.initElements(el);\n    this._setDimensionsImpl({\n      width: this.width || this.elements.lower.el.width || 0,\n      height: this.height || this.elements.lower.el.height || 0,\n    });\n    this.skipControlsDrawing = false;\n    this.viewportTransform = [...this.viewportTransform];\n    this.calcViewportBoundaries();\n  }\n\n  protected initElements(el?: string | HTMLCanvasElement) {\n    this.elements = new StaticCanvasDOMManager(el);\n  }\n\n  add(...objects: FabricObject[]) {\n    const size = super.add(...objects);\n    objects.length > 0 && this.renderOnAddRemove && this.requestRenderAll();\n    return size;\n  }\n\n  insertAt(index: number, ...objects: FabricObject[]) {\n    const size = super.insertAt(index, ...objects);\n    objects.length > 0 && this.renderOnAddRemove && this.requestRenderAll();\n    return size;\n  }\n\n  remove(...objects: FabricObject[]) {\n    const removed = super.remove(...objects);\n    removed.length > 0 && this.renderOnAddRemove && this.requestRenderAll();\n    return removed;\n  }\n\n  _onObjectAdded(obj: FabricObject) {\n    if (obj.canvas && (obj.canvas as StaticCanvas) !== this) {\n      log(\n        'warn',\n        'Canvas is trying to add an object that belongs to a different canvas.\\n' +\n          'Resulting to default behavior: removing object from previous canvas and adding to new canvas',\n      );\n      obj.canvas.remove(obj);\n    }\n    obj._set('canvas', this);\n    obj.setCoords();\n    this.fire('object:added', { target: obj });\n    obj.fire('added', { target: this });\n  }\n\n  _onObjectRemoved(obj: FabricObject) {\n    obj._set('canvas', undefined);\n    this.fire('object:removed', { target: obj });\n    obj.fire('removed', { target: this });\n  }\n\n  _onStackOrderChanged() {\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * @private\n   * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n   * @return {Number} retinaScaling if applied, otherwise 1;\n   */\n  getRetinaScaling() {\n    return this.enableRetinaScaling ? getDevicePixelRatio() : 1;\n  }\n\n  /**\n   * Calculates canvas element offset relative to the document\n   * This method is also attached as \"resize\" event handler of window\n   */\n  calcOffset() {\n    return (this._offset = this.elements.calcOffset());\n  }\n\n  /**\n   * Returns canvas width (in px)\n   * @return {Number}\n   */\n  getWidth(): number {\n    return this.width;\n  }\n\n  /**\n   * Returns canvas height (in px)\n   * @return {Number}\n   */\n  getHeight(): number {\n    return this.height;\n  }\n\n  /**\n   * Sets width of this canvas instance\n   * @param {Number|String} value                         Value to set width to\n   * @param {Object}        [options]                     Options object\n   * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n   * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n   * @deprecated will be removed in 7.0\n   */\n  setWidth(\n    value: TSize['width'],\n    options?: { backstoreOnly?: true; cssOnly?: false },\n  ): void;\n  setWidth(\n    value: CSSDimensions['width'],\n    options?: { cssOnly?: true; backstoreOnly?: false },\n  ): void;\n  setWidth(value: number, options?: never) {\n    return this.setDimensions({ width: value }, options);\n  }\n\n  /**s\n   * Sets height of this canvas instance\n   * @param {Number|String} value                         Value to set height to\n   * @param {Object}        [options]                     Options object\n   * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n   * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n   * @deprecated will be removed in 7.0\n   */\n  setHeight(\n    value: TSize['height'],\n    options?: { backstoreOnly?: true; cssOnly?: false },\n  ): void;\n  setHeight(\n    value: CSSDimensions['height'],\n    options?: { cssOnly?: true; backstoreOnly?: false },\n  ): void;\n  setHeight(value: CSSDimensions['height'], options?: never) {\n    return this.setDimensions({ height: value }, options);\n  }\n\n  /**\n   * Internal use only\n   * @protected\n   */\n  protected _setDimensionsImpl(\n    dimensions: Partial<TSize | CSSDimensions>,\n    { cssOnly = false, backstoreOnly = false }: TCanvasSizeOptions = {},\n  ) {\n    if (!cssOnly) {\n      const size = {\n        width: this.width,\n        height: this.height,\n        ...(dimensions as Partial<TSize>),\n      };\n      this.elements.setDimensions(size, this.getRetinaScaling());\n      this.hasLostContext = true;\n      this.width = size.width;\n      this.height = size.height;\n    }\n    if (!backstoreOnly) {\n      this.elements.setCSSDimensions(dimensions);\n    }\n\n    this.calcOffset();\n  }\n\n  /**\n   * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)\n   * @param {Object}        dimensions                    Object with width/height properties\n   * @param {Number|String} [dimensions.width]            Width of canvas element\n   * @param {Number|String} [dimensions.height]           Height of canvas element\n   * @param {Object}        [options]                     Options object\n   * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n   * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n   */\n  setDimensions(\n    dimensions: Partial<CSSDimensions>,\n    options?: { cssOnly?: true; backstoreOnly?: false },\n  ): void;\n  setDimensions(\n    dimensions: Partial<TSize>,\n    options?: { backstoreOnly?: true; cssOnly?: false },\n  ): void;\n  setDimensions(dimensions: Partial<TSize>, options?: never): void;\n  setDimensions(\n    dimensions: Partial<TSize | CSSDimensions>,\n    options?: TCanvasSizeOptions,\n  ) {\n    this._setDimensionsImpl(dimensions, options);\n    if (!options || !options.cssOnly) {\n      this.requestRenderAll();\n    }\n  }\n\n  /**\n   * Returns canvas zoom level\n   * @return {Number}\n   */\n  getZoom() {\n    return this.viewportTransform[0];\n  }\n\n  /**\n   * Sets viewport transformation of this canvas instance\n   * @param {Array} vpt a Canvas 2D API transform matrix\n   */\n  setViewportTransform(vpt: TMat2D) {\n    this.viewportTransform = vpt;\n    this.calcViewportBoundaries();\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * Sets zoom level of this canvas instance, the zoom centered around point\n   * meaning that following zoom to point with the same point will have the visual\n   * effect of the zoom originating from that point. The point won't move.\n   * It has nothing to do with canvas center or visual center of the viewport.\n   * @param {Point} point to zoom with respect to\n   * @param {Number} value to set zoom to, less than 1 zooms out\n   */\n  zoomToPoint(point: Point, value: number) {\n    // TODO: just change the scale, preserve other transformations\n    const before = point,\n      vpt: TMat2D = [...this.viewportTransform];\n    const newPoint = transformPoint(point, invertTransform(vpt));\n    vpt[0] = value;\n    vpt[3] = value;\n    const after = transformPoint(newPoint, vpt);\n    vpt[4] += before.x - after.x;\n    vpt[5] += before.y - after.y;\n    this.setViewportTransform(vpt);\n  }\n\n  /**\n   * Sets zoom level of this canvas instance\n   * @param {Number} value to set zoom to, less than 1 zooms out\n   */\n  setZoom(value: number) {\n    this.zoomToPoint(new Point(0, 0), value);\n  }\n\n  /**\n   * Pan viewport so as to place point at top left corner of canvas\n   * @param {Point} point to move to\n   */\n  absolutePan(point: Point) {\n    const vpt: TMat2D = [...this.viewportTransform];\n    vpt[4] = -point.x;\n    vpt[5] = -point.y;\n    return this.setViewportTransform(vpt);\n  }\n\n  /**\n   * Pans viewpoint relatively\n   * @param {Point} point (position vector) to move by\n   */\n  relativePan(point: Point) {\n    return this.absolutePan(\n      new Point(\n        -point.x - this.viewportTransform[4],\n        -point.y - this.viewportTransform[5],\n      ),\n    );\n  }\n\n  /**\n   * Returns &lt;canvas> element corresponding to this instance\n   * @return {HTMLCanvasElement}\n   */\n  getElement(): HTMLCanvasElement {\n    return this.elements.lower.el;\n  }\n\n  /**\n   * Clears specified context of canvas element\n   * @param {CanvasRenderingContext2D} ctx Context to clear\n   */\n  clearContext(ctx: CanvasRenderingContext2D) {\n    ctx.clearRect(0, 0, this.width, this.height);\n  }\n\n  /**\n   * Returns context of canvas where objects are drawn\n   * @return {CanvasRenderingContext2D}\n   */\n  getContext(): CanvasRenderingContext2D {\n    return this.elements.lower.ctx;\n  }\n\n  /**\n   * Clears all contexts (background, main, top) of an instance\n   */\n  clear() {\n    this.remove(...this.getObjects());\n    this.backgroundImage = undefined;\n    this.overlayImage = undefined;\n    this.backgroundColor = '';\n    this.overlayColor = '';\n    this.clearContext(this.getContext());\n    this.fire('canvas:cleared');\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * Renders the canvas\n   */\n  renderAll() {\n    this.cancelRequestedRender();\n    if (this.destroyed) {\n      return;\n    }\n    this.renderCanvas(this.getContext(), this._objects);\n  }\n\n  /**\n   * Function created to be instance bound at initialization\n   * used in requestAnimationFrame rendering\n   * Let the fabricJS call it. If you call it manually you could have more\n   * animationFrame stacking on to of each other\n   * for an imperative rendering, use canvas.renderAll\n   * @private\n   */\n  renderAndReset() {\n    this.nextRenderHandle = 0;\n    this.renderAll();\n  }\n\n  /**\n   * Append a renderAll request to next animation frame.\n   * unless one is already in progress, in that case nothing is done\n   * a boolean flag will avoid appending more.\n   */\n  requestRenderAll() {\n    if (!this.nextRenderHandle && !this.disposed && !this.destroyed) {\n      this.nextRenderHandle = requestAnimFrame(() => this.renderAndReset());\n    }\n  }\n\n  /**\n   * Calculate the position of the 4 corner of canvas with current viewportTransform.\n   * helps to determinate when an object is in the current rendering viewport\n   */\n  calcViewportBoundaries(): TCornerPoint {\n    const width = this.width,\n      height = this.height,\n      iVpt = invertTransform(this.viewportTransform),\n      a = transformPoint({ x: 0, y: 0 }, iVpt),\n      b = transformPoint({ x: width, y: height }, iVpt),\n      // we don't support vpt flipping\n      // but the code is robust enough to mostly work with flipping\n      min = a.min(b),\n      max = a.max(b);\n    return (this.vptCoords = {\n      tl: min,\n      tr: new Point(max.x, min.y),\n      bl: new Point(min.x, max.y),\n      br: max,\n    });\n  }\n\n  cancelRequestedRender() {\n    if (this.nextRenderHandle) {\n      cancelAnimFrame(this.nextRenderHandle);\n      this.nextRenderHandle = 0;\n    }\n  }\n\n  drawControls(_ctx: CanvasRenderingContext2D) {\n    // Static canvas has no controls\n  }\n\n  /**\n   * Renders background, objects, overlay and controls.\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {Array} objects to render\n   */\n  renderCanvas(ctx: CanvasRenderingContext2D, objects: FabricObject[]) {\n    if (this.destroyed) {\n      return;\n    }\n\n    const v = this.viewportTransform,\n      path = this.clipPath;\n    this.calcViewportBoundaries();\n    this.clearContext(ctx);\n    ctx.imageSmoothingEnabled = this.imageSmoothingEnabled;\n    // @ts-expect-error node-canvas stuff\n    ctx.patternQuality = 'best';\n    this.fire('before:render', { ctx });\n    this._renderBackground(ctx);\n\n    ctx.save();\n    //apply viewport transform once for all rendering process\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n    this._renderObjects(ctx, objects);\n    ctx.restore();\n    if (!this.controlsAboveOverlay && !this.skipControlsDrawing) {\n      this.drawControls(ctx);\n    }\n    if (path) {\n      path._set('canvas', this);\n      // needed to setup a couple of variables\n      // todo migrate to the newer one\n      path.shouldCache();\n      path._transformDone = true;\n      (path as TCachedFabricObject).renderCache({ forClipping: true });\n      this.drawClipPathOnCanvas(ctx, path as TCachedFabricObject);\n    }\n    this._renderOverlay(ctx);\n    if (this.controlsAboveOverlay && !this.skipControlsDrawing) {\n      this.drawControls(ctx);\n    }\n    this.fire('after:render', { ctx });\n\n    if (this.__cleanupTask) {\n      this.__cleanupTask();\n      this.__cleanupTask = undefined;\n    }\n  }\n\n  /**\n   * Paint the cached clipPath on the lowerCanvasEl\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawClipPathOnCanvas(\n    ctx: CanvasRenderingContext2D,\n    clipPath: TCachedFabricObject,\n  ) {\n    const v = this.viewportTransform;\n    ctx.save();\n    ctx.transform(...v);\n    // DEBUG: uncomment this line, comment the following\n    // ctx.globalAlpha = 0.4;\n    ctx.globalCompositeOperation = 'destination-in';\n    clipPath.transform(ctx);\n    ctx.scale(1 / clipPath.zoomX, 1 / clipPath.zoomY);\n    ctx.drawImage(\n      clipPath._cacheCanvas,\n      -clipPath.cacheTranslationX,\n      -clipPath.cacheTranslationY,\n    );\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Array} objects to render\n   */\n  _renderObjects(ctx: CanvasRenderingContext2D, objects: FabricObject[]) {\n    for (let i = 0, len = objects.length; i < len; ++i) {\n      objects[i] && objects[i].render(ctx);\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {string} property 'background' or 'overlay'\n   */\n  _renderBackgroundOrOverlay(\n    ctx: CanvasRenderingContext2D,\n    property: 'background' | 'overlay',\n  ) {\n    const fill = this[`${property}Color`],\n      object = this[`${property}Image`],\n      v = this.viewportTransform,\n      needsVpt = this[`${property}Vpt`];\n    if (!fill && !object) {\n      return;\n    }\n    const isAFiller = isFiller(fill);\n    if (fill) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.moveTo(0, 0);\n      ctx.lineTo(this.width, 0);\n      ctx.lineTo(this.width, this.height);\n      ctx.lineTo(0, this.height);\n      ctx.closePath();\n      ctx.fillStyle = isAFiller ? fill.toLive(ctx /* this */)! : fill;\n      if (needsVpt) {\n        ctx.transform(...v);\n      }\n      if (isAFiller) {\n        ctx.transform(1, 0, 0, 1, fill.offsetX || 0, fill.offsetY || 0);\n        const m = ((fill as Gradient<'linear'>).gradientTransform ||\n          (fill as Pattern).patternTransform) as TMat2D;\n        m && ctx.transform(...m);\n      }\n      ctx.fill();\n      ctx.restore();\n    }\n    if (object) {\n      ctx.save();\n      const { skipOffscreen } = this;\n      // if the object doesn't move with the viewport,\n      // the offscreen concept does not apply;\n      this.skipOffscreen = needsVpt;\n      if (needsVpt) {\n        ctx.transform(...v);\n      }\n      object.render(ctx);\n      this.skipOffscreen = skipOffscreen;\n      ctx.restore();\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderBackground(ctx: CanvasRenderingContext2D) {\n    this._renderBackgroundOrOverlay(ctx, 'background');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderOverlay(ctx: CanvasRenderingContext2D) {\n    this._renderBackgroundOrOverlay(ctx, 'overlay');\n  }\n\n  /**\n   * Returns coordinates of a center of canvas.\n   * Returned value is an object with top and left properties\n   * @return {Object} object with \"top\" and \"left\" number values\n   * @deprecated migrate to `getCenterPoint`\n   */\n  getCenter() {\n    return {\n      top: this.height / 2,\n      left: this.width / 2,\n    };\n  }\n\n  /**\n   * Returns coordinates of a center of canvas.\n   * @return {Point}\n   */\n  getCenterPoint() {\n    return new Point(this.width / 2, this.height / 2);\n  }\n\n  /**\n   * Centers object horizontally in the canvas\n   */\n  centerObjectH(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(this.getCenterPoint().x, object.getCenterPoint().y),\n    );\n  }\n\n  /**\n   * Centers object vertically in the canvas\n   * @param {FabricObject} object Object to center vertically\n   */\n  centerObjectV(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(object.getCenterPoint().x, this.getCenterPoint().y),\n    );\n  }\n\n  /**\n   * Centers object vertically and horizontally in the canvas\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  centerObject(object: FabricObject) {\n    return this._centerObject(object, this.getCenterPoint());\n  }\n\n  /**\n   * Centers object vertically and horizontally in the viewport\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  viewportCenterObject(object: FabricObject) {\n    return this._centerObject(object, this.getVpCenter());\n  }\n\n  /**\n   * Centers object horizontally in the viewport, object.top is unchanged\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  viewportCenterObjectH(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(this.getVpCenter().x, object.getCenterPoint().y),\n    );\n  }\n\n  /**\n   * Centers object Vertically in the viewport, object.top is unchanged\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  viewportCenterObjectV(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(object.getCenterPoint().x, this.getVpCenter().y),\n    );\n  }\n\n  /**\n   * Calculate the point in canvas that correspond to the center of actual viewport.\n   * @return {Point} vpCenter, viewport center\n   */\n  getVpCenter(): Point {\n    return transformPoint(\n      this.getCenterPoint(),\n      invertTransform(this.viewportTransform),\n    );\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object Object to center\n   * @param {Point} center Center point\n   */\n  _centerObject(object: FabricObject, center: Point) {\n    object.setXY(center, CENTER, CENTER);\n    object.setCoords();\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * Returns dataless JSON representation of canvas\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {String} json string\n   */\n  toDatalessJSON(propertiesToInclude?: string[]) {\n    return this.toDatalessObject(propertiesToInclude);\n  }\n\n  /**\n   * Returns object representation of canvas\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject(propertiesToInclude?: string[]) {\n    return this._toObjectMethod('toObject', propertiesToInclude);\n  }\n\n  /**\n   * Returns Object representation of canvas\n   * this alias is provided because if you call JSON.stringify on an instance,\n   * the toJSON object will be invoked if it exists.\n   * Having a toJSON method means you can do JSON.stringify(myCanvas)\n   * @return {Object} JSON compatible object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\n   * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}\n   * @example <caption>JSON without additional properties</caption>\n   * var json = canvas.toJSON();\n   * @example <caption>JSON with additional properties included</caption>\n   * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY']);\n   * @example <caption>JSON without default values</caption>\n   * var json = canvas.toJSON();\n   */\n  toJSON() {\n    return this.toObject();\n  }\n\n  /**\n   * Returns dataless object representation of canvas\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toDatalessObject(propertiesToInclude?: string[]) {\n    return this._toObjectMethod('toDatalessObject', propertiesToInclude);\n  }\n\n  /**\n   * @private\n   */\n  _toObjectMethod(\n    methodName: TValidToObjectMethod,\n    propertiesToInclude?: string[],\n  ) {\n    const clipPath = this.clipPath;\n    const clipPathData =\n      clipPath && !clipPath.excludeFromExport\n        ? this._toObject(clipPath, methodName, propertiesToInclude)\n        : null;\n    return {\n      version: VERSION,\n      ...pick(this, propertiesToInclude as (keyof this)[]),\n      objects: this._objects\n        .filter((object) => !object.excludeFromExport)\n        .map((instance) =>\n          this._toObject(instance, methodName, propertiesToInclude),\n        ),\n      ...this.__serializeBgOverlay(methodName, propertiesToInclude),\n      ...(clipPathData ? { clipPath: clipPathData } : null),\n    };\n  }\n\n  /**\n   * @private\n   */\n  protected _toObject(\n    instance: FabricObject,\n    methodName: TValidToObjectMethod,\n    propertiesToInclude?: string[],\n  ) {\n    let originalValue;\n\n    if (!this.includeDefaultValues) {\n      originalValue = instance.includeDefaultValues;\n      instance.includeDefaultValues = false;\n    }\n\n    const object = instance[methodName](propertiesToInclude);\n    if (!this.includeDefaultValues) {\n      instance.includeDefaultValues = !!originalValue;\n    }\n    return object;\n  }\n\n  /**\n   * @private\n   */\n  __serializeBgOverlay(\n    methodName: TValidToObjectMethod,\n    propertiesToInclude?: string[],\n  ) {\n    const data: any = {},\n      bgImage = this.backgroundImage,\n      overlayImage = this.overlayImage,\n      bgColor = this.backgroundColor,\n      overlayColor = this.overlayColor;\n\n    if (isFiller(bgColor)) {\n      if (!bgColor.excludeFromExport) {\n        data.background = bgColor.toObject(propertiesToInclude);\n      }\n    } else if (bgColor) {\n      data.background = bgColor;\n    }\n\n    if (isFiller(overlayColor)) {\n      if (!overlayColor.excludeFromExport) {\n        data.overlay = overlayColor.toObject(propertiesToInclude);\n      }\n    } else if (overlayColor) {\n      data.overlay = overlayColor;\n    }\n\n    if (bgImage && !bgImage.excludeFromExport) {\n      data.backgroundImage = this._toObject(\n        bgImage,\n        methodName,\n        propertiesToInclude,\n      );\n    }\n    if (overlayImage && !overlayImage.excludeFromExport) {\n      data.overlayImage = this._toObject(\n        overlayImage,\n        methodName,\n        propertiesToInclude,\n      );\n    }\n\n    return data;\n  }\n\n  /* _TO_SVG_START_ */\n\n  declare svgViewportTransformation: boolean;\n\n  /**\n   * Returns SVG representation of canvas\n   * @function\n   * @param {Object} [options] Options object for SVG output\n   * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included\n   * @param {Object} [options.viewBox] SVG viewbox object\n   * @param {Number} [options.viewBox.x] x-coordinate of viewbox\n   * @param {Number} [options.viewBox.y] y-coordinate of viewbox\n   * @param {Number} [options.viewBox.width] Width of viewbox\n   * @param {Number} [options.viewBox.height] Height of viewbox\n   * @param {String} [options.encoding=UTF-8] Encoding of SVG output\n   * @param {String} [options.width] desired width of svg with or without units\n   * @param {String} [options.height] desired height of svg with or without units\n   * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.\n   * @return {String} SVG string\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\n   * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}\n   * @example <caption>Normal SVG output</caption>\n   * var svg = canvas.toSVG();\n   * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>\n   * var svg = canvas.toSVG({suppressPreamble: true});\n   * @example <caption>SVG output with viewBox attribute</caption>\n   * var svg = canvas.toSVG({\n   *   viewBox: {\n   *     x: 100,\n   *     y: 100,\n   *     width: 200,\n   *     height: 300\n   *   }\n   * });\n   * @example <caption>SVG output with different encoding (default: UTF-8)</caption>\n   * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});\n   * @example <caption>Modify SVG output with reviver function</caption>\n   * var svg = canvas.toSVG(null, function(svg) {\n   *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');\n   * });\n   */\n  toSVG(options: TSVGExportOptions = {}, reviver?: TSVGReviver) {\n    options.reviver = reviver;\n    const markup: string[] = [];\n\n    this._setSVGPreamble(markup, options);\n    this._setSVGHeader(markup, options);\n    if (this.clipPath) {\n      markup.push(`<g clip-path=\"url(#${this.clipPath.clipPathId})\" >\\n`);\n    }\n    this._setSVGBgOverlayColor(markup, 'background');\n    this._setSVGBgOverlayImage(markup, 'backgroundImage', reviver);\n    this._setSVGObjects(markup, reviver);\n    if (this.clipPath) {\n      markup.push('</g>\\n');\n    }\n    this._setSVGBgOverlayColor(markup, 'overlay');\n    this._setSVGBgOverlayImage(markup, 'overlayImage', reviver);\n\n    markup.push('</svg>');\n\n    return markup.join('');\n  }\n\n  /**\n   * @private\n   */\n  _setSVGPreamble(markup: string[], options: TSVGExportOptions): void {\n    if (options.suppressPreamble) {\n      return;\n    }\n    markup.push(\n      '<?xml version=\"1.0\" encoding=\"',\n      options.encoding || 'UTF-8',\n      '\" standalone=\"no\" ?>\\n',\n      '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ',\n      '\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n',\n    );\n  }\n\n  /**\n   * @private\n   */\n  _setSVGHeader(markup: string[], options: TSVGExportOptions): void {\n    const width = options.width || `${this.width}`,\n      height = options.height || `${this.height}`,\n      NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS,\n      optViewBox = options.viewBox;\n    let viewBox: string;\n    if (optViewBox) {\n      viewBox = `viewBox=\"${optViewBox.x} ${optViewBox.y} ${optViewBox.width} ${optViewBox.height}\" `;\n    } else if (this.svgViewportTransformation) {\n      const vpt = this.viewportTransform;\n      viewBox = `viewBox=\"${toFixed(\n        -vpt[4] / vpt[0],\n        NUM_FRACTION_DIGITS,\n      )} ${toFixed(-vpt[5] / vpt[3], NUM_FRACTION_DIGITS)} ${toFixed(\n        this.width / vpt[0],\n        NUM_FRACTION_DIGITS,\n      )} ${toFixed(this.height / vpt[3], NUM_FRACTION_DIGITS)}\" `;\n    } else {\n      viewBox = `viewBox=\"0 0 ${this.width} ${this.height}\" `;\n    }\n\n    markup.push(\n      '<svg ',\n      'xmlns=\"http://www.w3.org/2000/svg\" ',\n      'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ',\n      'version=\"1.1\" ',\n      'width=\"',\n      width,\n      '\" ',\n      'height=\"',\n      height,\n      '\" ',\n      viewBox,\n      'xml:space=\"preserve\">\\n',\n      '<desc>Created with Fabric.js ',\n      VERSION,\n      '</desc>\\n',\n      '<defs>\\n',\n      this.createSVGFontFacesMarkup(),\n      this.createSVGRefElementsMarkup(),\n      this.createSVGClipPathMarkup(options),\n      '</defs>\\n',\n    );\n  }\n\n  createSVGClipPathMarkup(options: TSVGExportOptions): string {\n    const clipPath = this.clipPath;\n    if (clipPath) {\n      clipPath.clipPathId = `CLIPPATH_${uid()}`;\n      return `<clipPath id=\"${clipPath.clipPathId}\" >\\n${clipPath.toClipPathSVG(\n        options.reviver,\n      )}</clipPath>\\n`;\n    }\n    return '';\n  }\n\n  /**\n   * Creates markup containing SVG referenced elements like patterns, gradients etc.\n   * @return {String}\n   */\n  createSVGRefElementsMarkup(): string {\n    return (['background', 'overlay'] as const)\n      .map((prop) => {\n        const fill = this[`${prop}Color`];\n        if (isFiller(fill)) {\n          const shouldTransform = this[`${prop}Vpt`],\n            vpt = this.viewportTransform,\n            object = {\n              // otherwise circular dependency\n              isType: () => false,\n              width: this.width / (shouldTransform ? vpt[0] : 1),\n              height: this.height / (shouldTransform ? vpt[3] : 1),\n            };\n          return fill.toSVG(object as FabricObject, {\n            additionalTransform: shouldTransform ? matrixToSVG(vpt) : '',\n          });\n        }\n      })\n      .join('');\n  }\n\n  /**\n   * Creates markup containing SVG font faces,\n   * font URLs for font faces must be collected by developers\n   * and are not extracted from the DOM by fabricjs\n   * @param {Array} objects Array of fabric objects\n   * @return {String}\n   */\n  createSVGFontFacesMarkup(): string {\n    const objects: FabricObject[] = [],\n      fontList: Record<string, boolean> = {},\n      fontPaths = config.fontPaths;\n\n    this._objects.forEach(function add(object) {\n      objects.push(object);\n      if (isCollection(object)) {\n        object._objects.forEach(add);\n      }\n    });\n\n    objects.forEach((obj) => {\n      if (!isTextObject(obj)) {\n        return;\n      }\n      const { styles, fontFamily } = obj;\n      if (fontList[fontFamily] || !fontPaths[fontFamily]) {\n        return;\n      }\n      fontList[fontFamily] = true;\n      if (!styles) {\n        return;\n      }\n      Object.values(styles).forEach((styleRow) => {\n        Object.values(styleRow).forEach(({ fontFamily = '' }) => {\n          if (!fontList[fontFamily] && fontPaths[fontFamily]) {\n            fontList[fontFamily] = true;\n          }\n        });\n      });\n    });\n\n    const fontListMarkup = Object.keys(fontList)\n      .map(\n        (fontFamily) =>\n          `\\t\\t@font-face {\\n\\t\\t\\tfont-family: '${fontFamily}';\\n\\t\\t\\tsrc: url('${fontPaths[fontFamily]}');\\n\\t\\t}\\n`,\n      )\n      .join('');\n\n    if (fontListMarkup) {\n      return `\\t<style type=\"text/css\"><![CDATA[\\n${fontListMarkup}]]></style>\\n`;\n    }\n    return '';\n  }\n\n  /**\n   * @private\n   */\n  _setSVGObjects(markup: string[], reviver?: TSVGReviver) {\n    this.forEachObject((fabricObject) => {\n      if (fabricObject.excludeFromExport) {\n        return;\n      }\n      this._setSVGObject(markup, fabricObject, reviver);\n    });\n  }\n\n  /**\n   * This is its own function because the Canvas ( non static ) requires extra code here\n   * @private\n   */\n  _setSVGObject(\n    markup: string[],\n    instance: FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    markup.push(instance.toSVG(reviver));\n  }\n\n  /**\n   * @private\n   */\n  _setSVGBgOverlayImage(\n    markup: string[],\n    property: 'overlayImage' | 'backgroundImage',\n    reviver?: TSVGReviver,\n  ) {\n    const bgOrOverlay = this[property];\n    if (bgOrOverlay && !bgOrOverlay.excludeFromExport && bgOrOverlay.toSVG) {\n      markup.push(bgOrOverlay.toSVG(reviver));\n    }\n  }\n\n  /**\n   * @TODO this seems to handle patterns but fail at gradients.\n   * @private\n   */\n  _setSVGBgOverlayColor(markup: string[], property: 'background' | 'overlay') {\n    const filler = this[`${property}Color`];\n    if (!filler) {\n      return;\n    }\n    if (isFiller(filler)) {\n      const repeat = (filler as Pattern).repeat || '',\n        finalWidth = this.width,\n        finalHeight = this.height,\n        shouldInvert = this[`${property}Vpt`],\n        additionalTransform = shouldInvert\n          ? matrixToSVG(invertTransform(this.viewportTransform))\n          : '';\n      markup.push(\n        `<rect transform=\"${additionalTransform} translate(${finalWidth / 2},${\n          finalHeight / 2\n        })\" x=\"${filler.offsetX - finalWidth / 2}\" y=\"${\n          filler.offsetY - finalHeight / 2\n        }\" width=\"${\n          (repeat === 'repeat-y' || repeat === 'no-repeat') && isPattern(filler)\n            ? (filler.source as HTMLImageElement).width\n            : finalWidth\n        }\" height=\"${\n          (repeat === 'repeat-x' || repeat === 'no-repeat') && isPattern(filler)\n            ? (filler.source as HTMLImageElement).height\n            : finalHeight\n        }\" fill=\"url(#SVGID_${filler.id})\"></rect>\\n`,\n      );\n    } else {\n      markup.push(\n        '<rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" ',\n        'fill=\"',\n        filler,\n        '\"',\n        '></rect>\\n',\n      );\n    }\n  }\n  /* _TO_SVG_END_ */\n\n  /**\n   * Populates canvas with data from the specified JSON.\n   * JSON format must conform to the one of {@link fabric.Canvas#toJSON}\n   *\n   * **IMPORTANT**: It is recommended to abort loading tasks before calling this method to prevent race conditions and unnecessary networking\n   *\n   * @param {String|Object} json JSON string or object\n   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\n   * @param {Object} [options] options\n   * @param {AbortSignal} [options.signal] see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @return {Promise<Canvas | StaticCanvas>} instance\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}\n   * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}\n   * @example <caption>loadFromJSON</caption>\n   * canvas.loadFromJSON(json).then((canvas) => canvas.requestRenderAll());\n   * @example <caption>loadFromJSON with reviver</caption>\n   * canvas.loadFromJSON(json, function(o, object) {\n   *   // `o` = json object\n   *   // `object` = fabric.Object instance\n   *   // ... do some stuff ...\n   * }).then((canvas) => {\n   *   ... canvas is restored, add your code.\n   * });\n   *\n   */\n  loadFromJSON(\n    json: string | Record<string, any>,\n    reviver?: EnlivenObjectOptions['reviver'],\n    { signal }: Abortable = {},\n  ): Promise<this> {\n    if (!json) {\n      return Promise.reject(new FabricError('`json` is undefined'));\n    }\n\n    // parse json if it wasn't already\n    const serialized = typeof json === 'string' ? JSON.parse(json) : json;\n    const {\n      objects = [],\n      backgroundImage,\n      background,\n      overlayImage,\n      overlay,\n      clipPath,\n    } = serialized;\n    const renderOnAddRemove = this.renderOnAddRemove;\n    this.renderOnAddRemove = false;\n\n    return Promise.all([\n      enlivenObjects<FabricObject>(objects, {\n        reviver,\n        signal,\n      }),\n      enlivenObjectEnlivables(\n        {\n          backgroundImage,\n          backgroundColor: background,\n          overlayImage,\n          overlayColor: overlay,\n          clipPath,\n        },\n        { signal },\n      ),\n    ]).then(([enlived, enlivedMap]) => {\n      this.clear();\n      this.add(...enlived);\n      this.set(serialized);\n      this.set(enlivedMap);\n      this.renderOnAddRemove = renderOnAddRemove;\n      return this;\n    });\n  }\n\n  /**\n   * Clones canvas instance\n   * @param {string[]} [properties] Array of properties to include in the cloned canvas and children\n   */\n  clone(properties: string[]) {\n    const data = this.toObject(properties);\n    const canvas = this.cloneWithoutData();\n    return canvas.loadFromJSON(data);\n  }\n\n  /**\n   * Clones canvas instance without cloning existing data.\n   * This essentially copies canvas dimensions since loadFromJSON does not affect canvas size.\n   */\n  cloneWithoutData() {\n    const el = createCanvasElementFor(this);\n    return new (this.constructor as Constructor<this>)(el);\n  }\n\n  /**\n   * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately\n   * @param {Object} [options] Options object\n   * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n   * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n   * @param {Number} [options.multiplier=1] Multiplier to scale by, to have consistent\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 2.0.0\n   * @param {(object: fabric.Object) => boolean} [options.filter] Function to filter objects.\n   * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n   * @see {@link https://jsfiddle.net/xsjua1rd/ demo}\n   * @example <caption>Generate jpeg dataURL with lower quality</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'jpeg',\n   *   quality: 0.8\n   * });\n   * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'png',\n   *   left: 100,\n   *   top: 100,\n   *   width: 200,\n   *   height: 200\n   * });\n   * @example <caption>Generate double scaled png dataURL</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'png',\n   *   multiplier: 2\n   * });\n   * @example <caption>Generate dataURL with objects that overlap a specified object</caption>\n   * var myObject;\n   * var dataURL = canvas.toDataURL({\n   *   filter: (object) => object.isContainedWithinObject(myObject) || object.intersectsWithObject(myObject)\n   * });\n   */\n  toDataURL(options = {} as TDataUrlOptions): string {\n    const {\n      format = 'png',\n      quality = 1,\n      multiplier = 1,\n      enableRetinaScaling = false,\n    } = options;\n    const finalMultiplier =\n      multiplier * (enableRetinaScaling ? this.getRetinaScaling() : 1);\n\n    return toDataURL(\n      this.toCanvasElement(finalMultiplier, options),\n      format,\n      quality,\n    );\n  }\n  toBlob(options = {} as TDataUrlOptions): Promise<Blob | null> {\n    const {\n      format = 'png',\n      quality = 1,\n      multiplier = 1,\n      enableRetinaScaling = false,\n    } = options;\n    const finalMultiplier =\n      multiplier * (enableRetinaScaling ? this.getRetinaScaling() : 1);\n\n    return toBlob(\n      this.toCanvasElement(finalMultiplier, options),\n      format,\n      quality,\n    );\n  }\n\n  /**\n   * Create a new HTMLCanvas element painted with the current canvas content.\n   * No need to resize the actual one or repaint it.\n   * Will transfer object ownership to a new canvas, paint it, and set everything back.\n   * This is an intermediary step used to get to a dataUrl but also it is useful to\n   * create quick image copies of a canvas without passing for the dataUrl string\n   * @param {Number} [multiplier] a zoom factor.\n   * @param {Object} [options] Cropping informations\n   * @param {Number} [options.left] Cropping left offset.\n   * @param {Number} [options.top] Cropping top offset.\n   * @param {Number} [options.width] Cropping width.\n   * @param {Number} [options.height] Cropping height.\n   * @param {(object: fabric.Object) => boolean} [options.filter] Function to filter objects.\n   */\n  toCanvasElement(\n    multiplier = 1,\n    { width, height, left, top, filter } = {} as TToCanvasElementOptions,\n  ): HTMLCanvasElement {\n    const scaledWidth = (width || this.width) * multiplier,\n      scaledHeight = (height || this.height) * multiplier,\n      zoom = this.getZoom(),\n      originalWidth = this.width,\n      originalHeight = this.height,\n      originalSkipControlsDrawing = this.skipControlsDrawing,\n      newZoom = zoom * multiplier,\n      vp = this.viewportTransform,\n      translateX = (vp[4] - (left || 0)) * multiplier,\n      translateY = (vp[5] - (top || 0)) * multiplier,\n      newVp = [newZoom, 0, 0, newZoom, translateX, translateY] as TMat2D,\n      originalRetina = this.enableRetinaScaling,\n      canvasEl = createCanvasElementFor({\n        width: scaledWidth,\n        height: scaledHeight,\n      }),\n      objectsToRender = filter\n        ? this._objects.filter((obj) => filter(obj))\n        : this._objects;\n    this.enableRetinaScaling = false;\n    this.viewportTransform = newVp;\n    this.width = scaledWidth;\n    this.height = scaledHeight;\n    this.skipControlsDrawing = true;\n    this.calcViewportBoundaries();\n    this.renderCanvas(canvasEl.getContext('2d')!, objectsToRender);\n    this.viewportTransform = vp;\n    this.width = originalWidth;\n    this.height = originalHeight;\n    this.calcViewportBoundaries();\n    this.enableRetinaScaling = originalRetina;\n    this.skipControlsDrawing = originalSkipControlsDrawing;\n    return canvasEl;\n  }\n\n  /**\n   * Waits until rendering has settled to destroy the canvas\n   * @returns {Promise<boolean>} a promise resolving to `true` once the canvas has been destroyed or to `false` if the canvas has was already destroyed\n   * @throws if aborted by a consequent call\n   */\n  dispose() {\n    !this.disposed &&\n      this.elements.cleanupDOM({ width: this.width, height: this.height });\n    runningAnimations.cancelByCanvas(this);\n    this.disposed = true;\n    return new Promise<boolean>((resolve, reject) => {\n      const task = () => {\n        this.destroy();\n        resolve(true);\n      };\n      task.kill = reject;\n      if (this.__cleanupTask) {\n        this.__cleanupTask.kill('aborted');\n      }\n\n      if (this.destroyed) {\n        resolve(false);\n      } else if (this.nextRenderHandle) {\n        this.__cleanupTask = task;\n      } else {\n        task();\n      }\n    });\n  }\n\n  /**\n   * Clears the canvas element, disposes objects and frees resources.\n   *\n   * Invoked as part of the **async** operation of {@link dispose}.\n   *\n   * **CAUTION**:\n   *\n   * This method is **UNSAFE**.\n   * You may encounter a race condition using it if there's a requested render.\n   * Call this method only if you are sure rendering has settled.\n   * Consider using {@link dispose} as it is **SAFE**\n   *\n   * @private\n   */\n  destroy() {\n    this.destroyed = true;\n    this.cancelRequestedRender();\n    this.forEachObject((object) => object.dispose());\n    this._objects = [];\n    if (this.backgroundImage) {\n      this.backgroundImage.dispose();\n    }\n    this.backgroundImage = undefined;\n    if (this.overlayImage) {\n      this.overlayImage.dispose();\n    }\n    this.overlayImage = undefined;\n    this.elements.dispose();\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @return {String} string representation of an instance\n   */\n  toString() {\n    return `#<Canvas (${this.complexity()}): { objects: ${\n      this._objects.length\n    } }>`;\n  }\n}\n","import type { TPointerEvent } from '../EventTypeDefs';\nimport { Point } from '../Point';\nimport { getScrollLeftTop } from './dom_misc';\n\nconst touchEvents = ['touchstart', 'touchmove', 'touchend'];\n\nfunction getTouchInfo(event: TouchEvent | MouseEvent): MouseEvent | Touch {\n  const touchProp = (event as TouchEvent).changedTouches;\n  if (touchProp && touchProp[0]) {\n    return touchProp[0];\n  }\n  return event as MouseEvent;\n}\n\nexport const getPointer = (event: TPointerEvent): Point => {\n  const element = event.target as HTMLElement,\n    scroll = getScrollLeftTop(element),\n    _evt = getTouchInfo(event);\n  return new Point(_evt.clientX + scroll.left, _evt.clientY + scroll.top);\n};\n\nexport const isTouchEvent = (event: TPointerEvent) =>\n  touchEvents.includes(event.type) ||\n  (event as PointerEvent).pointerType === 'touch';\n\nexport const stopEvent = (e: Event) => {\n  e.preventDefault();\n  e.stopPropagation();\n};\n","import type { XY } from '../../Point';\nimport type { TBBox } from '../../typedefs';\n\n/**\n * Calculates bounding box (left, top, width, height) from given `points`\n * @param {XY[]} points\n * @return {Object} Object with left, top, width, height properties\n */\nexport const makeBoundingBoxFromPoints = (points: XY[]): TBBox => {\n  let left = 0,\n    top = 0,\n    width = 0,\n    height = 0;\n\n  for (let i = 0, len = points.length; i < len; i++) {\n    const { x, y } = points[i];\n    if (x > width || !i) width = x;\n    if (x < left || !i) left = x;\n    if (y > height || !i) height = y;\n    if (y < top || !i) top = y;\n  }\n\n  return {\n    left,\n    top,\n    width: width - left,\n    height: height - top,\n  };\n};\n","import { Point } from '../../Point';\nimport { CENTER } from '../../constants';\nimport type { FabricObject } from '../../shapes/Object/Object';\nimport type { TMat2D } from '../../typedefs';\nimport { makeBoundingBoxFromPoints } from './boundingBoxFromPoints';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from './matrix';\n\n/**\n * given an object and a transform, apply the inverse transform to the object,\n * this is equivalent to remove from that object that transformation, so that\n * added in a space with the removed transform, the object will be the same as before.\n * Removing from an object a transform that scale by 2 is like scaling it by 1/2.\n * Removing from an object a transform that rotate by 30deg is like rotating by 30deg\n * in the opposite direction.\n * This util is used to add objects inside transformed groups or nested groups.\n * @param {FabricObject} object the object you want to transform\n * @param {TMat2D} transform the destination transform\n */\nexport const removeTransformFromObject = (\n  object: FabricObject,\n  transform: TMat2D,\n) => {\n  const inverted = invertTransform(transform),\n    finalTransform = multiplyTransformMatrices(\n      inverted,\n      object.calcOwnMatrix(),\n    );\n  applyTransformToObject(object, finalTransform);\n};\n\n/**\n * given an object and a transform, apply the transform to the object.\n * this is equivalent to change the space where the object is drawn.\n * Adding to an object a transform that scale by 2 is like scaling it by 2.\n * This is used when removing an object from an active selection for example.\n * @param {FabricObject} object the object you want to transform\n * @param {Array} transform the destination transform\n */\nexport const addTransformToObject = (object: FabricObject, transform: TMat2D) =>\n  applyTransformToObject(\n    object,\n    multiplyTransformMatrices(transform, object.calcOwnMatrix()),\n  );\n\n/**\n * discard an object transform state and apply the one from the matrix.\n * @param {FabricObject} object the object you want to transform\n * @param {Array} transform the destination transform\n */\nexport const applyTransformToObject = (\n  object: FabricObject,\n  transform: TMat2D,\n) => {\n  const { translateX, translateY, scaleX, scaleY, ...otherOptions } =\n      qrDecompose(transform),\n    center = new Point(translateX, translateY);\n  object.flipX = false;\n  object.flipY = false;\n  Object.assign(object, otherOptions);\n  object.set({ scaleX, scaleY });\n  object.setPositionByOrigin(center, CENTER, CENTER);\n};\n/**\n * reset an object transform state to neutral. Top and left are not accounted for\n * @param  {FabricObject} target object to transform\n */\nexport const resetObjectTransform = (target: FabricObject) => {\n  target.scaleX = 1;\n  target.scaleY = 1;\n  target.skewX = 0;\n  target.skewY = 0;\n  target.flipX = false;\n  target.flipY = false;\n  target.rotate(0);\n};\n\n/**\n * Extract Object transform values\n * @param  {FabricObject} target object to read from\n * @return {Object} Components of transform\n */\nexport const saveObjectTransform = (target: FabricObject) => ({\n  scaleX: target.scaleX,\n  scaleY: target.scaleY,\n  skewX: target.skewX,\n  skewY: target.skewY,\n  angle: target.angle,\n  left: target.left,\n  flipX: target.flipX,\n  flipY: target.flipY,\n  top: target.top,\n});\n\n/**\n * given a width and height, return the size of the bounding box\n * that can contains the box with width/height with applied transform.\n * Use to calculate the boxes around objects for controls.\n * @param {Number} width\n * @param {Number} height\n * @param {TMat2D} t\n * @returns {Point} size\n */\nexport const sizeAfterTransform = (\n  width: number,\n  height: number,\n  t: TMat2D,\n) => {\n  const dimX = width / 2,\n    dimY = height / 2,\n    points = [\n      new Point(-dimX, -dimY),\n      new Point(dimX, -dimY),\n      new Point(-dimX, dimY),\n      new Point(dimX, dimY),\n    ].map((p) => p.transform(t)),\n    bbox = makeBoundingBoxFromPoints(points);\n  return new Point(bbox.width, bbox.height);\n};\n","import { iMatrix } from '../../constants';\nimport type { Point } from '../../Point';\nimport type { FabricObject } from '../../shapes/Object/Object';\nimport type { TMat2D } from '../../typedefs';\nimport { invertTransform, multiplyTransformMatrices } from './matrix';\nimport { applyTransformToObject } from './objectTransforms';\n\n/**\n * We are actually looking for the transformation from the destination plane to the source plane (change of basis matrix)\\\n * The object will exist on the destination plane and we want it to seem unchanged by it so we invert the destination matrix (`to`) and then apply the source matrix (`from`)\n * @param [from]\n * @param [to]\n * @returns\n */\nexport const calcPlaneChangeMatrix = (\n  from: TMat2D = iMatrix,\n  to: TMat2D = iMatrix,\n) => multiplyTransformMatrices(invertTransform(to), from);\n\n/**\n * Sends a point from the source coordinate plane to the destination coordinate plane.\\\n * From the canvas/viewer's perspective the point remains unchanged.\n *\n * @example <caption>Send point from canvas plane to group plane</caption>\n * var obj = new Rect({ left: 20, top: 20, width: 60, height: 60, strokeWidth: 0 });\n * var group = new Group([obj], { strokeWidth: 0 });\n * var sentPoint1 = sendPointToPlane(new Point(50, 50), undefined, group.calcTransformMatrix());\n * var sentPoint2 = sendPointToPlane(new Point(50, 50), iMatrix, group.calcTransformMatrix());\n * console.log(sentPoint1, sentPoint2) //  both points print (0,0) which is the center of group\n *\n * @param {Point} point\n * @param {TMat2D} [from] plane matrix containing object. Passing `undefined` is equivalent to passing the identity matrix, which means `point` exists in the canvas coordinate plane.\n * @param {TMat2D} [to] destination plane matrix to contain object. Passing `undefined` means `point` should be sent to the canvas coordinate plane.\n * @returns {Point} transformed point\n */\nexport const sendPointToPlane = (\n  point: Point,\n  from: TMat2D = iMatrix,\n  to: TMat2D = iMatrix,\n): Point => point.transform(calcPlaneChangeMatrix(from, to));\n\n/**\n * See {@link sendPointToPlane}\n */\nexport const sendVectorToPlane = (\n  point: Point,\n  from: TMat2D = iMatrix,\n  to: TMat2D = iMatrix,\n): Point => point.transform(calcPlaneChangeMatrix(from, to), true);\n\n/**\n *\n * A util that abstracts applying transform to objects.\\\n * Sends `object` to the destination coordinate plane by applying the relevant transformations.\\\n * Changes the space/plane where `object` is drawn.\\\n * From the canvas/viewer's perspective `object` remains unchanged.\n *\n * @example <caption>Move clip path from one object to another while preserving it's appearance as viewed by canvas/viewer</caption>\n * let obj, obj2;\n * let clipPath = new Circle({ radius: 50 });\n * obj.clipPath = clipPath;\n * // render\n * sendObjectToPlane(clipPath, obj.calcTransformMatrix(), obj2.calcTransformMatrix());\n * obj.clipPath = undefined;\n * obj2.clipPath = clipPath;\n * // render, clipPath now clips obj2 but seems unchanged from the eyes of the viewer\n *\n * @example <caption>Clip an object's clip path with an existing object</caption>\n * let obj, existingObj;\n * let clipPath = new Circle({ radius: 50 });\n * obj.clipPath = clipPath;\n * let transformTo = multiplyTransformMatrices(obj.calcTransformMatrix(), clipPath.calcTransformMatrix());\n * sendObjectToPlane(existingObj, existingObj.group?.calcTransformMatrix(), transformTo);\n * clipPath.clipPath = existingObj;\n *\n * @param {FabricObject} object\n * @param {Matrix} [from] plane matrix containing object. Passing `undefined` is equivalent to passing the identity matrix, which means `object` is a direct child of canvas.\n * @param {Matrix} [to] destination plane matrix to contain object. Passing `undefined` means `object` should be sent to the canvas coordinate plane.\n * @returns {Matrix} the transform matrix that was applied to `object`\n */\nexport const sendObjectToPlane = (\n  object: FabricObject,\n  from?: TMat2D,\n  to?: TMat2D,\n): TMat2D => {\n  const t = calcPlaneChangeMatrix(from, to);\n  applyTransformToObject(\n    object,\n    multiplyTransformMatrices(t, object.calcOwnMatrix()),\n  );\n  return t;\n};\n","import type {\n  ObjectModificationEvents,\n  TModificationEvents,\n} from '../EventTypeDefs';\n\nexport const fireEvent = (\n  eventName: TModificationEvents,\n  options: ObjectModificationEvents[typeof eventName],\n) => {\n  const {\n    transform: { target },\n  } = options;\n  target.canvas?.fire(`object:${eventName}`, {\n    ...options,\n    target,\n  });\n  target.fire(eventName, options);\n};\n","import type { TOriginX, TOriginY } from '../../typedefs';\n\nconst originOffset = {\n  left: -0.5,\n  top: -0.5,\n  center: 0,\n  bottom: 0.5,\n  right: 0.5,\n};\n/**\n * Resolves origin value relative to center\n * @private\n * @param {TOriginX | TOriginY} originValue originX / originY\n * @returns number\n */\n\nexport const resolveOrigin = (\n  originValue: TOriginX | TOriginY | number,\n): number =>\n  typeof originValue === 'string'\n    ? originOffset[originValue]\n    : originValue - 0.5;\n","import type {\n  TPointerEvent,\n  Transform,\n  TransformAction,\n  BasicTransformEvent,\n} from '../EventTypeDefs';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { Point } from '../Point';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TOriginX, TOriginY } from '../typedefs';\nimport {\n  degreesToRadians,\n  radiansToDegrees,\n} from '../util/misc/radiansDegreesConversion';\nimport type { Control } from './Control';\nimport { CENTER } from '../constants';\n\nexport const NOT_ALLOWED_CURSOR = 'not-allowed';\n\n/**\n * @param {Boolean} alreadySelected true if target is already selected\n * @param {String} corner a string representing the corner ml, mr, tl ...\n * @param {Event} e Event object\n * @param {FabricObject} [target] inserted back to help overriding. Unused\n */\nexport const getActionFromCorner = (\n  alreadySelected: boolean,\n  corner: string | undefined,\n  e: TPointerEvent,\n  target: FabricObject,\n) => {\n  if (!corner || !alreadySelected) {\n    return 'drag';\n  }\n  const control = target.controls[corner];\n  return control.getActionName(e, control, target);\n};\n\n/**\n * Checks if transform is centered\n * @param {Object} transform transform data\n * @return {Boolean} true if transform is centered\n */\nexport function isTransformCentered(transform: Transform) {\n  return (\n    resolveOrigin(transform.originX) === resolveOrigin(CENTER) &&\n    resolveOrigin(transform.originY) === resolveOrigin(CENTER)\n  );\n}\n\nexport function invertOrigin(origin: TOriginX | TOriginY) {\n  return -resolveOrigin(origin) + 0.5;\n}\n\nexport const isLocked = (\n  target: FabricObject,\n  lockingKey:\n    | 'lockMovementX'\n    | 'lockMovementY'\n    | 'lockRotation'\n    | 'lockScalingX'\n    | 'lockScalingY'\n    | 'lockSkewingX'\n    | 'lockSkewingY'\n    | 'lockScalingFlip',\n) => target[lockingKey];\n\nexport const commonEventInfo: TransformAction<\n  Transform,\n  BasicTransformEvent\n> = (eventData, transform, x, y) => {\n  return {\n    e: eventData,\n    transform,\n    pointer: new Point(x, y),\n  };\n};\n\n/**\n * Combine control position and object angle to find the control direction compared\n * to the object center.\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n * @param {Control} control the control class\n * @return {Number} 0 - 7 a quadrant number\n */\nexport function findCornerQuadrant(\n  fabricObject: FabricObject,\n  control: Control,\n): number {\n  //  angle is relative to canvas plane\n  const angle = fabricObject.getTotalAngle(),\n    cornerAngle =\n      angle + radiansToDegrees(Math.atan2(control.y, control.x)) + 360;\n  return Math.round((cornerAngle % 360) / 45);\n}\n\n/**\n * @returns the normalized point (rotated relative to center) in local coordinates\n */\nfunction normalizePoint(\n  target: FabricObject,\n  point: Point,\n  originX: TOriginX,\n  originY: TOriginY,\n): Point {\n  const center = target.getRelativeCenterPoint(),\n    p =\n      typeof originX !== 'undefined' && typeof originY !== 'undefined'\n        ? target.translateToGivenOrigin(\n            center,\n            CENTER,\n            CENTER,\n            originX,\n            originY,\n          )\n        : new Point(target.left, target.top),\n    p2 = target.angle\n      ? point.rotate(-degreesToRadians(target.angle), center)\n      : point;\n  return p2.subtract(p);\n}\n\n/**\n * Transforms a point to the offset from the given origin\n * @param {Object} transform\n * @param {String} originX\n * @param {String} originY\n * @param {number} x\n * @param {number} y\n * @return {Fabric.Point} the normalized point\n */\nexport function getLocalPoint(\n  { target, corner }: Transform,\n  originX: TOriginX,\n  originY: TOriginY,\n  x: number,\n  y: number,\n) {\n  const control = target.controls[corner],\n    zoom = target.canvas?.getZoom() || 1,\n    padding = target.padding / zoom,\n    localPoint = normalizePoint(target, new Point(x, y), originX, originY);\n  if (localPoint.x >= padding) {\n    localPoint.x -= padding;\n  }\n  if (localPoint.x <= -padding) {\n    localPoint.x += padding;\n  }\n  if (localPoint.y >= padding) {\n    localPoint.y -= padding;\n  }\n  if (localPoint.y <= padding) {\n    localPoint.y += padding;\n  }\n  localPoint.x -= control.offsetX;\n  localPoint.y -= control.offsetY;\n  return localPoint;\n}\n","import type { TransformActionHandler } from '../EventTypeDefs';\nimport { LEFT, TOP, MOVING } from '../constants';\nimport { fireEvent } from './fireEvent';\nimport { commonEventInfo, isLocked } from './util';\n\n/**\n * Action handler\n * @private\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if the translation occurred\n */\nexport const dragHandler: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  const { target, offsetX, offsetY } = transform,\n    newLeft = x - offsetX,\n    newTop = y - offsetY,\n    moveX = !isLocked(target, 'lockMovementX') && target.left !== newLeft,\n    moveY = !isLocked(target, 'lockMovementY') && target.top !== newTop;\n  moveX && target.set(LEFT, newLeft);\n  moveY && target.set(TOP, newTop);\n  if (moveX || moveY) {\n    fireEvent(MOVING, commonEventInfo(eventData, transform, x, y));\n  }\n  return moveX || moveY;\n};\n","import type { TSVGReviver } from '../../typedefs';\nimport { uid } from '../../util/internals/uid';\nimport { colorPropToSVG, matrixToSVG } from '../../util/misc/svgParsing';\nimport { FILL, NONE, STROKE } from '../../constants';\nimport type { FabricObject } from './FabricObject';\nimport { isFiller } from '../../util/typeAssertions';\n\nexport class FabricObjectSVGExportMixin {\n  /**\n   * When an object is being exported as SVG as a clippath, a reference inside the SVG is needed.\n   * This reference is a UID in the fabric namespace and is temporary stored here.\n   * @type {String}\n   */\n  declare clipPathId?: string;\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Boolean} skipShadow a boolean to skip shadow filter output\n   * @return {String}\n   */\n  getSvgStyles(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    skipShadow?: boolean,\n  ) {\n    const fillRule = this.fillRule ? this.fillRule : 'nonzero',\n      strokeWidth = this.strokeWidth ? this.strokeWidth : '0',\n      strokeDashArray = this.strokeDashArray\n        ? this.strokeDashArray.join(' ')\n        : NONE,\n      strokeDashOffset = this.strokeDashOffset ? this.strokeDashOffset : '0',\n      strokeLineCap = this.strokeLineCap ? this.strokeLineCap : 'butt',\n      strokeLineJoin = this.strokeLineJoin ? this.strokeLineJoin : 'miter',\n      strokeMiterLimit = this.strokeMiterLimit ? this.strokeMiterLimit : '4',\n      opacity = typeof this.opacity !== 'undefined' ? this.opacity : '1',\n      visibility = this.visible ? '' : ' visibility: hidden;',\n      filter = skipShadow ? '' : this.getSvgFilter(),\n      fill = colorPropToSVG(FILL, this.fill),\n      stroke = colorPropToSVG(STROKE, this.stroke);\n\n    return [\n      stroke,\n      'stroke-width: ',\n      strokeWidth,\n      '; ',\n      'stroke-dasharray: ',\n      strokeDashArray,\n      '; ',\n      'stroke-linecap: ',\n      strokeLineCap,\n      '; ',\n      'stroke-dashoffset: ',\n      strokeDashOffset,\n      '; ',\n      'stroke-linejoin: ',\n      strokeLineJoin,\n      '; ',\n      'stroke-miterlimit: ',\n      strokeMiterLimit,\n      '; ',\n      fill,\n      'fill-rule: ',\n      fillRule,\n      '; ',\n      'opacity: ',\n      opacity,\n      ';',\n      filter,\n      visibility,\n    ].join('');\n  }\n\n  /**\n   * Returns filter for svg shadow\n   * @return {String}\n   */\n  getSvgFilter(this: FabricObjectSVGExportMixin & FabricObject) {\n    return this.shadow ? `filter: url(#SVGID_${this.shadow.id});` : '';\n  }\n\n  /**\n   * Returns id attribute for svg output\n   * @return {String}\n   */\n  getSvgCommons(\n    this: FabricObjectSVGExportMixin & FabricObject & { id?: string },\n  ) {\n    return [\n      this.id ? `id=\"${this.id}\" ` : '',\n      this.clipPath\n        ? `clip-path=\"url(#${\n            (this.clipPath as FabricObjectSVGExportMixin & FabricObject)\n              .clipPathId\n          })\" `\n        : '',\n    ].join('');\n  }\n\n  /**\n   * Returns transform-string for svg-export\n   * @param {Boolean} use the full transform or the single object one.\n   * @return {String}\n   */\n  getSvgTransform(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    full?: boolean,\n    additionalTransform = '',\n  ) {\n    const transform = full ? this.calcTransformMatrix() : this.calcOwnMatrix(),\n      svgTransform = `transform=\"${matrixToSVG(transform)}`;\n    return `${svgTransform}${additionalTransform}\" `;\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * This function is implemented in each subclass\n   * This is just because typescript otherwise cryies all the time\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG(_reviver?: TSVGReviver): string[] {\n    return [''];\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @param {TSVGReviver} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  toSVG(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    return this._createBaseSVGMarkup(this._toSVG(reviver), {\n      reviver,\n    });\n  }\n\n  /**\n   * Returns svg clipPath representation of an instance\n   * @param {TSVGReviver} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  toClipPathSVG(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    return (\n      '\\t' +\n      this._createBaseClipPathSVGMarkup(this._toSVG(reviver), {\n        reviver,\n      })\n    );\n  }\n\n  /**\n   * @private\n   */\n  _createBaseClipPathSVGMarkup(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    objectMarkup: string[],\n    {\n      reviver,\n      additionalTransform = '',\n    }: { reviver?: TSVGReviver; additionalTransform?: string } = {},\n  ) {\n    const commonPieces = [\n        this.getSvgTransform(true, additionalTransform),\n        this.getSvgCommons(),\n      ].join(''),\n      // insert commons in the markup, style and svgCommons\n      index = objectMarkup.indexOf('COMMON_PARTS');\n    objectMarkup[index] = commonPieces;\n    return reviver ? reviver(objectMarkup.join('')) : objectMarkup.join('');\n  }\n\n  /**\n   * @private\n   */\n  _createBaseSVGMarkup(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    objectMarkup: string[],\n    {\n      noStyle,\n      reviver,\n      withShadow,\n      additionalTransform,\n    }: {\n      noStyle?: boolean;\n      reviver?: TSVGReviver;\n      withShadow?: boolean;\n      additionalTransform?: string;\n    } = {},\n  ): string {\n    const styleInfo = noStyle ? '' : `style=\"${this.getSvgStyles()}\" `,\n      shadowInfo = withShadow ? `style=\"${this.getSvgFilter()}\" ` : '',\n      clipPath = this.clipPath as FabricObjectSVGExportMixin & FabricObject,\n      vectorEffect = this.strokeUniform\n        ? 'vector-effect=\"non-scaling-stroke\" '\n        : '',\n      absoluteClipPath = clipPath && clipPath.absolutePositioned,\n      stroke = this.stroke,\n      fill = this.fill,\n      shadow = this.shadow,\n      markup = [],\n      // insert commons in the markup, style and svgCommons\n      index = objectMarkup.indexOf('COMMON_PARTS');\n    let clipPathMarkup;\n    if (clipPath) {\n      clipPath.clipPathId = `CLIPPATH_${uid()}`;\n      clipPathMarkup = `<clipPath id=\"${\n        clipPath.clipPathId\n      }\" >\\n${clipPath.toClipPathSVG(reviver)}</clipPath>\\n`;\n    }\n    if (absoluteClipPath) {\n      markup.push('<g ', shadowInfo, this.getSvgCommons(), ' >\\n');\n    }\n    markup.push(\n      '<g ',\n      this.getSvgTransform(false),\n      !absoluteClipPath ? shadowInfo + this.getSvgCommons() : '',\n      ' >\\n',\n    );\n    const commonPieces = [\n      styleInfo,\n      vectorEffect,\n      noStyle ? '' : this.addPaintOrder(),\n      ' ',\n      additionalTransform ? `transform=\"${additionalTransform}\" ` : '',\n    ].join('');\n    objectMarkup[index] = commonPieces;\n    if (isFiller(fill)) {\n      markup.push(fill.toSVG(this));\n    }\n    if (isFiller(stroke)) {\n      markup.push(stroke.toSVG(this));\n    }\n    if (shadow) {\n      markup.push(shadow.toSVG(this));\n    }\n    if (clipPath) {\n      markup.push(clipPathMarkup);\n    }\n    markup.push(objectMarkup.join(''));\n    markup.push('</g>\\n');\n    absoluteClipPath && markup.push('</g>\\n');\n    return reviver ? reviver(markup.join('')) : markup.join('');\n  }\n\n  addPaintOrder(this: FabricObjectSVGExportMixin & FabricObject) {\n    return this.paintFirst !== FILL ? ` paint-order=\"${this.paintFirst}\" ` : '';\n  }\n}\n","export function getSvgRegex(arr: string[]) {\n  return new RegExp('^(' + arr.join('|') + ')\\\\b', 'i');\n}\n","import { getSvgRegex } from './getSvgRegex';\nimport { LEFT, TOP } from '../constants';\n\nexport const reNum = String.raw`(?:[-+]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][-+]?\\d+)?)`;\n\nexport const svgNS = 'http://www.w3.org/2000/svg';\n\nexport const reFontDeclaration = new RegExp(\n  '(normal|italic)?\\\\s*(normal|small-caps)?\\\\s*' +\n    '(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\\\s*(' +\n    reNum +\n    '(?:px|cm|mm|em|pt|pc|in)*)(?:\\\\/(normal|' +\n    reNum +\n    '))?\\\\s+(.*)',\n);\n\nexport const svgValidTagNames = [\n    'path',\n    'circle',\n    'polygon',\n    'polyline',\n    'ellipse',\n    'rect',\n    'line',\n    'image',\n    'text',\n  ],\n  svgViewBoxElements = ['symbol', 'image', 'marker', 'pattern', 'view', 'svg'],\n  svgInvalidAncestors = [\n    'pattern',\n    'defs',\n    'symbol',\n    'metadata',\n    'clipPath',\n    'mask',\n    'desc',\n  ],\n  svgValidParents = ['symbol', 'g', 'a', 'svg', 'clipPath', 'defs'],\n  attributesMap = {\n    cx: LEFT,\n    x: LEFT,\n    r: 'radius',\n    cy: TOP,\n    y: TOP,\n    display: 'visible',\n    visibility: 'visible',\n    transform: 'transformMatrix',\n    'fill-opacity': 'fillOpacity',\n    'fill-rule': 'fillRule',\n    'font-family': 'fontFamily',\n    'font-size': 'fontSize',\n    'font-style': 'fontStyle',\n    'font-weight': 'fontWeight',\n    'letter-spacing': 'charSpacing',\n    'paint-order': 'paintFirst',\n    'stroke-dasharray': 'strokeDashArray',\n    'stroke-dashoffset': 'strokeDashOffset',\n    'stroke-linecap': 'strokeLineCap',\n    'stroke-linejoin': 'strokeLineJoin',\n    'stroke-miterlimit': 'strokeMiterLimit',\n    'stroke-opacity': 'strokeOpacity',\n    'stroke-width': 'strokeWidth',\n    'text-decoration': 'textDecoration',\n    'text-anchor': 'textAnchor',\n    opacity: 'opacity',\n    'clip-path': 'clipPath',\n    'clip-rule': 'clipRule',\n    'vector-effect': 'strokeUniform',\n    'image-rendering': 'imageSmoothing',\n  },\n  fSize = 'font-size',\n  cPath = 'clip-path';\n\nexport const svgValidTagNamesRegEx = getSvgRegex(svgValidTagNames);\n\nexport const svgViewBoxElementsRegEx = getSvgRegex(svgViewBoxElements);\n\nexport const svgValidParentsRegEx = getSvgRegex(svgValidParents);\n\n// http://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute\n// matches, e.g.: +14.56e-12, etc.\nexport const reViewBoxAttrValue = new RegExp(\n  '^' +\n    '\\\\s*(' +\n    reNum +\n    '+)\\\\s*,?' +\n    '\\\\s*(' +\n    reNum +\n    '+)\\\\s*,?' +\n    '\\\\s*(' +\n    reNum +\n    '+)\\\\s*,?' +\n    '\\\\s*(' +\n    reNum +\n    '+)\\\\s*' +\n    '$',\n);\n","import type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport type { TRadian } from '../../typedefs';\n\nconst unitVectorX = new Point(1, 0);\nconst zero = new Point();\n\n/**\n * Rotates `vector` with `radians`\n * @param {Point} vector The vector to rotate (x and y)\n * @param {Number} radians The radians of the angle for the rotation\n * @return {Point} The new rotated point\n */\nexport const rotateVector = (vector: Point, radians: TRadian) =>\n  vector.rotate(radians);\n\n/**\n * Creates a vector from points represented as a point\n *\n * @param {Point} from\n * @param {Point} to\n * @returns {Point} vector\n */\nexport const createVector = (from: XY, to: XY): Point =>\n  new Point(to).subtract(from);\n\n/**\n * return the magnitude of a vector\n * @return {number}\n */\nexport const magnitude = (point: Point) => point.distanceFrom(zero);\n\n/**\n * Calculates the angle between 2 vectors\n * @param {Point} a\n * @param {Point} b\n * @returns the angle in radians from `a` to `b`\n */\nexport const calcAngleBetweenVectors = (a: Point, b: Point): TRadian =>\n  Math.atan2(crossProduct(a, b), dotProduct(a, b)) as TRadian;\n\n/**\n * Calculates the angle between the x axis and the vector\n * @param {Point} v\n * @returns the angle in radians of `v`\n */\nexport const calcVectorRotation = (v: Point) =>\n  calcAngleBetweenVectors(unitVectorX, v);\n\n/**\n * @param {Point} v\n * @returns {Point} vector representing the unit vector pointing to the direction of `v`\n */\nexport const getUnitVector = (v: Point): Point =>\n  v.eq(zero) ? v : v.scalarDivide(magnitude(v));\n\n/**\n * @param {Point} v\n * @param {Boolean} [counterClockwise] the direction of the orthogonal vector, defaults to `true`\n * @returns {Point} the unit orthogonal vector\n */\nexport const getOrthonormalVector = (\n  v: Point,\n  counterClockwise = true,\n): Point =>\n  getUnitVector(new Point(-v.y, v.x).scalarMultiply(counterClockwise ? 1 : -1));\n\n/**\n * Cross product of two vectors in 2D\n * @param {Point} a\n * @param {Point} b\n * @returns {number} the magnitude of Z vector\n */\nexport const crossProduct = (a: Point, b: Point): number =>\n  a.x * b.y - a.y * b.x;\n\n/**\n * Dot product of two vectors in 2D\n * @param {Point} a\n * @param {Point} b\n * @returns {number}\n */\nexport const dotProduct = (a: Point, b: Point): number => a.x * b.x + a.y * b.y;\n\n/**\n * Checks if the vector is between two others. It is considered\n * to be inside when the vector to be tested is between the\n * initial vector and the final vector (included) in a counterclockwise direction.\n * @param {Point} t vector to be tested\n * @param {Point} a initial vector\n * @param {Point} b final vector\n * @returns {boolean} true if the vector is among the others\n */\nexport const isBetweenVectors = (t: Point, a: Point, b: Point): boolean => {\n  if (t.eq(a) || t.eq(b)) return true;\n  const AxB = crossProduct(a, b),\n    AxT = crossProduct(a, t),\n    BxT = crossProduct(b, t);\n  return AxB >= 0 ? AxT >= 0 && BxT <= 0 : !(AxT <= 0 && BxT >= 0);\n};\n","import { classRegistry } from './ClassRegistry';\nimport { Color } from './color/Color';\nimport { config } from './config';\nimport { reNum } from './parser/constants';\nimport { Point } from './Point';\nimport type { FabricObject } from './shapes/Object/FabricObject';\nimport type { TClassProperties } from './typedefs';\nimport { uid } from './util/internals/uid';\nimport { pickBy } from './util/misc/pick';\nimport { degreesToRadians } from './util/misc/radiansDegreesConversion';\nimport { toFixed } from './util/misc/toFixed';\nimport { rotateVector } from './util/misc/vectors';\n\n/**\n   * Regex matching shadow offsetX, offsetY and blur (ex: \"2px 2px 10px rgba(0,0,0,0.2)\", \"rgb(0,255,0) 2px 2px\")\n   * - (?:\\s|^): This part captures either a whitespace character (\\s) or the beginning of a line (^). It's non-capturing (due to (?:...)), meaning it doesn't create a capturing group.\n   * - (-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?: This captures the first component of the shadow, which is the horizontal offset. Breaking it down:\n   *   - (-?\\d+): Captures an optional minus sign followed by one or more digits (integer part of the number).\n   *   - (?:\\.\\d*)?: Optionally captures a decimal point followed by zero or more digits (decimal part of the number).\n   *   - (?:px)?: Optionally captures the \"px\" unit.\n   *   - (?:\\s?|$): Captures either an optional whitespace or the end of the line. This whole part is wrapped in a non-capturing group and marked as optional with ?.\n   * - (-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?: Similar to the previous step, this captures the vertical offset.\n\n(\\d+(?:\\.\\d*)?(?:px)?)?: This captures the blur radius. It's similar to the horizontal offset but without the optional minus sign.\n\n(?:\\s+(-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?){0,1}: This captures an optional part for the color. It allows for whitespace followed by a component with an optional minus sign, digits, decimal point, and \"px\" unit.\n\n(?:$|\\s): This captures either the end of the line or a whitespace character. It ensures that the match ends either at the end of the string or with a whitespace character.\n   */\n// eslint-disable-next-line max-len\n\nconst shadowOffsetRegex = '(-?\\\\d+(?:\\\\.\\\\d*)?(?:px)?(?:\\\\s?|$))?';\n\nconst reOffsetsAndBlur = new RegExp(\n  '(?:\\\\s|^)' +\n    shadowOffsetRegex +\n    shadowOffsetRegex +\n    '(' +\n    reNum +\n    '?(?:px)?)?(?:\\\\s?|$)(?:$|\\\\s)',\n);\n\nexport const shadowDefaultValues: Partial<TClassProperties<Shadow>> = {\n  color: 'rgb(0,0,0)',\n  blur: 0,\n  offsetX: 0,\n  offsetY: 0,\n  affectStroke: false,\n  includeDefaultValues: true,\n  nonScaling: false,\n};\n\nexport type SerializedShadowOptions = {\n  color: string;\n  blur: number;\n  offsetX: number;\n  offsetY: number;\n  affectStroke: boolean;\n  nonScaling: boolean;\n  type: string;\n};\n\nexport class Shadow {\n  /**\n   * Shadow color\n   * @type String\n   * @default\n   */\n  declare color: string;\n\n  /**\n   * Shadow blur\n   * @type Number\n   */\n  declare blur: number;\n\n  /**\n   * Shadow horizontal offset\n   * @type Number\n   * @default\n   */\n  declare offsetX: number;\n\n  /**\n   * Shadow vertical offset\n   * @type Number\n   * @default\n   */\n  declare offsetY: number;\n\n  /**\n   * Whether the shadow should affect stroke operations\n   * @type Boolean\n   * @default\n   */\n  declare affectStroke: boolean;\n\n  /**\n   * Indicates whether toObject should include default values\n   * @type Boolean\n   * @default\n   */\n  declare includeDefaultValues: boolean;\n\n  /**\n   * When `false`, the shadow will scale with the object.\n   * When `true`, the shadow's offsetX, offsetY, and blur will not be affected by the object's scale.\n   * default to false\n   * @type Boolean\n   * @default\n   */\n  declare nonScaling: boolean;\n\n  declare id: number;\n\n  static ownDefaults = shadowDefaultValues;\n\n  static type = 'shadow';\n\n  /**\n   * @see {@link http://fabricjs.com/shadows|Shadow demo}\n   * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetY properties or string (e.g. \"rgba(0,0,0,0.2) 2px 2px 10px\")\n   */\n  constructor(options: Partial<TClassProperties<Shadow>>);\n  constructor(svgAttribute: string);\n  constructor(arg0: string | Partial<TClassProperties<Shadow>>) {\n    const options: Partial<TClassProperties<Shadow>> =\n      typeof arg0 === 'string' ? Shadow.parseShadow(arg0) : arg0;\n    Object.assign(this, Shadow.ownDefaults, options);\n    this.id = uid();\n  }\n\n  /**\n   * @param {String} value Shadow value to parse\n   * @return {Object} Shadow object with color, offsetX, offsetY and blur\n   */\n  static parseShadow(value: string) {\n    const shadowStr = value.trim(),\n      [, offsetX = 0, offsetY = 0, blur = 0] = (\n        reOffsetsAndBlur.exec(shadowStr) || []\n      ).map((value) => parseFloat(value) || 0),\n      color = (shadowStr.replace(reOffsetsAndBlur, '') || 'rgb(0,0,0)').trim();\n\n    return {\n      color,\n      offsetX,\n      offsetY,\n      blur,\n    };\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow\n   * @return {String} Returns CSS3 text-shadow declaration\n   */\n  toString() {\n    return [this.offsetX, this.offsetY, this.blur, this.color].join('px ');\n  }\n\n  /**\n   * Returns SVG representation of a shadow\n   * @param {FabricObject} object\n   * @return {String} SVG representation of a shadow\n   */\n  toSVG(object: FabricObject) {\n    const offset = rotateVector(\n        new Point(this.offsetX, this.offsetY),\n        degreesToRadians(-object.angle),\n      ),\n      BLUR_BOX = 20,\n      color = new Color(this.color);\n    let fBoxX = 40,\n      fBoxY = 40;\n\n    if (object.width && object.height) {\n      //http://www.w3.org/TR/SVG/filters.html#FilterEffectsRegion\n      // we add some extra space to filter box to contain the blur ( 20 )\n      fBoxX =\n        toFixed(\n          (Math.abs(offset.x) + this.blur) / object.width,\n          config.NUM_FRACTION_DIGITS,\n        ) *\n          100 +\n        BLUR_BOX;\n      fBoxY =\n        toFixed(\n          (Math.abs(offset.y) + this.blur) / object.height,\n          config.NUM_FRACTION_DIGITS,\n        ) *\n          100 +\n        BLUR_BOX;\n    }\n    if (object.flipX) {\n      offset.x *= -1;\n    }\n    if (object.flipY) {\n      offset.y *= -1;\n    }\n\n    return `<filter id=\"SVGID_${this.id}\" y=\"-${fBoxY}%\" height=\"${\n      100 + 2 * fBoxY\n    }%\" x=\"-${fBoxX}%\" width=\"${\n      100 + 2 * fBoxX\n    }%\" >\\n\\t<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"${toFixed(\n      this.blur ? this.blur / 2 : 0,\n      config.NUM_FRACTION_DIGITS,\n    )}\"></feGaussianBlur>\\n\\t<feOffset dx=\"${toFixed(\n      offset.x,\n      config.NUM_FRACTION_DIGITS,\n    )}\" dy=\"${toFixed(\n      offset.y,\n      config.NUM_FRACTION_DIGITS,\n    )}\" result=\"oBlur\" ></feOffset>\\n\\t<feFlood flood-color=\"${color.toRgb()}\" flood-opacity=\"${color.getAlpha()}\"/>\\n\\t<feComposite in2=\"oBlur\" operator=\"in\" />\\n\\t<feMerge>\\n\\t\\t<feMergeNode></feMergeNode>\\n\\t\\t<feMergeNode in=\"SourceGraphic\"></feMergeNode>\\n\\t</feMerge>\\n</filter>\\n`;\n  }\n\n  /**\n   * Returns object representation of a shadow\n   * @return {Object} Object representation of a shadow instance\n   */\n  toObject() {\n    const data: SerializedShadowOptions = {\n      color: this.color,\n      blur: this.blur,\n      offsetX: this.offsetX,\n      offsetY: this.offsetY,\n      affectStroke: this.affectStroke,\n      nonScaling: this.nonScaling,\n      type: (this.constructor as typeof Shadow).type,\n    };\n    const defaults = Shadow.ownDefaults as SerializedShadowOptions;\n    return !this.includeDefaultValues\n      ? pickBy(data, (value, key) => value !== defaults[key])\n      : data;\n  }\n\n  static async fromObject(options: Partial<TClassProperties<Shadow>>) {\n    return new this(options);\n  }\n}\n\nclassRegistry.setClass(Shadow, 'shadow');\n","export const capValue = (min: number, value: number, max: number) =>\n  Math.max(min, Math.min(value, max));\n","import {\n  TOP,\n  LEFT,\n  SCALE_Y,\n  SCALE_X,\n  SKEW_X,\n  SKEW_Y,\n  FILL,\n  STROKE,\n} from '../../constants';\nimport type { TClassProperties } from '../../typedefs';\nimport type { InteractiveFabricObject } from './InteractiveObject';\nimport type { FabricObject } from './Object';\n\nexport const stateProperties = [\n  TOP,\n  LEFT,\n  SCALE_X,\n  SCALE_Y,\n  'flipX',\n  'flipY',\n  'originX',\n  'originY',\n  'angle',\n  'opacity',\n  'globalCompositeOperation',\n  'shadow',\n  'visible',\n  SKEW_X,\n  SKEW_Y,\n];\n\nexport const cacheProperties = [\n  FILL,\n  STROKE,\n  'strokeWidth',\n  'strokeDashArray',\n  'width',\n  'height',\n  'paintFirst',\n  'strokeUniform',\n  'strokeLineCap',\n  'strokeDashOffset',\n  'strokeLineJoin',\n  'strokeMiterLimit',\n  'backgroundColor',\n  'clipPath',\n];\n\nexport const fabricObjectDefaultValues: Partial<\n  TClassProperties<FabricObject>\n> = {\n  // see composeMatrix() to see order of transforms. First defaults listed based on this\n  top: 0,\n  left: 0,\n  width: 0,\n  height: 0,\n  angle: 0,\n  flipX: false,\n  flipY: false,\n  scaleX: 1,\n  scaleY: 1,\n  minScaleLimit: 0,\n  skewX: 0,\n  skewY: 0,\n  originX: LEFT,\n  originY: TOP,\n  strokeWidth: 1,\n  strokeUniform: false,\n  padding: 0,\n  opacity: 1,\n  paintFirst: FILL,\n  fill: 'rgb(0,0,0)',\n  fillRule: 'nonzero',\n  stroke: null,\n  strokeDashArray: null,\n  strokeDashOffset: 0,\n  strokeLineCap: 'butt',\n  strokeLineJoin: 'miter',\n  strokeMiterLimit: 4,\n  globalCompositeOperation: 'source-over',\n  backgroundColor: '',\n  shadow: null,\n  visible: true,\n  includeDefaultValues: true,\n  excludeFromExport: false,\n  objectCaching: true,\n  clipPath: undefined,\n  inverted: false,\n  absolutePositioned: false,\n  centeredRotation: true,\n  centeredScaling: false,\n  dirty: true,\n} as const;\n\nexport const interactiveObjectDefaultValues: Partial<\n  TClassProperties<InteractiveFabricObject>\n> = {\n  noScaleCache: true,\n  lockMovementX: false,\n  lockMovementY: false,\n  lockRotation: false,\n  lockScalingX: false,\n  lockScalingY: false,\n  lockSkewingX: false,\n  lockSkewingY: false,\n  lockScalingFlip: false,\n  cornerSize: 13,\n  touchCornerSize: 24,\n  transparentCorners: true,\n  cornerColor: 'rgb(178,204,255)',\n  cornerStrokeColor: '',\n  cornerStyle: 'rect',\n  cornerDashArray: null,\n  hasControls: true,\n  borderColor: 'rgb(178,204,255)',\n  borderDashArray: null,\n  borderOpacityWhenMoving: 0.4,\n  borderScaleFactor: 1,\n  hasBorders: true,\n  selectionBackgroundColor: '',\n  selectable: true,\n  evented: true,\n  perPixelTargetFind: false,\n  activeOn: 'down',\n  hoverCursor: null,\n  moveCursor: null,\n};\n","/**\n * Easing functions\n * @see {@link http://gizma.com/easing/ Easing Equations by Robert Penner}\n */\n\nimport { twoMathPi, halfPI } from '../../constants';\nimport type { TEasingFunction } from './types';\n\nconst normalize = (a: number, c: number, p: number, s: number) => {\n  if (a < Math.abs(c)) {\n    a = c;\n    s = p / 4;\n  } else {\n    //handle the 0/0 case:\n    if (c === 0 && a === 0) {\n      s = (p / twoMathPi) * Math.asin(1);\n    } else {\n      s = (p / twoMathPi) * Math.asin(c / a);\n    }\n  }\n  return { a, c, p, s };\n};\n\nconst elastic = (\n  a: number,\n  s: number,\n  p: number,\n  t: number,\n  d: number,\n): number =>\n  a * Math.pow(2, 10 * (t -= 1)) * Math.sin(((t * d - s) * twoMathPi) / p);\n\n/**\n * Default sinusoidal easing\n */\nexport const defaultEasing: TEasingFunction = (t, b, c, d) =>\n  -c * Math.cos((t / d) * halfPI) + c + b;\n\n/**\n * Cubic easing in\n */\nexport const easeInCubic: TEasingFunction = (t, b, c, d) =>\n  c * (t / d) ** 3 + b;\n\n/**\n * Cubic easing out\n */\nexport const easeOutCubic: TEasingFunction = (t, b, c, d) =>\n  c * ((t / d - 1) ** 3 + 1) + b;\n\n/**\n * Cubic easing in and out\n */\nexport const easeInOutCubic: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 3 + b;\n  }\n  return (c / 2) * ((t - 2) ** 3 + 2) + b;\n};\n\n/**\n * Quartic easing in\n */\nexport const easeInQuart: TEasingFunction = (t, b, c, d) =>\n  c * (t /= d) * t ** 3 + b;\n\n/**\n * Quartic easing out\n */\nexport const easeOutQuart: TEasingFunction = (t, b, c, d) =>\n  -c * ((t = t / d - 1) * t ** 3 - 1) + b;\n\n/**\n * Quartic easing in and out\n */\nexport const easeInOutQuart: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 4 + b;\n  }\n  return (-c / 2) * ((t -= 2) * t ** 3 - 2) + b;\n};\n\n/**\n * Quintic easing in\n */\nexport const easeInQuint: TEasingFunction = (t, b, c, d) =>\n  c * (t / d) ** 5 + b;\n\n/**\n * Quintic easing out\n */\nexport const easeOutQuint: TEasingFunction = (t, b, c, d) =>\n  c * ((t / d - 1) ** 5 + 1) + b;\n\n/**\n * Quintic easing in and out\n */\nexport const easeInOutQuint: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 5 + b;\n  }\n  return (c / 2) * ((t - 2) ** 5 + 2) + b;\n};\n\n/**\n * Sinusoidal easing in\n */\nexport const easeInSine: TEasingFunction = (t, b, c, d) =>\n  -c * Math.cos((t / d) * halfPI) + c + b;\n\n/**\n * Sinusoidal easing out\n */\nexport const easeOutSine: TEasingFunction = (t, b, c, d) =>\n  c * Math.sin((t / d) * halfPI) + b;\n\n/**\n * Sinusoidal easing in and out\n */\nexport const easeInOutSine: TEasingFunction = (t, b, c, d) =>\n  (-c / 2) * (Math.cos((Math.PI * t) / d) - 1) + b;\n\n/**\n * Exponential easing in\n */\nexport const easeInExpo: TEasingFunction = (t, b, c, d) =>\n  t === 0 ? b : c * 2 ** (10 * (t / d - 1)) + b;\n\n/**\n * Exponential easing out\n */\nexport const easeOutExpo: TEasingFunction = (t, b, c, d) =>\n  t === d ? b + c : c * -(2 ** ((-10 * t) / d) + 1) + b;\n\n/**\n * Exponential easing in and out\n */\nexport const easeInOutExpo: TEasingFunction = (t, b, c, d) => {\n  if (t === 0) {\n    return b;\n  }\n  if (t === d) {\n    return b + c;\n  }\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * 2 ** (10 * (t - 1)) + b;\n  }\n  return (c / 2) * -(2 ** (-10 * --t) + 2) + b;\n};\n\n/**\n * Circular easing in\n */\nexport const easeInCirc: TEasingFunction = (t, b, c, d) =>\n  -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n\n/**\n * Circular easing out\n */\nexport const easeOutCirc: TEasingFunction = (t, b, c, d) =>\n  c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n\n/**\n * Circular easing in and out\n */\nexport const easeInOutCirc: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (-c / 2) * (Math.sqrt(1 - t ** 2) - 1) + b;\n  }\n  return (c / 2) * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n};\n\n/**\n * Elastic easing in\n */\nexport const easeInElastic: TEasingFunction = (t, b, c, d) => {\n  const s = 1.70158,\n    a = c;\n  let p = 0;\n  if (t === 0) {\n    return b;\n  }\n  t /= d;\n  if (t === 1) {\n    return b + c;\n  }\n  if (!p) {\n    p = d * 0.3;\n  }\n  const { a: normA, s: normS, p: normP } = normalize(a, c, p, s);\n  return -elastic(normA, normS, normP, t, d) + b;\n};\n\n/**\n * Elastic easing out\n */\nexport const easeOutElastic: TEasingFunction = (t, b, c, d) => {\n  const s = 1.70158,\n    a = c;\n  let p = 0;\n  if (t === 0) {\n    return b;\n  }\n  t /= d;\n  if (t === 1) {\n    return b + c;\n  }\n  if (!p) {\n    p = d * 0.3;\n  }\n  const { a: normA, s: normS, p: normP, c: normC } = normalize(a, c, p, s);\n  return (\n    normA * 2 ** (-10 * t) * Math.sin(((t * d - normS) * twoMathPi) / normP) +\n    normC +\n    b\n  );\n};\n\n/**\n * Elastic easing in and out\n */\nexport const easeInOutElastic: TEasingFunction = (t, b, c, d) => {\n  const s = 1.70158,\n    a = c;\n  let p = 0;\n  if (t === 0) {\n    return b;\n  }\n  t /= d / 2;\n  if (t === 2) {\n    return b + c;\n  }\n  if (!p) {\n    p = d * (0.3 * 1.5);\n  }\n  const { a: normA, s: normS, p: normP, c: normC } = normalize(a, c, p, s);\n  if (t < 1) {\n    return -0.5 * elastic(normA, normS, normP, t, d) + b;\n  }\n  return (\n    normA *\n      Math.pow(2, -10 * (t -= 1)) *\n      Math.sin(((t * d - normS) * twoMathPi) / normP) *\n      0.5 +\n    normC +\n    b\n  );\n};\n\n/**\n * Backwards easing in\n */\nexport const easeInBack: TEasingFunction = (t, b, c, d, s = 1.70158) =>\n  c * (t /= d) * t * ((s + 1) * t - s) + b;\n\n/**\n * Backwards easing out\n */\nexport const easeOutBack: TEasingFunction = (t, b, c, d, s = 1.70158) =>\n  c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n\n/**\n * Backwards easing in and out\n */\nexport const easeInOutBack: TEasingFunction = (t, b, c, d, s = 1.70158) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * (t * t * (((s *= 1.525) + 1) * t - s)) + b;\n  }\n  return (c / 2) * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;\n};\n\n/**\n * Bouncing easing out\n */\nexport const easeOutBounce: TEasingFunction = (t, b, c, d) => {\n  if ((t /= d) < 1 / 2.75) {\n    return c * (7.5625 * t * t) + b;\n  } else if (t < 2 / 2.75) {\n    return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;\n  } else if (t < 2.5 / 2.75) {\n    return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;\n  } else {\n    return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;\n  }\n};\n\n/**\n * Bouncing easing in\n */\nexport const easeInBounce: TEasingFunction = (t, b, c, d) =>\n  c - easeOutBounce(d - t, 0, c, d) + b;\n\n/**\n * Bouncing easing in and out\n */\nexport const easeInOutBounce: TEasingFunction = (t, b, c, d) =>\n  t < d / 2\n    ? easeInBounce(t * 2, 0, c, d) * 0.5 + b\n    : easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;\n\n/**\n * Quadratic easing in\n */\nexport const easeInQuad: TEasingFunction = (t, b, c, d) => c * (t /= d) * t + b;\n\n/**\n * Quadratic easing out\n */\nexport const easeOutQuad: TEasingFunction = (t, b, c, d) =>\n  -c * (t /= d) * (t - 2) + b;\n\n/**\n * Quadratic easing in and out\n */\nexport const easeInOutQuad: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 2 + b;\n  }\n  return (-c / 2) * (--t * (t - 2) - 1) + b;\n};\n","import { noop } from '../../constants';\nimport { requestAnimFrame } from './AnimationFrameProvider';\nimport { runningAnimations } from './AnimationRegistry';\nimport { defaultEasing } from './easing';\nimport type {\n  AnimationState,\n  TAbortCallback,\n  TBaseAnimationOptions,\n  TEasingFunction,\n  TOnAnimationChangeCallback,\n} from './types';\n\nconst defaultAbort = () => false;\n\nexport abstract class AnimationBase<\n  T extends number | number[] = number | number[],\n> {\n  declare readonly startValue: T;\n  declare readonly endValue: T;\n  declare readonly duration: number;\n  declare readonly delay: number;\n\n  protected declare readonly byValue: T;\n  protected declare readonly easing: TEasingFunction<T>;\n\n  private declare readonly _onStart: VoidFunction;\n  private declare readonly _onChange: TOnAnimationChangeCallback<T, void>;\n  private declare readonly _onComplete: TOnAnimationChangeCallback<T, void>;\n  private declare readonly _abort: TAbortCallback<T>;\n\n  /**\n   * Used to register the animation to a target object\n   * so that it can be cancelled within the object context\n   */\n  declare readonly target?: unknown;\n\n  private _state: AnimationState = 'pending';\n  /**\n   * Time %, or the ratio of `timeElapsed / duration`\n   * @see tick\n   */\n  durationProgress = 0;\n  /**\n   * Value %, or the ratio of `(currentValue - startValue) / (endValue - startValue)`\n   */\n  valueProgress = 0;\n  /**\n   * Current value\n   */\n  declare value: T;\n  /**\n   * Animation start time ms\n   */\n  private declare startTime: number;\n\n  constructor({\n    startValue,\n    byValue,\n    duration = 500,\n    delay = 0,\n    easing = defaultEasing,\n    onStart = noop,\n    onChange = noop,\n    onComplete = noop,\n    abort = defaultAbort,\n    target,\n  }: TBaseAnimationOptions<T>) {\n    this.tick = this.tick.bind(this);\n\n    this.duration = duration;\n    this.delay = delay;\n    this.easing = easing;\n    this._onStart = onStart;\n    this._onChange = onChange;\n    this._onComplete = onComplete;\n    this._abort = abort;\n    this.target = target;\n\n    this.startValue = startValue;\n    this.byValue = byValue;\n    this.value = this.startValue;\n    this.endValue = Object.freeze(this.calculate(this.duration).value);\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  isDone() {\n    return this._state === 'aborted' || this._state === 'completed';\n  }\n\n  /**\n   * Calculate the current value based on the easing parameters\n   * @param timeElapsed in ms\n   * @protected\n   */\n  protected abstract calculate(timeElapsed: number): {\n    value: T;\n    valueProgress: number;\n  };\n\n  start() {\n    const firstTick: FrameRequestCallback = (timestamp) => {\n      if (this._state !== 'pending') return;\n      this.startTime = timestamp || +new Date();\n      this._state = 'running';\n      this._onStart();\n      this.tick(this.startTime);\n    };\n\n    this.register();\n\n    // setTimeout(cb, 0) will run cb on the next frame, causing a delay\n    // we don't want that\n    if (this.delay > 0) {\n      setTimeout(() => requestAnimFrame(firstTick), this.delay);\n    } else {\n      requestAnimFrame(firstTick);\n    }\n  }\n\n  private tick(t: number) {\n    const durationMs = (t || +new Date()) - this.startTime;\n    const boundDurationMs = Math.min(durationMs, this.duration);\n    this.durationProgress = boundDurationMs / this.duration;\n    const { value, valueProgress } = this.calculate(boundDurationMs);\n    this.value = Object.freeze(value);\n    this.valueProgress = valueProgress;\n\n    if (this._state === 'aborted') {\n      return;\n    } else if (\n      this._abort(this.value, this.valueProgress, this.durationProgress)\n    ) {\n      this._state = 'aborted';\n      this.unregister();\n    } else if (durationMs >= this.duration) {\n      this.durationProgress = this.valueProgress = 1;\n      this._onChange(this.endValue, this.valueProgress, this.durationProgress);\n      this._state = 'completed';\n      this._onComplete(\n        this.endValue,\n        this.valueProgress,\n        this.durationProgress,\n      );\n      this.unregister();\n    } else {\n      this._onChange(this.value, this.valueProgress, this.durationProgress);\n      requestAnimFrame(this.tick);\n    }\n  }\n\n  private register() {\n    runningAnimations.push(this as unknown as AnimationBase);\n  }\n\n  private unregister() {\n    runningAnimations.remove(this as unknown as AnimationBase);\n  }\n\n  abort() {\n    this._state = 'aborted';\n    this.unregister();\n  }\n}\n","import { AnimationBase } from './AnimationBase';\nimport type { ValueAnimationOptions } from './types';\n\nexport class ValueAnimation extends AnimationBase<number> {\n  constructor({\n    startValue = 0,\n    endValue = 100,\n    ...otherOptions\n  }: ValueAnimationOptions) {\n    super({\n      ...otherOptions,\n      startValue,\n      byValue: endValue - startValue,\n    });\n  }\n\n  protected calculate(timeElapsed: number) {\n    const value = this.easing(\n      timeElapsed,\n      this.startValue,\n      this.byValue,\n      this.duration,\n    );\n    return {\n      value,\n      valueProgress: Math.abs((value - this.startValue) / this.byValue),\n    };\n  }\n}\n","import { AnimationBase } from './AnimationBase';\nimport type { ArrayAnimationOptions } from './types';\n\nexport class ArrayAnimation extends AnimationBase<number[]> {\n  constructor({\n    startValue = [0],\n    endValue = [100],\n    ...options\n  }: ArrayAnimationOptions) {\n    super({\n      ...options,\n      startValue,\n      byValue: endValue.map((value, i) => value - startValue[i]),\n    });\n  }\n  protected calculate(timeElapsed: number) {\n    const values = this.startValue.map((value, i) =>\n      this.easing(timeElapsed, value, this.byValue[i], this.duration, i),\n    );\n    return {\n      value: values,\n      valueProgress: Math.abs(\n        (values[0] - this.startValue[0]) / this.byValue[0],\n      ),\n    };\n  }\n}\n","import { Color } from '../../color/Color';\nimport type { TRGBAColorSource } from '../../color/typedefs';\nimport { halfPI } from '../../constants';\nimport { capValue } from '../misc/capValue';\nimport { AnimationBase } from './AnimationBase';\nimport type {\n  ColorAnimationOptions,\n  TEasingFunction,\n  TOnAnimationChangeCallback,\n} from './types';\n\nconst defaultColorEasing: TEasingFunction = (\n  timeElapsed,\n  startValue,\n  byValue,\n  duration,\n) => {\n  const durationProgress = 1 - Math.cos((timeElapsed / duration) * halfPI);\n  return startValue + byValue * durationProgress;\n};\n\nconst wrapColorCallback = <R>(\n  callback?: TOnAnimationChangeCallback<string, R>,\n) =>\n  callback &&\n  ((rgba: TRGBAColorSource, valueProgress: number, durationProgress: number) =>\n    callback(new Color(rgba).toRgba(), valueProgress, durationProgress));\n\nexport class ColorAnimation extends AnimationBase<TRGBAColorSource> {\n  constructor({\n    startValue,\n    endValue,\n    easing = defaultColorEasing,\n    onChange,\n    onComplete,\n    abort,\n    ...options\n  }: ColorAnimationOptions) {\n    const startColor = new Color(startValue).getSource();\n    const endColor = new Color(endValue).getSource();\n    super({\n      ...options,\n      startValue: startColor,\n      byValue: endColor.map(\n        (value, i) => value - startColor[i],\n      ) as TRGBAColorSource,\n      easing,\n      onChange: wrapColorCallback(onChange),\n      onComplete: wrapColorCallback(onComplete),\n      abort: wrapColorCallback(abort),\n    });\n  }\n  protected calculate(timeElapsed: number) {\n    const [r, g, b, a] = this.startValue.map((value, i) =>\n      this.easing(timeElapsed, value, this.byValue[i], this.duration, i),\n    ) as TRGBAColorSource;\n    const value = [\n      ...[r, g, b].map(Math.round),\n      capValue(0, a, 1),\n    ] as TRGBAColorSource;\n    return {\n      value,\n      valueProgress:\n        // to correctly calculate the change ratio we must find a changed value\n        value\n          .map((p, i) =>\n            this.byValue[i] !== 0\n              ? Math.abs((p - this.startValue[i]) / this.byValue[i])\n              : 0,\n          )\n          .find((p) => p !== 0) || 0,\n    };\n  }\n}\n","import { ValueAnimation } from './ValueAnimation';\nimport { ArrayAnimation } from './ArrayAnimation';\nimport { ColorAnimation } from './ColorAnimation';\nimport type {\n  ValueAnimationOptions,\n  ArrayAnimationOptions,\n  ColorAnimationOptions,\n} from './types';\nimport type { TColorArg } from '../../color/typedefs';\n\nexport type TAnimation<T extends number | number[] | TColorArg> =\n  T extends TColorArg\n    ? ColorAnimation\n    : T extends number[]\n      ? ArrayAnimation\n      : ValueAnimation;\n\nconst isArrayAnimation = (\n  options: ArrayAnimationOptions | ValueAnimationOptions,\n): options is ArrayAnimationOptions => {\n  return Array.isArray(options.startValue) || Array.isArray(options.endValue);\n};\n\n/**\n * Changes value(s) from startValue to endValue within a certain period of time,\n * invoking callbacks as the value(s) change.\n *\n * @example\n * animate({\n *   startValue: 1,\n *   endValue: 0,\n *   onChange: (v) => {\n *     obj.set('opacity', v);\n *     // since we are running in a requested frame we should call `renderAll` and not `requestRenderAll`\n *     canvas.renderAll();\n *   }\n * });\n *\n * @example Using lists:\n * animate({\n *   startValue: [1, 2, 3],\n *   endValue: [2, 4, 6],\n *   onChange: ([x, y, zoom]) => {\n *     canvas.zoomToPoint(new Point(x, y), zoom);\n *     canvas.renderAll();\n *   }\n * });\n *\n */\nexport function animate(options: ArrayAnimationOptions): ArrayAnimation;\nexport function animate(options: ValueAnimationOptions): ValueAnimation;\nexport function animate<\n  T extends ValueAnimationOptions | ArrayAnimationOptions,\n>(\n  options: T,\n): T extends ArrayAnimationOptions ? ArrayAnimation : ValueAnimation;\nexport function animate<\n  T extends ValueAnimationOptions | ArrayAnimationOptions,\n  R extends T extends ArrayAnimationOptions ? ArrayAnimation : ValueAnimation,\n>(options: T): R {\n  const animation = (\n    isArrayAnimation(options)\n      ? new ArrayAnimation(options)\n      : new ValueAnimation(options)\n  ) as R;\n  animation.start();\n  return animation;\n}\n\nexport function animateColor(options: ColorAnimationOptions) {\n  const animation = new ColorAnimation(options);\n  animation.start();\n  return animation;\n}\n","import { Point } from './Point';\nimport { createVector } from './util/misc/vectors';\n\n/* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\n\nexport type IntersectionType = 'Intersection' | 'Coincident' | 'Parallel';\n\nexport class Intersection {\n  declare points: Point[];\n\n  declare status?: IntersectionType;\n\n  constructor(status?: IntersectionType) {\n    this.status = status;\n    this.points = [];\n  }\n\n  /**\n   * Used to verify if a point is alredy in the collection\n   * @param {Point} point\n   * @returns {boolean}\n   */\n  private includes(point: Point): boolean {\n    return this.points.some((p) => p.eq(point));\n  }\n\n  /**\n   * Appends points of intersection\n   * @param {...Point[]} points\n   * @return {Intersection} thisArg\n   * @chainable\n   */\n  private append(...points: Point[]): Intersection {\n    this.points = this.points.concat(\n      points.filter((point) => {\n        return !this.includes(point);\n      }),\n    );\n    return this;\n  }\n\n  /**\n   * check if point T is on the segment or line defined between A and B\n   *\n   * @param {Point} T the point we are checking for\n   * @param {Point} A one extremity of the segment\n   * @param {Point} B the other extremity of the segment\n   * @param [infinite] if true checks if `T` is on the line defined by `A` and `B`\n   * @returns true if `T` is contained\n   */\n  static isPointContained(T: Point, A: Point, B: Point, infinite = false) {\n    if (A.eq(B)) {\n      // Edge case: the segment is a point, we check for coincidence,\n      // infinite param has no meaning because there are infinite lines to consider\n      return T.eq(A);\n    } else if (A.x === B.x) {\n      // Edge case: horizontal line.\n      // we first check if T.x has the same value, and then if T.y is contained between A.y and B.y\n      return (\n        T.x === A.x &&\n        (infinite || (T.y >= Math.min(A.y, B.y) && T.y <= Math.max(A.y, B.y)))\n      );\n    } else if (A.y === B.y) {\n      // Edge case: vertical line.\n      // we first check if T.y has the same value, and then if T.x is contained between A.x and B.x\n      return (\n        T.y === A.y &&\n        (infinite || (T.x >= Math.min(A.x, B.x) && T.x <= Math.max(A.x, B.x)))\n      );\n    } else {\n      // Generic case: sloped line.\n      // we check that AT has the same slope as AB\n      // for the segment case we need both the vectors to have the same direction and for AT to be lte AB in size\n      // for the infinite case we check the absolute value of the slope, since direction is meaningless\n      const AB = createVector(A, B);\n      const AT = createVector(A, T);\n      const s = AT.divide(AB);\n      return infinite\n        ? Math.abs(s.x) === Math.abs(s.y)\n        : s.x === s.y && s.x >= 0 && s.x <= 1;\n    }\n  }\n\n  /**\n   * Use the ray casting algorithm to determine if {@link point} is in the polygon defined by {@link points}\n   * @see https://en.wikipedia.org/wiki/Point_in_polygon\n   * @param point\n   * @param points polygon points\n   * @returns\n   */\n  static isPointInPolygon(point: Point, points: Point[]) {\n    const other = new Point(point).setX(\n      Math.min(point.x - 1, ...points.map((p) => p.x)),\n    );\n    let hits = 0;\n    for (let index = 0; index < points.length; index++) {\n      const inter = this.intersectSegmentSegment(\n        // polygon side\n        points[index],\n        points[(index + 1) % points.length],\n        // ray\n        point,\n        other,\n      );\n      if (inter.includes(point)) {\n        // point is on the polygon side\n        return true;\n      }\n      hits += Number(inter.status === 'Intersection');\n    }\n    return hits % 2 === 1;\n  }\n\n  /**\n   * Checks if a line intersects another\n   * @see {@link https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection line intersection}\n   * @see {@link https://en.wikipedia.org/wiki/Cramer%27s_rule Cramer's rule}\n   * @static\n   * @param {Point} a1\n   * @param {Point} a2\n   * @param {Point} b1\n   * @param {Point} b2\n   * @param {boolean} [aInfinite=true] check segment intersection by passing `false`\n   * @param {boolean} [bInfinite=true] check segment intersection by passing `false`\n   * @return {Intersection}\n   */\n  static intersectLineLine(\n    a1: Point,\n    a2: Point,\n    b1: Point,\n    b2: Point,\n    aInfinite = true,\n    bInfinite = true,\n  ): Intersection {\n    const a2xa1x = a2.x - a1.x,\n      a2ya1y = a2.y - a1.y,\n      b2xb1x = b2.x - b1.x,\n      b2yb1y = b2.y - b1.y,\n      a1xb1x = a1.x - b1.x,\n      a1yb1y = a1.y - b1.y,\n      uaT = b2xb1x * a1yb1y - b2yb1y * a1xb1x,\n      ubT = a2xa1x * a1yb1y - a2ya1y * a1xb1x,\n      uB = b2yb1y * a2xa1x - b2xb1x * a2ya1y;\n    if (uB !== 0) {\n      const ua = uaT / uB,\n        ub = ubT / uB;\n      if (\n        (aInfinite || (0 <= ua && ua <= 1)) &&\n        (bInfinite || (0 <= ub && ub <= 1))\n      ) {\n        return new Intersection('Intersection').append(\n          new Point(a1.x + ua * a2xa1x, a1.y + ua * a2ya1y),\n        );\n      } else {\n        return new Intersection();\n      }\n    } else {\n      if (uaT === 0 || ubT === 0) {\n        const segmentsCoincide =\n          aInfinite ||\n          bInfinite ||\n          Intersection.isPointContained(a1, b1, b2) ||\n          Intersection.isPointContained(a2, b1, b2) ||\n          Intersection.isPointContained(b1, a1, a2) ||\n          Intersection.isPointContained(b2, a1, a2);\n        return new Intersection(segmentsCoincide ? 'Coincident' : undefined);\n      } else {\n        return new Intersection('Parallel');\n      }\n    }\n  }\n\n  /**\n   * Checks if a segment intersects a line\n   * @see {@link intersectLineLine} for line intersection\n   * @static\n   * @param {Point} s1 boundary point of segment\n   * @param {Point} s2 other boundary point of segment\n   * @param {Point} l1 point on line\n   * @param {Point} l2 other point on line\n   * @return {Intersection}\n   */\n  static intersectSegmentLine(\n    s1: Point,\n    s2: Point,\n    l1: Point,\n    l2: Point,\n  ): Intersection {\n    return Intersection.intersectLineLine(s1, s2, l1, l2, false, true);\n  }\n\n  /**\n   * Checks if a segment intersects another\n   * @see {@link intersectLineLine} for line intersection\n   * @static\n   * @param {Point} a1 boundary point of segment\n   * @param {Point} a2 other boundary point of segment\n   * @param {Point} b1 boundary point of segment\n   * @param {Point} b2 other boundary point of segment\n   * @return {Intersection}\n   */\n  static intersectSegmentSegment(\n    a1: Point,\n    a2: Point,\n    b1: Point,\n    b2: Point,\n  ): Intersection {\n    return Intersection.intersectLineLine(a1, a2, b1, b2, false, false);\n  }\n\n  /**\n   * Checks if line intersects polygon\n   *\n   * @todo account for stroke\n   *\n   * @static\n   * @see {@link intersectSegmentPolygon} for segment intersection\n   * @param {Point} a1 point on line\n   * @param {Point} a2 other point on line\n   * @param {Point[]} points polygon points\n   * @param {boolean} [infinite=true] check segment intersection by passing `false`\n   * @return {Intersection}\n   */\n  static intersectLinePolygon(\n    a1: Point,\n    a2: Point,\n    points: Point[],\n    infinite = true,\n  ): Intersection {\n    const result = new Intersection();\n    const length = points.length;\n\n    for (let i = 0, b1, b2, inter; i < length; i++) {\n      b1 = points[i];\n      b2 = points[(i + 1) % length];\n      inter = Intersection.intersectLineLine(a1, a2, b1, b2, infinite, false);\n      if (inter.status === 'Coincident') {\n        return inter;\n      }\n      result.append(...inter.points);\n    }\n\n    if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if segment intersects polygon\n   * @static\n   * @see {@link intersectLinePolygon} for line intersection\n   * @param {Point} a1 boundary point of segment\n   * @param {Point} a2 other boundary point of segment\n   * @param {Point[]} points polygon points\n   * @return {Intersection}\n   */\n  static intersectSegmentPolygon(\n    a1: Point,\n    a2: Point,\n    points: Point[],\n  ): Intersection {\n    return Intersection.intersectLinePolygon(a1, a2, points, false);\n  }\n\n  /**\n   * Checks if polygon intersects another polygon\n   *\n   * @todo account for stroke\n   *\n   * @static\n   * @param {Point[]} points1\n   * @param {Point[]} points2\n   * @return {Intersection}\n   */\n  static intersectPolygonPolygon(\n    points1: Point[],\n    points2: Point[],\n  ): Intersection {\n    const result = new Intersection(),\n      length = points1.length;\n    const coincidences: Intersection[] = [];\n\n    for (let i = 0; i < length; i++) {\n      const a1 = points1[i],\n        a2 = points1[(i + 1) % length],\n        inter = Intersection.intersectSegmentPolygon(a1, a2, points2);\n      if (inter.status === 'Coincident') {\n        coincidences.push(inter);\n        result.append(a1, a2);\n      } else {\n        result.append(...inter.points);\n      }\n    }\n\n    if (coincidences.length > 0 && coincidences.length === points1.length) {\n      return new Intersection('Coincident');\n    } else if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if polygon intersects rectangle\n   * @static\n   * @see {@link intersectPolygonPolygon} for polygon intersection\n   * @param {Point[]} points polygon points\n   * @param {Point} r1 top left point of rect\n   * @param {Point} r2 bottom right point of rect\n   * @return {Intersection}\n   */\n  static intersectPolygonRectangle(\n    points: Point[],\n    r1: Point,\n    r2: Point,\n  ): Intersection {\n    const min = r1.min(r2),\n      max = r1.max(r2),\n      topRight = new Point(max.x, min.y),\n      bottomLeft = new Point(min.x, max.y);\n\n    return Intersection.intersectPolygonPolygon(points, [\n      min,\n      topRight,\n      max,\n      bottomLeft,\n    ]);\n  }\n}\n","import type {\n  TBBox,\n  TCornerPoint,\n  TDegree,\n  TMat2D,\n  TOriginX,\n  TOriginY,\n} from '../../typedefs';\nimport { SCALE_X, SCALE_Y, iMatrix } from '../../constants';\nimport { Intersection } from '../../Intersection';\nimport { Point } from '../../Point';\nimport { makeBoundingBoxFromPoints } from '../../util/misc/boundingBoxFromPoints';\nimport {\n  createRotateMatrix,\n  createTranslateMatrix,\n  composeMatrix,\n  invertTransform,\n  multiplyTransformMatrices,\n  transformPoint,\n  calcPlaneRotation,\n} from '../../util/misc/matrix';\nimport { radiansToDegrees } from '../../util/misc/radiansDegreesConversion';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { StaticCanvas } from '../../canvas/StaticCanvas';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport type { ControlProps } from './types/ControlProps';\nimport { resolveOrigin } from '../../util/misc/resolveOrigin';\nimport type { Group } from '../Group';\nimport { calcDimensionsMatrix } from '../../util/misc/matrix';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport { degreesToRadians } from '../../util/misc/radiansDegreesConversion';\nimport { CommonMethods } from '../../CommonMethods';\nimport type { BaseProps } from './types/BaseProps';\nimport type { FillStrokeProps } from './types/FillStrokeProps';\nimport { CENTER, LEFT, TOP } from '../../constants';\n\ntype TMatrixCache = {\n  key: number[];\n  value: TMat2D;\n};\n\ntype TACoords = TCornerPoint;\n\nexport class ObjectGeometry<EventSpec extends ObjectEvents = ObjectEvents>\n  extends CommonMethods<EventSpec>\n  implements\n    Pick<ControlProps, 'padding'>,\n    BaseProps,\n    Pick<FillStrokeProps, 'strokeWidth' | 'strokeUniform'>\n{\n  // #region Geometry\n\n  declare padding: number;\n\n  /**\n   * Describe object's corner position in scene coordinates.\n   * The coordinates are derived from the following:\n   * left, top, width, height, scaleX, scaleY, skewX, skewY, angle, strokeWidth.\n   * The coordinates do not depend on viewport changes.\n   * The coordinates get updated with {@link setCoords}.\n   * You can calculate them without updating with {@link calcACoords()}\n   */\n  declare aCoords: TACoords;\n\n  /**\n   * storage cache for object transform matrix\n   */\n  declare ownMatrixCache?: TMatrixCache;\n\n  /**\n   * storage cache for object full transform matrix\n   */\n  declare matrixCache?: TMatrixCache;\n\n  /**\n   * A Reference of the Canvas where the object is actually added\n   * @type StaticCanvas | Canvas;\n   * @default undefined\n   * @private\n   */\n  declare canvas?: StaticCanvas | Canvas;\n\n  /**\n   * @returns {number} x position according to object's {@link originX} property in canvas coordinate plane\n   */\n  getX(): number {\n    return this.getXY().x;\n  }\n\n  /**\n   * @param {number} value x position according to object's {@link originX} property in canvas coordinate plane\n   */\n  setX(value: number) {\n    this.setXY(this.getXY().setX(value));\n  }\n\n  /**\n   * @returns {number} y position according to object's {@link originY} property in canvas coordinate plane\n   */\n  getY(): number {\n    return this.getXY().y;\n  }\n\n  /**\n   * @param {number} value y position according to object's {@link originY} property in canvas coordinate plane\n   */\n  setY(value: number) {\n    this.setXY(this.getXY().setY(value));\n  }\n\n  /**\n   * @returns {number} x position according to object's {@link originX} property in parent's coordinate plane\\\n   * if parent is canvas then this property is identical to {@link getX}\n   */\n  getRelativeX(): number {\n    return this.left;\n  }\n\n  /**\n   * @param {number} value x position according to object's {@link originX} property in parent's coordinate plane\\\n   * if parent is canvas then this method is identical to {@link setX}\n   */\n  setRelativeX(value: number) {\n    this.left = value;\n  }\n\n  /**\n   * @returns {number} y position according to object's {@link originY} property in parent's coordinate plane\\\n   * if parent is canvas then this property is identical to {@link getY}\n   */\n  getRelativeY(): number {\n    return this.top;\n  }\n\n  /**\n   * @param {number} value y position according to object's {@link originY} property in parent's coordinate plane\\\n   * if parent is canvas then this property is identical to {@link setY}\n   */\n  setRelativeY(value: number) {\n    this.top = value;\n  }\n\n  /**\n   * @returns {Point} x position according to object's {@link originX} {@link originY} properties in canvas coordinate plane\n   */\n  getXY(): Point {\n    const relativePosition = this.getRelativeXY();\n    return this.group\n      ? transformPoint(relativePosition, this.group.calcTransformMatrix())\n      : relativePosition;\n  }\n\n  /**\n   * Set an object position to a particular point, the point is intended in absolute ( canvas ) coordinate.\n   * You can specify {@link originX} and {@link originY} values,\n   * that otherwise are the object's current values.\n   * @example <caption>Set object's bottom left corner to point (5,5) on canvas</caption>\n   * object.setXY(new Point(5, 5), 'left', 'bottom').\n   * @param {Point} point position in scene coordinate plane\n   * @param {TOriginX} [originX] Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} [originY] Vertical origin: 'top', 'center' or 'bottom'\n   */\n  setXY(point: Point, originX?: TOriginX, originY?: TOriginY) {\n    if (this.group) {\n      point = transformPoint(\n        point,\n        invertTransform(this.group.calcTransformMatrix()),\n      );\n    }\n    this.setRelativeXY(point, originX, originY);\n  }\n\n  /**\n   * @returns {Point} x,y position according to object's {@link originX} {@link originY} properties in parent's coordinate plane\n   */\n  getRelativeXY(): Point {\n    return new Point(this.left, this.top);\n  }\n\n  /**\n   * As {@link setXY}, but in current parent's coordinate plane (the current group if any or the canvas)\n   * @param {Point} point position according to object's {@link originX} {@link originY} properties in parent's coordinate plane\n   * @param {TOriginX} [originX] Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} [originY] Vertical origin: 'top', 'center' or 'bottom'\n   */\n  setRelativeXY(\n    point: Point,\n    originX: TOriginX = this.originX,\n    originY: TOriginY = this.originY,\n  ) {\n    this.setPositionByOrigin(point, originX, originY);\n  }\n\n  /**\n   * @deprecated intermidiate method to be removed, do not use\n   */\n  protected isStrokeAccountedForInDimensions() {\n    return false;\n  }\n\n  /**\n   * @return {Point[]} [tl, tr, br, bl] in the scene plane\n   */\n  getCoords(): Point[] {\n    const { tl, tr, br, bl } =\n      this.aCoords || (this.aCoords = this.calcACoords());\n    const coords = [tl, tr, br, bl];\n    if (this.group) {\n      const t = this.group.calcTransformMatrix();\n      return coords.map((p) => transformPoint(p, t));\n    }\n    return coords;\n  }\n\n  /**\n   * Checks if object intersects with the scene rect formed by {@link tl} and {@link br}\n   */\n  intersectsWithRect(tl: Point, br: Point): boolean {\n    const intersection = Intersection.intersectPolygonRectangle(\n      this.getCoords(),\n      tl,\n      br,\n    );\n    return intersection.status === 'Intersection';\n  }\n\n  /**\n   * Checks if object intersects with another object\n   * @param {Object} other Object to test\n   * @return {Boolean} true if object intersects with another object\n   */\n  intersectsWithObject(other: ObjectGeometry): boolean {\n    const intersection = Intersection.intersectPolygonPolygon(\n      this.getCoords(),\n      other.getCoords(),\n    );\n\n    return (\n      intersection.status === 'Intersection' ||\n      intersection.status === 'Coincident' ||\n      other.isContainedWithinObject(this) ||\n      this.isContainedWithinObject(other)\n    );\n  }\n\n  /**\n   * Checks if object is fully contained within area of another object\n   * @param {Object} other Object to test\n   * @return {Boolean} true if object is fully contained within area of another object\n   */\n  isContainedWithinObject(other: ObjectGeometry): boolean {\n    const points = this.getCoords();\n    return points.every((point) => other.containsPoint(point));\n  }\n\n  /**\n   * Checks if object is fully contained within the scene rect formed by {@link tl} and {@link br}\n   */\n  isContainedWithinRect(tl: Point, br: Point): boolean {\n    const { left, top, width, height } = this.getBoundingRect();\n    return (\n      left >= tl.x &&\n      left + width <= br.x &&\n      top >= tl.y &&\n      top + height <= br.y\n    );\n  }\n\n  isOverlapping<T extends ObjectGeometry>(other: T): boolean {\n    return (\n      this.intersectsWithObject(other) ||\n      this.isContainedWithinObject(other) ||\n      other.isContainedWithinObject(this)\n    );\n  }\n\n  /**\n   * Checks if point is inside the object\n   * @param {Point} point Point to check against\n   * @return {Boolean} true if point is inside the object\n   */\n  containsPoint(point: Point): boolean {\n    return Intersection.isPointInPolygon(point, this.getCoords());\n  }\n\n  /**\n   * Checks if object is contained within the canvas with current viewportTransform\n   * the check is done stopping at first point that appears on screen\n   * @return {Boolean} true if object is fully or partially contained within canvas\n   */\n  isOnScreen(): boolean {\n    if (!this.canvas) {\n      return false;\n    }\n    const { tl, br } = this.canvas.vptCoords;\n    const points = this.getCoords();\n    // if some point is on screen, the object is on screen.\n    if (\n      points.some(\n        (point) =>\n          point.x <= br.x &&\n          point.x >= tl.x &&\n          point.y <= br.y &&\n          point.y >= tl.y,\n      )\n    ) {\n      return true;\n    }\n    // no points on screen, check intersection with absolute coordinates\n    if (this.intersectsWithRect(tl, br)) {\n      return true;\n    }\n    // check if the object is so big that it contains the entire viewport\n    return this.containsPoint(tl.midPointFrom(br));\n  }\n\n  /**\n   * Checks if object is partially contained within the canvas with current viewportTransform\n   * @return {Boolean} true if object is partially contained within canvas\n   */\n  isPartiallyOnScreen(): boolean {\n    if (!this.canvas) {\n      return false;\n    }\n    const { tl, br } = this.canvas.vptCoords;\n    if (this.intersectsWithRect(tl, br)) {\n      return true;\n    }\n    const allPointsAreOutside = this.getCoords().every(\n      (point) =>\n        (point.x >= br.x || point.x <= tl.x) &&\n        (point.y >= br.y || point.y <= tl.y),\n    );\n    // check if the object is so big that it contains the entire viewport\n    return allPointsAreOutside && this.containsPoint(tl.midPointFrom(br));\n  }\n\n  /**\n   * Returns coordinates of object's bounding rectangle (left, top, width, height)\n   * the box is intended as aligned to axis of canvas.\n   * @return {Object} Object with left, top, width, height properties\n   */\n  getBoundingRect(): TBBox {\n    return makeBoundingBoxFromPoints(this.getCoords());\n  }\n\n  /**\n   * Returns width of an object's bounding box counting transformations\n   * @todo shouldn't this account for group transform and return the actual size in canvas coordinate plane?\n   * @return {Number} width value\n   */\n  getScaledWidth(): number {\n    return this._getTransformedDimensions().x;\n  }\n\n  /**\n   * Returns height of an object bounding box counting transformations\n   * @todo shouldn't this account for group transform and return the actual size in canvas coordinate plane?\n   * @return {Number} height value\n   */\n  getScaledHeight(): number {\n    return this._getTransformedDimensions().y;\n  }\n\n  /**\n   * Scales an object (equally by x and y)\n   * @param {Number} value Scale factor\n   * @return {void}\n   */\n  scale(value: number): void {\n    this._set(SCALE_X, value);\n    this._set(SCALE_Y, value);\n    this.setCoords();\n  }\n\n  /**\n   * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)\n   * @param {Number} value New width value\n   * @return {void}\n   */\n  scaleToWidth(value: number) {\n    // adjust to bounding rect factor so that rotated shapes would fit as well\n    const boundingRectFactor =\n      this.getBoundingRect().width / this.getScaledWidth();\n    return this.scale(value / this.width / boundingRectFactor);\n  }\n\n  /**\n   * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)\n   * @param {Number} value New height value\n   * @return {void}\n   */\n  scaleToHeight(value: number) {\n    // adjust to bounding rect factor so that rotated shapes would fit as well\n    const boundingRectFactor =\n      this.getBoundingRect().height / this.getScaledHeight();\n    return this.scale(value / this.height / boundingRectFactor);\n  }\n\n  getCanvasRetinaScaling() {\n    return this.canvas?.getRetinaScaling() || 1;\n  }\n\n  /**\n   * Returns the object angle relative to canvas counting also the group property\n   * @returns {TDegree}\n   */\n  getTotalAngle(): TDegree {\n    return this.group\n      ? radiansToDegrees(calcPlaneRotation(this.calcTransformMatrix()))\n      : this.angle;\n  }\n\n  /**\n   * Retrieves viewportTransform from Object's canvas if available\n   * @return {TMat2D}\n   */\n  getViewportTransform(): TMat2D {\n    return this.canvas?.viewportTransform || (iMatrix.concat() as TMat2D);\n  }\n\n  /**\n   * Calculates the coordinates of the 4 corner of the bbox, in absolute coordinates.\n   * those never change with zoom or viewport changes.\n   * @return {TCornerPoint}\n   */\n  calcACoords(): TCornerPoint {\n    const rotateMatrix = createRotateMatrix({ angle: this.angle }),\n      { x, y } = this.getRelativeCenterPoint(),\n      tMatrix = createTranslateMatrix(x, y),\n      finalMatrix = multiplyTransformMatrices(tMatrix, rotateMatrix),\n      dim = this._getTransformedDimensions(),\n      w = dim.x / 2,\n      h = dim.y / 2;\n    return {\n      // corners\n      tl: transformPoint({ x: -w, y: -h }, finalMatrix),\n      tr: transformPoint({ x: w, y: -h }, finalMatrix),\n      bl: transformPoint({ x: -w, y: h }, finalMatrix),\n      br: transformPoint({ x: w, y: h }, finalMatrix),\n    };\n  }\n\n  /**\n   * Sets corner and controls position coordinates based on current angle, width and height, left and top.\n   * aCoords are used to quickly find an object on the canvas.\n   * See {@link https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords} and {@link http://fabricjs.com/fabric-gotchas}\n   */\n  setCoords(): void {\n    this.aCoords = this.calcACoords();\n  }\n\n  transformMatrixKey(skipGroup = false): number[] {\n    let prefix: number[] = [];\n    if (!skipGroup && this.group) {\n      prefix = this.group.transformMatrixKey(skipGroup);\n    }\n    prefix.push(\n      this.top,\n      this.left,\n      this.width,\n      this.height,\n      this.scaleX,\n      this.scaleY,\n      this.angle,\n      this.strokeWidth,\n      this.skewX,\n      this.skewY,\n      +this.flipX,\n      +this.flipY,\n      resolveOrigin(this.originX),\n      resolveOrigin(this.originY),\n    );\n\n    return prefix;\n  }\n\n  /**\n   * calculate transform matrix that represents the current transformations from the\n   * object's properties.\n   * @param {Boolean} [skipGroup] return transform matrix for object not counting parent transformations\n   * There are some situation in which this is useful to avoid the fake rotation.\n   * @return {TMat2D} transform matrix for the object\n   */\n  calcTransformMatrix(skipGroup = false): TMat2D {\n    let matrix = this.calcOwnMatrix();\n    if (skipGroup || !this.group) {\n      return matrix;\n    }\n    const key = this.transformMatrixKey(skipGroup),\n      cache = this.matrixCache;\n    if (cache && cache.key.every((x, i) => x === key[i])) {\n      return cache.value;\n    }\n    if (this.group) {\n      matrix = multiplyTransformMatrices(\n        this.group.calcTransformMatrix(false),\n        matrix,\n      );\n    }\n    this.matrixCache = {\n      key,\n      value: matrix,\n    };\n    return matrix;\n  }\n\n  /**\n   * calculate transform matrix that represents the current transformations from the\n   * object's properties, this matrix does not include the group transformation\n   * @return {TMat2D} transform matrix for the object\n   */\n  calcOwnMatrix(): TMat2D {\n    const key = this.transformMatrixKey(true),\n      cache = this.ownMatrixCache;\n    if (cache && cache.key === key) {\n      return cache.value;\n    }\n    const center = this.getRelativeCenterPoint(),\n      options = {\n        angle: this.angle,\n        translateX: center.x,\n        translateY: center.y,\n        scaleX: this.scaleX,\n        scaleY: this.scaleY,\n        skewX: this.skewX,\n        skewY: this.skewY,\n        flipX: this.flipX,\n        flipY: this.flipY,\n      },\n      value = composeMatrix(options);\n    this.ownMatrixCache = {\n      key,\n      value,\n    };\n    return value;\n  }\n\n  /**\n   * Calculate object dimensions from its properties\n   * @private\n   * @returns {Point} dimensions\n   */\n  _getNonTransformedDimensions(): Point {\n    return new Point(this.width, this.height).scalarAdd(this.strokeWidth);\n  }\n\n  /**\n   * Calculate object dimensions for controls box, including padding and canvas zoom.\n   * and active selection\n   * @private\n   * @param {object} [options] transform options\n   * @returns {Point} dimensions\n   */\n  _calculateCurrentDimensions(options?: any): Point {\n    return this._getTransformedDimensions(options)\n      .transform(this.getViewportTransform(), true)\n      .scalarAdd(2 * this.padding);\n  }\n\n  // #region Origin\n\n  declare top: number;\n  declare left: number;\n  declare width: number;\n  declare height: number;\n  declare flipX: boolean;\n  declare flipY: boolean;\n  declare scaleX: number;\n  declare scaleY: number;\n  declare skewX: number;\n  declare skewY: number;\n  /**\n   * @deprecated please use 'center' as value in new projects\n   * */\n  declare originX: TOriginX;\n  /**\n   * @deprecated please use 'center' as value in new projects\n   * */\n  declare originY: TOriginY;\n  declare angle: TDegree;\n  declare strokeWidth: number;\n  declare strokeUniform: boolean;\n\n  /**\n   * Object containing this object.\n   * can influence its size and position\n   */\n  declare group?: Group;\n\n  /**\n   * Calculate object bounding box dimensions from its properties scale, skew.\n   * This bounding box is aligned with object angle and not with canvas axis or screen.\n   * @param {Object} [options]\n   * @param {Number} [options.scaleX]\n   * @param {Number} [options.scaleY]\n   * @param {Number} [options.skewX]\n   * @param {Number} [options.skewY]\n   * @private\n   * @returns {Point} dimensions\n   */\n  _getTransformedDimensions(options: any = {}): Point {\n    const dimOptions = {\n      // if scaleX or scaleY are negative numbers,\n      // this will return dimensions that are negative.\n      // and this will break assumptions around the codebase\n      scaleX: this.scaleX,\n      scaleY: this.scaleY,\n      skewX: this.skewX,\n      skewY: this.skewY,\n      width: this.width,\n      height: this.height,\n      strokeWidth: this.strokeWidth,\n      // TODO remove this spread. is visible in the performance inspection\n      ...options,\n    };\n    // stroke is applied before/after transformations are applied according to `strokeUniform`\n    const strokeWidth = dimOptions.strokeWidth;\n    let preScalingStrokeValue = strokeWidth,\n      postScalingStrokeValue = 0;\n\n    if (this.strokeUniform) {\n      preScalingStrokeValue = 0;\n      postScalingStrokeValue = strokeWidth;\n    }\n    const dimX = dimOptions.width + preScalingStrokeValue,\n      dimY = dimOptions.height + preScalingStrokeValue,\n      noSkew = dimOptions.skewX === 0 && dimOptions.skewY === 0;\n    let finalDimensions;\n    if (noSkew) {\n      finalDimensions = new Point(\n        dimX * dimOptions.scaleX,\n        dimY * dimOptions.scaleY,\n      );\n    } else {\n      finalDimensions = sizeAfterTransform(\n        dimX,\n        dimY,\n        calcDimensionsMatrix(dimOptions),\n      );\n    }\n\n    return finalDimensions.scalarAdd(postScalingStrokeValue);\n  }\n\n  /**\n   * Translates the coordinates from a set of origin to another (based on the object's dimensions)\n   * @param {Point} point The point which corresponds to the originX and originY params\n   * @param {TOriginX} fromOriginX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} fromOriginY Vertical origin: 'top', 'center' or 'bottom'\n   * @param {TOriginX} toOriginX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} toOriginY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  translateToGivenOrigin(\n    point: Point,\n    fromOriginX: TOriginX,\n    fromOriginY: TOriginY,\n    toOriginX: TOriginX,\n    toOriginY: TOriginY,\n  ): Point {\n    let x = point.x,\n      y = point.y;\n    const offsetX = resolveOrigin(toOriginX) - resolveOrigin(fromOriginX),\n      offsetY = resolveOrigin(toOriginY) - resolveOrigin(fromOriginY);\n\n    if (offsetX || offsetY) {\n      const dim = this._getTransformedDimensions();\n      x += offsetX * dim.x;\n      y += offsetY * dim.y;\n    }\n\n    return new Point(x, y);\n  }\n\n  /**\n   * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\n   * @param {Point} point The point which corresponds to the originX and originY params\n   * @param {TOriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  translateToCenterPoint(\n    point: Point,\n    originX: TOriginX,\n    originY: TOriginY,\n  ): Point {\n    if (originX === CENTER && originY === CENTER) {\n      return point;\n    }\n    const p = this.translateToGivenOrigin(\n      point,\n      originX,\n      originY,\n      CENTER,\n      CENTER,\n    );\n    if (this.angle) {\n      return p.rotate(degreesToRadians(this.angle), point);\n    }\n    return p;\n  }\n\n  /**\n   * Translates the coordinates from center to origin coordinates (based on the object's dimensions)\n   * @param {Point} center The point which corresponds to center of the object\n   * @param {OriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {OriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  translateToOriginPoint(\n    center: Point,\n    originX: TOriginX,\n    originY: TOriginY,\n  ): Point {\n    const p = this.translateToGivenOrigin(\n      center,\n      CENTER,\n      CENTER,\n      originX,\n      originY,\n    );\n    if (this.angle) {\n      return p.rotate(degreesToRadians(this.angle), center);\n    }\n    return p;\n  }\n\n  /**\n   * Returns the center coordinates of the object relative to canvas\n   * @return {Point}\n   */\n  getCenterPoint(): Point {\n    const relCenter = this.getRelativeCenterPoint();\n    return this.group\n      ? transformPoint(relCenter, this.group.calcTransformMatrix())\n      : relCenter;\n  }\n\n  /**\n   * Returns the center coordinates of the object relative to it's parent\n   * @return {Point}\n   */\n  getRelativeCenterPoint(): Point {\n    return this.translateToCenterPoint(\n      new Point(this.left, this.top),\n      this.originX,\n      this.originY,\n    );\n  }\n\n  /**\n   * Returns the position of the object as if it has a different origin.\n   * Take an object that has left, top set to 100, 100 with origin 'left', 'top'.\n   * Return the values of left top ( wrapped in a point ) that you would need to keep\n   * the same position if origin where different.\n   * Alternatively you can use this to also find which point in the parent plane is a specific origin\n   * ( where is the bottom right corner of my object? )\n   * @param {TOriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  getPointByOrigin(originX: TOriginX, originY: TOriginY): Point {\n    return this.translateToOriginPoint(\n      this.getRelativeCenterPoint(),\n      originX,\n      originY,\n    );\n  }\n\n  /**\n   * Sets the position of the object taking into consideration the object's origin\n   * @param {Point} pos The new position of the object\n   * @param {TOriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {void}\n   */\n  setPositionByOrigin(pos: Point, originX: TOriginX, originY: TOriginY) {\n    const center = this.translateToCenterPoint(pos, originX, originY),\n      position = this.translateToOriginPoint(\n        center,\n        this.originX,\n        this.originY,\n      );\n    this.set({ left: position.x, top: position.y });\n  }\n\n  /**\n   * @private\n   */\n  _getLeftTopCoords() {\n    return this.translateToOriginPoint(\n      this.getRelativeCenterPoint(),\n      LEFT,\n      TOP,\n    );\n  }\n}\n","import { cache } from '../../cache';\nimport { config } from '../../config';\nimport {\n  ALIASING_LIMIT,\n  CENTER,\n  iMatrix,\n  LEFT,\n  SCALE_X,\n  SCALE_Y,\n  STROKE,\n  FILL,\n  TOP,\n  VERSION,\n} from '../../constants';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport { Shadow } from '../../Shadow';\nimport type {\n  TDegree,\n  TFiller,\n  TSize,\n  TCacheCanvasDimensions,\n  Abortable,\n  TOptions,\n  ImageFormat,\n} from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport { runningAnimations } from '../../util/animation/AnimationRegistry';\nimport { capValue } from '../../util/misc/capValue';\nimport {\n  createCanvasElement,\n  createCanvasElementFor,\n  toDataURL,\n  toBlob,\n} from '../../util/misc/dom';\nimport { invertTransform, qrDecompose } from '../../util/misc/matrix';\nimport { enlivenObjectEnlivables } from '../../util/misc/objectEnlive';\nimport {\n  resetObjectTransform,\n  saveObjectTransform,\n} from '../../util/misc/objectTransforms';\nimport { sendObjectToPlane } from '../../util/misc/planeChange';\nimport { pick, pickBy } from '../../util/misc/pick';\nimport { toFixed } from '../../util/misc/toFixed';\nimport type { Group } from '../Group';\nimport { StaticCanvas } from '../../canvas/StaticCanvas';\nimport { isFiller, isSerializableFiller } from '../../util/typeAssertions';\nimport type { FabricImage } from '../Image';\nimport {\n  cacheProperties,\n  fabricObjectDefaultValues,\n  stateProperties,\n} from './defaultValues';\nimport type { Gradient } from '../../gradient/Gradient';\nimport type { Pattern } from '../../Pattern';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { SerializedObjectProps } from './types/SerializedObjectProps';\nimport type { ObjectProps } from './types/ObjectProps';\nimport { getDevicePixelRatio, getEnv } from '../../env';\nimport { log } from '../../util/internals/console';\nimport type { TColorArg } from '../../color/typedefs';\nimport type { TAnimation } from '../../util/animation/animate';\nimport { animate, animateColor } from '../../util/animation/animate';\nimport type {\n  AnimationOptions,\n  ArrayAnimationOptions,\n  ColorAnimationOptions,\n  ValueAnimationOptions,\n} from '../../util/animation/types';\nimport { ObjectGeometry } from './ObjectGeometry';\n\ntype TAncestor = FabricObject;\ntype TCollection = Group;\n\nexport type Ancestors =\n  | [FabricObject | Group]\n  | [FabricObject | Group, ...Group[]]\n  | Group[];\n\nexport type AncestryComparison = {\n  /**\n   * common ancestors of `this` and`other`(may include`this` | `other`)\n   */\n  common: Ancestors;\n  /**\n   * ancestors that are of `this` only\n   */\n  fork: Ancestors;\n  /**\n   * ancestors that are of `other` only\n   */\n  otherFork: Ancestors;\n};\n\nexport type TCachedFabricObject<T extends FabricObject = FabricObject> = T &\n  Required<\n    Pick<\n      T,\n      | 'zoomX'\n      | 'zoomY'\n      | '_cacheCanvas'\n      | '_cacheContext'\n      | 'cacheTranslationX'\n      | 'cacheTranslationY'\n    >\n  > & {\n    _cacheContext: CanvasRenderingContext2D;\n  };\n\nexport type ObjectToCanvasElementOptions = {\n  format?: ImageFormat;\n  /** Multiplier to scale by */\n  multiplier?: number;\n  /** Cropping left offset. Introduced in v1.2.14 */\n  left?: number;\n  /** Cropping top offset. Introduced in v1.2.14 */\n  top?: number;\n  /** Cropping width. Introduced in v1.2.14 */\n  width?: number;\n  /** Cropping height. Introduced in v1.2.14 */\n  height?: number;\n  /** Enable retina scaling for clone image. Introduce in 1.6.4 */\n  enableRetinaScaling?: boolean;\n  /** Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4 */\n  withoutTransform?: boolean;\n  /** Remove current object shadow. Introduced in 2.4.2 */\n  withoutShadow?: boolean;\n  /** Account for canvas viewport transform */\n  viewportTransform?: boolean;\n  /** Function to create the output canvas to export onto */\n  canvasProvider?: <T extends StaticCanvas>(el?: HTMLCanvasElement) => T;\n};\n\ntype toDataURLOptions = ObjectToCanvasElementOptions & {\n  quality?: number;\n};\n\nexport type DrawContext =\n  | {\n      parentClipPaths: FabricObject[];\n      width: number;\n      height: number;\n      cacheTranslationX: number;\n      cacheTranslationY: number;\n      zoomX: number;\n      zoomY: number;\n    }\n  | Record<string, never>;\n\n/**\n * Root object class from which all 2d shape classes inherit from\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}\n *\n * @fires added\n * @fires removed\n *\n * @fires selected\n * @fires deselected\n *\n * @fires rotating\n * @fires scaling\n * @fires moving\n * @fires skewing\n * @fires modified\n *\n * @fires mousedown\n * @fires mouseup\n * @fires mouseover\n * @fires mouseout\n * @fires mousewheel\n * @fires mousedblclick\n *\n * @fires dragover\n * @fires dragenter\n * @fires dragleave\n * @fires drop\n */\nexport class FabricObject<\n    Props extends TOptions<ObjectProps> = Partial<ObjectProps>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends ObjectGeometry<EventSpec>\n  implements ObjectProps\n{\n  declare minScaleLimit: number;\n\n  declare opacity: number;\n\n  declare paintFirst: 'fill' | 'stroke';\n  declare fill: string | TFiller | null;\n  declare fillRule: CanvasFillRule;\n  declare stroke: string | TFiller | null;\n  declare strokeDashArray: number[] | null;\n  declare strokeDashOffset: number;\n  declare strokeLineCap: CanvasLineCap;\n  declare strokeLineJoin: CanvasLineJoin;\n  declare strokeMiterLimit: number;\n\n  declare globalCompositeOperation: GlobalCompositeOperation;\n  declare backgroundColor: string;\n\n  declare shadow: Shadow | null;\n\n  declare visible: boolean;\n\n  declare includeDefaultValues: boolean;\n  declare excludeFromExport: boolean;\n\n  declare objectCaching: boolean;\n\n  declare clipPath?: FabricObject;\n  declare inverted: boolean;\n  declare absolutePositioned: boolean;\n  declare centeredRotation: boolean;\n  declare centeredScaling: boolean;\n\n  /**\n   * This list of properties is used to check if the state of an object is changed.\n   * This state change now is only used for children of groups to understand if a group\n   * needs its cache regenerated during a .set call\n   * @type Array\n   */\n  static stateProperties: string[] = stateProperties;\n\n  /**\n   * List of properties to consider when checking if cache needs refresh\n   * Those properties are checked by\n   * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty\n   * and refreshed at the next render\n   * @type Array\n   */\n  static cacheProperties: string[] = cacheProperties;\n\n  /**\n   * When set to `true`, object's cache will be rerendered next render call.\n   * since 1.7.0\n   * @type Boolean\n   * @default true\n   */\n  declare dirty: boolean;\n\n  /**\n   * Quick access for the _cacheCanvas rendering context\n   * This is part of the objectCaching feature\n   * since 1.7.0\n   * @type boolean\n   * @default undefined\n   * @private\n   */\n  _cacheContext: CanvasRenderingContext2D | null = null;\n\n  /**\n   * A reference to the HTMLCanvasElement that is used to contain the cache of the object\n   * this canvas element is resized and cleared as needed\n   * Is marked private, you can read it, don't use it since it is handled by fabric\n   * since 1.7.0\n   * @type HTMLCanvasElement\n   * @default undefined\n   * @private\n   */\n  declare _cacheCanvas?: HTMLCanvasElement;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, X axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare zoomX?: number;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, Y axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare zoomY?: number;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, Y axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare cacheTranslationX?: number;\n\n  /**\n   * translation of the cacheCanvas away from the center, for subpixel accuracy and crispness\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare cacheTranslationY?: number;\n\n  /**\n   * A reference to the parent of the object, usually a Group\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare group?: Group;\n\n  /**\n   * Indicate if the object is sitting on a cache dedicated to it\n   * or is part of a larger cache for many object ( a group for example)\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare ownCaching?: boolean;\n\n  /**\n   * Private. indicates if the object inside a group is on a transformed context or not\n   * or is part of a larger cache for many object ( a group for example)\n   * @type boolean\n   * @default undefined\n   * @private\n   */\n  declare _transformDone?: boolean;\n\n  static ownDefaults = fabricObjectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return FabricObject.ownDefaults;\n  }\n\n  /**\n   * The class type.\n   * This is used for serialization and deserialization purposes and internally it can be used\n   * to identify classes.\n   * When we transform a class in a plain JS object we need a way to recognize which class it was,\n   * and the type is the way we do that. It has no other purposes and you should not give one.\n   * Hard to reach on instances and please do not use to drive instance's logic (this.constructor.type).\n   * To idenfity a class use instanceof class ( instanceof Rect ).\n   * We do not do that in fabricJS code because we want to try to have code splitting possible.\n   */\n  static type = 'FabricObject';\n\n  /**\n   * Legacy identifier of the class. Prefer using utils like isType or instanceOf\n   * Will be removed in fabric 7 or 8.\n   * The setter exists to avoid type errors in old code and possibly current deserialization code.\n   * DO NOT build new code around this type value\n   * @TODO add sustainable warning message\n   * @type string\n   * @deprecated\n   */\n  get type() {\n    const name = (this.constructor as typeof FabricObject).type;\n    if (name === 'FabricObject') {\n      return 'object';\n    }\n    return name.toLowerCase();\n  }\n\n  set type(value) {\n    log('warn', 'Setting type has no effect', value);\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, FabricObject.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * Create a the canvas used to keep the cached copy of the object\n   * @private\n   */\n  _createCacheCanvas() {\n    this._cacheCanvas = createCanvasElement();\n    this._cacheContext = this._cacheCanvas.getContext('2d');\n    this._updateCacheCanvas();\n    // if canvas gets created, is empty, so dirty.\n    this.dirty = true;\n  }\n\n  /**\n   * Limit the cache dimensions so that X * Y do not cross config.perfLimitSizeTotal\n   * and each side do not cross fabric.cacheSideLimit\n   * those numbers are configurable so that you can get as much detail as you want\n   * making bargain with performances.\n   * @param {Object} dims\n   * @param {Object} dims.width width of canvas\n   * @param {Object} dims.height height of canvas\n   * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _limitCacheSize(\n    dims: TSize & { zoomX: number; zoomY: number; capped: boolean } & any,\n  ) {\n    const width = dims.width,\n      height = dims.height,\n      max = config.maxCacheSideLimit,\n      min = config.minCacheSideLimit;\n    if (\n      width <= max &&\n      height <= max &&\n      width * height <= config.perfLimitSizeTotal\n    ) {\n      if (width < min) {\n        dims.width = min;\n      }\n      if (height < min) {\n        dims.height = min;\n      }\n      return dims;\n    }\n    const ar = width / height,\n      [limX, limY] = cache.limitDimsByArea(ar),\n      x = capValue(min, limX, max),\n      y = capValue(min, limY, max);\n    if (width > x) {\n      dims.zoomX /= width / x;\n      dims.width = x;\n      dims.capped = true;\n    }\n    if (height > y) {\n      dims.zoomY /= height / y;\n      dims.height = y;\n      dims.capped = true;\n    }\n    return dims;\n  }\n\n  /**\n   * Return the dimension and the zoom level needed to create a cache canvas\n   * big enough to host the object to be cached.\n   * @private\n   * @return {Object}.x width of object to be cached\n   * @return {Object}.y height of object to be cached\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _getCacheCanvasDimensions(): TCacheCanvasDimensions {\n    const objectScale = this.getTotalObjectScaling(),\n      // calculate dimensions without skewing\n      dim = this._getTransformedDimensions({ skewX: 0, skewY: 0 }),\n      neededX = (dim.x * objectScale.x) / this.scaleX,\n      neededY = (dim.y * objectScale.y) / this.scaleY;\n    return {\n      // for sure this ALIASING_LIMIT is slightly creating problem\n      // in situation in which the cache canvas gets an upper limit\n      // also objectScale contains already scaleX and scaleY\n      width: Math.ceil(neededX + ALIASING_LIMIT),\n      height: Math.ceil(neededY + ALIASING_LIMIT),\n      zoomX: objectScale.x,\n      zoomY: objectScale.y,\n      x: neededX,\n      y: neededY,\n    };\n  }\n\n  /**\n   * Update width and height of the canvas for cache\n   * returns true or false if canvas needed resize.\n   * @private\n   * @return {Boolean} true if the canvas has been resized\n   */\n  _updateCacheCanvas() {\n    const canvas = this._cacheCanvas!,\n      context = this._cacheContext,\n      { width, height, zoomX, zoomY, x, y } = this._limitCacheSize(\n        this._getCacheCanvasDimensions(),\n      ),\n      dimensionsChanged = width !== canvas.width || height !== canvas.height,\n      zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY;\n\n    if (!canvas || !context) {\n      return false;\n    }\n\n    const shouldRedraw = dimensionsChanged || zoomChanged;\n\n    if (shouldRedraw) {\n      if (width !== canvas.width || height !== canvas.height) {\n        canvas.width = width;\n        canvas.height = height;\n      } else {\n        context.setTransform(1, 0, 0, 1, 0, 0);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      }\n      const drawingWidth = x / 2;\n      const drawingHeight = y / 2;\n      this.cacheTranslationX =\n        Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;\n      this.cacheTranslationY =\n        Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;\n      context.translate(this.cacheTranslationX, this.cacheTranslationY);\n      context.scale(zoomX, zoomY);\n      this.zoomX = zoomX;\n      this.zoomY = zoomY;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Sets object's properties from options, for class constructor only.\n   * Needs to be overridden for different defaults.\n   * @protected\n   * @param {Object} [options] Options object\n   */\n  protected setOptions(options: Record<string, any> = {}) {\n    this._setOptions(options);\n  }\n\n  /**\n   * Transforms context when rendering an object\n   * @param {CanvasRenderingContext2D} ctx Context\n   */\n  transform(ctx: CanvasRenderingContext2D) {\n    const needFullTransform =\n      (this.group && !this.group._transformDone) ||\n      (this.group && this.canvas && ctx === (this.canvas as Canvas).contextTop);\n    const m = this.calcTransformMatrix(!needFullTransform);\n    ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n  }\n\n  /**\n   * Return the object scale factor counting also the group scaling\n   * @return {Point}\n   */\n  getObjectScaling() {\n    // if the object is a top level one, on the canvas, we go for simple aritmetic\n    // otherwise the complex method with angles will return approximations and decimals\n    // and will likely kill the cache when not needed\n    // https://github.com/fabricjs/fabric.js/issues/7157\n    if (!this.group) {\n      return new Point(Math.abs(this.scaleX), Math.abs(this.scaleY));\n    }\n    // if we are inside a group total zoom calculation is complex, we defer to generic matrices\n    const options = qrDecompose(this.calcTransformMatrix());\n    return new Point(Math.abs(options.scaleX), Math.abs(options.scaleY));\n  }\n\n  /**\n   * Return the object scale factor counting also the group scaling, zoom and retina\n   * @return {Object} object with scaleX and scaleY properties\n   */\n  getTotalObjectScaling() {\n    const scale = this.getObjectScaling();\n    if (this.canvas) {\n      const zoom = this.canvas.getZoom();\n      const retina = this.getCanvasRetinaScaling();\n      return scale.scalarMultiply(zoom * retina);\n    }\n    return scale;\n  }\n\n  /**\n   * Return the object opacity counting also the group property\n   * @return {Number}\n   */\n  getObjectOpacity() {\n    let opacity = this.opacity;\n    if (this.group) {\n      opacity *= this.group.getObjectOpacity();\n    }\n    return opacity;\n  }\n\n  /**\n   * Makes sure the scale is valid and modifies it if necessary\n   * @todo: this is a control action issue, not a geometry one\n   * @private\n   * @param {Number} value, unconstrained\n   * @return {Number} constrained value;\n   */\n  _constrainScale(value: number): number {\n    if (Math.abs(value) < this.minScaleLimit) {\n      if (value < 0) {\n        return -this.minScaleLimit;\n      } else {\n        return this.minScaleLimit;\n      }\n    } else if (value === 0) {\n      return 0.0001;\n    }\n    return value;\n  }\n\n  /**\n   * Handles setting values on the instance and handling internal side effects\n   * @protected\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    if (key === SCALE_X || key === SCALE_Y) {\n      value = this._constrainScale(value);\n    }\n    if (key === SCALE_X && value < 0) {\n      this.flipX = !this.flipX;\n      value *= -1;\n    } else if (key === 'scaleY' && value < 0) {\n      this.flipY = !this.flipY;\n      value *= -1;\n      // i don't like this automatic initialization here\n    } else if (key === 'shadow' && value && !(value instanceof Shadow)) {\n      value = new Shadow(value);\n    }\n\n    const isChanged = this[key as keyof this] !== value;\n    this[key as keyof this] = value;\n\n    // invalidate caches\n    if (\n      isChanged &&\n      (this.constructor as typeof FabricObject).cacheProperties.includes(key)\n    ) {\n      this.dirty = true;\n    }\n    // a dirty child makes the parent dirty.\n    // but a non dirty child does not make the parent not dirty.\n    // the parent could be dirty for some other reason.\n    this.parent &&\n      (this.dirty ||\n        (isChanged &&\n          (this.constructor as typeof FabricObject).stateProperties.includes(\n            key,\n          ))) &&\n      this.parent._set('dirty', true);\n\n    return this;\n  }\n\n  /*\n   * @private\n   * return if the object would be visible in rendering\n   * @memberOf FabricObject.prototype\n   * @return {Boolean}\n   */\n  isNotVisible() {\n    return (\n      this.opacity === 0 ||\n      (!this.width && !this.height && this.strokeWidth === 0) ||\n      !this.visible\n    );\n  }\n\n  /**\n   * Renders an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    // do not render if width/height are zeros or object is not visible\n    if (this.isNotVisible()) {\n      return;\n    }\n    if (\n      this.canvas &&\n      this.canvas.skipOffscreen &&\n      !this.group &&\n      !this.isOnScreen()\n    ) {\n      return;\n    }\n    ctx.save();\n    this._setupCompositeOperation(ctx);\n    this.drawSelectionBackground(ctx);\n    this.transform(ctx);\n    this._setOpacity(ctx);\n    this._setShadow(ctx);\n    if (this.shouldCache()) {\n      (this as TCachedFabricObject).renderCache();\n      (this as TCachedFabricObject).drawCacheOnCanvas(ctx);\n    } else {\n      this._removeCacheCanvas();\n      this.drawObject(ctx, false, {});\n      this.dirty = false;\n    }\n    ctx.restore();\n  }\n\n  drawSelectionBackground(_ctx: CanvasRenderingContext2D) {\n    /* no op */\n  }\n\n  renderCache(this: TCachedFabricObject, options?: any) {\n    options = options || {};\n    if (!this._cacheCanvas || !this._cacheContext) {\n      this._createCacheCanvas();\n    }\n    if (this.isCacheDirty() && this._cacheContext) {\n      const { zoomX, zoomY, cacheTranslationX, cacheTranslationY } = this;\n      const { width, height } = this._cacheCanvas;\n      this.drawObject(this._cacheContext, options.forClipping, {\n        zoomX,\n        zoomY,\n        cacheTranslationX,\n        cacheTranslationY,\n        width,\n        height,\n        parentClipPaths: [],\n      });\n      this.dirty = false;\n    }\n  }\n\n  /**\n   * Remove cacheCanvas and its dimensions from the objects\n   */\n  _removeCacheCanvas() {\n    this._cacheCanvas = undefined;\n    this._cacheContext = null;\n  }\n\n  /**\n   * return true if the object will draw a stroke\n   * Does not consider text styles. This is just a shortcut used at rendering time\n   * We want it to be an approximation and be fast.\n   * wrote to avoid extra caching, it has to return true when stroke happens,\n   * can guess when it will not happen at 100% chance, does not matter if it misses\n   * some use case where the stroke is invisible.\n   * @since 3.0.0\n   * @returns Boolean\n   */\n  hasStroke() {\n    return (\n      this.stroke && this.stroke !== 'transparent' && this.strokeWidth !== 0\n    );\n  }\n\n  /**\n   * return true if the object will draw a fill\n   * Does not consider text styles. This is just a shortcut used at rendering time\n   * We want it to be an approximation and be fast.\n   * wrote to avoid extra caching, it has to return true when fill happens,\n   * can guess when it will not happen at 100% chance, does not matter if it misses\n   * some use case where the fill is invisible.\n   * @since 3.0.0\n   * @returns Boolean\n   */\n  hasFill() {\n    return this.fill && this.fill !== 'transparent';\n  }\n\n  /**\n   * When returns `true`, force the object to have its own cache, even if it is inside a group\n   * it may be needed when your object behave in a particular way on the cache and always needs\n   * its own isolated canvas to render correctly.\n   * Created to be overridden\n   * since 1.7.12\n   * @returns Boolean\n   */\n  needsItsOwnCache() {\n    // TODO re-evaluate this shadow condition\n    if (\n      this.paintFirst === STROKE &&\n      this.hasFill() &&\n      this.hasStroke() &&\n      !!this.shadow\n    ) {\n      return true;\n    }\n    if (this.clipPath) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Decide if the object should cache or not. Create its own cache level\n   * objectCaching is a global flag, wins over everything\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step.\n   * Generally you do not cache objects in groups because the group outside is cached.\n   * Read as: cache if is needed, or if the feature is enabled but we are not already caching.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    this.ownCaching =\n      (this.objectCaching && (!this.parent || !this.parent.isOnACache())) ||\n      this.needsItsOwnCache();\n    return this.ownCaching;\n  }\n\n  /**\n   * Check if this object will cast a shadow with an offset.\n   * used by Group.shouldCache to know if child has a shadow recursively\n   * @return {Boolean}\n   * @deprecated\n   */\n  willDrawShadow() {\n    return (\n      !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0)\n    );\n  }\n\n  /**\n   * Execute the drawing operation for an object clipPath\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {FabricObject} clipPath\n   */\n  drawClipPathOnCache(\n    ctx: CanvasRenderingContext2D,\n    clipPath: FabricObject,\n    canvasWithClipPath: HTMLCanvasElement,\n  ) {\n    ctx.save();\n    // DEBUG: uncomment this line, comment the following\n    // ctx.globalAlpha = 0.4\n    if (clipPath.inverted) {\n      ctx.globalCompositeOperation = 'destination-out';\n    } else {\n      ctx.globalCompositeOperation = 'destination-in';\n    }\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    //ctx.scale(1 / 2, 1 / 2);\n    ctx.drawImage(canvasWithClipPath, 0, 0);\n    ctx.restore();\n  }\n\n  /**\n   * Execute the drawing operation for an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {boolean} forClipping apply clipping styles\n   * @param {DrawContext} context additional context for rendering\n   */\n  drawObject(\n    ctx: CanvasRenderingContext2D,\n    forClipping: boolean | undefined,\n    context: DrawContext,\n  ) {\n    const originalFill = this.fill,\n      originalStroke = this.stroke;\n    if (forClipping) {\n      this.fill = 'black';\n      this.stroke = '';\n      this._setClippingProperties(ctx);\n    } else {\n      this._renderBackground(ctx);\n    }\n    this._render(ctx);\n    this._drawClipPath(ctx, this.clipPath, context);\n    this.fill = originalFill;\n    this.stroke = originalStroke;\n  }\n\n  private createClipPathLayer(\n    this: TCachedFabricObject,\n    clipPath: FabricObject,\n    context: DrawContext,\n  ) {\n    const canvas = createCanvasElementFor(context as TSize);\n    const ctx = canvas.getContext('2d')!;\n    ctx.translate(context.cacheTranslationX, context.cacheTranslationY);\n    ctx.scale(context.zoomX, context.zoomY);\n    clipPath._cacheCanvas = canvas;\n    context.parentClipPaths.forEach((prevClipPath) => {\n      prevClipPath.transform(ctx);\n    });\n    context.parentClipPaths.push(clipPath);\n    if (clipPath.absolutePositioned) {\n      const m = invertTransform(this.calcTransformMatrix());\n      ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n    }\n    clipPath.transform(ctx);\n    clipPath.drawObject(ctx, true, context);\n    return canvas;\n  }\n\n  /**\n   * Prepare clipPath state and cache and draw it on instance's cache\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {FabricObject} clipPath\n   */\n  _drawClipPath(\n    ctx: CanvasRenderingContext2D,\n    clipPath: FabricObject | undefined,\n    context: DrawContext,\n  ) {\n    if (!clipPath) {\n      return;\n    }\n    // needed to setup _transformDone\n    // TODO find a better solution?\n    clipPath._transformDone = true;\n    const canvas = (this as TCachedFabricObject).createClipPathLayer(\n      clipPath,\n      context,\n    );\n    this.drawClipPathOnCache(ctx, clipPath, canvas);\n  }\n\n  /**\n   * Paint the cached copy of the object on the target context.\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawCacheOnCanvas(this: TCachedFabricObject, ctx: CanvasRenderingContext2D) {\n    ctx.scale(1 / this.zoomX, 1 / this.zoomY);\n    ctx.drawImage(\n      this._cacheCanvas,\n      -this.cacheTranslationX,\n      -this.cacheTranslationY,\n    );\n  }\n\n  /**\n   * Check if cache is dirty and if is dirty clear the context.\n   * This check has a big side effect, it changes the underlying cache canvas if necessary.\n   * Do not call this method on your own to check if the cache is dirty, because if it is,\n   * it is also going to wipe the cache. This is badly designed and needs to be fixed.\n   * @param {Boolean} skipCanvas skip canvas checks because this object is painted\n   * on parent canvas.\n   */\n  isCacheDirty(skipCanvas = false) {\n    if (this.isNotVisible()) {\n      return false;\n    }\n    const canvas = this._cacheCanvas;\n    const ctx = this._cacheContext;\n    if (canvas && ctx && !skipCanvas && this._updateCacheCanvas()) {\n      // in this case the context is already cleared.\n      return true;\n    } else {\n      if (this.dirty || (this.clipPath && this.clipPath.absolutePositioned)) {\n        if (canvas && ctx && !skipCanvas) {\n          ctx.save();\n          ctx.setTransform(1, 0, 0, 1, 0, 0);\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.restore();\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Draws a background for the object big as its untransformed dimensions\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderBackground(ctx: CanvasRenderingContext2D) {\n    if (!this.backgroundColor) {\n      return;\n    }\n    const dim = this._getNonTransformedDimensions();\n    ctx.fillStyle = this.backgroundColor;\n\n    ctx.fillRect(-dim.x / 2, -dim.y / 2, dim.x, dim.y);\n    // if there is background color no other shadows\n    // should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _setOpacity(ctx: CanvasRenderingContext2D) {\n    if (this.group && !this.group._transformDone) {\n      ctx.globalAlpha = this.getObjectOpacity();\n    } else {\n      ctx.globalAlpha *= this.opacity;\n    }\n  }\n\n  _setStrokeStyles(\n    ctx: CanvasRenderingContext2D,\n    decl: Pick<\n      this,\n      | 'stroke'\n      | 'strokeWidth'\n      | 'strokeLineCap'\n      | 'strokeDashOffset'\n      | 'strokeLineJoin'\n      | 'strokeMiterLimit'\n    >,\n  ) {\n    const stroke = decl.stroke;\n    if (stroke) {\n      ctx.lineWidth = decl.strokeWidth;\n      ctx.lineCap = decl.strokeLineCap;\n      ctx.lineDashOffset = decl.strokeDashOffset;\n      ctx.lineJoin = decl.strokeLineJoin;\n      ctx.miterLimit = decl.strokeMiterLimit;\n      if (isFiller(stroke)) {\n        if (\n          (stroke as Gradient<'linear'>).gradientUnits === 'percentage' ||\n          (stroke as Gradient<'linear'>).gradientTransform ||\n          (stroke as Pattern).patternTransform\n        ) {\n          // need to transform gradient in a pattern.\n          // this is a slow process. If you are hitting this codepath, and the object\n          // is not using caching, you should consider switching it on.\n          // we need a canvas as big as the current object caching canvas.\n          this._applyPatternForTransformedGradient(ctx, stroke);\n        } else {\n          // is a simple gradient or pattern\n          ctx.strokeStyle = stroke.toLive(ctx)!;\n          this._applyPatternGradientTransform(ctx, stroke);\n        }\n      } else {\n        // is a color\n        ctx.strokeStyle = decl.stroke as string;\n      }\n    }\n  }\n\n  _setFillStyles(ctx: CanvasRenderingContext2D, { fill }: Pick<this, 'fill'>) {\n    if (fill) {\n      if (isFiller(fill)) {\n        ctx.fillStyle = fill.toLive(ctx)!;\n        this._applyPatternGradientTransform(ctx, fill);\n      } else {\n        ctx.fillStyle = fill;\n      }\n    }\n  }\n\n  _setClippingProperties(ctx: CanvasRenderingContext2D) {\n    ctx.globalAlpha = 1;\n    ctx.strokeStyle = 'transparent';\n    ctx.fillStyle = '#000000';\n  }\n\n  /**\n   * @private\n   * Sets line dash\n   * @param {CanvasRenderingContext2D} ctx Context to set the dash line on\n   * @param {Array} dashArray array representing dashes\n   */\n  _setLineDash(ctx: CanvasRenderingContext2D, dashArray?: number[] | null) {\n    if (!dashArray || dashArray.length === 0) {\n      return;\n    }\n    ctx.setLineDash(dashArray);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _setShadow(ctx: CanvasRenderingContext2D) {\n    if (!this.shadow) {\n      return;\n    }\n\n    const shadow = this.shadow,\n      canvas = this.canvas,\n      retinaScaling = this.getCanvasRetinaScaling(),\n      [sx, , , sy] = canvas?.viewportTransform || iMatrix,\n      multX = sx * retinaScaling,\n      multY = sy * retinaScaling,\n      scaling = shadow.nonScaling ? new Point(1, 1) : this.getObjectScaling();\n    ctx.shadowColor = shadow.color;\n    ctx.shadowBlur =\n      (shadow.blur *\n        config.browserShadowBlurConstant *\n        (multX + multY) *\n        (scaling.x + scaling.y)) /\n      4;\n    ctx.shadowOffsetX = shadow.offsetX * multX * scaling.x;\n    ctx.shadowOffsetY = shadow.offsetY * multY * scaling.y;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _removeShadow(ctx: CanvasRenderingContext2D) {\n    if (!this.shadow) {\n      return;\n    }\n\n    ctx.shadowColor = '';\n    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {TFiller} filler {@link Pattern} or {@link Gradient}\n   */\n  _applyPatternGradientTransform(\n    ctx: CanvasRenderingContext2D,\n    filler: TFiller,\n  ) {\n    if (!isFiller(filler)) {\n      return { offsetX: 0, offsetY: 0 };\n    }\n    const t =\n      (filler as Gradient<'linear'>).gradientTransform ||\n      (filler as Pattern).patternTransform;\n    const offsetX = -this.width / 2 + filler.offsetX || 0,\n      offsetY = -this.height / 2 + filler.offsetY || 0;\n\n    if ((filler as Gradient<'linear'>).gradientUnits === 'percentage') {\n      ctx.transform(this.width, 0, 0, this.height, offsetX, offsetY);\n    } else {\n      ctx.transform(1, 0, 0, 1, offsetX, offsetY);\n    }\n    if (t) {\n      ctx.transform(t[0], t[1], t[2], t[3], t[4], t[5]);\n    }\n    return { offsetX: offsetX, offsetY: offsetY };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderPaintInOrder(ctx: CanvasRenderingContext2D) {\n    if (this.paintFirst === STROKE) {\n      this._renderStroke(ctx);\n      this._renderFill(ctx);\n    } else {\n      this._renderFill(ctx);\n      this._renderStroke(ctx);\n    }\n  }\n\n  /**\n   * @private\n   * function that actually render something on the context.\n   * empty here to allow Obects to work on tests to benchmark fabric functionalites\n   * not related to rendering\n   * @param {CanvasRenderingContext2D} _ctx Context to render on\n   */\n  _render(_ctx: CanvasRenderingContext2D) {\n    // placeholder to be overridden\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderFill(ctx: CanvasRenderingContext2D) {\n    if (!this.fill) {\n      return;\n    }\n\n    ctx.save();\n    this._setFillStyles(ctx, this);\n    if (this.fillRule === 'evenodd') {\n      ctx.fill('evenodd');\n    } else {\n      ctx.fill();\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderStroke(ctx: CanvasRenderingContext2D) {\n    if (!this.stroke || this.strokeWidth === 0) {\n      return;\n    }\n\n    if (this.shadow && !this.shadow.affectStroke) {\n      this._removeShadow(ctx);\n    }\n\n    ctx.save();\n    if (this.strokeUniform) {\n      const scaling = this.getObjectScaling();\n      ctx.scale(1 / scaling.x, 1 / scaling.y);\n    }\n    this._setLineDash(ctx, this.strokeDashArray);\n    this._setStrokeStyles(ctx, this);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  /**\n   * This function try to patch the missing gradientTransform on canvas gradients.\n   * transforming a context to transform the gradient, is going to transform the stroke too.\n   * we want to transform the gradient but not the stroke operation, so we create\n   * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\n   * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size\n   * is limited.\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Gradient} filler\n   */\n  _applyPatternForTransformedGradient(\n    ctx: CanvasRenderingContext2D,\n    filler: TFiller,\n  ) {\n    const dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\n      retinaScaling = this.getCanvasRetinaScaling(),\n      width = dims.x / this.scaleX / retinaScaling,\n      height = dims.y / this.scaleY / retinaScaling,\n      pCanvas = createCanvasElementFor({\n        // in case width and height are less than 1px, we have to round up.\n        // since the pattern is no-repeat, this is fine\n        width: Math.ceil(width),\n        height: Math.ceil(height),\n      });\n\n    const pCtx = pCanvas.getContext('2d');\n    if (!pCtx) {\n      return;\n    }\n    pCtx.beginPath();\n    pCtx.moveTo(0, 0);\n    pCtx.lineTo(width, 0);\n    pCtx.lineTo(width, height);\n    pCtx.lineTo(0, height);\n    pCtx.closePath();\n    pCtx.translate(width / 2, height / 2);\n    pCtx.scale(\n      dims.zoomX / this.scaleX / retinaScaling,\n      dims.zoomY / this.scaleY / retinaScaling,\n    );\n    this._applyPatternGradientTransform(pCtx, filler);\n    pCtx.fillStyle = filler.toLive(ctx)!;\n    pCtx.fill();\n    ctx.translate(\n      -this.width / 2 - this.strokeWidth / 2,\n      -this.height / 2 - this.strokeWidth / 2,\n    );\n    ctx.scale(\n      (retinaScaling * this.scaleX) / dims.zoomX,\n      (retinaScaling * this.scaleY) / dims.zoomY,\n    );\n    ctx.strokeStyle = pCtx.createPattern(pCanvas, 'no-repeat') ?? '';\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement() {\n    return new Point(this.left + this.width / 2, this.top + this.height / 2);\n  }\n\n  /**\n   * Clones an instance.\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @returns {Promise<FabricObject>}\n   */\n  clone(propertiesToInclude?: string[]): Promise<this> {\n    const objectForm = this.toObject(propertiesToInclude);\n    return (this.constructor as typeof FabricObject).fromObject(\n      objectForm,\n    ) as unknown as Promise<this>;\n  }\n\n  /**\n   * Creates an instance of Image out of an object\n   * makes use of toCanvasElement.\n   * Once this method was based on toDataUrl and loadImage, so it also had a quality\n   * and format option. toCanvasElement is faster and produce no loss of quality.\n   * If you need to get a real Jpeg or Png from an object, using toDataURL is the right way to do it.\n   * toCanvasElement and then toBlob from the obtained canvas is also a good option.\n   * @todo fix the export type, it could not be Image but the type that getClass return for 'image'.\n   * @param {ObjectToCanvasElementOptions} [options] for clone as image, passed to toDataURL\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @return {FabricImage} Object cloned as image.\n   */\n  cloneAsImage(options: ObjectToCanvasElementOptions): FabricImage {\n    const canvasEl = this.toCanvasElement(options);\n    // TODO: how to import Image w/o an import cycle?\n    const ImageClass = classRegistry.getClass<typeof FabricImage>('image');\n    return new ImageClass(canvasEl);\n  }\n\n  /**\n   * Converts an object into a HTMLCanvas element\n   * @param {ObjectToCanvasElementOptions} options Options object\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @param {Boolean} [options.viewportTransform] Account for canvas viewport transform\n   * @param {(el?: HTMLCanvasElement) => StaticCanvas} [options.canvasProvider] Create the output canvas\n   * @return {HTMLCanvasElement} Returns DOM element <canvas> with the FabricObject\n   */\n  toCanvasElement(options: ObjectToCanvasElementOptions = {}) {\n    const origParams = saveObjectTransform(this),\n      originalGroup = this.group,\n      originalShadow = this.shadow,\n      abs = Math.abs,\n      retinaScaling = options.enableRetinaScaling ? getDevicePixelRatio() : 1,\n      multiplier = (options.multiplier || 1) * retinaScaling,\n      canvasProvider: (el: HTMLCanvasElement) => StaticCanvas =\n        options.canvasProvider ||\n        ((el: HTMLCanvasElement) =>\n          new StaticCanvas(el, {\n            enableRetinaScaling: false,\n            renderOnAddRemove: false,\n            skipOffscreen: false,\n          }));\n    delete this.group;\n    if (options.withoutTransform) {\n      resetObjectTransform(this);\n    }\n    if (options.withoutShadow) {\n      this.shadow = null;\n    }\n    if (options.viewportTransform) {\n      sendObjectToPlane(this, this.getViewportTransform());\n    }\n\n    this.setCoords();\n    const el = createCanvasElement(),\n      boundingRect = this.getBoundingRect(),\n      shadow = this.shadow,\n      shadowOffset = new Point();\n\n    if (shadow) {\n      const shadowBlur = shadow.blur;\n      const scaling = shadow.nonScaling\n        ? new Point(1, 1)\n        : this.getObjectScaling();\n      // consider non scaling shadow.\n      shadowOffset.x =\n        2 * Math.round(abs(shadow.offsetX) + shadowBlur) * abs(scaling.x);\n      shadowOffset.y =\n        2 * Math.round(abs(shadow.offsetY) + shadowBlur) * abs(scaling.y);\n    }\n    const width = boundingRect.width + shadowOffset.x,\n      height = boundingRect.height + shadowOffset.y;\n    // if the current width/height is not an integer\n    // we need to make it so.\n    el.width = Math.ceil(width);\n    el.height = Math.ceil(height);\n    const canvas = canvasProvider(el);\n    if (options.format === 'jpeg') {\n      canvas.backgroundColor = '#fff';\n    }\n    this.setPositionByOrigin(\n      new Point(canvas.width / 2, canvas.height / 2),\n      CENTER,\n      CENTER,\n    );\n    const originalCanvas = this.canvas;\n    // static canvas and canvas have both an array of InteractiveObjects\n    // @ts-expect-error this needs to be fixed somehow, or ignored globally\n    canvas._objects = [this];\n    this.set('canvas', canvas);\n    this.setCoords();\n    const canvasEl = canvas.toCanvasElement(multiplier || 1, options);\n    this.set('canvas', originalCanvas);\n    this.shadow = originalShadow;\n    if (originalGroup) {\n      this.group = originalGroup;\n    }\n    this.set(origParams);\n    this.setCoords();\n    // canvas.dispose will call image.dispose that will nullify the elements\n    // since this canvas is a simple element for the process, we remove references\n    // to objects in this way in order to avoid object trashing.\n    canvas._objects = [];\n    // since render has settled it is safe to destroy canvas\n    canvas.destroy();\n    return canvasEl;\n  }\n\n  /**\n   * Converts an object into a data-url-like string\n   * @param {Object} options Options object\n   * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n   * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n   */\n  toDataURL(options: toDataURLOptions = {}) {\n    return toDataURL(\n      this.toCanvasElement(options),\n      options.format || 'png',\n      options.quality || 1,\n    );\n  }\n  toBlob(options: toDataURLOptions = {}) {\n    return toBlob(\n      this.toCanvasElement(options),\n      options.format || 'png',\n      options.quality || 1,\n    );\n  }\n\n  /**\n   * Returns true if any of the specified types is identical to the type of an instance\n   * @param {String} type Type to check against\n   * @return {Boolean}\n   */\n  isType(...types: string[]) {\n    return (\n      types.includes((this.constructor as typeof FabricObject).type) ||\n      types.includes(this.type)\n    );\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity of this instance (is 1 unless subclassed)\n   */\n  complexity() {\n    return 1;\n  }\n\n  /**\n   * Returns a JSON representation of an instance\n   * @return {Object} JSON\n   */\n  toJSON() {\n    // delegate, not alias\n    return this.toObject();\n  }\n\n  /**\n   * Sets \"angle\" of an instance with centered rotation\n   * @param {TDegree} angle Angle value (in degrees)\n   */\n  rotate(angle: TDegree) {\n    const { centeredRotation, originX, originY } = this;\n\n    if (centeredRotation) {\n      const { x, y } = this.getRelativeCenterPoint();\n      this.originX = CENTER;\n      this.originY = CENTER;\n      this.left = x;\n      this.top = y;\n    }\n\n    this.set('angle', angle);\n\n    if (centeredRotation) {\n      const { x, y } = this.translateToOriginPoint(\n        this.getRelativeCenterPoint(),\n        originX,\n        originY,\n      );\n      this.left = x;\n      this.top = y;\n      this.originX = originX;\n      this.originY = originY;\n    }\n  }\n\n  /**\n   * This callback function is called by the parent group of an object every\n   * time a non-delegated property changes on the group. It is passed the key\n   * and value as parameters. Not adding in this function's signature to avoid\n   * Travis build error about unused variables.\n   */\n  setOnGroup() {\n    // implemented by sub-classes, as needed.\n  }\n\n  /**\n   * Sets canvas globalCompositeOperation for specific object\n   * custom composition operation for the particular object can be specified using globalCompositeOperation property\n   * @param {CanvasRenderingContext2D} ctx Rendering canvas context\n   */\n  _setupCompositeOperation(ctx: CanvasRenderingContext2D) {\n    if (this.globalCompositeOperation) {\n      ctx.globalCompositeOperation = this.globalCompositeOperation;\n    }\n  }\n\n  /**\n   * cancel instance's running animations\n   * override if necessary to dispose artifacts such as `clipPath`\n   */\n  dispose() {\n    runningAnimations.cancelByTarget(this);\n    this.off();\n    this._set('canvas', undefined);\n    // clear caches\n    this._cacheCanvas && getEnv().dispose(this._cacheCanvas);\n    this._cacheCanvas = undefined;\n    this._cacheContext = null;\n  }\n\n  // #region Animation methods\n  /**\n   * List of properties to consider for animating colors.\n   * @type String[]\n   */\n  static colorProperties: string[] = [FILL, STROKE, 'backgroundColor'];\n\n  /**\n   * Animates object's properties\n   * @param {Record<string, number | number[] | TColorArg>} animatable map of keys and end values\n   * @param {Partial<AnimationOptions<T>>} options\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}\n   * @return {Record<string, TAnimation<T>>} map of animation contexts\n   *\n   * As object — multiple properties\n   *\n   * object.animate({ left: ..., top: ... });\n   * object.animate({ left: ..., top: ... }, { duration: ... });\n   */\n  animate<T extends number | number[] | TColorArg>(\n    animatable: Record<string, T>,\n    options?: Partial<AnimationOptions<T>>,\n  ): Record<string, TAnimation<T>> {\n    return Object.entries(animatable).reduce(\n      (acc, [key, endValue]) => {\n        acc[key] = this._animate(key, endValue, options);\n        return acc;\n      },\n      {} as Record<string, TAnimation<T>>,\n    );\n  }\n\n  /**\n   * @private\n   * @param {String} key Property to animate\n   * @param {String} to Value to animate to\n   * @param {Object} [options] Options object\n   */\n  _animate<T extends number | number[] | TColorArg>(\n    key: string,\n    endValue: T,\n    options: Partial<AnimationOptions<T>> = {},\n  ): TAnimation<T> {\n    const path = key.split('.');\n    const propIsColor = (\n      this.constructor as typeof FabricObject\n    ).colorProperties.includes(path[path.length - 1]);\n    const { abort, startValue, onChange, onComplete } = options;\n    const animationOptions = {\n      ...options,\n      target: this,\n      // path.reduce... is the current value in case start value isn't provided\n      startValue:\n        startValue ?? path.reduce((deep: any, key) => deep[key], this),\n      endValue,\n      abort: abort?.bind(this),\n      onChange: (\n        value: number | number[] | string,\n        valueProgress: number,\n        durationProgress: number,\n      ) => {\n        path.reduce((deep: Record<string, any>, key, index) => {\n          if (index === path.length - 1) {\n            deep[key] = value;\n          }\n          return deep[key];\n        }, this);\n        onChange &&\n          // @ts-expect-error generic callback arg0 is wrong\n          onChange(value, valueProgress, durationProgress);\n      },\n      onComplete: (\n        value: number | number[] | string,\n        valueProgress: number,\n        durationProgress: number,\n      ) => {\n        this.setCoords();\n        onComplete &&\n          // @ts-expect-error generic callback arg0 is wrong\n          onComplete(value, valueProgress, durationProgress);\n      },\n    } as AnimationOptions<T>;\n\n    return (\n      propIsColor\n        ? animateColor(animationOptions as ColorAnimationOptions)\n        : animate(\n            animationOptions as ValueAnimationOptions | ArrayAnimationOptions,\n          )\n    ) as TAnimation<T>;\n  }\n\n  // #region Object stacking methods\n\n  /**\n   * A reference to the parent of the object\n   * Used to keep the original parent ref when the object has been added to an ActiveSelection, hence loosing the `group` ref\n   */\n  declare parent?: Group;\n\n  /**\n   * Checks if object is descendant of target\n   * Should be used instead of {@link Group.contains} or {@link StaticCanvas.contains} for performance reasons\n   * @param {TAncestor} target\n   * @returns {boolean}\n   */\n  isDescendantOf(target: TAncestor): boolean {\n    const { parent, group } = this;\n    return (\n      parent === target ||\n      group === target ||\n      // walk up\n      (!!parent && parent.isDescendantOf(target)) ||\n      (!!group && group !== parent && group.isDescendantOf(target))\n    );\n  }\n\n  /**\n   * @returns {Ancestors} ancestors (excluding `ActiveSelection`) from bottom to top\n   */\n  getAncestors(): Ancestors {\n    const ancestors: TAncestor[] = [];\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let parent: TAncestor | undefined = this;\n    do {\n      parent = parent.parent;\n      parent && ancestors.push(parent);\n    } while (parent);\n    return ancestors as Ancestors;\n  }\n\n  /**\n   * Compare ancestors\n   *\n   * @param {StackedObject} other\n   * @returns {AncestryComparison} an object that represent the ancestry situation.\n   */\n  findCommonAncestors<T extends this>(other: T): AncestryComparison {\n    if (this === other) {\n      return {\n        fork: [],\n        otherFork: [],\n        common: [this, ...this.getAncestors()],\n      } as AncestryComparison;\n    }\n    const ancestors = this.getAncestors();\n    const otherAncestors = other.getAncestors();\n    //  if `this` has no ancestors and `this` is top ancestor of `other` we must handle the following case\n    if (\n      ancestors.length === 0 &&\n      otherAncestors.length > 0 &&\n      this === otherAncestors[otherAncestors.length - 1]\n    ) {\n      return {\n        fork: [],\n        otherFork: [\n          other,\n          ...otherAncestors.slice(0, otherAncestors.length - 1),\n        ],\n        common: [this],\n      } as AncestryComparison;\n    }\n    //  compare ancestors\n    for (let i = 0, ancestor; i < ancestors.length; i++) {\n      ancestor = ancestors[i];\n      if (ancestor === other) {\n        return {\n          fork: [this, ...ancestors.slice(0, i)],\n          otherFork: [],\n          common: ancestors.slice(i),\n        } as AncestryComparison;\n      }\n      for (let j = 0; j < otherAncestors.length; j++) {\n        if (this === otherAncestors[j]) {\n          return {\n            fork: [],\n            otherFork: [other, ...otherAncestors.slice(0, j)],\n            common: [this, ...ancestors],\n          } as AncestryComparison;\n        }\n        if (ancestor === otherAncestors[j]) {\n          return {\n            fork: [this, ...ancestors.slice(0, i)],\n            otherFork: [other, ...otherAncestors.slice(0, j)],\n            common: ancestors.slice(i),\n          } as AncestryComparison;\n        }\n      }\n    }\n    // nothing shared\n    return {\n      fork: [this, ...ancestors],\n      otherFork: [other, ...otherAncestors],\n      common: [],\n    } as AncestryComparison;\n  }\n\n  /**\n   *\n   * @param {StackedObject} other\n   * @returns {boolean}\n   */\n  hasCommonAncestors<T extends this>(other: T): boolean {\n    const commonAncestors = this.findCommonAncestors(other);\n    return commonAncestors && !!commonAncestors.common.length;\n  }\n\n  /**\n   *\n   * @param {FabricObject} other object to compare against\n   * @returns {boolean | undefined} if objects do not share a common ancestor or they are strictly equal it is impossible to determine which is in front of the other; in such cases the function returns `undefined`\n   */\n  isInFrontOf<T extends this>(other: T): boolean | undefined {\n    if (this === other) {\n      return undefined;\n    }\n    const ancestorData = this.findCommonAncestors(other);\n\n    if (ancestorData.fork.includes(other as any)) {\n      return true;\n    }\n    if (ancestorData.otherFork.includes(this as any)) {\n      return false;\n    }\n    // if there isn't a common ancestor, we take the canvas.\n    // if there is no canvas, there is nothing to compare\n    const firstCommonAncestor = ancestorData.common[0] || this.canvas;\n    if (!firstCommonAncestor) {\n      return undefined;\n    }\n    const headOfFork = ancestorData.fork.pop(),\n      headOfOtherFork = ancestorData.otherFork.pop(),\n      thisIndex = (firstCommonAncestor as TCollection)._objects.indexOf(\n        headOfFork as any,\n      ),\n      otherIndex = (firstCommonAncestor as TCollection)._objects.indexOf(\n        headOfOtherFork as any,\n      );\n    return thisIndex > -1 && thisIndex > otherIndex;\n  }\n\n  // #region Serialization\n  /**\n   * Define a list of custom properties that will be serialized when\n   * instance.toObject() gets called\n   */\n  static customProperties: string[] = [];\n\n  /**\n   * Returns an object representation of an instance\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject(propertiesToInclude: any[] = []): any {\n    const propertiesToSerialize = propertiesToInclude.concat(\n      FabricObject.customProperties,\n      (this.constructor as typeof FabricObject).customProperties || [],\n    );\n    let clipPathData: Partial<SerializedObjectProps> | undefined;\n    const NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS;\n    const {\n      clipPath,\n      fill,\n      stroke,\n      shadow,\n      strokeDashArray,\n      left,\n      top,\n      originX,\n      originY,\n      width,\n      height,\n      strokeWidth,\n      strokeLineCap,\n      strokeDashOffset,\n      strokeLineJoin,\n      strokeUniform,\n      strokeMiterLimit,\n      scaleX,\n      scaleY,\n      angle,\n      flipX,\n      flipY,\n      opacity,\n      visible,\n      backgroundColor,\n      fillRule,\n      paintFirst,\n      globalCompositeOperation,\n      skewX,\n      skewY,\n    } = this;\n    if (clipPath && !clipPath.excludeFromExport) {\n      clipPathData = clipPath.toObject(\n        propertiesToSerialize.concat('inverted', 'absolutePositioned'),\n      );\n    }\n    const toFixedBound = (val: number) => toFixed(val, NUM_FRACTION_DIGITS);\n    const object = {\n      ...pick(this, propertiesToSerialize as (keyof this)[]),\n      type: (this.constructor as typeof FabricObject).type,\n      version: VERSION,\n      originX,\n      originY,\n      left: toFixedBound(left),\n      top: toFixedBound(top),\n      width: toFixedBound(width),\n      height: toFixedBound(height),\n      fill: isSerializableFiller(fill) ? fill.toObject() : fill,\n      stroke: isSerializableFiller(stroke) ? stroke.toObject() : stroke,\n      strokeWidth: toFixedBound(strokeWidth),\n      strokeDashArray: strokeDashArray\n        ? strokeDashArray.concat()\n        : strokeDashArray,\n      strokeLineCap,\n      strokeDashOffset,\n      strokeLineJoin,\n      strokeUniform,\n      strokeMiterLimit: toFixedBound(strokeMiterLimit),\n      scaleX: toFixedBound(scaleX),\n      scaleY: toFixedBound(scaleY),\n      angle: toFixedBound(angle),\n      flipX,\n      flipY,\n      opacity: toFixedBound(opacity),\n      shadow: shadow ? shadow.toObject() : shadow,\n      visible,\n      backgroundColor,\n      fillRule,\n      paintFirst,\n      globalCompositeOperation,\n      skewX: toFixedBound(skewX),\n      skewY: toFixedBound(skewY),\n      ...(clipPathData ? { clipPath: clipPathData } : null),\n    };\n\n    return !this.includeDefaultValues\n      ? this._removeDefaultValues(object)\n      : object;\n  }\n\n  /**\n   * Returns (dataless) object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toDatalessObject(propertiesToInclude?: any[]): any {\n    // will be overwritten by subclasses\n    return this.toObject(propertiesToInclude);\n  }\n\n  /**\n   * @private\n   * @param {Object} object\n   */\n  _removeDefaultValues<T extends object>(object: T): Partial<T> {\n    // getDefaults() ( get from static ownDefaults ) should win over prototype since anyway they get assigned to instance\n    // ownDefault vs prototype is swappable only if you change all the fabric objects consistently.\n    const defaults = (this.constructor as typeof FabricObject).getDefaults();\n    const hasStaticDefaultValues = Object.keys(defaults).length > 0;\n    const baseValues = hasStaticDefaultValues\n      ? defaults\n      : Object.getPrototypeOf(this);\n\n    return pickBy(object, (value, key) => {\n      if (key === LEFT || key === TOP || key === 'type') {\n        return true;\n      }\n      const baseValue = baseValues[key];\n      return (\n        value !== baseValue &&\n        // basically a check for [] === []\n        !(\n          Array.isArray(value) &&\n          Array.isArray(baseValue) &&\n          value.length === 0 &&\n          baseValue.length === 0\n        )\n      );\n    });\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @return {String}\n   */\n  toString() {\n    return `#<${(this.constructor as typeof FabricObject).type}>`;\n  }\n\n  /**\n   *\n   * @param {Function} klass\n   * @param {object} object\n   * @param {object} [options]\n   * @param {string} [options.extraParam] property to pass as first argument to the constructor\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricObject>}\n   */\n  static _fromObject<S extends FabricObject>(\n    { type, ...serializedObjectOptions }: Record<string, unknown>,\n    { extraParam, ...options }: Abortable & { extraParam?: string } = {},\n  ): Promise<S> {\n    return enlivenObjectEnlivables<any>(serializedObjectOptions, options).then(\n      (enlivedObjectOptions) => {\n        // from the resulting enlived options, extract options.extraParam to arg0\n        // to avoid accidental overrides later\n        if (extraParam) {\n          delete enlivedObjectOptions[extraParam];\n          return new this(\n            serializedObjectOptions[extraParam],\n            // @ts-expect-error different signature\n            enlivedObjectOptions,\n          );\n        } else {\n          return new this(enlivedObjectOptions);\n        }\n      },\n    ) as Promise<S>;\n  }\n\n  /**\n   *\n   * @param {object} object\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricObject>}\n   */\n  static fromObject<T extends TOptions<SerializedObjectProps>>(\n    object: T,\n    options?: Abortable,\n  ) {\n    return this._fromObject(object, options);\n  }\n}\n\nclassRegistry.setClass(FabricObject);\nclassRegistry.setClass(FabricObject, 'object');\n","import type {\n  TModificationEvents,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { fireEvent } from './fireEvent';\nimport { commonEventInfo } from './util';\n\n/**\n * Wrap an action handler with firing an event if the action is performed\n * @param {TModificationEvents} eventName the event we want to fire\n * @param {TransformActionHandler<T>} actionHandler the function to wrap\n * @param {object} extraEventInfo extra information to pas to the event handler\n * @return {TransformActionHandler<T>} a function with an action handler signature\n */\nexport const wrapWithFireEvent = <\n  T extends Transform,\n  P extends object = Record<string, never>,\n>(\n  eventName: TModificationEvents,\n  actionHandler: TransformActionHandler<T>,\n  extraEventInfo?: P,\n) => {\n  return ((eventData, transform, x, y) => {\n    const actionPerformed = actionHandler(eventData, transform, x, y);\n    if (actionPerformed) {\n      fireEvent(eventName, {\n        ...commonEventInfo(eventData, transform, x, y),\n        ...extraEventInfo,\n      });\n    }\n    return actionPerformed;\n  }) as TransformActionHandler<T>;\n};\n","import type { Transform, TransformActionHandler } from '../EventTypeDefs';\n\n/**\n * Wrap an action handler with saving/restoring object position on the transform.\n * this is the code that permits to objects to keep their position while transforming.\n * @param {Function} actionHandler the function to wrap\n * @return {Function} a function with an action handler signature\n */\nexport function wrapWithFixedAnchor<T extends Transform>(\n  actionHandler: TransformActionHandler<T>,\n) {\n  return ((eventData, transform, x, y) => {\n    const { target, originX, originY } = transform,\n      centerPoint = target.getRelativeCenterPoint(),\n      constraint = target.translateToOriginPoint(centerPoint, originX, originY),\n      actionPerformed = actionHandler(eventData, transform, x, y);\n    // flipping requires to change the transform origin, so we read from the mutated transform\n    // instead of leveraging the one destructured before\n    target.setPositionByOrigin(\n      constraint,\n      transform.originX,\n      transform.originY,\n    );\n    return actionPerformed;\n  }) as TransformActionHandler<T>;\n}\n","import type { TransformActionHandler } from '../EventTypeDefs';\nimport { CENTER, LEFT, RESIZING, RIGHT } from '../constants';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { getLocalPoint, isTransformCentered } from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\n\n/**\n * Action handler to change object's width\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const changeObjectWidth: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  const localPoint = getLocalPoint(\n    transform,\n    transform.originX,\n    transform.originY,\n    x,\n    y,\n  );\n  //  make sure the control changes width ONLY from it's side of target\n  if (\n    resolveOrigin(transform.originX) === resolveOrigin(CENTER) ||\n    (resolveOrigin(transform.originX) === resolveOrigin(RIGHT) &&\n      localPoint.x < 0) ||\n    (resolveOrigin(transform.originX) === resolveOrigin(LEFT) &&\n      localPoint.x > 0)\n  ) {\n    const { target } = transform,\n      strokePadding =\n        target.strokeWidth / (target.strokeUniform ? target.scaleX : 1),\n      multiplier = isTransformCentered(transform) ? 2 : 1,\n      oldWidth = target.width,\n      newWidth =\n        Math.abs((localPoint.x * multiplier) / target.scaleX) - strokePadding;\n    target.set('width', Math.max(newWidth, 1));\n    //  check against actual target width in case `newWidth` was rejected\n    return oldWidth !== target.width;\n  }\n  return false;\n};\n\nexport const changeWidth = wrapWithFireEvent(\n  RESIZING,\n  wrapWithFixedAnchor(changeObjectWidth),\n);\n","import { FILL, STROKE, twoMathPi } from '../constants';\nimport type { InteractiveFabricObject } from '../shapes/Object/InteractiveObject';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport type { Control } from './Control';\n\nexport type ControlRenderingStyleOverride = Partial<\n  Pick<\n    InteractiveFabricObject,\n    | 'cornerStyle'\n    | 'cornerSize'\n    | 'cornerColor'\n    | 'cornerStrokeColor'\n    | 'cornerDashArray'\n    | 'transparentCorners'\n  >\n>;\n\nexport type ControlRenderer<\n  O extends InteractiveFabricObject = InteractiveFabricObject,\n> = (\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: O,\n) => void;\n\n/**\n * Render a round control, as per fabric features.\n * This function is written to respect object properties like transparentCorners, cornerSize\n * cornerColor, cornerStrokeColor\n * plus the addition of offsetY and offsetX.\n * @param {CanvasRenderingContext2D} ctx context to render on\n * @param {Number} left x coordinate where the control center should be\n * @param {Number} top y coordinate where the control center should be\n * @param {Object} styleOverride override for FabricObject controls style\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n */\nexport function renderCircleControl(\n  this: Control,\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: InteractiveFabricObject,\n) {\n  styleOverride = styleOverride || {};\n  const xSize =\n      this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,\n    ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,\n    transparentCorners =\n      typeof styleOverride.transparentCorners !== 'undefined'\n        ? styleOverride.transparentCorners\n        : fabricObject.transparentCorners,\n    methodName = transparentCorners ? STROKE : FILL,\n    stroke =\n      !transparentCorners &&\n      (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor);\n  let myLeft = left,\n    myTop = top,\n    size;\n  ctx.save();\n  ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor || '';\n  ctx.strokeStyle =\n    styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || '';\n  // TODO: use proper ellipse code.\n  if (xSize > ySize) {\n    size = xSize;\n    ctx.scale(1.0, ySize / xSize);\n    myTop = (top * xSize) / ySize;\n  } else if (ySize > xSize) {\n    size = ySize;\n    ctx.scale(xSize / ySize, 1.0);\n    myLeft = (left * ySize) / xSize;\n  } else {\n    size = xSize;\n  }\n  ctx.beginPath();\n  ctx.arc(myLeft, myTop, size / 2, 0, twoMathPi, false);\n  ctx[methodName]();\n  if (stroke) {\n    ctx.stroke();\n  }\n  ctx.restore();\n}\n\n/**\n * Render a square control, as per fabric features.\n * This function is written to respect object properties like transparentCorners, cornerSize\n * cornerColor, cornerStrokeColor\n * plus the addition of offsetY and offsetX.\n * @param {CanvasRenderingContext2D} ctx context to render on\n * @param {Number} left x coordinate where the control center should be\n * @param {Number} top y coordinate where the control center should be\n * @param {Object} styleOverride override for FabricObject controls style\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n */\nexport function renderSquareControl(\n  this: Control,\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: InteractiveFabricObject,\n) {\n  styleOverride = styleOverride || {};\n  const xSize =\n      this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,\n    ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,\n    transparentCorners =\n      typeof styleOverride.transparentCorners !== 'undefined'\n        ? styleOverride.transparentCorners\n        : fabricObject.transparentCorners,\n    methodName = transparentCorners ? STROKE : FILL,\n    stroke =\n      !transparentCorners &&\n      (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor),\n    xSizeBy2 = xSize / 2,\n    ySizeBy2 = ySize / 2;\n  ctx.save();\n  ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor || '';\n  ctx.strokeStyle =\n    styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || '';\n  ctx.translate(left, top);\n  //  angle is relative to canvas plane\n  const angle = fabricObject.getTotalAngle();\n  ctx.rotate(degreesToRadians(angle));\n  // this does not work, and fixed with ( && ) does not make sense.\n  // to have real transparent corners we need the controls on upperCanvas\n  // transparentCorners || ctx.clearRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n  ctx[`${methodName}Rect`](-xSizeBy2, -ySizeBy2, xSize, ySize);\n  if (stroke) {\n    ctx.strokeRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n  }\n  ctx.restore();\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport type {\n  ControlActionHandler,\n  TPointerEvent,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { Intersection } from '../Intersection';\nimport { Point } from '../Point';\nimport { SCALE } from '../constants';\nimport type { InteractiveFabricObject } from '../shapes/Object/InteractiveObject';\nimport type { TCornerPoint, TDegree, TMat2D } from '../typedefs';\nimport {\n  createRotateMatrix,\n  createScaleMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrixArray,\n} from '../util/misc/matrix';\nimport type { ControlRenderingStyleOverride } from './controlRendering';\nimport { renderCircleControl, renderSquareControl } from './controlRendering';\n\nexport class Control {\n  /**\n   * keep track of control visibility.\n   * mainly for backward compatibility.\n   * if you do not want to see a control, you can remove it\n   * from the control set.\n   * @type {Boolean}\n   * @default true\n   */\n  visible = true;\n\n  /**\n   * Name of the action that the control will likely execute.\n   * This is optional. FabricJS uses to identify what the user is doing for some\n   * extra optimizations. If you are writing a custom control and you want to know\n   * somewhere else in the code what is going on, you can use this string here.\n   * you can also provide a custom getActionName if your control run multiple actions\n   * depending on some external state.\n   * default to scale since is the most common, used on 4 corners by default\n   * @type {String}\n   * @default 'scale'\n   */\n  actionName = SCALE;\n\n  /**\n   * Drawing angle of the control.\n   * NOT used for now, but name marked as needed for internal logic\n   * example: to reuse the same drawing function for different rotated controls\n   * @type {Number}\n   * @default 0\n   */\n  angle = 0;\n\n  /**\n   * Relative position of the control. X\n   * 0,0 is the center of the Object, while -0.5 (left) or 0.5 (right) are the extremities\n   * of the bounding box.\n   * @type {Number}\n   * @default 0\n   */\n  x = 0;\n\n  /**\n   * Relative position of the control. Y\n   * 0,0 is the center of the Object, while -0.5 (top) or 0.5 (bottom) are the extremities\n   * of the bounding box.\n   * @type {Number}\n   * @default 0\n   */\n  y = 0;\n\n  /**\n   * Horizontal offset of the control from the defined position. In pixels\n   * Positive offset moves the control to the right, negative to the left.\n   * It used when you want to have position of control that does not scale with\n   * the bounding box. Example: rotation control is placed at x:0, y: 0.5 on\n   * the boundind box, with an offset of 30 pixels vertically. Those 30 pixels will\n   * stay 30 pixels no matter how the object is big. Another example is having 2\n   * controls in the corner, that stay in the same position when the object scale.\n   * of the bounding box.\n   * @type {Number}\n   * @default 0\n   */\n  offsetX = 0;\n\n  /**\n   * Vertical offset of the control from the defined position. In pixels\n   * Positive offset moves the control to the bottom, negative to the top.\n   * @type {Number}\n   * @default 0\n   */\n  offsetY = 0;\n\n  /**\n   * Sets the length of the control. If null, defaults to object's cornerSize.\n   * Expects both sizeX and sizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  sizeX = 0;\n\n  /**\n   * Sets the height of the control. If null, defaults to object's cornerSize.\n   * Expects both sizeX and sizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  sizeY = 0;\n\n  /**\n   * Sets the length of the touch area of the control. If null, defaults to object's touchCornerSize.\n   * Expects both touchSizeX and touchSizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  touchSizeX = 0;\n\n  /**\n   * Sets the height of the touch area of the control. If null, defaults to object's touchCornerSize.\n   * Expects both touchSizeX and touchSizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  touchSizeY = 0;\n\n  /**\n   * Css cursor style to display when the control is hovered.\n   * if the method `cursorStyleHandler` is provided, this property is ignored.\n   * @type {String}\n   * @default 'crosshair'\n   */\n  cursorStyle = 'crosshair';\n\n  /**\n   * If controls has an offsetY or offsetX, draw a line that connects\n   * the control to the bounding box\n   * @type {Boolean}\n   * @default false\n   */\n  withConnection = false;\n\n  constructor(options?: Partial<Control>) {\n    Object.assign(this, options);\n  }\n\n  /**\n   * The control actionHandler, provide one to handle action ( control being moved )\n   * @param {Event} eventData the native mouse event\n   * @param {Transform} transformData properties of the current transform\n   * @param {Number} x x position of the cursor\n   * @param {Number} y y position of the cursor\n   * @return {Boolean} true if the action/event modified the object\n   */\n  declare actionHandler: TransformActionHandler;\n\n  /**\n   * The control handler for mouse down, provide one to handle mouse down on control\n   * @param {Event} eventData the native mouse event\n   * @param {Transform} transformData properties of the current transform\n   * @param {Number} x x position of the cursor\n   * @param {Number} y y position of the cursor\n   * @return {Boolean} true if the action/event modified the object\n   */\n  declare mouseDownHandler?: ControlActionHandler;\n\n  /**\n   * The control mouseUpHandler, provide one to handle an effect on mouse up.\n   * @param {Event} eventData the native mouse event\n   * @param {Transform} transformData properties of the current transform\n   * @param {Number} x x position of the cursor\n   * @param {Number} y y position of the cursor\n   * @return {Boolean} true if the action/event modified the object\n   */\n  declare mouseUpHandler?: ControlActionHandler;\n\n  shouldActivate(\n    controlKey: string,\n    fabricObject: InteractiveFabricObject,\n    pointer: Point,\n    { tl, tr, br, bl }: TCornerPoint,\n  ) {\n    // TODO: locking logic can be handled here instead of in the control handler logic\n    return (\n      fabricObject.canvas?.getActiveObject() === fabricObject &&\n      fabricObject.isControlVisible(controlKey) &&\n      Intersection.isPointInPolygon(pointer, [tl, tr, br, bl])\n    );\n  }\n\n  /**\n   * Returns control actionHandler\n   * @param {Event} eventData the native mouse event\n   * @param {FabricObject} fabricObject on which the control is displayed\n   * @param {Control} control control for which the action handler is being asked\n   * @return {Function} the action handler\n   */\n  getActionHandler(\n    eventData: TPointerEvent,\n    fabricObject: InteractiveFabricObject,\n    control: Control,\n  ): TransformActionHandler | undefined {\n    return this.actionHandler;\n  }\n\n  /**\n   * Returns control mouseDown handler\n   * @param {Event} eventData the native mouse event\n   * @param {FabricObject} fabricObject on which the control is displayed\n   * @param {Control} control control for which the action handler is being asked\n   * @return {Function} the action handler\n   */\n  getMouseDownHandler(\n    eventData: TPointerEvent,\n    fabricObject: InteractiveFabricObject,\n    control: Control,\n  ): ControlActionHandler | undefined {\n    return this.mouseDownHandler;\n  }\n\n  /**\n   * Returns control mouseUp handler.\n   * During actions the fabricObject or the control can be of different obj\n   * @param {Event} eventData the native mouse event\n   * @param {FabricObject} fabricObject on which the control is displayed\n   * @param {Control} control control for which the action handler is being asked\n   * @return {Function} the action handler\n   */\n  getMouseUpHandler(\n    eventData: TPointerEvent,\n    fabricObject: InteractiveFabricObject,\n    control: Control,\n  ): ControlActionHandler | undefined {\n    return this.mouseUpHandler;\n  }\n\n  /**\n   * Returns control cursorStyle for css using cursorStyle. If you need a more elaborate\n   * function you can pass one in the constructor\n   * the cursorStyle property\n   * @param {Event} eventData the native mouse event\n   * @param {Control} control the current control ( likely this)\n   * @param {FabricObject} object on which the control is displayed\n   * @return {String}\n   */\n  cursorStyleHandler(\n    eventData: TPointerEvent,\n    control: Control,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    return control.cursorStyle;\n  }\n\n  /**\n   * Returns the action name. The basic implementation just return the actionName property.\n   * @param {Event} eventData the native mouse event\n   * @param {Control} control the current control ( likely this)\n   * @param {FabricObject} object on which the control is displayed\n   * @return {String}\n   */\n  getActionName(\n    eventData: TPointerEvent,\n    control: Control,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    return control.actionName;\n  }\n\n  /**\n   * Returns controls visibility\n   * @param {FabricObject} object on which the control is displayed\n   * @param {String} controlKey key where the control is memorized on the\n   * @return {Boolean}\n   */\n  getVisibility(fabricObject: InteractiveFabricObject, controlKey: string) {\n    return fabricObject._controlsVisibility?.[controlKey] ?? this.visible;\n  }\n\n  /**\n   * Sets controls visibility\n   * @param {Boolean} visibility for the object\n   * @return {Void}\n   */\n  setVisibility(\n    visibility: boolean,\n    name: string,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    this.visible = visibility;\n  }\n\n  positionHandler(\n    dim: Point,\n    finalMatrix: TMat2D,\n    fabricObject: InteractiveFabricObject,\n    currentControl: Control,\n  ) {\n    return new Point(\n      this.x * dim.x + this.offsetX,\n      this.y * dim.y + this.offsetY,\n    ).transform(finalMatrix);\n  }\n\n  /**\n   * Returns the coords for this control based on object values.\n   * @param {Number} objectAngle angle from the fabric object holding the control\n   * @param {Number} objectCornerSize cornerSize from the fabric object holding the control (or touchCornerSize if\n   *   isTouch is true)\n   * @param {Number} centerX x coordinate where the control center should be\n   * @param {Number} centerY y coordinate where the control center should be\n   * @param {boolean} isTouch true if touch corner, false if normal corner\n   */\n  calcCornerCoords(\n    angle: TDegree,\n    objectCornerSize: number,\n    centerX: number,\n    centerY: number,\n    isTouch: boolean,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    const t = multiplyTransformMatrixArray([\n      createTranslateMatrix(centerX, centerY),\n      createRotateMatrix({ angle }),\n      createScaleMatrix(\n        (isTouch ? this.touchSizeX : this.sizeX) || objectCornerSize,\n        (isTouch ? this.touchSizeY : this.sizeY) || objectCornerSize,\n      ),\n    ]);\n    return {\n      tl: new Point(-0.5, -0.5).transform(t),\n      tr: new Point(0.5, -0.5).transform(t),\n      br: new Point(0.5, 0.5).transform(t),\n      bl: new Point(-0.5, 0.5).transform(t),\n    };\n  }\n\n  /**\n   * Render function for the control.\n   * When this function runs the context is unscaled. unrotate. Just retina scaled.\n   * all the functions will have to translate to the point left,top before starting Drawing\n   * if they want to draw a control where the position is detected.\n   * left and top are the result of the positionHandler function\n   * @param {RenderingContext2D} ctx the context where the control will be drawn\n   * @param {Number} left position of the canvas where we are about to render the control.\n   * @param {Number} top position of the canvas where we are about to render the control.\n   * @param {Object} styleOverride\n   * @param {FabricObject} fabricObject the object where the control is about to be rendered\n   */\n  render(\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride | undefined,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    styleOverride = styleOverride || {};\n    switch (styleOverride.cornerStyle || fabricObject.cornerStyle) {\n      case 'circle':\n        renderCircleControl.call(\n          this,\n          ctx,\n          left,\n          top,\n          styleOverride,\n          fabricObject,\n        );\n        break;\n      default:\n        renderSquareControl.call(\n          this,\n          ctx,\n          left,\n          top,\n          styleOverride,\n          fabricObject,\n        );\n    }\n  }\n}\n","import type {\n  ControlCursorCallback,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { ROTATING } from '../constants';\nimport { radiansToDegrees } from '../util/misc/radiansDegreesConversion';\nimport { isLocked, NOT_ALLOWED_CURSOR } from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\n\n/**\n * Find the correct style for the control that is used for rotation.\n * this function is very simple and it just take care of not-allowed or standard cursor\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const rotationStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n) => {\n  if (fabricObject.lockRotation) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  return control.cursorStyle;\n};\n\n/**\n * Action handler for rotation and snapping, without anchor point.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n * @private\n */\nconst rotateObjectWithSnapping: TransformActionHandler = (\n  eventData,\n  { target, ex, ey, theta, originX, originY },\n  x,\n  y,\n) => {\n  const pivotPoint = target.translateToOriginPoint(\n    target.getRelativeCenterPoint(),\n    originX,\n    originY,\n  );\n\n  if (isLocked(target, 'lockRotation')) {\n    return false;\n  }\n\n  const lastAngle = Math.atan2(ey - pivotPoint.y, ex - pivotPoint.x),\n    curAngle = Math.atan2(y - pivotPoint.y, x - pivotPoint.x);\n  let angle = radiansToDegrees(curAngle - lastAngle + theta);\n\n  if (target.snapAngle && target.snapAngle > 0) {\n    const snapAngle = target.snapAngle,\n      snapThreshold = target.snapThreshold || snapAngle,\n      rightAngleLocked = Math.ceil(angle / snapAngle) * snapAngle,\n      leftAngleLocked = Math.floor(angle / snapAngle) * snapAngle;\n\n    if (Math.abs(angle - leftAngleLocked) < snapThreshold) {\n      angle = leftAngleLocked;\n    } else if (Math.abs(angle - rightAngleLocked) < snapThreshold) {\n      angle = rightAngleLocked;\n    }\n  }\n\n  // normalize angle to positive value\n  if (angle < 0) {\n    angle = 360 + angle;\n  }\n  angle %= 360;\n\n  const hasRotated = target.angle !== angle;\n  // TODO: why aren't we using set?\n  target.angle = angle;\n  return hasRotated;\n};\n\nexport const rotationWithSnapping = wrapWithFireEvent(\n  ROTATING,\n  wrapWithFixedAnchor(rotateObjectWithSnapping),\n);\n","import type {\n  ControlCursorCallback,\n  TPointerEvent,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TAxis } from '../typedefs';\nimport type { Canvas } from '../canvas/Canvas';\nimport {\n  findCornerQuadrant,\n  getLocalPoint,\n  invertOrigin,\n  isLocked,\n  isTransformCentered,\n  NOT_ALLOWED_CURSOR,\n} from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\nimport { SCALE_X, SCALE_Y, SCALING } from '../constants';\n\ntype ScaleTransform = Transform & {\n  gestureScale?: number;\n  signX?: number;\n  signY?: number;\n};\n\ntype ScaleBy = TAxis | 'equally' | '' | undefined;\n\n/**\n * Inspect event and fabricObject properties to understand if the scaling action\n * @param {Event} eventData from the user action\n * @param {FabricObject} fabricObject the fabric object about to scale\n * @return {Boolean} true if scale is proportional\n */\nexport function scaleIsProportional(\n  eventData: TPointerEvent,\n  fabricObject: FabricObject,\n): boolean {\n  const canvas = fabricObject.canvas as Canvas,\n    uniformIsToggled = eventData[canvas.uniScaleKey!];\n  return (\n    (canvas.uniformScaling && !uniformIsToggled) ||\n    (!canvas.uniformScaling && uniformIsToggled)\n  );\n}\n\n/**\n * Inspect fabricObject to understand if the current scaling action is allowed\n * @param {FabricObject} fabricObject the fabric object about to scale\n * @param {String} by 'x' or 'y' or ''\n * @param {Boolean} scaleProportionally true if we are trying to scale proportionally\n * @return {Boolean} true if scaling is not allowed at current conditions\n */\nexport function scalingIsForbidden(\n  fabricObject: FabricObject,\n  by: ScaleBy,\n  scaleProportionally: boolean,\n) {\n  const lockX = isLocked(fabricObject, 'lockScalingX'),\n    lockY = isLocked(fabricObject, 'lockScalingY');\n  if (lockX && lockY) {\n    return true;\n  }\n  if (!by && (lockX || lockY) && scaleProportionally) {\n    return true;\n  }\n  if (lockX && by === 'x') {\n    return true;\n  }\n  if (lockY && by === 'y') {\n    return true;\n  }\n  // code crashes because of a division by 0 if a 0 sized object is scaled\n  // forbid to prevent scaling to happen. ISSUE-9475\n  const { width, height, strokeWidth } = fabricObject;\n  if (width === 0 && strokeWidth === 0 && by !== 'y') {\n    return true;\n  }\n  if (height === 0 && strokeWidth === 0 && by !== 'x') {\n    return true;\n  }\n  return false;\n}\n\nconst scaleMap = ['e', 'se', 's', 'sw', 'w', 'nw', 'n', 'ne', 'e'];\n\n/**\n * return the correct cursor style for the scale action\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const scaleCursorStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n) => {\n  const scaleProportionally = scaleIsProportional(eventData, fabricObject),\n    by =\n      control.x !== 0 && control.y === 0\n        ? 'x'\n        : control.x === 0 && control.y !== 0\n          ? 'y'\n          : '';\n  if (scalingIsForbidden(fabricObject, by, scaleProportionally)) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  const n = findCornerQuadrant(fabricObject, control);\n  return `${scaleMap[n]}-resize`;\n};\n\n/**\n * Basic scaling logic, reused with different constrain for scaling X,Y, freely or equally.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @param {Object} options additional information for scaling\n * @param {String} options.by 'x', 'y', 'equally' or '' to indicate type of scaling\n * @return {Boolean} true if some change happened\n * @private\n */\nfunction scaleObject(\n  eventData: TPointerEvent,\n  transform: ScaleTransform,\n  x: number,\n  y: number,\n  options: { by?: ScaleBy } = {},\n) {\n  const target = transform.target,\n    by = options.by,\n    scaleProportionally = scaleIsProportional(eventData, target),\n    forbidScaling = scalingIsForbidden(target, by, scaleProportionally);\n  let newPoint, scaleX, scaleY, dim, signX, signY;\n\n  if (forbidScaling) {\n    return false;\n  }\n  if (transform.gestureScale) {\n    scaleX = transform.scaleX * transform.gestureScale;\n    scaleY = transform.scaleY * transform.gestureScale;\n  } else {\n    newPoint = getLocalPoint(\n      transform,\n      transform.originX,\n      transform.originY,\n      x,\n      y,\n    );\n    // use of sign: We use sign to detect change of direction of an action. sign usually change when\n    // we cross the origin point with the mouse. So a scale flip for example. There is an issue when scaling\n    // by center and scaling using one middle control ( default: mr, mt, ml, mb), the mouse movement can easily\n    // cross many time the origin point and flip the object. so we need a way to filter out the noise.\n    // This ternary here should be ok to filter out X scaling when we want Y only and vice versa.\n    signX = by !== 'y' ? Math.sign(newPoint.x || transform.signX || 1) : 1;\n    signY = by !== 'x' ? Math.sign(newPoint.y || transform.signY || 1) : 1;\n    if (!transform.signX) {\n      transform.signX = signX;\n    }\n    if (!transform.signY) {\n      transform.signY = signY;\n    }\n\n    if (\n      isLocked(target, 'lockScalingFlip') &&\n      (transform.signX !== signX || transform.signY !== signY)\n    ) {\n      return false;\n    }\n\n    dim = target._getTransformedDimensions();\n    // missing detection of flip and logic to switch the origin\n    if (scaleProportionally && !by) {\n      // uniform scaling\n      const distance = Math.abs(newPoint.x) + Math.abs(newPoint.y),\n        { original } = transform,\n        originalDistance =\n          Math.abs((dim.x * original.scaleX) / target.scaleX) +\n          Math.abs((dim.y * original.scaleY) / target.scaleY),\n        scale = distance / originalDistance;\n      scaleX = original.scaleX * scale;\n      scaleY = original.scaleY * scale;\n    } else {\n      scaleX = Math.abs((newPoint.x * target.scaleX) / dim.x);\n      scaleY = Math.abs((newPoint.y * target.scaleY) / dim.y);\n    }\n    // if we are scaling by center, we need to double the scale\n    if (isTransformCentered(transform)) {\n      scaleX *= 2;\n      scaleY *= 2;\n    }\n    if (transform.signX !== signX && by !== 'y') {\n      transform.originX = invertOrigin(transform.originX);\n      scaleX *= -1;\n      transform.signX = signX;\n    }\n    if (transform.signY !== signY && by !== 'x') {\n      transform.originY = invertOrigin(transform.originY);\n      scaleY *= -1;\n      transform.signY = signY;\n    }\n  }\n  // minScale is taken care of in the setter.\n  const oldScaleX = target.scaleX,\n    oldScaleY = target.scaleY;\n  if (!by) {\n    !isLocked(target, 'lockScalingX') && target.set(SCALE_X, scaleX);\n    !isLocked(target, 'lockScalingY') && target.set(SCALE_Y, scaleY);\n  } else {\n    // forbidden cases already handled on top here.\n    by === 'x' && target.set(SCALE_X, scaleX);\n    by === 'y' && target.set(SCALE_Y, scaleY);\n  }\n  return oldScaleX !== target.scaleX || oldScaleY !== target.scaleY;\n}\n\n/**\n * Generic scaling logic, to scale from corners either equally or freely.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const scaleObjectFromCorner: TransformActionHandler<ScaleTransform> = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return scaleObject(eventData, transform, x, y);\n};\n\n/**\n * Scaling logic for the X axis.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nconst scaleObjectX: TransformActionHandler<ScaleTransform> = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return scaleObject(eventData, transform, x, y, { by: 'x' });\n};\n\n/**\n * Scaling logic for the Y axis.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nconst scaleObjectY: TransformActionHandler<ScaleTransform> = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return scaleObject(eventData, transform, x, y, { by: 'y' });\n};\n\nexport const scalingEqually = wrapWithFireEvent(\n  SCALING,\n  wrapWithFixedAnchor(scaleObjectFromCorner),\n);\n\nexport const scalingX = wrapWithFireEvent(\n  SCALING,\n  wrapWithFixedAnchor(scaleObjectX),\n);\n\nexport const scalingY = wrapWithFireEvent(\n  SCALING,\n  wrapWithFixedAnchor(scaleObjectY),\n);\n","import type {\n  ControlCursorCallback,\n  TPointerEvent,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { Point } from '../Point';\nimport type { TAxis, TAxisKey } from '../typedefs';\nimport {\n  degreesToRadians,\n  radiansToDegrees,\n} from '../util/misc/radiansDegreesConversion';\nimport {\n  findCornerQuadrant,\n  getLocalPoint,\n  isLocked,\n  NOT_ALLOWED_CURSOR,\n} from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\nimport {\n  CENTER,\n  SCALE_X,\n  SCALE_Y,\n  SKEWING,\n  SKEW_X,\n  SKEW_Y,\n} from '../constants';\n\nexport type SkewTransform = Transform & { skewingSide: -1 | 1 };\n\nconst AXIS_KEYS: Record<\n  TAxis,\n  {\n    counterAxis: TAxis;\n    scale: TAxisKey<'scale'>;\n    skew: TAxisKey<'skew'>;\n    lockSkewing: TAxisKey<'lockSkewing'>;\n    origin: TAxisKey<'origin'>;\n    flip: TAxisKey<'flip'>;\n  }\n> = {\n  x: {\n    counterAxis: 'y',\n    scale: SCALE_X,\n    skew: SKEW_X,\n    lockSkewing: 'lockSkewingX',\n    origin: 'originX',\n    flip: 'flipX',\n  },\n  y: {\n    counterAxis: 'x',\n    scale: SCALE_Y,\n    skew: SKEW_Y,\n    lockSkewing: 'lockSkewingY',\n    origin: 'originY',\n    flip: 'flipY',\n  },\n};\n\nconst skewMap = ['ns', 'nesw', 'ew', 'nwse'];\n\n/**\n * return the correct cursor style for the skew action\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const skewCursorStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n) => {\n  if (control.x !== 0 && isLocked(fabricObject, 'lockSkewingY')) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  if (control.y !== 0 && isLocked(fabricObject, 'lockSkewingX')) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  const n = findCornerQuadrant(fabricObject, control) % 4;\n  return `${skewMap[n]}-resize`;\n};\n\n/**\n * Since skewing is applied before scaling, calculations are done in a scaleless plane\n * @see https://github.com/fabricjs/fabric.js/pull/8380\n */\nfunction skewObject(\n  axis: TAxis,\n  { target, ex, ey, skewingSide, ...transform }: SkewTransform,\n  pointer: Point,\n) {\n  const { skew: skewKey } = AXIS_KEYS[axis],\n    offset = pointer\n      .subtract(new Point(ex, ey))\n      .divide(new Point(target.scaleX, target.scaleY))[axis],\n    skewingBefore = target[skewKey],\n    skewingStart = transform[skewKey],\n    shearingStart = Math.tan(degreesToRadians(skewingStart)),\n    // let a, b be the size of target\n    // let a' be the value of a after applying skewing\n    // then:\n    // a' = a + b * skewA => skewA = (a' - a) / b\n    // the value b is tricky since skewY is applied before skewX\n    b =\n      axis === 'y'\n        ? target._getTransformedDimensions({\n            scaleX: 1,\n            scaleY: 1,\n            // since skewY is applied before skewX, b (=width) is not affected by skewX\n            skewX: 0,\n          }).x\n        : target._getTransformedDimensions({\n            scaleX: 1,\n            scaleY: 1,\n          }).y;\n\n  const shearing =\n    (2 * offset * skewingSide) /\n      // we max out fractions to safeguard from asymptotic behavior\n      Math.max(b, 1) +\n    // add starting state\n    shearingStart;\n\n  const skewing = radiansToDegrees(Math.atan(shearing));\n\n  target.set(skewKey, skewing);\n  const changed = skewingBefore !== target[skewKey];\n\n  if (changed && axis === 'y') {\n    // we don't want skewing to affect scaleX\n    // so we factor it by the inverse skewing diff to make it seem unchanged to the viewer\n    const { skewX, scaleX } = target,\n      dimBefore = target._getTransformedDimensions({ skewY: skewingBefore }),\n      dimAfter = target._getTransformedDimensions(),\n      compensationFactor = skewX !== 0 ? dimBefore.x / dimAfter.x : 1;\n    compensationFactor !== 1 &&\n      target.set(SCALE_X, compensationFactor * scaleX);\n  }\n\n  return changed;\n}\n\n/**\n * Wrapped Action handler for skewing on a given axis, takes care of the\n * skew direction and determines the correct transform origin for the anchor point\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nfunction skewHandler(\n  axis: TAxis,\n  eventData: TPointerEvent,\n  transform: Transform,\n  x: number,\n  y: number,\n) {\n  const { target } = transform,\n    {\n      counterAxis,\n      origin: originKey,\n      lockSkewing: lockSkewingKey,\n      skew: skewKey,\n      flip: flipKey,\n    } = AXIS_KEYS[axis];\n  if (isLocked(target, lockSkewingKey)) {\n    return false;\n  }\n\n  const { origin: counterOriginKey, flip: counterFlipKey } =\n      AXIS_KEYS[counterAxis],\n    counterOriginFactor =\n      resolveOrigin(transform[counterOriginKey]) *\n      (target[counterFlipKey] ? -1 : 1),\n    // if the counter origin is top/left (= -0.5) then we are skewing x/y values on the bottom/right side of target respectively.\n    // if the counter origin is bottom/right (= 0.5) then we are skewing x/y values on the top/left side of target respectively.\n    // skewing direction on the top/left side of target is OPPOSITE to the direction of the movement of the pointer,\n    // so we factor skewing direction by this value.\n    skewingSide = (-Math.sign(counterOriginFactor) *\n      (target[flipKey] ? -1 : 1)) as 1 | -1,\n    skewingDirection =\n      ((target[skewKey] === 0 &&\n        // in case skewing equals 0 we use the pointer offset from target center to determine the direction of skewing\n        getLocalPoint(transform, CENTER, CENTER, x, y)[axis] > 0) ||\n      // in case target has skewing we use that as the direction\n      target[skewKey] > 0\n        ? 1\n        : -1) * skewingSide,\n    // anchor to the opposite side of the skewing direction\n    // normalize value from [-1, 1] to origin value [0, 1]\n    origin = -skewingDirection * 0.5 + 0.5;\n\n  const finalHandler = wrapWithFireEvent<SkewTransform>(\n    SKEWING,\n    wrapWithFixedAnchor((eventData, transform, x, y) =>\n      skewObject(axis, transform, new Point(x, y)),\n    ),\n  );\n\n  return finalHandler(\n    eventData,\n    {\n      ...transform,\n      [originKey]: origin,\n      skewingSide,\n    },\n    x,\n    y,\n  );\n}\n\n/**\n * Wrapped Action handler for skewing on the X axis, takes care of the\n * skew direction and determines the correct transform origin for the anchor point\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const skewHandlerX: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return skewHandler('x', eventData, transform, x, y);\n};\n\n/**\n * Wrapped Action handler for skewing on the Y axis, takes care of the\n * skew direction and determines the correct transform origin for the anchor point\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const skewHandlerY: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return skewHandler('y', eventData, transform, x, y);\n};\n","import type {\n  ControlCallback,\n  ControlCursorCallback,\n  TPointerEvent,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { SCALE_X, SCALE_Y, SKEW_X, SKEW_Y } from '../constants';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TAxisKey } from '../typedefs';\nimport { scaleCursorStyleHandler, scalingX, scalingY } from './scale';\nimport { skewCursorStyleHandler, skewHandlerX, skewHandlerY } from './skew';\n\nfunction isAltAction(eventData: TPointerEvent, target: FabricObject) {\n  return eventData[target.canvas!.altActionKey!];\n}\n\n/**\n * Inspect event, control and fabricObject to return the correct action name\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} an action name\n */\nexport const scaleOrSkewActionName: ControlCallback<\n  TAxisKey<'skew' | 'scale'> | ''\n> = (eventData, control, fabricObject) => {\n  const isAlternative = isAltAction(eventData, fabricObject);\n  if (control.x === 0) {\n    // then is scaleY or skewX\n    return isAlternative ? SKEW_X : SCALE_Y;\n  }\n  if (control.y === 0) {\n    // then is scaleY or skewX\n    return isAlternative ? SKEW_Y : SCALE_X;\n  }\n  return '';\n};\n\n/**\n * Combine skew and scale style handlers to cover fabric standard use case\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const scaleSkewCursorStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n) => {\n  return isAltAction(eventData, fabricObject)\n    ? skewCursorStyleHandler(eventData, control, fabricObject)\n    : scaleCursorStyleHandler(eventData, control, fabricObject);\n};\n/**\n * Composed action handler to either scale X or skew Y\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const scalingXOrSkewingY: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return isAltAction(eventData, transform.target)\n    ? skewHandlerY(eventData, transform, x, y)\n    : scalingX(eventData, transform, x, y);\n};\n\n/**\n * Composed action handler to either scale Y or skew X\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const scalingYOrSkewingX: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return isAltAction(eventData, transform.target)\n    ? skewHandlerX(eventData, transform, x, y)\n    : scalingY(eventData, transform, x, y);\n};\n","import { RESIZING, ROTATE } from '../constants';\nimport { changeWidth } from './changeWidth';\nimport { Control } from './Control';\nimport { rotationStyleHandler, rotationWithSnapping } from './rotate';\nimport { scaleCursorStyleHandler, scalingEqually } from './scale';\nimport {\n  scaleOrSkewActionName,\n  scaleSkewCursorStyleHandler,\n  scalingXOrSkewingY,\n  scalingYOrSkewingX,\n} from './scaleSkew';\n\n// use this function if you want to generate new controls for every instance\nexport const createObjectDefaultControls = () => ({\n  ml: new Control({\n    x: -0.5,\n    y: 0,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingXOrSkewingY,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  mr: new Control({\n    x: 0.5,\n    y: 0,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingXOrSkewingY,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  mb: new Control({\n    x: 0,\n    y: 0.5,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingYOrSkewingX,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  mt: new Control({\n    x: 0,\n    y: -0.5,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingYOrSkewingX,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  tl: new Control({\n    x: -0.5,\n    y: -0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  tr: new Control({\n    x: 0.5,\n    y: -0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  bl: new Control({\n    x: -0.5,\n    y: 0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  br: new Control({\n    x: 0.5,\n    y: 0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  mtr: new Control({\n    x: 0,\n    y: -0.5,\n    actionHandler: rotationWithSnapping,\n    cursorStyleHandler: rotationStyleHandler,\n    offsetY: -40,\n    withConnection: true,\n    actionName: ROTATE,\n  }),\n});\n\nexport const createResizeControls = () => ({\n  mr: new Control({\n    x: 0.5,\n    y: 0,\n    actionHandler: changeWidth,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionName: RESIZING,\n  }),\n  ml: new Control({\n    x: -0.5,\n    y: 0,\n    actionHandler: changeWidth,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionName: RESIZING,\n  }),\n});\n\nexport const createTextboxDefaultControls = () => ({\n  ...createObjectDefaultControls(),\n  ...createResizeControls(),\n});\n","import { Point, ZERO } from '../../Point';\nimport type { TCornerPoint, TDegree } from '../../typedefs';\nimport { FabricObject } from './Object';\nimport { degreesToRadians } from '../../util/misc/radiansDegreesConversion';\nimport type { TQrDecomposeOut } from '../../util/misc/matrix';\nimport {\n  calcDimensionsMatrix,\n  createRotateMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from '../../util/misc/matrix';\nimport type { Control } from '../../controls/Control';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport type { ObjectEvents, TPointerEvent } from '../../EventTypeDefs';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { ControlRenderingStyleOverride } from '../../controls/controlRendering';\nimport type { FabricObjectProps } from './types/FabricObjectProps';\nimport type { TFabricObjectProps, SerializedObjectProps } from './types';\nimport { createObjectDefaultControls } from '../../controls/commonControls';\nimport { interactiveObjectDefaultValues } from './defaultValues';\nimport { SCALE } from '../../constants';\n\nexport type TOCoord = Point & {\n  corner: TCornerPoint;\n  touchCorner: TCornerPoint;\n};\n\nexport type TControlSet = Record<string, Control>;\n\nexport type TBorderRenderingStyleOverride = Partial<\n  Pick<InteractiveFabricObject, 'borderColor' | 'borderDashArray'>\n>;\n\nexport type TStyleOverride = ControlRenderingStyleOverride &\n  TBorderRenderingStyleOverride &\n  Partial<\n    Pick<InteractiveFabricObject, 'hasBorders' | 'hasControls'> & {\n      forActiveSelection: boolean;\n    }\n  >;\n\nexport class InteractiveFabricObject<\n    Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements FabricObjectProps\n{\n  declare noScaleCache: boolean;\n\n  declare snapAngle?: TDegree;\n  declare snapThreshold?: TDegree;\n\n  declare lockMovementX: boolean;\n  declare lockMovementY: boolean;\n  declare lockRotation: boolean;\n  declare lockScalingX: boolean;\n  declare lockScalingY: boolean;\n  declare lockSkewingX: boolean;\n  declare lockSkewingY: boolean;\n  declare lockScalingFlip: boolean;\n\n  declare cornerSize: number;\n  declare touchCornerSize: number;\n  declare transparentCorners: boolean;\n  declare cornerColor: string;\n  declare cornerStrokeColor: string;\n  declare cornerStyle: 'rect' | 'circle';\n  declare cornerDashArray: number[] | null;\n  declare hasControls: boolean;\n\n  declare borderColor: string;\n  declare borderDashArray: number[] | null;\n  declare borderOpacityWhenMoving: number;\n  declare borderScaleFactor: number;\n  declare hasBorders: boolean;\n  declare selectionBackgroundColor: string;\n\n  declare selectable: boolean;\n  declare evented: boolean;\n  declare perPixelTargetFind: boolean;\n  declare activeOn: 'down' | 'up';\n\n  declare hoverCursor: CSSStyleDeclaration['cursor'] | null;\n  declare moveCursor: CSSStyleDeclaration['cursor'] | null;\n\n  /**\n   * The object's controls' position in viewport coordinates\n   * Calculated by {@link Control#positionHandler} and {@link Control#calcCornerCoords}, depending on {@link padding}.\n   * `corner/touchCorner` describe the 4 points forming the interactive area of the corner.\n   * Used to draw and locate controls.\n   */\n  declare oCoords: Record<string, TOCoord>;\n\n  /**\n   * keeps the value of the last hovered corner during mouse move.\n   * 0 is no corner, or 'mt', 'ml', 'mtr' etc..\n   * It should be private, but there is no harm in using it as\n   * a read-only property.\n   * this isn't cleaned automatically. Non selected objects may have wrong values\n   * @type [string]\n   */\n  declare __corner?: string;\n\n  /**\n   * a map of control visibility for this object.\n   * this was left when controls were introduced to not break the api too much\n   * this takes priority over the generic control visibility\n   */\n  declare _controlsVisibility: Record<string, boolean>;\n\n  /**\n   * holds the controls for the object.\n   * controls are added by default_controls.js\n   */\n  declare controls: TControlSet;\n\n  /**\n   * internal boolean to signal the code that the object is\n   * part of the move action.\n   */\n  declare isMoving?: boolean;\n\n  /**\n   * A boolean used from the gesture module to keep tracking of a scaling\n   * action when there is no scaling transform in place.\n   * This is an edge case and is used twice in all codebase.\n   * Probably added to keep track of some performance issues\n   * @TODO use git blame to investigate why it was added\n   * DON'T USE IT. WE WILL TRY TO REMOVE IT\n   */\n  declare _scaling?: boolean;\n\n  declare canvas?: Canvas;\n\n  static ownDefaults = interactiveObjectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...InteractiveFabricObject.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(\n      this,\n      (this.constructor as typeof InteractiveFabricObject).createControls(),\n      InteractiveFabricObject.ownDefaults,\n    );\n    this.setOptions(options);\n  }\n\n  /**\n   * Creates the default control object.\n   * If you prefer to have on instance of controls shared among all objects\n   * make this function return an empty object and add controls to the ownDefaults\n   * @param {Object} [options] Options object\n   */\n  static createControls(): { controls: Record<string, Control> } {\n    return { controls: createObjectDefaultControls() };\n  }\n\n  /**\n   * Update width and height of the canvas for cache\n   * returns true or false if canvas needed resize.\n   * @private\n   * @return {Boolean} true if the canvas has been resized\n   */\n  _updateCacheCanvas() {\n    const targetCanvas = this.canvas;\n    if (this.noScaleCache && targetCanvas && targetCanvas._currentTransform) {\n      const transform = targetCanvas._currentTransform,\n        target = transform.target,\n        action = transform.action;\n      if (\n        this === (target as unknown as this) &&\n        action &&\n        action.startsWith(SCALE)\n      ) {\n        return false;\n      }\n    }\n    return super._updateCacheCanvas();\n  }\n\n  getActiveControl() {\n    const key = this.__corner;\n    return key\n      ? {\n          key,\n          control: this.controls[key],\n          coord: this.oCoords[key],\n        }\n      : undefined;\n  }\n\n  /**\n   * Determines which corner is under the mouse cursor, represented by `pointer`.\n   * This function is return a corner only if the object is the active one.\n   * This is done to avoid selecting corner of non active object and activating transformations\n   * rather than drag action. The default behavior of fabricJS is that if you want to transform\n   * an object, first you select it to show the control set\n   * @private\n   * @param {Object} pointer The pointer indicating the mouse position\n   * @param {boolean} forTouch indicates if we are looking for interaction area with a touch action\n   * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or 0 if nothing is found.\n   */\n  findControl(\n    pointer: Point,\n    forTouch = false,\n  ): { key: string; control: Control; coord: TOCoord } | undefined {\n    if (!this.hasControls || !this.canvas) {\n      return undefined;\n    }\n\n    this.__corner = undefined;\n    const cornerEntries = Object.entries(this.oCoords);\n    for (let i = cornerEntries.length - 1; i >= 0; i--) {\n      const [key, corner] = cornerEntries[i];\n      const control = this.controls[key];\n\n      if (\n        control.shouldActivate(\n          key,\n          this,\n          pointer,\n          forTouch ? corner.touchCorner : corner.corner,\n        )\n      ) {\n        // this.canvas.contextTop.fillRect(pointer.x - 1, pointer.y - 1, 2, 2);\n        this.__corner = key;\n\n        return { key, control, coord: this.oCoords[key] };\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Calculates the coordinates of the center of each control plus the corners of the control itself\n   * This basically just delegates to each control positionHandler\n   * WARNING: changing what is passed to positionHandler is a breaking change, since position handler\n   * is a public api and should be done just if extremely necessary\n   * @return {Record<string, TOCoord>}\n   */\n  calcOCoords(): Record<string, TOCoord> {\n    const vpt = this.getViewportTransform(),\n      center = this.getCenterPoint(),\n      tMatrix = createTranslateMatrix(center.x, center.y),\n      rMatrix = createRotateMatrix({\n        angle: this.getTotalAngle() - (!!this.group && this.flipX ? 180 : 0),\n      }),\n      positionMatrix = multiplyTransformMatrices(tMatrix, rMatrix),\n      startMatrix = multiplyTransformMatrices(vpt, positionMatrix),\n      finalMatrix = multiplyTransformMatrices(startMatrix, [\n        1 / vpt[0],\n        0,\n        0,\n        1 / vpt[3],\n        0,\n        0,\n      ]),\n      transformOptions = this.group\n        ? qrDecompose(this.calcTransformMatrix())\n        : undefined;\n    // decomposing could bring negative scaling and `_calculateCurrentDimensions` can't take it\n    if (transformOptions) {\n      transformOptions.scaleX = Math.abs(transformOptions.scaleX);\n      transformOptions.scaleY = Math.abs(transformOptions.scaleY);\n    }\n    const dim = this._calculateCurrentDimensions(transformOptions),\n      coords: Record<string, TOCoord> = {};\n\n    this.forEachControl((control, key) => {\n      const position = control.positionHandler(dim, finalMatrix, this, control);\n      // coords[key] are sometimes used as points. Those are points to which we add\n      // the property corner and touchCorner from `_calcCornerCoords`.\n      // don't remove this assign for an object spread.\n      coords[key] = Object.assign(\n        position,\n        this._calcCornerCoords(control, position),\n      );\n    });\n\n    // debug code\n    /*\n      const canvas = this.canvas;\n      setTimeout(function () {\n      if (!canvas) return;\n        canvas.contextTop.clearRect(0, 0, 700, 700);\n        canvas.contextTop.fillStyle = 'green';\n        Object.keys(coords).forEach(function(key) {\n          const control = coords[key];\n          canvas.contextTop.fillRect(control.x, control.y, 3, 3);\n        });\n      } 50);\n    */\n    return coords;\n  }\n\n  /**\n   * Sets the coordinates that determine the interaction area of each control\n   * note: if we would switch to ROUND corner area, all of this would disappear.\n   * everything would resolve to a single point and a pythagorean theorem for the distance\n   * @todo evaluate simplification of code switching to circle interaction area at runtime\n   * @private\n   */\n  private _calcCornerCoords(control: Control, position: Point) {\n    const angle = this.getTotalAngle();\n    const corner = control.calcCornerCoords(\n      angle,\n      this.cornerSize,\n      position.x,\n      position.y,\n      false,\n      this,\n    );\n    const touchCorner = control.calcCornerCoords(\n      angle,\n      this.touchCornerSize,\n      position.x,\n      position.y,\n      true,\n      this,\n    );\n    return { corner, touchCorner };\n  }\n\n  /**\n   * @override set controls' coordinates as well\n   * See {@link https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords} and {@link http://fabricjs.com/fabric-gotchas}\n   * @return {void}\n   */\n  setCoords(): void {\n    super.setCoords();\n    this.canvas && (this.oCoords = this.calcOCoords());\n  }\n\n  /**\n   * Calls a function for each control. The function gets called,\n   * with the control, the control's key and the object that is calling the iterator\n   * @param {Function} fn function to iterate over the controls over\n   */\n  forEachControl(\n    fn: (\n      control: Control,\n      key: string,\n      fabricObject: InteractiveFabricObject,\n    ) => any,\n  ) {\n    for (const i in this.controls) {\n      fn(this.controls[i], i, this);\n    }\n  }\n\n  /**\n   * Draws a colored layer behind the object, inside its selection borders.\n   * Requires public options: padding, selectionBackgroundColor\n   * this function is called when the context is transformed\n   * has checks to be skipped when the object is on a staticCanvas\n   * @todo evaluate if make this disappear in favor of a pre-render hook for objects\n   * this was added by Andrea Bogazzi to make possible some feature for work reasons\n   * it seemed a good option, now is an edge case\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   */\n  drawSelectionBackground(ctx: CanvasRenderingContext2D): void {\n    if (\n      !this.selectionBackgroundColor ||\n      (this.canvas && (this.canvas._activeObject as unknown as this) !== this)\n    ) {\n      return;\n    }\n    ctx.save();\n    const center = this.getRelativeCenterPoint(),\n      wh = this._calculateCurrentDimensions(),\n      vpt = this.getViewportTransform();\n    ctx.translate(center.x, center.y);\n    ctx.scale(1 / vpt[0], 1 / vpt[3]);\n    ctx.rotate(degreesToRadians(this.angle));\n    ctx.fillStyle = this.selectionBackgroundColor;\n    ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);\n    ctx.restore();\n  }\n\n  /**\n   * @public override this function in order to customize the drawing of the control box, e.g. rounded corners, different border style.\n   * @param {CanvasRenderingContext2D} ctx ctx is rotated and translated so that (0,0) is at object's center\n   * @param {Point} size the control box size used\n   */\n  strokeBorders(ctx: CanvasRenderingContext2D, size: Point): void {\n    ctx.strokeRect(-size.x / 2, -size.y / 2, size.x, size.y);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {Point} size\n   * @param {TStyleOverride} styleOverride object to override the object style\n   */\n  _drawBorders(\n    ctx: CanvasRenderingContext2D,\n    size: Point,\n    styleOverride: TStyleOverride = {},\n  ): void {\n    const options = {\n      hasControls: this.hasControls,\n      borderColor: this.borderColor,\n      borderDashArray: this.borderDashArray,\n      ...styleOverride,\n    };\n    ctx.save();\n    ctx.strokeStyle = options.borderColor;\n    this._setLineDash(ctx, options.borderDashArray);\n    this.strokeBorders(ctx, size);\n    options.hasControls && this.drawControlsConnectingLines(ctx, size);\n    ctx.restore();\n  }\n\n  /**\n   * Renders controls and borders for the object\n   * the context here is not transformed\n   * @todo move to interactivity\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {TStyleOverride} [styleOverride] properties to override the object style\n   */\n  _renderControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride: TStyleOverride = {},\n  ) {\n    const { hasBorders, hasControls } = this;\n    const styleOptions = {\n      hasBorders,\n      hasControls,\n      ...styleOverride,\n    };\n    const vpt = this.getViewportTransform(),\n      shouldDrawBorders = styleOptions.hasBorders,\n      shouldDrawControls = styleOptions.hasControls;\n    const matrix = multiplyTransformMatrices(vpt, this.calcTransformMatrix());\n    const options = qrDecompose(matrix);\n    ctx.save();\n    ctx.translate(options.translateX, options.translateY);\n    ctx.lineWidth = this.borderScaleFactor; // 1 * this.borderScaleFactor;\n    // since interactive groups have been introduced, an object could be inside a group and needing controls\n    // the following equality check `this.group === this.parent` covers:\n    // object without a group ( undefined === undefined )\n    // object inside a group\n    // excludes object inside a group but multi selected since group and parent will differ in value\n    if (this.group === this.parent) {\n      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n    }\n    if (this.flipX) {\n      options.angle -= 180;\n    }\n    ctx.rotate(degreesToRadians(this.group ? options.angle : this.angle));\n    shouldDrawBorders && this.drawBorders(ctx, options, styleOverride);\n    shouldDrawControls && this.drawControls(ctx, styleOverride);\n    ctx.restore();\n  }\n\n  /**\n   * Draws borders of an object's bounding box.\n   * Requires public properties: width, height\n   * Requires public options: padding, borderColor\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {object} options object representing current object parameters\n   * @param {TStyleOverride} [styleOverride] object to override the object style\n   */\n  drawBorders(\n    ctx: CanvasRenderingContext2D,\n    options: TQrDecomposeOut,\n    styleOverride: TStyleOverride,\n  ): void {\n    let size;\n    if ((styleOverride && styleOverride.forActiveSelection) || this.group) {\n      const bbox = sizeAfterTransform(\n          this.width,\n          this.height,\n          calcDimensionsMatrix(options),\n        ),\n        stroke = !this.isStrokeAccountedForInDimensions()\n          ? (this.strokeUniform\n              ? new Point().scalarAdd(this.canvas ? this.canvas.getZoom() : 1)\n              : // this is extremely confusing. options comes from the upper function\n                // and is the qrDecompose of a matrix that takes in account zoom too\n                new Point(options.scaleX, options.scaleY)\n            ).scalarMultiply(this.strokeWidth)\n          : ZERO;\n      size = bbox\n        .add(stroke)\n        .scalarAdd(this.borderScaleFactor)\n        .scalarAdd(this.padding * 2);\n    } else {\n      size = this._calculateCurrentDimensions().scalarAdd(\n        this.borderScaleFactor,\n      );\n    }\n    this._drawBorders(ctx, size, styleOverride);\n  }\n\n  /**\n   * Draws lines from a borders of an object's bounding box to controls that have `withConnection` property set.\n   * Requires public properties: width, height\n   * Requires public options: padding, borderColor\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {Point} size object size x = width, y = height\n   */\n  drawControlsConnectingLines(\n    ctx: CanvasRenderingContext2D,\n    size: Point,\n  ): void {\n    let shouldStroke = false;\n\n    ctx.beginPath();\n    this.forEachControl((control, key) => {\n      // in this moment, the ctx is centered on the object.\n      // width and height of the above function are the size of the bbox.\n      if (control.withConnection && control.getVisibility(this, key)) {\n        // reset movement for each control\n        shouldStroke = true;\n        ctx.moveTo(control.x * size.x, control.y * size.y);\n        ctx.lineTo(\n          control.x * size.x + control.offsetX,\n          control.y * size.y + control.offsetY,\n        );\n      }\n    });\n    shouldStroke && ctx.stroke();\n  }\n\n  /**\n   * Draws corners of an object's bounding box.\n   * Requires public properties: width, height\n   * Requires public options: cornerSize, padding\n   * Be aware that since fabric 6.0 this function does not call setCoords anymore.\n   * setCoords needs to be called manually if the object of which we are rendering controls\n   * is outside the standard selection and transform process.\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {ControlRenderingStyleOverride} styleOverride object to override the object style\n   */\n  drawControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride: ControlRenderingStyleOverride = {},\n  ) {\n    ctx.save();\n    const retinaScaling = this.getCanvasRetinaScaling();\n    const { cornerStrokeColor, cornerDashArray, cornerColor } = this;\n    const options = {\n      cornerStrokeColor,\n      cornerDashArray,\n      cornerColor,\n      ...styleOverride,\n    };\n    ctx.setTransform(retinaScaling, 0, 0, retinaScaling, 0, 0);\n    ctx.strokeStyle = ctx.fillStyle = options.cornerColor;\n    if (!this.transparentCorners) {\n      ctx.strokeStyle = options.cornerStrokeColor;\n    }\n    this._setLineDash(ctx, options.cornerDashArray);\n    this.forEachControl((control, key) => {\n      if (control.getVisibility(this, key)) {\n        const p = this.oCoords[key];\n        control.render(ctx, p.x, p.y, options, this);\n      }\n    });\n    ctx.restore();\n  }\n\n  /**\n   * Returns true if the specified control is visible, false otherwise.\n   * @param {string} controlKey The key of the control. Possible values are usually 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr',\n   * but since the control api allow for any control name, can be any string.\n   * @returns {boolean} true if the specified control is visible, false otherwise\n   */\n  isControlVisible(controlKey: string): boolean {\n    return (\n      this.controls[controlKey] &&\n      this.controls[controlKey].getVisibility(this, controlKey)\n    );\n  }\n\n  /**\n   * Sets the visibility of the specified control.\n   * please do not use.\n   * @param {String} controlKey The key of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n   * but since the control api allow for any control name, can be any string.\n   * @param {Boolean} visible true to set the specified control visible, false otherwise\n   * @todo discuss this overlap of priority here with the team. Andrea Bogazzi for details\n   */\n  setControlVisible(controlKey: string, visible: boolean) {\n    if (!this._controlsVisibility) {\n      this._controlsVisibility = {};\n    }\n    this._controlsVisibility[controlKey] = visible;\n  }\n\n  /**\n   * Sets the visibility state of object controls, this is just a bulk option for setControlVisible;\n   * @param {Record<string, boolean>} [options] with an optional key per control\n   * example: {Boolean} [options.bl] true to enable the bottom-left control, false to disable it\n   */\n  setControlsVisibility(options: Record<string, boolean> = {}) {\n    Object.entries(options).forEach(([controlKey, visibility]) =>\n      this.setControlVisible(controlKey, visibility),\n    );\n  }\n\n  /**\n   * Clears the canvas.contextTop in a specific area that corresponds to the object's bounding box\n   * that is in the canvas.contextContainer.\n   * This function is used to clear pieces of contextTop where we render ephemeral effects on top of the object.\n   * Example: blinking cursor text selection, drag effects.\n   * @todo discuss swapping restoreManually with a renderCallback, but think of async issues\n   * @param {Boolean} [restoreManually] When true won't restore the context after clear, in order to draw something else.\n   * @return {CanvasRenderingContext2D|undefined} canvas.contextTop that is either still transformed\n   * with the object transformMatrix, or restored to neutral transform\n   */\n  clearContextTop(\n    restoreManually?: boolean,\n  ): CanvasRenderingContext2D | undefined {\n    if (!this.canvas) {\n      return;\n    }\n    const ctx = this.canvas.contextTop;\n    if (!ctx) {\n      return;\n    }\n    const v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n    this.transform(ctx);\n    // we add 4 pixel, to be sure to do not leave any pixel out\n    const width = this.width + 4,\n      height = this.height + 4;\n    ctx.clearRect(-width / 2, -height / 2, width, height);\n\n    restoreManually || ctx.restore();\n    return ctx;\n  }\n\n  /**\n   * This callback function is called every time _discardActiveObject or _setActiveObject\n   * try to to deselect this object. If the function returns true, the process is cancelled\n   * @param {Object} [_options] options sent from the upper functions\n   * @param {TPointerEvent} [options.e] event if the process is generated by an event\n   * @param {FabricObject} [options.object] next object we are setting as active, and reason why\n   * this is being deselected\n   */\n  onDeselect(_options?: {\n    e?: TPointerEvent;\n    object?: InteractiveFabricObject;\n  }): boolean {\n    // implemented by sub-classes, as needed.\n    return false;\n  }\n\n  /**\n   * This callback function is called every time _discardActiveObject or _setActiveObject\n   * try to to select this object. If the function returns true, the process is cancelled\n   * @param {Object} [_options] options sent from the upper functions\n   * @param {Event} [_options.e] event if the process is generated by an event\n   */\n  onSelect(_options?: { e?: TPointerEvent }): boolean {\n    // implemented by sub-classes, as needed.\n    return false;\n  }\n\n  /**\n   * Override to customize Drag behavior\n   * Fired from {@link Canvas#_onMouseMove}\n   * @returns true in order for the window to start a drag session\n   */\n  shouldStartDragging(_e: TPointerEvent) {\n    return false;\n  }\n\n  /**\n   * Override to customize Drag behavior\\\n   * Fired once a drag session has started\n   * @returns true to handle the drag event\n   */\n  onDragStart(_e: DragEvent) {\n    return false;\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * @public\n   * @param {DragEvent} _e\n   * @returns {boolean} true if the object currently dragged can be dropped on the target\n   */\n  canDrop(_e: DragEvent): boolean {\n    return false;\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * render a specific effect when an object is the source of a drag event\n   * example: render the selection status for the part of text that is being dragged from a text object\n   * @public\n   * @param {DragEvent} _e\n   */\n  renderDragSourceEffect(_e: DragEvent) {\n    // for subclasses\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * render a specific effect when an object is the target of a drag event\n   * used to show that the underly object can receive a drop, or to show how the\n   * object will change when dropping. example: show the cursor where the text is about to be dropped\n   * @public\n   * @param {DragEvent} _e\n   */\n  renderDropTargetEffect(_e: DragEvent) {\n    // for subclasses\n  }\n}\n","import type { Constructor } from '../typedefs';\n\n/***\n * https://www.typescriptlang.org/docs/handbook/mixins.html#alternative-pattern\n */\nexport function applyMixins<T extends Constructor, S extends Constructor>(\n  derivedCtor: T,\n  constructors: S[],\n) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      name !== 'constructor' &&\n        Object.defineProperty(\n          derivedCtor.prototype,\n          name,\n          Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n            Object.create(null),\n        );\n    });\n  });\n  return derivedCtor as T & { prototype: InstanceType<T & S> };\n}\n","import type { ObjectEvents } from '../../EventTypeDefs';\nimport { FabricObjectSVGExportMixin } from './FabricObjectSVGExportMixin';\nimport { InteractiveFabricObject } from './InteractiveObject';\nimport { applyMixins } from '../../util/applyMixins';\nimport type { FabricObjectProps } from './types/FabricObjectProps';\nimport type { TFabricObjectProps, SerializedObjectProps } from './types';\nimport { classRegistry } from '../../ClassRegistry';\n\n// TODO somehow we have to make a tree-shakeable import\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface FabricObject<\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  SProps extends SerializedObjectProps = SerializedObjectProps,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObjectSVGExportMixin {}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nexport class FabricObject<\n  Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n  SProps extends SerializedObjectProps = SerializedObjectProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends InteractiveFabricObject<Props, SProps, EventSpec> {}\n\napplyMixins(FabricObject, [FabricObjectSVGExportMixin]);\n\nclassRegistry.setClass(FabricObject);\nclassRegistry.setClass(FabricObject, 'object');\n\nexport { cacheProperties } from './defaultValues';\n","/**\n * Returns true if context has transparent pixel\n * at specified location (taking tolerance into account)\n * @param {CanvasRenderingContext2D} ctx context\n * @param {Number} x x coordinate in canvasElementCoordinate, not fabric space. integer\n * @param {Number} y y coordinate in canvasElementCoordinate, not fabric space. integer\n * @param {Number} tolerance Tolerance pixels around the point, not alpha tolerance, integer\n * @return {boolean} true if transparent\n */\nexport const isTransparent = (\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  tolerance: number,\n): boolean => {\n  tolerance = Math.round(tolerance);\n  const size = tolerance * 2 + 1;\n  const { data } = ctx.getImageData(x - tolerance, y - tolerance, size, size);\n\n  // Split image data - for tolerance > 1, pixelDataSize = 4;\n  for (let i = 3; i < data.length; i += 4) {\n    const alphaChannel = data[i];\n    if (alphaChannel > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n","import type { XY } from '../../../Point';\nimport { Point } from '../../../Point';\nimport { degreesToRadians } from '../radiansDegreesConversion';\nimport { createVector } from '../vectors';\nimport type { TProjectStrokeOnPointsOptions, TProjection } from './types';\n\n/**\n * @see https://github.com/fabricjs/fabric.js/pull/8344\n * @todo consider removing skewing from points before calculating stroke projection,\n * see https://github.com/fabricjs/fabric.js/commit/494a10ee2f8c2278ae9a55b20bf50cf6ee25b064#commitcomment-94751537\n */\nexport abstract class StrokeProjectionsBase {\n  declare options: TProjectStrokeOnPointsOptions;\n  declare scale: Point;\n  declare strokeUniformScalar: Point;\n  declare strokeProjectionMagnitude: number;\n\n  constructor(options: TProjectStrokeOnPointsOptions) {\n    this.options = options;\n    this.strokeProjectionMagnitude = this.options.strokeWidth / 2;\n    this.scale = new Point(this.options.scaleX, this.options.scaleY);\n    this.strokeUniformScalar = this.options.strokeUniform\n      ? new Point(1 / this.options.scaleX, 1 / this.options.scaleY)\n      : new Point(1, 1);\n  }\n\n  /**\n   * When the stroke is uniform, scaling affects the arrangement of points. So we must take it into account.\n   */\n  protected createSideVector(from: XY, to: XY) {\n    const v = createVector(from, to);\n    return this.options.strokeUniform ? v.multiply(this.scale) : v;\n  }\n\n  protected abstract calcOrthogonalProjection(\n    from: Point,\n    to: Point,\n    magnitude?: number,\n  ): Point;\n\n  protected projectOrthogonally(from: Point, to: Point, magnitude?: number) {\n    return this.applySkew(\n      from.add(this.calcOrthogonalProjection(from, to, magnitude)),\n    );\n  }\n\n  protected isSkewed() {\n    return this.options.skewX !== 0 || this.options.skewY !== 0;\n  }\n\n  protected applySkew(point: Point) {\n    const p = new Point(point);\n    // skewY must be applied before skewX as this distortion affects skewX calculation\n    p.y += p.x * Math.tan(degreesToRadians(this.options.skewY));\n    p.x += p.y * Math.tan(degreesToRadians(this.options.skewX));\n    return p;\n  }\n\n  protected scaleUnitVector(unitVector: Point, scalar: number) {\n    return unitVector.multiply(this.strokeUniformScalar).scalarMultiply(scalar);\n  }\n\n  protected abstract projectPoints(): Point[];\n\n  public abstract project(): TProjection[];\n}\n","import type { XY } from '../../../Point';\nimport { Point } from '../../../Point';\nimport { halfPI, twoMathPi } from '../../../constants';\nimport type { TRadian } from '../../../typedefs';\nimport { degreesToRadians } from '../radiansDegreesConversion';\nimport {\n  calcAngleBetweenVectors,\n  calcVectorRotation,\n  crossProduct,\n  getOrthonormalVector,\n  getUnitVector,\n  isBetweenVectors,\n  magnitude,\n  rotateVector,\n} from '../vectors';\nimport { StrokeProjectionsBase } from './StrokeProjectionsBase';\nimport type { TProjection, TProjectStrokeOnPointsOptions } from './types';\n\nconst zeroVector = new Point();\n\n/**\n * class in charge of finding projections for each type of line join\n * @see {@link [Closed path projections at #8344](https://github.com/fabricjs/fabric.js/pull/8344#2-closed-path)}\n *\n * - MDN:\n *   - https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin\n *   - https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linejoin\n * - Spec: https://svgwg.org/svg2-draft/painting.html#StrokeLinejoinProperty\n * - Playground to understand how the line joins works: https://hypertolosana.github.io/efficient-webgl-stroking/index.html\n * - View the calculated projections for each of the control points: https://codesandbox.io/s/project-stroke-points-with-context-to-trace-b8jc4j?file=/src/index.js\n *\n */\nexport class StrokeLineJoinProjections extends StrokeProjectionsBase {\n  /**\n   * The point being projected (the angle ∠BAC)\n   */\n  declare A: Point;\n  /**\n   * The point before A\n   */\n  declare B: Point;\n  /**\n   * The point after A\n   */\n  declare C: Point;\n  /**\n   * The AB vector\n   */\n  AB: Point;\n  /**\n   * The AC vector\n   */\n  AC: Point;\n  /**\n   * The angle of A (∠BAC)\n   */\n  alpha: TRadian;\n  /**\n   * The bisector of A (∠BAC)\n   */\n  bisector: Point;\n\n  static getOrthogonalRotationFactor(vector1: Point, vector2?: Point) {\n    const angle = vector2\n      ? calcAngleBetweenVectors(vector1, vector2)\n      : calcVectorRotation(vector1);\n    return Math.abs(angle) < halfPI ? -1 : 1;\n  }\n\n  constructor(A: XY, B: XY, C: XY, options: TProjectStrokeOnPointsOptions) {\n    super(options);\n    this.A = new Point(A);\n    this.B = new Point(B);\n    this.C = new Point(C);\n    this.AB = this.createSideVector(this.A, this.B);\n    this.AC = this.createSideVector(this.A, this.C);\n    this.alpha = calcAngleBetweenVectors(this.AB, this.AC);\n    this.bisector = getUnitVector(\n      // if AC is also the zero vector nothing will be projected\n      // in that case the next point will handle the projection\n      rotateVector(this.AB.eq(zeroVector) ? this.AC : this.AB, this.alpha / 2),\n    );\n  }\n\n  calcOrthogonalProjection(\n    from: Point,\n    to: Point,\n    magnitude: number = this.strokeProjectionMagnitude,\n  ) {\n    const vector = this.createSideVector(from, to);\n    const orthogonalProjection = getOrthonormalVector(vector);\n    const correctSide = StrokeLineJoinProjections.getOrthogonalRotationFactor(\n      orthogonalProjection,\n      this.bisector,\n    );\n    return this.scaleUnitVector(orthogonalProjection, magnitude * correctSide);\n  }\n\n  /**\n   * BEVEL\n   * Calculation: the projection points are formed by the vector orthogonal to the vertex.\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-2-bevel\n   */\n  projectBevel() {\n    const projections: Point[] = [];\n    // if `alpha` equals 0 or 2*PI, the projections are the same for `B` and `C`\n    (this.alpha % twoMathPi === 0 ? [this.B] : [this.B, this.C]).forEach(\n      (to) => {\n        projections.push(this.projectOrthogonally(this.A, to));\n        projections.push(\n          this.projectOrthogonally(this.A, to, -this.strokeProjectionMagnitude),\n        );\n      },\n    );\n    return projections;\n  }\n\n  /**\n   * MITER\n   * Calculation: the corner is formed by extending the outer edges of the stroke\n   * at the tangents of the path segments until they intersect.\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-1-miter\n   */\n  projectMiter() {\n    const projections: Point[] = [],\n      alpha = Math.abs(this.alpha),\n      hypotUnitScalar = 1 / Math.sin(alpha / 2),\n      miterVector = this.scaleUnitVector(\n        this.bisector,\n        -this.strokeProjectionMagnitude * hypotUnitScalar,\n      );\n\n    // When two line segments meet at a sharp angle, it is possible for the join to extend,\n    // far beyond the thickness of the line stroking the path. The stroke-miterlimit imposes\n    // a limit on the extent of the line join.\n    // MDN: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-miterlimit\n    // When the stroke is uniform, scaling changes the arrangement of points, this changes the miter-limit\n    const strokeMiterLimit = this.options.strokeUniform\n      ? magnitude(\n          this.scaleUnitVector(this.bisector, this.options.strokeMiterLimit),\n        )\n      : this.options.strokeMiterLimit;\n\n    if (\n      magnitude(miterVector) / this.strokeProjectionMagnitude <=\n      strokeMiterLimit\n    ) {\n      projections.push(this.applySkew(this.A.add(miterVector)));\n    }\n    /* when the miter-limit is reached, the stroke line join becomes of type bevel.\n      We always need two orthogonal projections which are basically bevel-type projections,\n      so regardless of whether the miter-limit was reached or not, we include these projections.\n    */\n    projections.push(...this.projectBevel());\n\n    return projections;\n  }\n\n  /**\n   * ROUND (without skew)\n   * Calculation: the projections are the two vectors parallel to X and Y axes\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-3-1-round-without-skew\n   */\n  private projectRoundNoSkew(startCircle: Point, endCircle: Point) {\n    const projections: Point[] = [],\n      // correctSide is used to only consider projecting for the outer side\n      correctSide = new Point(\n        StrokeLineJoinProjections.getOrthogonalRotationFactor(this.bisector),\n        StrokeLineJoinProjections.getOrthogonalRotationFactor(\n          new Point(this.bisector.y, this.bisector.x),\n        ),\n      ),\n      radiusOnAxisX = new Point(1, 0)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar)\n        .multiply(correctSide),\n      radiusOnAxisY = new Point(0, 1)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar)\n        .multiply(correctSide);\n\n    [radiusOnAxisX, radiusOnAxisY].forEach((vector) => {\n      if (isBetweenVectors(vector, startCircle, endCircle)) {\n        projections.push(this.A.add(vector));\n      }\n    });\n    return projections;\n  }\n\n  /**\n   * ROUND (with skew)\n   * Calculation: the projections are the points furthest from the vertex in\n   * the direction of the X and Y axes after distortion.\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-3-2-round-skew\n   */\n  private projectRoundWithSkew(startCircle: Point, endCircle: Point) {\n    const projections: Point[] = [];\n\n    const { skewX, skewY, scaleX, scaleY, strokeUniform } = this.options,\n      shearing = new Point(\n        Math.tan(degreesToRadians(skewX)),\n        Math.tan(degreesToRadians(skewY)),\n      );\n    // The points furthest from the vertex in the direction of the X and Y axes after distortion\n    const circleRadius = this.strokeProjectionMagnitude,\n      newY = strokeUniform\n        ? circleRadius /\n          scaleY /\n          Math.sqrt(1 / scaleY ** 2 + (1 / scaleX ** 2) * shearing.y ** 2)\n        : circleRadius / Math.sqrt(1 + shearing.y ** 2),\n      furthestY = new Point(\n        // Safe guard due to floating point precision. In some situations the square root\n        // was returning NaN because of a negative number close to zero.\n        Math.sqrt(Math.max(circleRadius ** 2 - newY ** 2, 0)),\n        newY,\n      ),\n      newX = strokeUniform\n        ? circleRadius /\n          Math.sqrt(\n            1 +\n              (shearing.x ** 2 * (1 / scaleY) ** 2) /\n                (1 / scaleX + (1 / scaleX) * shearing.x * shearing.y) ** 2,\n          )\n        : circleRadius /\n          Math.sqrt(1 + shearing.x ** 2 / (1 + shearing.x * shearing.y) ** 2),\n      furthestX = new Point(\n        newX,\n        Math.sqrt(Math.max(circleRadius ** 2 - newX ** 2, 0)),\n      );\n\n    [\n      furthestX,\n      furthestX.scalarMultiply(-1),\n      furthestY,\n      furthestY.scalarMultiply(-1),\n    ]\n      // We need to skew the vector here as this information is used to check if\n      // it is between the start and end of the circle segment\n      .map((vector) =>\n        this.applySkew(\n          strokeUniform ? vector.multiply(this.strokeUniformScalar) : vector,\n        ),\n      )\n      .forEach((vector) => {\n        if (isBetweenVectors(vector, startCircle, endCircle)) {\n          projections.push(this.applySkew(this.A).add(vector));\n        }\n      });\n\n    return projections;\n  }\n\n  projectRound() {\n    const projections: Point[] = [];\n    /* Include the start and end points of the circle segment, so that only\n      the projections contained within it are included */\n    // add the orthogonal projections (start and end points of circle segment)\n    projections.push(...this.projectBevel());\n    // let's determines which one of the orthogonal projection is the beginning and end of the circle segment.\n    // when `alpha` equals 0 or 2*PI, we have a straight line, so the way to find the start/end is different.\n    const isStraightLine = this.alpha % twoMathPi === 0,\n      // change the origin of the projections to point A\n      // so that the cross product calculation is correct\n      newOrigin = this.applySkew(this.A),\n      proj0 = projections[isStraightLine ? 0 : 2].subtract(newOrigin),\n      proj1 = projections[isStraightLine ? 1 : 0].subtract(newOrigin),\n      // when `isStraightLine` === true, we compare with the vector opposite AB, otherwise we compare with the bisector.\n      comparisonVector = isStraightLine\n        ? this.applySkew(this.AB.scalarMultiply(-1))\n        : this.applySkew(\n            this.bisector.multiply(this.strokeUniformScalar).scalarMultiply(-1),\n          ),\n      // the beginning of the circle segment is always to the right of the comparison vector (cross product > 0)\n      isProj0Start = crossProduct(proj0, comparisonVector) > 0,\n      startCircle = isProj0Start ? proj0 : proj1,\n      endCircle = isProj0Start ? proj1 : proj0;\n    if (!this.isSkewed()) {\n      projections.push(...this.projectRoundNoSkew(startCircle, endCircle));\n    } else {\n      projections.push(...this.projectRoundWithSkew(startCircle, endCircle));\n    }\n    return projections;\n  }\n\n  /**\n   * Project stroke width on points returning projections for each point as follows:\n   * - `miter`: 1 point corresponding to the outer boundary. If the miter limit is exceeded, it will be 2 points (becomes bevel)\n   * - `bevel`: 2 points corresponding to the bevel possible boundaries, orthogonal to the stroke.\n   * - `round`: same as `bevel` when it has no skew, with skew are 4 points.\n   */\n  protected projectPoints() {\n    switch (this.options.strokeLineJoin) {\n      case 'miter':\n        return this.projectMiter();\n      case 'round':\n        return this.projectRound();\n      default:\n        return this.projectBevel();\n    }\n  }\n\n  public project(): TProjection[] {\n    return this.projectPoints().map((point) => ({\n      originPoint: this.A,\n      projectedPoint: point,\n      angle: this.alpha,\n      bisector: this.bisector,\n    }));\n  }\n}\n","import type { XY } from '../../../Point';\nimport { Point } from '../../../Point';\nimport { getOrthonormalVector, getUnitVector } from '../vectors';\nimport { StrokeLineJoinProjections } from './StrokeLineJoinProjections';\nimport { StrokeProjectionsBase } from './StrokeProjectionsBase';\nimport type { TProjection, TProjectStrokeOnPointsOptions } from './types';\n\n/**\n * class in charge of finding projections for each type of line cap for start/end of an open path\n * @see {@link [Open path projections at #8344](https://github.com/fabricjs/fabric.js/pull/8344#1-open-path)}\n *\n * Reference:\n * - MDN:\n *   - https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap\n *   - https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap\n * - Spec: https://html.spec.whatwg.org/multipage/canvas.html#dom-context-2d-linecap-dev\n * - Playground to understand how the line joins works: https://hypertolosana.github.io/efficient-webgl-stroking/index.html\n * - View the calculated projections for each of the control points: https://codesandbox.io/s/project-stroke-points-with-context-to-trace-b8jc4j?file=/src/index.js\n */\nexport class StrokeLineCapProjections extends StrokeProjectionsBase {\n  /**\n   * edge point\n   */\n  declare A: Point;\n  /**\n   * point next to edge point\n   */\n  declare T: Point;\n\n  constructor(A: XY, T: XY, options: TProjectStrokeOnPointsOptions) {\n    super(options);\n    this.A = new Point(A);\n    this.T = new Point(T);\n  }\n\n  calcOrthogonalProjection(\n    from: Point,\n    to: Point,\n    magnitude: number = this.strokeProjectionMagnitude,\n  ) {\n    const vector = this.createSideVector(from, to);\n    return this.scaleUnitVector(getOrthonormalVector(vector), magnitude);\n  }\n\n  /**\n   * OPEN PATH START/END - Line cap: Butt\n   * Calculation: to find the projections, just find the points orthogonal to the stroke\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#1-1-butt\n   */\n  projectButt() {\n    return [\n      this.projectOrthogonally(this.A, this.T, this.strokeProjectionMagnitude),\n      this.projectOrthogonally(this.A, this.T, -this.strokeProjectionMagnitude),\n    ];\n  }\n\n  /**\n   * OPEN PATH START/END - Line cap: Round\n   * Calculation: same as stroke line join `round`\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#1-2-round\n   */\n  projectRound() {\n    const projections: Point[] = [];\n\n    if (!this.isSkewed() && this.A.eq(this.T)) {\n      /* 1 point case without `skew`\n        When `strokeUniform` is true, scaling has no effect.\n        So we divide by scale, to remove its effect.\n      */\n      const projection = new Point(1, 1)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar);\n      projections.push(\n        this.applySkew(this.A.add(projection)),\n        this.applySkew(this.A.subtract(projection)),\n      );\n    } else {\n      projections.push(\n        ...new StrokeLineJoinProjections(\n          this.A,\n          this.T,\n          this.T,\n          this.options,\n        ).projectRound(),\n      );\n    }\n\n    return projections;\n  }\n\n  /**\n   * OPEN PATH START/END - Line cap: Square\n   * Calculation: project a rectangle of points on the stroke in the opposite direction of the vector `AT`\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#1-3-square\n   */\n  projectSquare() {\n    const projections: Point[] = [];\n\n    if (this.A.eq(this.T)) {\n      /* 1 point case without `skew`\n        When `strokeUniform` is true, scaling has no effect.\n        So we divide by scale, to remove its effect.\n      */\n      const projection = new Point(1, 1)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar);\n      projections.push(this.A.add(projection), this.A.subtract(projection));\n    } else {\n      const orthogonalProjection = this.calcOrthogonalProjection(\n        this.A,\n        this.T,\n        this.strokeProjectionMagnitude,\n      );\n      const strokePointingOut = this.scaleUnitVector(\n        getUnitVector(this.createSideVector(this.A, this.T)),\n        -this.strokeProjectionMagnitude,\n      );\n      const projectedA = this.A.add(strokePointingOut);\n      projections.push(\n        projectedA.add(orthogonalProjection),\n        projectedA.subtract(orthogonalProjection),\n      );\n    }\n\n    return projections.map((p) => this.applySkew(p));\n  }\n\n  protected projectPoints() {\n    switch (this.options.strokeLineCap) {\n      case 'round':\n        return this.projectRound();\n      case 'square':\n        return this.projectSquare();\n      default:\n        return this.projectButt();\n    }\n  }\n\n  public project(): TProjection[] {\n    return this.projectPoints().map((point) => ({\n      originPoint: this.A,\n      projectedPoint: point,\n    }));\n  }\n}\n","import { Point, type XY } from '../../../Point';\nimport { findIndexRight } from '../../internals/findRight';\nimport { StrokeLineCapProjections } from './StrokeLineCapProjections';\nimport { StrokeLineJoinProjections } from './StrokeLineJoinProjections';\nimport type { TProjection, TProjectStrokeOnPointsOptions } from './types';\n\nexport * from './types';\n\n/**\n *\n * Used to calculate object's bounding box\n *\n * @see https://github.com/fabricjs/fabric.js/pull/8344\n *\n */\nexport const projectStrokeOnPoints = (\n  points: XY[],\n  options: TProjectStrokeOnPointsOptions,\n  openPath = false,\n): TProjection[] => {\n  const projections: TProjection[] = [];\n\n  if (points.length === 0) {\n    return projections;\n  }\n\n  // first we remove duplicate neighboring points\n  const reduced = points.reduce(\n    (reduced, point) => {\n      if (!reduced[reduced.length - 1].eq(point)) {\n        reduced.push(new Point(point));\n      }\n      return reduced;\n    },\n    [new Point(points[0])],\n  );\n\n  if (reduced.length === 1) {\n    openPath = true;\n  } else if (!openPath) {\n    // remove points from end in case they equal the first point\n    // in order to correctly project the first point\n    const start = reduced[0];\n    const index = findIndexRight(reduced, (point) => !point.eq(start));\n    reduced.splice(index + 1);\n  }\n\n  reduced.forEach((A, index, points) => {\n    let B: XY, C: XY;\n    if (index === 0) {\n      C = points[1];\n      B = openPath ? A : points[points.length - 1];\n    } else if (index === points.length - 1) {\n      B = points[index - 1];\n      C = openPath ? A : points[0];\n    } else {\n      B = points[index - 1];\n      C = points[index + 1];\n    }\n\n    if (openPath && points.length === 1) {\n      projections.push(\n        ...new StrokeLineCapProjections(A, A, options).project(),\n      );\n    } else if (openPath && (index === 0 || index === points.length - 1)) {\n      projections.push(\n        ...new StrokeLineCapProjections(\n          A,\n          index === 0 ? C : B,\n          options,\n        ).project(),\n      );\n    } else {\n      projections.push(\n        ...new StrokeLineJoinProjections(A, B, C, options).project(),\n      );\n    }\n  });\n\n  return projections;\n};\n","export const findIndexRight = <T>(\n  array: T[],\n  predicate: (value: T, index: number, array: T[]) => boolean,\n) => {\n  for (let index = array.length - 1; index >= 0; index--) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n};\n","import type { TextStyle } from '../../shapes/Text/StyledText';\n\nexport const cloneStyles = (style: TextStyle): TextStyle => {\n  const newObj: TextStyle = {};\n  Object.keys(style).forEach((key) => {\n    newObj[key] = {};\n    Object.keys(style[key]).forEach((keyInner) => {\n      newObj[key][keyInner] = { ...style[key][keyInner] };\n    });\n  });\n  return newObj;\n};\n","/**\n * Capitalizes a string\n * @param {String} string String to capitalize\n * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized\n * and other letters stay untouched, if false first letter is capitalized\n * and other letters are converted to lowercase.\n * @return {String} Capitalized version of a string\n */\nexport const capitalize = (string: string, firstLetterOnly = false): string =>\n  `${string.charAt(0).toUpperCase()}${\n    firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase()\n  }`;\n\n/**\n * Escapes XML in a string\n * @param {String} string String to escape\n * @return {String} Escaped version of a string\n */\nexport const escapeXml = (string: string): string =>\n  string\n    .replace(/&/g, '&amp;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&apos;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n\n/**\n * Divide a string in the user perceived single units\n * @param {String} textstring String to escape\n * @return {Array} array containing the graphemes\n */\nexport const graphemeSplit = (textstring: string): string[] => {\n  const graphemes = [];\n  for (let i = 0, chr; i < textstring.length; i++) {\n    if ((chr = getWholeChar(textstring, i)) === false) {\n      continue;\n    }\n    graphemes.push(chr as string);\n  }\n  return graphemes;\n};\n\n// taken from mdn in the charAt doc page.\nconst getWholeChar = (str: string, i: number): string | boolean => {\n  const code = str.charCodeAt(i);\n  if (isNaN(code)) {\n    return ''; // Position not found\n  }\n  if (code < 0xd800 || code > 0xdfff) {\n    return str.charAt(i);\n  }\n\n  // High surrogate (could change last hex to 0xDB7F to treat high private\n  // surrogates as single characters)\n  if (0xd800 <= code && code <= 0xdbff) {\n    if (str.length <= i + 1) {\n      throw 'High surrogate without following low surrogate';\n    }\n    const next = str.charCodeAt(i + 1);\n    if (0xdc00 > next || next > 0xdfff) {\n      throw 'High surrogate without following low surrogate';\n    }\n    return str.charAt(i) + str.charAt(i + 1);\n  }\n  // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\n  if (i === 0) {\n    throw 'Low surrogate without preceding high surrogate';\n  }\n  const prev = str.charCodeAt(i - 1);\n\n  // (could change last hex to 0xDB7F to treat high private\n  // surrogates as single characters)\n  if (0xd800 > prev || prev > 0xdbff) {\n    throw 'Low surrogate without preceding high surrogate';\n  }\n  // We can pass over low surrogates now as the second component\n  // in a pair which we have already processed\n  return false;\n};\n","import { reNewline } from '../../constants';\nimport type {\n  TextStyle,\n  TextStyleDeclaration,\n} from '../../shapes/Text/StyledText';\nimport { cloneStyles } from '../internals/cloneStyles';\nimport { graphemeSplit } from '../lang_string';\n\nexport type TextStyleArray = {\n  start: number;\n  end: number;\n  style: TextStyleDeclaration;\n}[];\n\n/**\n * @param {Object} prevStyle first style to compare\n * @param {Object} thisStyle second style to compare\n * @param {boolean} forTextSpans whether to check overline, underline, and line-through properties\n * @return {boolean} true if the style changed\n */\nexport const hasStyleChanged = (\n  prevStyle: TextStyleDeclaration,\n  thisStyle: TextStyleDeclaration,\n  forTextSpans = false,\n) =>\n  prevStyle.fill !== thisStyle.fill ||\n  prevStyle.stroke !== thisStyle.stroke ||\n  prevStyle.strokeWidth !== thisStyle.strokeWidth ||\n  prevStyle.fontSize !== thisStyle.fontSize ||\n  prevStyle.fontFamily !== thisStyle.fontFamily ||\n  prevStyle.fontWeight !== thisStyle.fontWeight ||\n  prevStyle.fontStyle !== thisStyle.fontStyle ||\n  prevStyle.textBackgroundColor !== thisStyle.textBackgroundColor ||\n  prevStyle.deltaY !== thisStyle.deltaY ||\n  (forTextSpans &&\n    (prevStyle.overline !== thisStyle.overline ||\n      prevStyle.underline !== thisStyle.underline ||\n      prevStyle.linethrough !== thisStyle.linethrough));\n\n/**\n * Returns the array form of a text object's inline styles property with styles grouped in ranges\n * rather than per character. This format is less verbose, and is better suited for storage\n * so it is used in serialization (not during runtime).\n * @param {object} styles per character styles for a text object\n * @param {String} text the text string that the styles are applied to\n * @return {{start: number, end: number, style: object}[]}\n */\nexport const stylesToArray = (\n  styles: TextStyle,\n  text: string,\n): TextStyleArray => {\n  const textLines = text.split('\\n'),\n    stylesArray = [];\n  let charIndex = -1,\n    prevStyle = {};\n  // clone style structure to prevent mutation\n  styles = cloneStyles(styles);\n\n  //loop through each textLine\n  for (let i = 0; i < textLines.length; i++) {\n    const chars = graphemeSplit(textLines[i]);\n    if (!styles[i]) {\n      //no styles exist for this line, so add the line's length to the charIndex total and reset prevStyle\n      charIndex += chars.length;\n      prevStyle = {};\n      continue;\n    }\n    //loop through each character of the current line\n    for (let c = 0; c < chars.length; c++) {\n      charIndex++;\n      const thisStyle = styles[i][c];\n      //check if style exists for this character\n      if (thisStyle && Object.keys(thisStyle).length > 0) {\n        if (hasStyleChanged(prevStyle, thisStyle, true)) {\n          stylesArray.push({\n            start: charIndex,\n            end: charIndex + 1,\n            style: thisStyle,\n          });\n        } else {\n          //if style is the same as previous character, increase end index\n          stylesArray[stylesArray.length - 1].end++;\n        }\n      }\n      prevStyle = thisStyle || {};\n    }\n  }\n  return stylesArray;\n};\n\n/**\n * Returns the object form of the styles property with styles that are assigned per\n * character rather than grouped by range. This format is more verbose, and is\n * only used during runtime (not for serialization/storage)\n * @param {Array} styles the serialized form of a text object's styles\n * @param {String} text the text string that the styles are applied to\n * @return {Object}\n */\nexport const stylesFromArray = (\n  styles: TextStyleArray | TextStyle,\n  text: string,\n): TextStyle => {\n  if (!Array.isArray(styles)) {\n    // clone to prevent mutation\n    return cloneStyles(styles);\n  }\n  const textLines = text.split(reNewline),\n    stylesObject: TextStyle = {};\n  let charIndex = -1,\n    styleIndex = 0;\n  //loop through each textLine\n  for (let i = 0; i < textLines.length; i++) {\n    const chars = graphemeSplit(textLines[i]);\n\n    //loop through each character of the current line\n    for (let c = 0; c < chars.length; c++) {\n      charIndex++;\n      //check if there's a style collection that includes the current character\n      if (\n        styles[styleIndex] &&\n        styles[styleIndex].start <= charIndex &&\n        charIndex < styles[styleIndex].end\n      ) {\n        //create object for line index if it doesn't exist\n        stylesObject[i] = stylesObject[i] || {};\n        //assign a style at this character's index\n        stylesObject[i][c] = { ...styles[styleIndex].style };\n        //if character is at the end of the current style collection, move to the next\n        if (charIndex === styles[styleIndex].end - 1) {\n          styleIndex++;\n        }\n      }\n    }\n  }\n  return stylesObject;\n};\n","import { FILL, STROKE } from '../constants';\n\n/**\n * Attributes parsed from all SVG elements\n * @type array\n */\nexport const SHARED_ATTRIBUTES = [\n  'display',\n  'transform',\n  FILL,\n  'fill-opacity',\n  'fill-rule',\n  'opacity',\n  STROKE,\n  'stroke-dasharray',\n  'stroke-linecap',\n  'stroke-dashoffset',\n  'stroke-linejoin',\n  'stroke-miterlimit',\n  'stroke-opacity',\n  'stroke-width',\n  'id',\n  'paint-order',\n  'vector-effect',\n  'instantiated_by_use',\n  'clip-path',\n];\n","export function selectorMatches(element: HTMLElement, selector: string) {\n  const nodeName = element.nodeName;\n  const classNames = element.getAttribute('class');\n  const id = element.getAttribute('id');\n  const azAz = '(?![a-zA-Z\\\\-]+)';\n  let matcher;\n  // i check if a selector matches slicing away part from it.\n  // if i get empty string i should match\n  matcher = new RegExp('^' + nodeName, 'i');\n  selector = selector.replace(matcher, '');\n  if (id && selector.length) {\n    matcher = new RegExp('#' + id + azAz, 'i');\n    selector = selector.replace(matcher, '');\n  }\n  if (classNames && selector.length) {\n    const splitClassNames = classNames.split(' ');\n    for (let i = splitClassNames.length; i--; ) {\n      matcher = new RegExp('\\\\.' + splitClassNames[i] + azAz, 'i');\n      selector = selector.replace(matcher, '');\n    }\n  }\n  return selector.length === 0;\n}\n","import { selectorMatches } from './selectorMatches';\nimport { doesSomeParentMatch } from './doesSomeParentMatch';\n\n/**\n * @private\n */\n\nexport function elementMatchesRule(element: HTMLElement, selectors: string[]) {\n  let parentMatching = true;\n  // start from rightmost selector.\n  const firstMatching = selectorMatches(element, selectors.pop()!);\n  if (firstMatching && selectors.length) {\n    parentMatching = doesSomeParentMatch(element, selectors);\n  }\n  return firstMatching && parentMatching && selectors.length === 0;\n}\n","import { selectorMatches } from './selectorMatches';\n\nexport function doesSomeParentMatch(element: HTMLElement, selectors: string[]) {\n  let selector: string,\n    parentMatching = true;\n  while (\n    element.parentElement &&\n    element.parentElement.nodeType === 1 &&\n    selectors.length\n  ) {\n    if (parentMatching) {\n      selector = selectors.pop()!;\n    }\n    element = element.parentElement;\n    parentMatching = selectorMatches(element, selector!);\n  }\n  return selectors.length === 0;\n}\n","import { attributesMap } from './constants';\n\nexport const normalizeAttr = (\n  attr: keyof typeof attributesMap | string,\n): string => attributesMap[attr as keyof typeof attributesMap] ?? attr;\n","import { reNum } from '../../parser/constants';\n\nconst regex = new RegExp(`(${reNum})`, 'gi');\n\nexport const cleanupSvgAttribute = (attributeValue: string) =>\n  attributeValue\n    .replace(regex, ' $1 ')\n    // replace annoying commas and arbitrary whitespace with single spaces\n    .replace(/,/gi, ' ')\n    .replace(/\\s+/gi, ' ');\n","import { ROTATE, SCALE, SKEW_X, SKEW_Y, iMatrix } from '../constants';\nimport { reNum } from './constants';\nimport type { TMat2D } from '../typedefs';\nimport { cleanupSvgAttribute } from '../util/internals/cleanupSvgAttribute';\nimport {\n  createRotateMatrix,\n  createScaleMatrix,\n  createSkewXMatrix,\n  createSkewYMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrixArray,\n} from '../util/misc/matrix';\n\n// == begin transform regexp\nconst p = `(${reNum})`;\nconst skewX = String.raw`(skewX)\\(${p}\\)`;\nconst skewY = String.raw`(skewY)\\(${p}\\)`;\nconst rotate = String.raw`(rotate)\\(${p}(?: ${p} ${p})?\\)`;\nconst scale = String.raw`(scale)\\(${p}(?: ${p})?\\)`;\nconst translate = String.raw`(translate)\\(${p}(?: ${p})?\\)`;\nconst matrix = String.raw`(matrix)\\(${p} ${p} ${p} ${p} ${p} ${p}\\)`;\nconst transform = `(?:${matrix}|${translate}|${rotate}|${scale}|${skewX}|${skewY})`;\nconst transforms = `(?:${transform}*)`;\nconst transformList = String.raw`^\\s*(?:${transforms}?)\\s*$`;\n// http://www.w3.org/TR/SVG/coords.html#TransformAttribute\nconst reTransformList = new RegExp(transformList);\nconst reTransform = new RegExp(transform);\nconst reTransformAll = new RegExp(transform, 'g');\n// == end transform regexp\n\n/**\n * Parses \"transform\" attribute, returning an array of values\n * @static\n * @function\n * @memberOf fabric\n * @param {String} attributeValue String containing attribute value\n * @return {TTransformMatrix} Array of 6 elements representing transformation matrix\n */\nexport function parseTransformAttribute(attributeValue: string): TMat2D {\n  // first we clean the string\n  attributeValue = cleanupSvgAttribute(attributeValue)\n    // remove spaces around front parentheses\n    .replace(/\\s*([()])\\s*/gi, '$1');\n\n  // start with identity matrix\n  const matrices: TMat2D[] = [];\n\n  // return if no argument was given or\n  // an argument does not match transform attribute regexp\n  if (\n    !attributeValue ||\n    (attributeValue && !reTransformList.test(attributeValue))\n  ) {\n    return [...iMatrix];\n  }\n\n  for (const match of attributeValue.matchAll(reTransformAll)) {\n    const transformMatch = reTransform.exec(match[0]);\n    if (!transformMatch) {\n      continue;\n    }\n    let matrix: TMat2D = iMatrix;\n    const matchedParams = transformMatch.filter((m) => !!m);\n    const [, operation, ...rawArgs] = matchedParams;\n    const [arg0, arg1, arg2, arg3, arg4, arg5] = rawArgs.map((arg) =>\n      parseFloat(arg),\n    );\n\n    switch (operation) {\n      case 'translate':\n        matrix = createTranslateMatrix(arg0, arg1);\n        break;\n      case ROTATE:\n        matrix = createRotateMatrix({ angle: arg0 }, { x: arg1, y: arg2 });\n        break;\n      case SCALE:\n        matrix = createScaleMatrix(arg0, arg1);\n        break;\n      case SKEW_X:\n        matrix = createSkewXMatrix(arg0);\n        break;\n      case SKEW_Y:\n        matrix = createSkewYMatrix(arg0);\n        break;\n      case 'matrix':\n        matrix = [arg0, arg1, arg2, arg3, arg4, arg5];\n        break;\n    }\n\n    // snapshot current matrix into matrices array\n    matrices.push(matrix);\n  }\n\n  return multiplyTransformMatrixArray(matrices);\n}\n","import { multiplyTransformMatrices } from '../util/misc/matrix';\nimport { parseUnit } from '../util/misc/svgParsing';\nimport { parseTransformAttribute } from './parseTransformAttribute';\nimport { CENTER, LEFT, RIGHT, NONE, FILL, STROKE } from '../constants';\n\nexport function normalizeValue(\n  attr: string,\n  value: any,\n  parentAttributes: Record<string, any>,\n  fontSize: number,\n): string | null | boolean | number[] | number {\n  const isArray = Array.isArray(value);\n  let parsed: number | number[];\n  let ouputValue: string | null | boolean | number[] | number = value;\n  if ((attr === FILL || attr === STROKE) && value === NONE) {\n    ouputValue = '';\n  } else if (attr === 'strokeUniform') {\n    return value === 'non-scaling-stroke';\n  } else if (attr === 'strokeDashArray') {\n    if (value === NONE) {\n      ouputValue = null;\n    } else {\n      ouputValue = value.replace(/,/g, ' ').split(/\\s+/).map(parseFloat);\n    }\n  } else if (attr === 'transformMatrix') {\n    if (parentAttributes && parentAttributes.transformMatrix) {\n      ouputValue = multiplyTransformMatrices(\n        parentAttributes.transformMatrix,\n        parseTransformAttribute(value),\n      );\n    } else {\n      ouputValue = parseTransformAttribute(value);\n    }\n  } else if (attr === 'visible') {\n    ouputValue = value !== NONE && value !== 'hidden';\n    // display=none on parent element always takes precedence over child element\n    if (parentAttributes && parentAttributes.visible === false) {\n      ouputValue = false;\n    }\n  } else if (attr === 'opacity') {\n    ouputValue = parseFloat(value);\n    if (parentAttributes && typeof parentAttributes.opacity !== 'undefined') {\n      ouputValue *= parentAttributes.opacity as number;\n    }\n  } else if (attr === 'textAnchor' /* text-anchor */) {\n    ouputValue = value === 'start' ? LEFT : value === 'end' ? RIGHT : CENTER;\n  } else if (attr === 'charSpacing') {\n    // parseUnit returns px and we convert it to em\n    parsed = (parseUnit(value, fontSize) / fontSize) * 1000;\n  } else if (attr === 'paintFirst') {\n    const fillIndex = value.indexOf(FILL);\n    const strokeIndex = value.indexOf(STROKE);\n    ouputValue = FILL;\n    if (fillIndex > -1 && strokeIndex > -1 && strokeIndex < fillIndex) {\n      ouputValue = STROKE;\n    } else if (fillIndex === -1 && strokeIndex > -1) {\n      ouputValue = STROKE;\n    }\n  } else if (\n    attr === 'href' ||\n    attr === 'xlink:href' ||\n    attr === 'font' ||\n    attr === 'id'\n  ) {\n    return value;\n  } else if (attr === 'imageSmoothing') {\n    return value === 'optimizeQuality';\n  } else {\n    parsed = isArray\n      ? (value as string[]).map(parseUnit)\n      : parseUnit(value, fontSize);\n  }\n\n  return !isArray && isNaN(parsed! as number) ? ouputValue : parsed!;\n}\n","import { parseUnit } from '../util/misc/svgParsing';\nimport { reFontDeclaration } from './constants';\n\n/**\n * Parses a short font declaration, building adding its properties to a style object\n * @static\n * @function\n * @memberOf fabric\n * @param {String} value font declaration\n * @param {Object} oStyle definition\n */\nexport function parseFontDeclaration(\n  value: string,\n  oStyle: Record<string, any>,\n): void {\n  const match = value.match(reFontDeclaration);\n\n  if (!match) {\n    return;\n  }\n  const fontStyle = match[1],\n    // font variant is not used\n    // fontVariant = match[2],\n    fontWeight = match[3],\n    fontSize = match[4],\n    lineHeight = match[5],\n    fontFamily = match[6];\n\n  if (fontStyle) {\n    oStyle.fontStyle = fontStyle;\n  }\n  if (fontWeight) {\n    oStyle.fontWeight = isNaN(parseFloat(fontWeight))\n      ? fontWeight\n      : parseFloat(fontWeight);\n  }\n  if (fontSize) {\n    oStyle.fontSize = parseUnit(fontSize);\n  }\n  if (fontFamily) {\n    oStyle.fontFamily = fontFamily;\n  }\n  if (lineHeight) {\n    oStyle.lineHeight = lineHeight === 'normal' ? 1 : lineHeight;\n  }\n}\n","/**\n * Takes a style string and parses it in one that has only defined values\n * and lowercases properties\n * @param style\n * @param oStyle\n */\nexport function parseStyleString(\n  style: string,\n  oStyle: Record<string, any>,\n): void {\n  style\n    .replace(/;\\s*$/, '')\n    .split(';')\n    .forEach((chunk) => {\n      if (!chunk) return;\n      const [attr, value] = chunk.split(':');\n      oStyle[attr.trim().toLowerCase()] = value.trim();\n    });\n}\n","import { parseStyleObject } from './parseStyleObject';\nimport { parseStyleString } from './parseStyleString';\n\n/**\n * Parses \"style\" attribute, retuning an object with values\n * @static\n * @memberOf fabric\n * @param {SVGElement} element Element to parse\n * @return {Object} Objects with values parsed from style attribute of an element\n */\nexport function parseStyleAttribute(element: HTMLElement): Record<string, any> {\n  const oStyle: Record<string, any> = {},\n    style = element.getAttribute('style');\n\n  if (!style) {\n    return oStyle;\n  }\n\n  if (typeof style === 'string') {\n    parseStyleString(style, oStyle);\n  } else {\n    parseStyleObject(style, oStyle);\n  }\n\n  return oStyle;\n}\n","/**\n * Takes a style object and parses it in one that has only defined values\n * and lowercases properties\n * @param style\n * @param oStyle\n */\nexport function parseStyleObject(\n  style: Record<string, any>,\n  oStyle: Record<string, any>,\n): void {\n  Object.entries(style).forEach(([prop, value]) => {\n    if (value === undefined) {\n      return;\n    }\n    oStyle[prop.toLowerCase()] = value;\n  });\n}\n","import { Color } from '../color/Color';\nimport { toFixed } from '../util/misc/toFixed';\nimport { FabricObject } from '../shapes/Object/FabricObject';\n\nconst colorAttributesMap = {\n  stroke: 'strokeOpacity',\n  fill: 'fillOpacity',\n};\n\n/**\n * @private\n * @param {Object} attributes Array of attributes to parse\n */\n\nexport function setStrokeFillOpacity(\n  attributes: Record<string, any>,\n): Record<string, any> {\n  const defaults = FabricObject.getDefaults();\n  Object.entries(colorAttributesMap).forEach(([attr, colorAttr]) => {\n    if (\n      typeof attributes[colorAttr] === 'undefined' ||\n      attributes[attr] === ''\n    ) {\n      return;\n    }\n    if (typeof attributes[attr] === 'undefined') {\n      if (!defaults[attr]) {\n        return;\n      }\n      attributes[attr] = defaults[attr];\n    }\n    if (attributes[attr].indexOf('url(') === 0) {\n      return;\n    }\n    const color = new Color(attributes[attr]);\n    attributes[attr] = color\n      .setAlpha(toFixed(color.getAlpha() * attributes[colorAttr], 2))\n      .toRgba();\n  });\n  return attributes;\n}\n","import { DEFAULT_SVG_FONT_SIZE } from '../constants';\nimport { parseUnit } from '../util/misc/svgParsing';\nimport { cPath, fSize, svgValidParentsRegEx } from './constants';\nimport { getGlobalStylesForElement } from './getGlobalStylesForElement';\nimport { normalizeAttr } from './normalizeAttr';\nimport { normalizeValue } from './normalizeValue';\nimport { parseFontDeclaration } from './parseFontDeclaration';\nimport { parseStyleAttribute } from './parseStyleAttribute';\nimport { setStrokeFillOpacity } from './setStrokeFillOpacity';\nimport type { CSSRules } from './typedefs';\n\n/**\n * Returns an object of attributes' name/value, given element and an array of attribute names;\n * Parses parent \"g\" nodes recursively upwards.\n * @param {SVGElement | HTMLElement} element Element to parse\n * @param {Array} attributes Array of attributes to parse\n * @return {Object} object containing parsed attributes' names/values\n */\nexport function parseAttributes(\n  element: HTMLElement | null,\n  attributes: string[],\n  cssRules?: CSSRules,\n): Record<string, any> {\n  if (!element) {\n    return {};\n  }\n\n  let parentAttributes: Record<string, string> = {},\n    fontSize: number,\n    parentFontSize = DEFAULT_SVG_FONT_SIZE;\n\n  // if there's a parent container (`g` or `a` or `symbol` node), parse its attributes recursively upwards\n  if (\n    element.parentNode &&\n    svgValidParentsRegEx.test(element.parentNode.nodeName)\n  ) {\n    parentAttributes = parseAttributes(\n      element.parentElement,\n      attributes,\n      cssRules,\n    );\n    if (parentAttributes.fontSize) {\n      fontSize = parentFontSize = parseUnit(parentAttributes.fontSize);\n    }\n  }\n\n  const ownAttributes: Record<string, string> = {\n    ...attributes.reduce<Record<string, string>>((memo, attr) => {\n      const value = element.getAttribute(attr);\n      if (value) {\n        memo[attr] = value;\n      }\n      return memo;\n    }, {}),\n    // add values parsed from style, which take precedence over attributes\n    // (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)\n    ...getGlobalStylesForElement(element, cssRules),\n    ...parseStyleAttribute(element),\n  };\n\n  if (ownAttributes[cPath]) {\n    element.setAttribute(cPath, ownAttributes[cPath]);\n  }\n  if (ownAttributes[fSize]) {\n    // looks like the minimum should be 9px when dealing with ems. this is what looks like in browsers.\n    fontSize = parseUnit(ownAttributes[fSize], parentFontSize);\n    ownAttributes[fSize] = `${fontSize}`;\n  }\n\n  // this should have its own complex type\n  const normalizedStyle: Record<\n    string,\n    string | boolean | number | number[] | null\n  > = {};\n  for (const attr in ownAttributes) {\n    const normalizedAttr = normalizeAttr(attr);\n    const normalizedValue = normalizeValue(\n      normalizedAttr,\n      ownAttributes[attr],\n      parentAttributes,\n      fontSize!,\n    );\n    normalizedStyle[normalizedAttr] = normalizedValue;\n  }\n  if (normalizedStyle && normalizedStyle.font) {\n    parseFontDeclaration(normalizedStyle.font as string, normalizedStyle);\n  }\n  const mergedAttrs = { ...parentAttributes, ...normalizedStyle };\n  return svgValidParentsRegEx.test(element.nodeName)\n    ? mergedAttrs\n    : setStrokeFillOpacity(mergedAttrs);\n}\n","import { elementMatchesRule } from './elementMatchesRule';\nimport type { CSSRules } from './typedefs';\n\n/**\n * @private\n */\n\nexport function getGlobalStylesForElement(\n  element: HTMLElement,\n  cssRules: CSSRules = {},\n) {\n  let styles: Record<string, string> = {};\n  for (const rule in cssRules) {\n    if (elementMatchesRule(element, rule.split(' '))) {\n      styles = {\n        ...styles,\n        ...cssRules[rule],\n      };\n    }\n  }\n  return styles;\n}\n","import { kRect } from '../constants';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const rectDefaultValues: Partial<TClassProperties<Rect>> = {\n  rx: 0,\n  ry: 0,\n};\n\ninterface UniqueRectProps {\n  rx: number;\n  ry: number;\n}\n\nexport interface SerializedRectProps\n  extends SerializedObjectProps,\n    UniqueRectProps {}\n\nexport interface RectProps extends FabricObjectProps, UniqueRectProps {}\n\nconst RECT_PROPS = ['rx', 'ry'] as const;\n\nexport class Rect<\n    Props extends TOptions<RectProps> = Partial<RectProps>,\n    SProps extends SerializedRectProps = SerializedRectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements RectProps\n{\n  /**\n   * Horizontal border radius\n   * @type Number\n   * @default\n   */\n  declare rx: number;\n\n  /**\n   * Vertical border radius\n   * @type Number\n   * @default\n   */\n  declare ry: number;\n\n  static type = 'Rect';\n\n  static cacheProperties = [...cacheProperties, ...RECT_PROPS];\n\n  static ownDefaults = rectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Rect.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Rect.ownDefaults);\n    this.setOptions(options);\n    this._initRxRy();\n  }\n  /**\n   * Initializes rx/ry attributes\n   * @private\n   */\n  _initRxRy() {\n    const { rx, ry } = this;\n    if (rx && !ry) {\n      this.ry = rx;\n    } else if (ry && !rx) {\n      this.rx = ry;\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const { width: w, height: h } = this;\n    const x = -w / 2;\n    const y = -h / 2;\n    const rx = this.rx ? Math.min(this.rx, w / 2) : 0;\n    const ry = this.ry ? Math.min(this.ry, h / 2) : 0;\n    const isRounded = rx !== 0 || ry !== 0;\n\n    ctx.beginPath();\n\n    ctx.moveTo(x + rx, y);\n\n    ctx.lineTo(x + w - rx, y);\n    isRounded &&\n      ctx.bezierCurveTo(\n        x + w - kRect * rx,\n        y,\n        x + w,\n        y + kRect * ry,\n        x + w,\n        y + ry,\n      );\n\n    ctx.lineTo(x + w, y + h - ry);\n    isRounded &&\n      ctx.bezierCurveTo(\n        x + w,\n        y + h - kRect * ry,\n        x + w - kRect * rx,\n        y + h,\n        x + w - rx,\n        y + h,\n      );\n\n    ctx.lineTo(x + rx, y + h);\n    isRounded &&\n      ctx.bezierCurveTo(\n        x + kRect * rx,\n        y + h,\n        x,\n        y + h - kRect * ry,\n        x,\n        y + h - ry,\n      );\n\n    ctx.lineTo(x, y + ry);\n    isRounded &&\n      ctx.bezierCurveTo(x, y + kRect * ry, x + kRect * rx, y, x + rx, y);\n\n    ctx.closePath();\n\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...RECT_PROPS, ...propertiesToInclude]);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const { width, height, rx, ry } = this;\n    return [\n      '<rect ',\n      'COMMON_PARTS',\n      `x=\"${-width / 2}\" y=\"${\n        -height / 2\n      }\" rx=\"${rx}\" ry=\"${ry}\" width=\"${width}\" height=\"${height}\" />\\n`,\n    ];\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `Rect.fromElement`)\n   * @static\n   * @memberOf Rect\n   * @see: http://www.w3.org/TR/SVG/shapes.html#RectElement\n   */\n  static ATTRIBUTE_NAMES = [\n    ...SHARED_ATTRIBUTES,\n    'x',\n    'y',\n    'rx',\n    'ry',\n    'width',\n    'height',\n  ];\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * Returns {@link Rect} instance from an SVG element\n   * @static\n   * @memberOf Rect\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const {\n      left = 0,\n      top = 0,\n      width = 0,\n      height = 0,\n      visible = true,\n      ...restOfparsedAttributes\n    } = parseAttributes(element, this.ATTRIBUTE_NAMES, cssRules);\n\n    return new this({\n      ...options,\n      ...restOfparsedAttributes,\n      left,\n      top,\n      width,\n      height,\n      visible: Boolean(visible && width && height),\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Rect);\nclassRegistry.setSVGClass(Rect);\n","export const LAYOUT_TYPE_INITIALIZATION = 'initialization';\nexport const LAYOUT_TYPE_ADDED = 'added';\nexport const LAYOUT_TYPE_REMOVED = 'removed';\nexport const LAYOUT_TYPE_IMPERATIVE = 'imperative';\nexport const LAYOUT_TYPE_OBJECT_MODIFIED = 'object_modified';\nexport const LAYOUT_TYPE_OBJECT_MODIFYING = 'object_modifying';\n","import { Point, ZERO } from '../../Point';\nimport type { Group } from '../../shapes/Group';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { multiplyTransformMatrixArray } from '../../util/misc/matrix';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport {\n  calcPlaneChangeMatrix,\n  sendVectorToPlane,\n} from '../../util/misc/planeChange';\n\n/**\n * @returns 2 points, the tl and br corners of the non rotated bounding box of an object\n * in the {@link group} plane, taking into account objects that {@link group} is their parent\n * but also belong to the active selection.\n */\nexport const getObjectBounds = (\n  destinationGroup: Group,\n  object: FabricObject,\n): Point[] => {\n  const {\n    strokeUniform,\n    strokeWidth,\n    width,\n    height,\n    group: currentGroup,\n  } = object;\n  const t =\n    currentGroup && currentGroup !== destinationGroup\n      ? calcPlaneChangeMatrix(\n          currentGroup.calcTransformMatrix(),\n          destinationGroup.calcTransformMatrix(),\n        )\n      : null;\n  const objectCenter = t\n    ? object.getRelativeCenterPoint().transform(t)\n    : object.getRelativeCenterPoint();\n  const accountForStroke = !object['isStrokeAccountedForInDimensions']();\n  const strokeUniformVector =\n    strokeUniform && accountForStroke\n      ? sendVectorToPlane(\n          new Point(strokeWidth, strokeWidth),\n          undefined,\n          destinationGroup.calcTransformMatrix(),\n        )\n      : ZERO;\n  const scalingStrokeWidth =\n    !strokeUniform && accountForStroke ? strokeWidth : 0;\n  const sizeVector = sizeAfterTransform(\n    width + scalingStrokeWidth,\n    height + scalingStrokeWidth,\n    multiplyTransformMatrixArray([t, object.calcOwnMatrix()], true),\n  )\n    .add(strokeUniformVector)\n    .scalarDivide(2);\n  return [objectCenter.subtract(sizeVector), objectCenter.add(sizeVector)];\n};\n","import { Point } from '../../Point';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { makeBoundingBoxFromPoints } from '../../util/misc/boundingBoxFromPoints';\nimport {\n  LAYOUT_TYPE_INITIALIZATION,\n  LAYOUT_TYPE_IMPERATIVE,\n} from '../constants';\nimport type {\n  InitializationLayoutContext,\n  LayoutStrategyResult,\n  StrictLayoutContext,\n} from '../types';\nimport { getObjectBounds } from './utils';\n\n/**\n * Exposes a main public method {@link calcLayoutResult} that is used by the `LayoutManager` to perform layout.\n * Returning `undefined` signals the `LayoutManager` to skip the layout.\n *\n * In charge of calculating the bounding box of the passed objects.\n */\nexport abstract class LayoutStrategy {\n  /**\n   * override by subclass for persistence (TS does not support `static abstract`)\n   */\n  static type = 'strategy';\n\n  /**\n   * Used by the `LayoutManager` to perform layout\n   * @TODO/fix: if this method is calcResult, should calc unconditionally.\n   * the condition to not calc should be evaluated by the layoutManager.\n   * @returns layout result **OR** `undefined` to skip layout\n   */\n  public calcLayoutResult(\n    context: StrictLayoutContext,\n    objects: FabricObject[],\n  ): LayoutStrategyResult | undefined {\n    if (this.shouldPerformLayout(context)) {\n      return this.calcBoundingBox(objects, context);\n    }\n  }\n\n  shouldPerformLayout({ type, prevStrategy, strategy }: StrictLayoutContext) {\n    return (\n      type === LAYOUT_TYPE_INITIALIZATION ||\n      type === LAYOUT_TYPE_IMPERATIVE ||\n      (!!prevStrategy && strategy !== prevStrategy)\n    );\n  }\n\n  shouldLayoutClipPath({ type, target: { clipPath } }: StrictLayoutContext) {\n    return (\n      type !== LAYOUT_TYPE_INITIALIZATION &&\n      clipPath &&\n      !clipPath.absolutePositioned\n    );\n  }\n\n  getInitialSize(\n    context: StrictLayoutContext & InitializationLayoutContext,\n    result: Pick<LayoutStrategyResult, 'center' | 'size'>,\n  ) {\n    return result.size;\n  }\n\n  /**\n   * Override this method to customize layout.\n   */\n  calcBoundingBox(\n    objects: FabricObject[],\n    context: StrictLayoutContext,\n  ): LayoutStrategyResult | undefined {\n    const { type, target } = context;\n    if (type === LAYOUT_TYPE_IMPERATIVE && context.overrides) {\n      return context.overrides;\n    }\n    if (objects.length === 0) {\n      return;\n    }\n    const { left, top, width, height } = makeBoundingBoxFromPoints(\n      objects\n        .map((object) => getObjectBounds(target, object))\n        .reduce<Point[]>((coords, curr) => coords.concat(curr), []),\n    );\n    const bboxSize = new Point(width, height);\n    const bboxLeftTop = new Point(left, top);\n    const bboxCenter = bboxLeftTop.add(bboxSize.scalarDivide(2));\n\n    if (type === LAYOUT_TYPE_INITIALIZATION) {\n      const actualSize = this.getInitialSize(context, {\n        size: bboxSize,\n        center: bboxCenter,\n      });\n      return {\n        // in `initialization` we do not account for target's transformation matrix\n        center: bboxCenter,\n        // TODO: investigate if this is still necessary\n        relativeCorrection: new Point(0, 0),\n        size: actualSize,\n      };\n    } else {\n      //  we send `relativeCenter` up to group's containing plane\n      const center = bboxCenter.transform(target.calcOwnMatrix());\n      return {\n        center,\n        size: bboxSize,\n      };\n    }\n  }\n}\n","import type { StrictLayoutContext } from '../types';\nimport { LayoutStrategy } from './LayoutStrategy';\nimport { classRegistry } from '../../ClassRegistry';\n\n/**\n * Layout will adjust the bounding box to fit target's objects.\n */\nexport class FitContentLayout extends LayoutStrategy {\n  static readonly type = 'fit-content';\n\n  /**\n   * @override layout on all triggers\n   * Override at will\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  shouldPerformLayout(context: StrictLayoutContext) {\n    return true;\n  }\n}\n\nclassRegistry.setClass(FitContentLayout);\n","import { Point } from '../Point';\nimport {\n  CENTER,\n  CHANGED,\n  MODIFIED,\n  MODIFY_PATH,\n  MODIFY_POLY,\n  MOVING,\n  RESIZING,\n  ROTATING,\n  SCALING,\n  SKEWING,\n  iMatrix,\n} from '../constants';\nimport type { Group } from '../shapes/Group';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport { invertTransform } from '../util/misc/matrix';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { FitContentLayout } from './LayoutStrategies/FitContentLayout';\nimport type { LayoutStrategy } from './LayoutStrategies/LayoutStrategy';\nimport {\n  LAYOUT_TYPE_INITIALIZATION,\n  LAYOUT_TYPE_ADDED,\n  LAYOUT_TYPE_REMOVED,\n  LAYOUT_TYPE_IMPERATIVE,\n  LAYOUT_TYPE_OBJECT_MODIFIED,\n  LAYOUT_TYPE_OBJECT_MODIFYING,\n} from './constants';\nimport type {\n  LayoutContext,\n  LayoutResult,\n  RegistrationContext,\n  StrictLayoutContext,\n} from './types';\nimport { classRegistry } from '../ClassRegistry';\nimport type { TModificationEvents } from '../EventTypeDefs';\n\nconst LAYOUT_MANAGER = 'layoutManager';\n\nexport type SerializedLayoutManager = {\n  type: string;\n  strategy: string;\n};\n\nexport class LayoutManager {\n  private declare _prevLayoutStrategy?: LayoutStrategy;\n  protected declare _subscriptions: Map<FabricObject, VoidFunction[]>;\n\n  strategy: LayoutStrategy;\n\n  constructor(strategy: LayoutStrategy = new FitContentLayout()) {\n    this.strategy = strategy;\n    this._subscriptions = new Map();\n  }\n\n  public performLayout(context: LayoutContext) {\n    const strictContext: StrictLayoutContext = {\n      bubbles: true,\n      strategy: this.strategy,\n      ...context,\n      prevStrategy: this._prevLayoutStrategy,\n      stopPropagation() {\n        this.bubbles = false;\n      },\n    };\n\n    this.onBeforeLayout(strictContext);\n\n    const layoutResult = this.getLayoutResult(strictContext);\n    if (layoutResult) {\n      this.commitLayout(strictContext, layoutResult);\n    }\n\n    this.onAfterLayout(strictContext, layoutResult);\n    this._prevLayoutStrategy = strictContext.strategy;\n  }\n\n  /**\n   * Attach handlers for events that we know will invalidate the layout when\n   * performed on child objects ( general transforms ).\n   * Returns the disposers for later unsubscribing and cleanup\n   * @param {FabricObject} object\n   * @param {RegistrationContext & Partial<StrictLayoutContext>} context\n   * @returns {VoidFunction[]} disposers remove the handlers\n   */\n  protected attachHandlers(\n    object: FabricObject,\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ): VoidFunction[] {\n    const { target } = context;\n    return (\n      [\n        MODIFIED,\n        MOVING,\n        RESIZING,\n        ROTATING,\n        SCALING,\n        SKEWING,\n        CHANGED,\n        MODIFY_POLY,\n        MODIFY_PATH,\n      ] as (TModificationEvents & 'modified')[]\n    ).map((key) =>\n      object.on(key, (e) =>\n        this.performLayout(\n          key === MODIFIED\n            ? {\n                type: LAYOUT_TYPE_OBJECT_MODIFIED,\n                trigger: key,\n                e,\n                target,\n              }\n            : {\n                type: LAYOUT_TYPE_OBJECT_MODIFYING,\n                trigger: key,\n                e,\n                target,\n              },\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Subscribe an object to transform events that will trigger a layout change on the parent\n   * This is important only for interactive groups.\n   * @param object\n   * @param context\n   */\n  protected subscribe(\n    object: FabricObject,\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    this.unsubscribe(object, context);\n    const disposers = this.attachHandlers(object, context);\n    this._subscriptions.set(object, disposers);\n  }\n\n  /**\n   * unsubscribe object layout triggers\n   */\n  protected unsubscribe(\n    object: FabricObject,\n    _context?: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    (this._subscriptions.get(object) || []).forEach((d) => d());\n    this._subscriptions.delete(object);\n  }\n\n  unsubscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    context.targets.forEach((object) => this.unsubscribe(object, context));\n  }\n\n  subscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    context.targets.forEach((object) => this.subscribe(object, context));\n  }\n\n  protected onBeforeLayout(context: StrictLayoutContext) {\n    const { target, type } = context;\n    const { canvas } = target;\n    // handle layout triggers subscription\n    // @TODO: gate the registration when the group is interactive\n    if (type === LAYOUT_TYPE_INITIALIZATION || type === LAYOUT_TYPE_ADDED) {\n      this.subscribeTargets(context);\n    } else if (type === LAYOUT_TYPE_REMOVED) {\n      this.unsubscribeTargets(context);\n    }\n    // fire layout event (event will fire only for layouts after initialization layout)\n    target.fire('layout:before', {\n      context,\n    });\n    canvas &&\n      canvas.fire('object:layout:before', {\n        target,\n        context,\n      });\n\n    if (type === LAYOUT_TYPE_IMPERATIVE && context.deep) {\n      const { strategy: _, ...tricklingContext } = context;\n      // traverse the tree\n      target.forEachObject(\n        (object) =>\n          (object as Group).layoutManager &&\n          (object as Group).layoutManager.performLayout({\n            ...tricklingContext,\n            bubbles: false,\n            target: object as Group,\n          }),\n      );\n    }\n  }\n\n  protected getLayoutResult(\n    context: StrictLayoutContext,\n  ): Required<LayoutResult> | undefined {\n    const { target, strategy, type } = context;\n\n    const result = strategy.calcLayoutResult(context, target.getObjects());\n\n    if (!result) {\n      return;\n    }\n\n    const prevCenter =\n      type === LAYOUT_TYPE_INITIALIZATION\n        ? new Point()\n        : target.getRelativeCenterPoint();\n\n    const {\n      center: nextCenter,\n      correction = new Point(),\n      relativeCorrection = new Point(),\n    } = result;\n    const offset = prevCenter\n      .subtract(nextCenter)\n      .add(correction)\n      .transform(\n        // in `initialization` we do not account for target's transformation matrix\n        type === LAYOUT_TYPE_INITIALIZATION\n          ? iMatrix\n          : invertTransform(target.calcOwnMatrix()),\n        true,\n      )\n      .add(relativeCorrection);\n\n    return {\n      result,\n      prevCenter,\n      nextCenter,\n      offset,\n    };\n  }\n\n  protected commitLayout(\n    context: StrictLayoutContext,\n    layoutResult: Required<LayoutResult>,\n  ) {\n    const { target } = context;\n    const {\n      result: { size },\n      nextCenter,\n    } = layoutResult;\n    // set dimensions\n    target.set({ width: size.x, height: size.y });\n    // layout descendants\n    this.layoutObjects(context, layoutResult);\n    //  set position\n    // in `initialization` we do not account for target's transformation matrix\n    if (context.type === LAYOUT_TYPE_INITIALIZATION) {\n      // TODO: what about strokeWidth?\n      target.set({\n        left:\n          context.x ?? nextCenter.x + size.x * resolveOrigin(target.originX),\n        top: context.y ?? nextCenter.y + size.y * resolveOrigin(target.originY),\n      });\n    } else {\n      target.setPositionByOrigin(nextCenter, CENTER, CENTER);\n      // invalidate\n      target.setCoords();\n      target.set('dirty', true);\n    }\n  }\n\n  protected layoutObjects(\n    context: StrictLayoutContext,\n    layoutResult: Required<LayoutResult>,\n  ) {\n    const { target } = context;\n    //  adjust objects to account for new center\n    target.forEachObject((object) => {\n      object.group === target &&\n        this.layoutObject(context, layoutResult, object);\n    });\n    // adjust clip path to account for new center\n    context.strategy.shouldLayoutClipPath(context) &&\n      this.layoutObject(context, layoutResult, target.clipPath as FabricObject);\n  }\n\n  /**\n   * @param {FabricObject} object\n   * @param {Point} offset\n   */\n  protected layoutObject(\n    context: StrictLayoutContext,\n    { offset }: Required<LayoutResult>,\n    object: FabricObject,\n  ) {\n    // TODO: this is here for cache invalidation.\n    // verify if this is necessary since we have explicit\n    // cache invalidation at the end of commitLayout\n    object.set({\n      left: object.left + offset.x,\n      top: object.top + offset.y,\n    });\n  }\n\n  protected onAfterLayout(\n    context: StrictLayoutContext,\n    layoutResult?: LayoutResult,\n  ) {\n    const {\n      target,\n      strategy,\n      bubbles,\n      prevStrategy: _,\n      ...bubblingContext\n    } = context;\n    const { canvas } = target;\n\n    //  fire layout event (event will fire only for layouts after initialization layout)\n    target.fire('layout:after', {\n      context,\n      result: layoutResult,\n    });\n    canvas &&\n      canvas.fire('object:layout:after', {\n        context,\n        result: layoutResult,\n        target,\n      });\n\n    //  bubble\n    const parent = target.parent;\n    if (bubbles && parent?.layoutManager) {\n      //  add target to context#path\n      (bubblingContext.path || (bubblingContext.path = [])).push(target);\n      //  all parents should invalidate their layout\n      parent.layoutManager.performLayout({\n        ...bubblingContext,\n        target: parent,\n      });\n    }\n    target.set('dirty', true);\n  }\n\n  dispose() {\n    const { _subscriptions } = this;\n    _subscriptions.forEach((disposers) => disposers.forEach((d) => d()));\n    _subscriptions.clear();\n  }\n\n  toObject() {\n    return {\n      type: LAYOUT_MANAGER,\n      strategy: (this.strategy.constructor as typeof LayoutStrategy).type,\n    };\n  }\n\n  toJSON() {\n    return this.toObject();\n  }\n}\n\nclassRegistry.setClass(LayoutManager, LAYOUT_MANAGER);\n","import type { CollectionEvents, ObjectEvents } from '../EventTypeDefs';\nimport { createCollectionMixin } from '../Collection';\nimport type {\n  TClassProperties,\n  TSVGReviver,\n  TOptions,\n  Abortable,\n} from '../typedefs';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n} from '../util/misc/matrix';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n} from '../util/misc/objectEnlive';\nimport { applyTransformToObject } from '../util/misc/objectTransforms';\nimport { FabricObject } from './Object/FabricObject';\nimport { Rect } from './Rect';\nimport { classRegistry } from '../ClassRegistry';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport { log } from '../util/internals/console';\nimport type {\n  ImperativeLayoutOptions,\n  LayoutBeforeEvent,\n  LayoutAfterEvent,\n} from '../LayoutManager/types';\nimport { LayoutManager } from '../LayoutManager/LayoutManager';\nimport {\n  LAYOUT_TYPE_ADDED,\n  LAYOUT_TYPE_IMPERATIVE,\n  LAYOUT_TYPE_INITIALIZATION,\n  LAYOUT_TYPE_REMOVED,\n} from '../LayoutManager/constants';\nimport type { SerializedLayoutManager } from '../LayoutManager/LayoutManager';\nimport type { FitContentLayout } from '../LayoutManager';\nimport type { DrawContext } from './Object/Object';\n\n/**\n * This class handles the specific case of creating a group using {@link Group#fromObject} and is not meant to be used in any other case.\n * We could have used a boolean in the constructor, as we did previously, but we think the boolean\n * would stay in the group's constructor interface and create confusion, therefore it was removed.\n * This layout manager doesn't do anything and therefore keeps the exact layout the group had when {@link Group#toObject} was called.\n */\nclass NoopLayoutManager extends LayoutManager {\n  performLayout() {}\n}\n\nexport interface GroupEvents extends ObjectEvents, CollectionEvents {\n  'layout:before': LayoutBeforeEvent;\n  'layout:after': LayoutAfterEvent;\n}\n\nexport interface GroupOwnProps {\n  subTargetCheck: boolean;\n  interactive: boolean;\n}\n\nexport interface SerializedGroupProps\n  extends SerializedObjectProps,\n    GroupOwnProps {\n  objects: SerializedObjectProps[];\n  layoutManager: SerializedLayoutManager;\n}\n\nexport interface GroupProps extends FabricObjectProps, GroupOwnProps {\n  layoutManager: LayoutManager;\n}\n\nexport const groupDefaultValues: Partial<TClassProperties<Group>> = {\n  strokeWidth: 0,\n  subTargetCheck: false,\n  interactive: false,\n};\n\n/**\n * @fires object:added\n * @fires object:removed\n * @fires layout:before\n * @fires layout:after\n */\nexport class Group\n  extends createCollectionMixin(\n    FabricObject<GroupProps, SerializedGroupProps, GroupEvents>,\n  )\n  implements GroupProps\n{\n  /**\n   * Used to optimize performance\n   * set to `false` if you don't need contained objects to be targets of events\n   * @default\n   * @type boolean\n   */\n  declare subTargetCheck: boolean;\n\n  /**\n   * Used to allow targeting of object inside groups.\n   * set to true if you want to select an object inside a group.\\\n   * **REQUIRES** `subTargetCheck` set to true\n   * This will be not removed but slowly replaced with a method setInteractive\n   * that will take care of enabling subTargetCheck and necessary object events.\n   * There is too much attached to group interactivity to just be evaluated by a\n   * boolean in the code\n   * @default\n   * @deprecated\n   * @type boolean\n   */\n  declare interactive: boolean;\n\n  declare layoutManager: LayoutManager;\n\n  /**\n   * Used internally to optimize performance\n   * Once an object is selected, instance is rendered without the selected object.\n   * This way instance is cached only once for the entire interaction with the selected object.\n   * @private\n   */\n  protected _activeObjects: FabricObject[] = [];\n\n  static type = 'Group';\n\n  static ownDefaults: Record<string, any> = groupDefaultValues;\n  private __objectSelectionTracker: (ev: ObjectEvents['selected']) => void;\n  private __objectSelectionDisposer: (ev: ObjectEvents['deselected']) => void;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Group.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {FabricObject[]} [objects] instance objects\n   * @param {Object} [options] Options object\n   */\n  constructor(objects: FabricObject[] = [], options: Partial<GroupProps> = {}) {\n    super();\n    Object.assign(this, Group.ownDefaults);\n    this.setOptions(options);\n    this.groupInit(objects, options);\n  }\n\n  /**\n   * Shared code between group and active selection\n   * Meant to be used by the constructor.\n   */\n  protected groupInit(\n    objects: FabricObject[],\n    options: {\n      layoutManager?: LayoutManager;\n      top?: number;\n      left?: number;\n    },\n  ) {\n    this._objects = [...objects]; // Avoid unwanted mutations of Collection to affect the caller\n\n    this.__objectSelectionTracker = this.__objectSelectionMonitor.bind(\n      this,\n      true,\n    );\n    this.__objectSelectionDisposer = this.__objectSelectionMonitor.bind(\n      this,\n      false,\n    );\n\n    this.forEachObject((object) => {\n      this.enterGroup(object, false);\n    });\n\n    // perform initial layout\n    this.layoutManager = options.layoutManager ?? new LayoutManager();\n    this.layoutManager.performLayout({\n      type: LAYOUT_TYPE_INITIALIZATION,\n      target: this,\n      targets: [...objects],\n      // @TODO remove this concept from the layout manager.\n      // Layout manager will calculate the correct position,\n      // group options can override it later.\n      x: options.left,\n      y: options.top,\n    });\n  }\n\n  /**\n   * Checks if object can enter group and logs relevant warnings\n   * @private\n   * @param {FabricObject} object\n   * @returns\n   */\n  canEnterGroup(object: FabricObject) {\n    if (object === this || this.isDescendantOf(object)) {\n      //  prevent circular object tree\n      log(\n        'error',\n        'Group: circular object trees are not supported, this call has no effect',\n      );\n      return false;\n    } else if (this._objects.indexOf(object) !== -1) {\n      // is already in the objects array\n      log(\n        'error',\n        'Group: duplicate objects are not supported inside group, this call has no effect',\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Override this method to enhance performance (for groups with a lot of objects).\n   * If Overriding, be sure not pass illegal objects to group - it will break your app.\n   * @private\n   */\n  protected _filterObjectsBeforeEnteringGroup(objects: FabricObject[]) {\n    return objects.filter((object, index, array) => {\n      // can enter AND is the first occurrence of the object in the passed args (to prevent adding duplicates)\n      return this.canEnterGroup(object) && array.indexOf(object) === index;\n    });\n  }\n\n  /**\n   * Add objects\n   * @param {...FabricObject[]} objects\n   */\n  add(...objects: FabricObject[]) {\n    const allowedObjects = this._filterObjectsBeforeEnteringGroup(objects);\n    const size = super.add(...allowedObjects);\n    this._onAfterObjectsChange(LAYOUT_TYPE_ADDED, allowedObjects);\n    return size;\n  }\n\n  /**\n   * Inserts an object into collection at specified index\n   * @param {FabricObject[]} objects Object to insert\n   * @param {Number} index Index to insert object at\n   */\n  insertAt(index: number, ...objects: FabricObject[]) {\n    const allowedObjects = this._filterObjectsBeforeEnteringGroup(objects);\n    const size = super.insertAt(index, ...allowedObjects);\n    this._onAfterObjectsChange(LAYOUT_TYPE_ADDED, allowedObjects);\n    return size;\n  }\n\n  /**\n   * Remove objects\n   * @param {...FabricObject[]} objects\n   * @returns {FabricObject[]} removed objects\n   */\n  remove(...objects: FabricObject[]) {\n    const removed = super.remove(...objects);\n    this._onAfterObjectsChange(LAYOUT_TYPE_REMOVED, removed);\n    return removed;\n  }\n\n  _onObjectAdded(object: FabricObject) {\n    this.enterGroup(object, true);\n    this.fire('object:added', { target: object });\n    object.fire('added', { target: this });\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  _onObjectRemoved(object: FabricObject, removeParentTransform?: boolean) {\n    this.exitGroup(object, removeParentTransform);\n    this.fire('object:removed', { target: object });\n    object.fire('removed', { target: this });\n  }\n\n  /**\n   * @private\n   * @param {'added'|'removed'} type\n   * @param {FabricObject[]} targets\n   */\n  _onAfterObjectsChange(type: 'added' | 'removed', targets: FabricObject[]) {\n    this.layoutManager.performLayout({\n      type,\n      targets,\n      target: this,\n    });\n  }\n\n  _onStackOrderChanged() {\n    this._set('dirty', true);\n  }\n\n  /**\n   * @private\n   * @param {string} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    const prev = this[key as keyof this];\n    super._set(key, value);\n    if (key === 'canvas' && prev !== value) {\n      (this._objects || []).forEach((object) => {\n        object._set(key, value);\n      });\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _shouldSetNestedCoords() {\n    return this.subTargetCheck;\n  }\n\n  /**\n   * Remove all objects\n   * @returns {FabricObject[]} removed objects\n   */\n  removeAll() {\n    this._activeObjects = [];\n    return this.remove(...this._objects);\n  }\n\n  /**\n   * keeps track of the selected objects\n   * @private\n   */\n  __objectSelectionMonitor<T extends boolean>(\n    selected: T,\n    {\n      target: object,\n    }: ObjectEvents[T extends true ? 'selected' : 'deselected'],\n  ) {\n    const activeObjects = this._activeObjects;\n    if (selected) {\n      activeObjects.push(object);\n      this._set('dirty', true);\n    } else if (activeObjects.length > 0) {\n      const index = activeObjects.indexOf(object);\n      if (index > -1) {\n        activeObjects.splice(index, 1);\n        this._set('dirty', true);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {boolean} watch\n   * @param {FabricObject} object\n   */\n  _watchObject(watch: boolean, object: FabricObject) {\n    //  make sure we listen only once\n    watch && this._watchObject(false, object);\n    if (watch) {\n      object.on('selected', this.__objectSelectionTracker);\n      object.on('deselected', this.__objectSelectionDisposer);\n    } else {\n      object.off('selected', this.__objectSelectionTracker);\n      object.off('deselected', this.__objectSelectionDisposer);\n    }\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object is in canvas coordinate plane\n   */\n  enterGroup(object: FabricObject, removeParentTransform?: boolean) {\n    object.group && object.group.remove(object);\n    object._set('parent', this);\n    this._enterGroup(object, removeParentTransform);\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object is in canvas coordinate plane\n   */\n  _enterGroup(object: FabricObject, removeParentTransform?: boolean) {\n    if (removeParentTransform) {\n      // can this be converted to utils (sendObjectToPlane)?\n      applyTransformToObject(\n        object,\n        multiplyTransformMatrices(\n          invertTransform(this.calcTransformMatrix()),\n          object.calcTransformMatrix(),\n        ),\n      );\n    }\n    this._shouldSetNestedCoords() && object.setCoords();\n    object._set('group', this);\n    object._set('canvas', this.canvas);\n    this._watchObject(true, object);\n    const activeObject =\n      this.canvas &&\n      this.canvas.getActiveObject &&\n      this.canvas.getActiveObject();\n    // if we are adding the activeObject in a group\n    if (\n      activeObject &&\n      (activeObject === object || object.isDescendantOf(activeObject))\n    ) {\n      this._activeObjects.push(object);\n    }\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  exitGroup(object: FabricObject, removeParentTransform?: boolean) {\n    this._exitGroup(object, removeParentTransform);\n    object._set('parent', undefined);\n    object._set('canvas', undefined);\n  }\n\n  /**\n   * Executes the inner fabric logic of exiting a group.\n   * - Stop watching the object\n   * - Remove the object from the optimization map this._activeObjects\n   * - unset the group property of the object\n   * @protected\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  _exitGroup(object: FabricObject, removeParentTransform?: boolean) {\n    object._set('group', undefined);\n    if (!removeParentTransform) {\n      applyTransformToObject(\n        object,\n        multiplyTransformMatrices(\n          this.calcTransformMatrix(),\n          object.calcTransformMatrix(),\n        ),\n      );\n      object.setCoords();\n    }\n    this._watchObject(false, object);\n    const index =\n      this._activeObjects.length > 0 ? this._activeObjects.indexOf(object) : -1;\n    if (index > -1) {\n      this._activeObjects.splice(index, 1);\n    }\n  }\n\n  /**\n   * Decide if the group should cache or not. Create its own cache level\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step.\n   * Generally you do not cache objects in groups because the group is already cached.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    const ownCache = FabricObject.prototype.shouldCache.call(this);\n    if (ownCache) {\n      for (let i = 0; i < this._objects.length; i++) {\n        if (this._objects[i].willDrawShadow()) {\n          this.ownCaching = false;\n          return false;\n        }\n      }\n    }\n    return ownCache;\n  }\n\n  /**\n   * Check if this object or a child object will cast a shadow\n   * @return {Boolean}\n   */\n  willDrawShadow() {\n    if (super.willDrawShadow()) {\n      return true;\n    }\n    for (let i = 0; i < this._objects.length; i++) {\n      if (this._objects[i].willDrawShadow()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if instance or its group are caching, recursively up\n   * @return {Boolean}\n   */\n  isOnACache(): boolean {\n    return this.ownCaching || (!!this.parent && this.parent.isOnACache());\n  }\n\n  /**\n   * Execute the drawing operation for an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawObject(\n    ctx: CanvasRenderingContext2D,\n    forClipping: boolean | undefined,\n    context: DrawContext,\n  ) {\n    this._renderBackground(ctx);\n    for (let i = 0; i < this._objects.length; i++) {\n      const obj = this._objects[i];\n      // TODO: handle rendering edge case somehow\n      if (this.canvas?.preserveObjectStacking && obj.group !== this) {\n        ctx.save();\n        ctx.transform(...invertTransform(this.calcTransformMatrix()));\n        obj.render(ctx);\n        ctx.restore();\n      } else if (obj.group === this) {\n        obj.render(ctx);\n      }\n    }\n    this._drawClipPath(ctx, this.clipPath, context);\n  }\n\n  /**\n   * @override\n   * @return {Boolean}\n   */\n  setCoords() {\n    super.setCoords();\n    this._shouldSetNestedCoords() &&\n      this.forEachObject((object) => object.setCoords());\n  }\n\n  triggerLayout(options: ImperativeLayoutOptions = {}) {\n    this.layoutManager.performLayout({\n      target: this,\n      type: LAYOUT_TYPE_IMPERATIVE,\n      ...options,\n    });\n  }\n\n  /**\n   * Renders instance on a given context\n   * @param {CanvasRenderingContext2D} ctx context to render instance on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    this._transformDone = true;\n    super.render(ctx);\n    this._transformDone = false;\n  }\n\n  /**\n   *\n   * @private\n   * @param {'toObject'|'toDatalessObject'} [method]\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @returns {FabricObject[]} serialized objects\n   */\n  __serializeObjects(\n    method: 'toObject' | 'toDatalessObject',\n    propertiesToInclude?: string[],\n  ) {\n    const _includeDefaultValues = this.includeDefaultValues;\n    return this._objects\n      .filter(function (obj) {\n        return !obj.excludeFromExport;\n      })\n      .map(function (obj) {\n        const originalDefaults = obj.includeDefaultValues;\n        obj.includeDefaultValues = _includeDefaultValues;\n        const data = obj[method || 'toObject'](propertiesToInclude);\n        obj.includeDefaultValues = originalDefaults;\n        // delete data.version;\n        return data;\n      });\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<\n      GroupProps & TClassProperties<this>,\n      keyof SerializedGroupProps\n    >,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SerializedGroupProps {\n    const layoutManager = this.layoutManager.toObject();\n\n    return {\n      ...super.toObject([\n        'subTargetCheck',\n        'interactive',\n        ...propertiesToInclude,\n      ]),\n      ...(layoutManager.strategy !== 'fit-content' || this.includeDefaultValues\n        ? { layoutManager }\n        : {}),\n      objects: this.__serializeObjects(\n        'toObject',\n        propertiesToInclude as string[],\n      ),\n    };\n  }\n\n  toString() {\n    return `#<Group: (${this.complexity()})>`;\n  }\n\n  dispose() {\n    this.layoutManager.unsubscribeTargets({\n      targets: this.getObjects(),\n      target: this,\n    });\n    this._activeObjects = [];\n    this.forEachObject((object) => {\n      this._watchObject(false, object);\n      object.dispose();\n    });\n    super.dispose();\n  }\n\n  /**\n   * @private\n   */\n  _createSVGBgRect(reviver?: TSVGReviver) {\n    if (!this.backgroundColor) {\n      return '';\n    }\n    const fillStroke = Rect.prototype._toSVG.call(this);\n    const commons = fillStroke.indexOf('COMMON_PARTS');\n    fillStroke[commons] = 'for=\"group\" ';\n    const markup = fillStroke.join('');\n    return reviver ? reviver(markup) : markup;\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @param {TSVGReviver} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  _toSVG(reviver?: TSVGReviver) {\n    const svgString = ['<g ', 'COMMON_PARTS', ' >\\n'];\n    const bg = this._createSVGBgRect(reviver);\n    bg && svgString.push('\\t\\t', bg);\n    for (let i = 0; i < this._objects.length; i++) {\n      svgString.push('\\t\\t', this._objects[i].toSVG(reviver));\n    }\n    svgString.push('</g>\\n');\n    return svgString;\n  }\n\n  /**\n   * Returns styles-string for svg-export, specific version for group\n   * @return {String}\n   */\n  getSvgStyles(): string {\n    const opacity =\n        typeof this.opacity !== 'undefined' && this.opacity !== 1\n          ? `opacity: ${this.opacity};`\n          : '',\n      visibility = this.visible ? '' : ' visibility: hidden;';\n    return [opacity, this.getSvgFilter(), visibility].join('');\n  }\n\n  /**\n   * Returns svg clipPath representation of an instance\n   * @param {Function} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  toClipPathSVG(reviver?: TSVGReviver): string {\n    const svgString = [];\n    const bg = this._createSVGBgRect(reviver);\n    bg && svgString.push('\\t', bg);\n    for (let i = 0; i < this._objects.length; i++) {\n      svgString.push('\\t', this._objects[i].toClipPathSVG(reviver));\n    }\n    return this._createBaseClipPathSVGMarkup(svgString, {\n      reviver,\n    });\n  }\n\n  /**\n   * @todo support loading from svg\n   * @private\n   * @static\n   * @memberOf Group\n   * @param {Object} object Object to create a group from\n   * @returns {Promise<Group>}\n   */\n  static fromObject<T extends TOptions<SerializedGroupProps>>(\n    { type, objects = [], layoutManager, ...options }: T,\n    abortable?: Abortable,\n  ) {\n    return Promise.all([\n      enlivenObjects<FabricObject>(objects, abortable),\n      enlivenObjectEnlivables(options, abortable),\n    ]).then(([objects, hydratedOptions]) => {\n      const group = new this(objects, {\n        ...options,\n        ...hydratedOptions,\n        layoutManager: new NoopLayoutManager(),\n      });\n      if (layoutManager) {\n        const layoutClass = classRegistry.getClass<typeof LayoutManager>(\n          layoutManager.type,\n        );\n        const strategyClass = classRegistry.getClass<typeof FitContentLayout>(\n          layoutManager.strategy,\n        );\n        group.layoutManager = new layoutClass(new strategyClass());\n      } else {\n        group.layoutManager = new LayoutManager();\n      }\n      group.layoutManager.subscribeTargets({\n        type: LAYOUT_TYPE_INITIALIZATION,\n        target: group,\n        targets: group.getObjects(),\n      });\n      group.setCoords();\n      return group;\n    });\n  }\n}\n\nclassRegistry.setClass(Group);\n","import type { GroupProps } from '../../shapes/Group';\nimport { Group } from '../../shapes/Group';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\n\n/**\n * TODO experiment with different layout manager and svg results ( fixed fit content )\n * Groups SVG elements (usually those retrieved from SVG document)\n * @static\n * @param {FabricObject[]} elements FabricObject(s) parsed from svg, to group\n * @return {FabricObject | Group}\n */\nexport const groupSVGElements = (\n  elements: FabricObject[],\n  options?: Partial<GroupProps>,\n) => {\n  if (elements && elements.length === 1) {\n    return elements[0];\n  }\n  return new Group(elements, options);\n};\n","import type { TSize } from '../../typedefs';\n\n/**\n * Finds the scale for the object source to fit inside the object destination,\n * keeping aspect ratio intact.\n * respect the total allowed area for the cache.\n * @param {TSize} source natural unscaled size of the object\n * @param {TSize} destination natural unscaled size of the object\n * @return {Number} scale factor to apply to source to fit into destination\n */\nexport const findScaleToFit = (source: TSize, destination: TSize) =>\n  Math.min(\n    destination.width / source.width,\n    destination.height / source.height,\n  );\n\n/**\n * Finds the scale for the object source to cover entirely the object destination,\n * keeping aspect ratio intact.\n * respect the total allowed area for the cache.\n * @param {TSize} source natural unscaled size of the object\n * @param {TSize} destination natural unscaled size of the object\n * @return {Number} scale factor to apply to source to cover destination\n */\nexport const findScaleToCover = (source: TSize, destination: TSize) =>\n  Math.max(\n    destination.width / source.width,\n    destination.height / source.height,\n  );\n","import { reNum } from '../../parser/constants';\n\nconst commaWsp = `\\\\s*,?\\\\s*`;\n\n/**\n * p for param\n * using \"bad naming\" here because it makes the regex much easier to read\n * p is a number that is preceded by an arbitary number of spaces, maybe 0,\n * a comma or not, and then possibly more spaces or not.\n */\nconst p = `${commaWsp}(${reNum})`;\n\n// const reMoveToCommand = `(M) ?(?:${p}${p} ?)+`;\n\n// const reLineCommand = `(L) ?(?:${p}${p} ?)+`;\n\n// const reHorizontalLineCommand = `(H) ?(?:${p} ?)+`;\n\n// const reVerticalLineCommand = `(V) ?(?:${p} ?)+`;\n\n// const reClosePathCommand = String.raw`(Z)\\s*`;\n\n// const reCubicCurveCommand = `(C) ?(?:${p}${p}${p}${p}${p}${p} ?)+`;\n\n// const reCubicCurveShortcutCommand = `(S) ?(?:${p}${p}${p}${p} ?)+`;\n\n// const reQuadraticCurveCommand = `(Q) ?(?:${p}${p}${p}${p} ?)+`;\n\n// const reQuadraticCurveShortcutCommand = `(T) ?(?:${p}${p} ?)+`;\n\nexport const reArcCommandPoints = `${p}${p}${p}${commaWsp}([01])${commaWsp}([01])${p}${p}`;\n// const reArcCommand = `(A) ?(?:${reArcCommandPoints} ?)+`;\n\n// export const rePathCommandGroups =\n//   `(?:(?:${reMoveToCommand})` +\n//   `|(?:${reLineCommand})` +\n//   `|(?:${reHorizontalLineCommand})` +\n//   `|(?:${reVerticalLineCommand})` +\n//   `|(?:${reClosePathCommand})` +\n//   `|(?:${reCubicCurveCommand})` +\n//   `|(?:${reCubicCurveShortcutCommand})` +\n//   `|(?:${reQuadraticCurveCommand})` +\n//   `|(?:${reQuadraticCurveShortcutCommand})` +\n//   `|(?:${reArcCommand}))`;\n\nexport const rePathCommand = '[mzlhvcsqta][^mzlhvcsqta]*';\n","import { cache } from '../../cache';\nimport { config } from '../../config';\nimport { halfPI, PiBy180 } from '../../constants';\nimport type { TMat2D, TRadian, TRectBounds } from '../../typedefs';\nimport { cos } from '../misc/cos';\nimport { multiplyTransformMatrices, transformPoint } from '../misc/matrix';\nimport { sin } from '../misc/sin';\nimport { toFixed } from '../misc/toFixed';\nimport type {\n  TCurveInfo,\n  TComplexPathData,\n  TParsedAbsoluteCubicCurveCommand,\n  TPathSegmentInfo,\n  TPointAngle,\n  TSimpleParsedCommand,\n  TSimplePathData,\n  TPathSegmentCommandInfo,\n  TComplexParsedCommand,\n  TPathSegmentInfoCommon,\n  TEndPathInfo,\n  TParsedArcCommand,\n  TComplexParsedCommandType,\n} from './typedefs';\nimport type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport { reArcCommandPoints, rePathCommand } from './regex';\nimport { reNum } from '../../parser/constants';\n\n/**\n * Commands that may be repeated\n */\nconst repeatedCommands: Record<string, 'l' | 'L'> = {\n  m: 'l',\n  M: 'L',\n};\n\n/**\n * Convert an arc of a rotated ellipse to a Bezier Curve\n * @param {TRadian} theta1 start of the arc\n * @param {TRadian} theta2 end of the arc\n * @param cosTh cosine of the angle of rotation\n * @param sinTh sine of the angle of rotation\n * @param rx x-axis radius (before rotation)\n * @param ry y-axis radius (before rotation)\n * @param cx1 center x of the ellipse\n * @param cy1 center y of the ellipse\n * @param mT\n * @param fromX starting point of arc x\n * @param fromY starting point of arc y\n */\nconst segmentToBezier = (\n  theta1: TRadian,\n  theta2: TRadian,\n  cosTh: number,\n  sinTh: number,\n  rx: number,\n  ry: number,\n  cx1: number,\n  cy1: number,\n  mT: number,\n  fromX: number,\n  fromY: number,\n): TParsedAbsoluteCubicCurveCommand => {\n  const costh1 = cos(theta1),\n    sinth1 = sin(theta1),\n    costh2 = cos(theta2),\n    sinth2 = sin(theta2),\n    toX = cosTh * rx * costh2 - sinTh * ry * sinth2 + cx1,\n    toY = sinTh * rx * costh2 + cosTh * ry * sinth2 + cy1,\n    cp1X = fromX + mT * (-cosTh * rx * sinth1 - sinTh * ry * costh1),\n    cp1Y = fromY + mT * (-sinTh * rx * sinth1 + cosTh * ry * costh1),\n    cp2X = toX + mT * (cosTh * rx * sinth2 + sinTh * ry * costh2),\n    cp2Y = toY + mT * (sinTh * rx * sinth2 - cosTh * ry * costh2);\n\n  return ['C', cp1X, cp1Y, cp2X, cp2Y, toX, toY];\n};\n\n/**\n * Adapted from {@link http://dxr.mozilla.org/mozilla-central/source/dom/svg/SVGPathDataParser.cpp}\n * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here\n * http://mozilla.org/MPL/2.0/\n * @param toX\n * @param toY\n * @param rx\n * @param ry\n * @param {number} large 0 or 1 flag\n * @param {number} sweep 0 or 1 flag\n * @param rotateX\n */\nconst arcToSegments = (\n  toX: number,\n  toY: number,\n  rx: number,\n  ry: number,\n  large: number,\n  sweep: number,\n  rotateX: TRadian,\n): TParsedAbsoluteCubicCurveCommand[] => {\n  if (rx === 0 || ry === 0) {\n    return [];\n  }\n  let fromX = 0,\n    fromY = 0,\n    root = 0;\n  const PI = Math.PI,\n    theta = rotateX * PiBy180,\n    sinTheta = sin(theta),\n    cosTh = cos(theta),\n    px = 0.5 * (-cosTh * toX - sinTheta * toY),\n    py = 0.5 * (-cosTh * toY + sinTheta * toX),\n    rx2 = rx ** 2,\n    ry2 = ry ** 2,\n    py2 = py ** 2,\n    px2 = px ** 2,\n    pl = rx2 * ry2 - rx2 * py2 - ry2 * px2;\n  let _rx = Math.abs(rx);\n  let _ry = Math.abs(ry);\n\n  if (pl < 0) {\n    const s = Math.sqrt(1 - pl / (rx2 * ry2));\n    _rx *= s;\n    _ry *= s;\n  } else {\n    root =\n      (large === sweep ? -1.0 : 1.0) * Math.sqrt(pl / (rx2 * py2 + ry2 * px2));\n  }\n\n  const cx = (root * _rx * py) / _ry,\n    cy = (-root * _ry * px) / _rx,\n    cx1 = cosTh * cx - sinTheta * cy + toX * 0.5,\n    cy1 = sinTheta * cx + cosTh * cy + toY * 0.5;\n  let mTheta = calcVectorAngle(1, 0, (px - cx) / _rx, (py - cy) / _ry);\n  let dtheta = calcVectorAngle(\n    (px - cx) / _rx,\n    (py - cy) / _ry,\n    (-px - cx) / _rx,\n    (-py - cy) / _ry,\n  );\n\n  if (sweep === 0 && dtheta > 0) {\n    dtheta -= 2 * PI;\n  } else if (sweep === 1 && dtheta < 0) {\n    dtheta += 2 * PI;\n  }\n\n  // Convert into cubic bezier segments <= 90deg\n  const segments = Math.ceil(Math.abs((dtheta / PI) * 2)),\n    result = [],\n    mDelta = dtheta / segments,\n    mT =\n      ((8 / 3) * Math.sin(mDelta / 4) * Math.sin(mDelta / 4)) /\n      Math.sin(mDelta / 2);\n  let th3 = mTheta + mDelta;\n\n  for (let i = 0; i < segments; i++) {\n    result[i] = segmentToBezier(\n      mTheta,\n      th3,\n      cosTh,\n      sinTheta,\n      _rx,\n      _ry,\n      cx1,\n      cy1,\n      mT,\n      fromX,\n      fromY,\n    );\n    fromX = result[i][5];\n    fromY = result[i][6];\n    mTheta = th3;\n    th3 += mDelta;\n  }\n  return result;\n};\n\n/**\n * @private\n * Calculate the angle between two vectors\n * @param ux u endpoint x\n * @param uy u endpoint y\n * @param vx v endpoint x\n * @param vy v endpoint y\n */\nconst calcVectorAngle = (\n  ux: number,\n  uy: number,\n  vx: number,\n  vy: number,\n): TRadian => {\n  const ta = Math.atan2(uy, ux),\n    tb = Math.atan2(vy, vx);\n  if (tb >= ta) {\n    return tb - ta;\n  } else {\n    return 2 * Math.PI - (ta - tb);\n  }\n};\n\n// functions for the Cubic beizer\n// taken from: https://github.com/konvajs/konva/blob/7.0.5/src/shapes/Path.ts#L350\nconst CB1 = (t: number) => t ** 3;\nconst CB2 = (t: number) => 3 * t ** 2 * (1 - t);\nconst CB3 = (t: number) => 3 * t * (1 - t) ** 2;\nconst CB4 = (t: number) => (1 - t) ** 3;\n\n/**\n * Calculate bounding box of a cubic Bezier curve\n * Taken from http://jsbin.com/ivomiq/56/edit (no credits available)\n * TODO: can we normalize this with the starting points set at 0 and then translated the bbox?\n * @param {number} begx starting point\n * @param {number} begy\n * @param {number} cp1x first control point\n * @param {number} cp1y\n * @param {number} cp2x second control point\n * @param {number} cp2y\n * @param {number} endx end of bezier\n * @param {number} endy\n * @return {TRectBounds} the rectangular bounds\n */\nexport function getBoundsOfCurve(\n  begx: number,\n  begy: number,\n  cp1x: number,\n  cp1y: number,\n  cp2x: number,\n  cp2y: number,\n  endx: number,\n  endy: number,\n): TRectBounds {\n  let argsString: string;\n  if (config.cachesBoundsOfCurve) {\n    // eslint-disable-next-line\n    argsString = [...arguments].join();\n    if (cache.boundsOfCurveCache[argsString]) {\n      return cache.boundsOfCurveCache[argsString];\n    }\n  }\n\n  const sqrt = Math.sqrt,\n    abs = Math.abs,\n    tvalues = [],\n    bounds: [[x: number, y: number], [x: number, y: number]] = [\n      [0, 0],\n      [0, 0],\n    ];\n\n  let b = 6 * begx - 12 * cp1x + 6 * cp2x;\n  let a = -3 * begx + 9 * cp1x - 9 * cp2x + 3 * endx;\n  let c = 3 * cp1x - 3 * begx;\n\n  for (let i = 0; i < 2; ++i) {\n    if (i > 0) {\n      b = 6 * begy - 12 * cp1y + 6 * cp2y;\n      a = -3 * begy + 9 * cp1y - 9 * cp2y + 3 * endy;\n      c = 3 * cp1y - 3 * begy;\n    }\n\n    if (abs(a) < 1e-12) {\n      if (abs(b) < 1e-12) {\n        continue;\n      }\n      const t = -c / b;\n      if (0 < t && t < 1) {\n        tvalues.push(t);\n      }\n      continue;\n    }\n    const b2ac = b * b - 4 * c * a;\n    if (b2ac < 0) {\n      continue;\n    }\n    const sqrtb2ac = sqrt(b2ac);\n    const t1 = (-b + sqrtb2ac) / (2 * a);\n    if (0 < t1 && t1 < 1) {\n      tvalues.push(t1);\n    }\n    const t2 = (-b - sqrtb2ac) / (2 * a);\n    if (0 < t2 && t2 < 1) {\n      tvalues.push(t2);\n    }\n  }\n\n  let j = tvalues.length;\n  const jlen = j;\n  const iterator = getPointOnCubicBezierIterator(\n    begx,\n    begy,\n    cp1x,\n    cp1y,\n    cp2x,\n    cp2y,\n    endx,\n    endy,\n  );\n  while (j--) {\n    const { x, y } = iterator(tvalues[j]);\n    bounds[0][j] = x;\n    bounds[1][j] = y;\n  }\n\n  bounds[0][jlen] = begx;\n  bounds[1][jlen] = begy;\n  bounds[0][jlen + 1] = endx;\n  bounds[1][jlen + 1] = endy;\n  const result: TRectBounds = [\n    new Point(Math.min(...bounds[0]), Math.min(...bounds[1])),\n    new Point(Math.max(...bounds[0]), Math.max(...bounds[1])),\n  ];\n  if (config.cachesBoundsOfCurve) {\n    cache.boundsOfCurveCache[argsString!] = result;\n  }\n  return result;\n}\n\n/**\n * Converts arc to a bunch of cubic Bezier curves\n * @param {number} fx starting point x\n * @param {number} fy starting point y\n * @param {TParsedArcCommand} coords Arc command\n */\nexport const fromArcToBeziers = (\n  fx: number,\n  fy: number,\n  [_, rx, ry, rot, large, sweep, tx, ty]: TParsedArcCommand,\n): TParsedAbsoluteCubicCurveCommand[] => {\n  const segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\n\n  for (let i = 0, len = segsNorm.length; i < len; i++) {\n    segsNorm[i][1] += fx;\n    segsNorm[i][2] += fy;\n    segsNorm[i][3] += fx;\n    segsNorm[i][4] += fy;\n    segsNorm[i][5] += fx;\n    segsNorm[i][6] += fy;\n  }\n  return segsNorm;\n};\n\n/**\n * This function takes a parsed SVG path and makes it simpler for fabricJS logic.\n * Simplification consist of:\n * - All commands converted to absolute (lowercase to uppercase)\n * - S converted to C\n * - T converted to Q\n * - A converted to C\n * @param {TComplexPathData} path the array of commands of a parsed SVG path for `Path`\n * @return {TSimplePathData} the simplified array of commands of a parsed SVG path for `Path`\n * TODO: figure out how to remove the type assertions in a nice way\n */\nexport const makePathSimpler = (path: TComplexPathData): TSimplePathData => {\n  // x and y represent the last point of the path, AKA the previous command point.\n  // we add them to each relative command to make it an absolute comment.\n  // we also swap the v V h H with L, because are easier to transform.\n  let x = 0,\n    y = 0;\n  // x1 and y1 represent the last point of the subpath. the subpath is started with\n  // m or M command. When a z or Z command is drawn, x and y need to be resetted to\n  // the last x1 and y1.\n  let x1 = 0,\n    y1 = 0;\n  // previous will host the letter of the previous command, to handle S and T.\n  // controlX and controlY will host the previous reflected control point\n  const destinationPath: TSimplePathData = [];\n  let previous,\n    // placeholders\n    controlX = 0,\n    controlY = 0;\n  for (const parsedCommand of path) {\n    const current: TComplexParsedCommand = [...parsedCommand];\n    let converted: TSimpleParsedCommand | undefined;\n    switch (\n      current[0] // first letter\n    ) {\n      case 'l': // lineto, relative\n        current[1] += x;\n        current[2] += y;\n      // falls through\n      case 'L':\n        x = current[1];\n        y = current[2];\n        converted = ['L', x, y];\n        break;\n      case 'h': // horizontal lineto, relative\n        current[1] += x;\n      // falls through\n      case 'H':\n        x = current[1];\n        converted = ['L', x, y];\n        break;\n      case 'v': // vertical lineto, relative\n        current[1] += y;\n      // falls through\n      case 'V':\n        y = current[1];\n        converted = ['L', x, y];\n        break;\n      case 'm': // moveTo, relative\n        current[1] += x;\n        current[2] += y;\n      // falls through\n      case 'M':\n        x = current[1];\n        y = current[2];\n        x1 = current[1];\n        y1 = current[2];\n        converted = ['M', x, y];\n        break;\n      case 'c': // bezierCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n        current[3] += x;\n        current[4] += y;\n        current[5] += x;\n        current[6] += y;\n      // falls through\n      case 'C':\n        controlX = current[3];\n        controlY = current[4];\n        x = current[5];\n        y = current[6];\n        converted = ['C', current[1], current[2], controlX, controlY, x, y];\n        break;\n      case 's': // shorthand cubic bezierCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n        current[3] += x;\n        current[4] += y;\n      // falls through\n      case 'S':\n        // would be sScC but since we are swapping sSc for C, we check just that.\n        if (previous === 'C') {\n          // calculate reflection of previous control points\n          controlX = 2 * x - controlX;\n          controlY = 2 * y - controlY;\n        } else {\n          // If there is no previous command or if the previous command was not a C, c, S, or s,\n          // the control point is coincident with the current point\n          controlX = x;\n          controlY = y;\n        }\n        x = current[3];\n        y = current[4];\n        converted = ['C', controlX, controlY, current[1], current[2], x, y];\n        // converted[3] and converted[4] are NOW the second control point.\n        // we keep it for the next reflection.\n        controlX = converted[3];\n        controlY = converted[4];\n        break;\n      case 'q': // quadraticCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n        current[3] += x;\n        current[4] += y;\n      // falls through\n      case 'Q':\n        controlX = current[1];\n        controlY = current[2];\n        x = current[3];\n        y = current[4];\n        converted = ['Q', controlX, controlY, x, y];\n        break;\n      case 't': // shorthand quadraticCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n      // falls through\n      case 'T':\n        if (previous === 'Q') {\n          // calculate reflection of previous control point\n          controlX = 2 * x - controlX;\n          controlY = 2 * y - controlY;\n        } else {\n          // If there is no previous command or if the previous command was not a Q, q, T or t,\n          // assume the control point is coincident with the current point\n          controlX = x;\n          controlY = y;\n        }\n        x = current[1];\n        y = current[2];\n        converted = ['Q', controlX, controlY, x, y];\n        break;\n      case 'a':\n        current[6] += x;\n        current[7] += y;\n      // falls through\n      case 'A':\n        fromArcToBeziers(x, y, current).forEach((b) => destinationPath.push(b));\n        x = current[6];\n        y = current[7];\n        break;\n      case 'z':\n      case 'Z':\n        x = x1;\n        y = y1;\n        converted = ['Z'];\n        break;\n      default:\n    }\n    if (converted) {\n      destinationPath.push(converted);\n      previous = converted[0];\n    } else {\n      previous = '';\n    }\n  }\n  return destinationPath;\n};\n\n// todo verify if we can just use the point class here\n/**\n * Calc length from point x1,y1 to x2,y2\n * @param {number} x1 starting point x\n * @param {number} y1 starting point y\n * @param {number} x2 starting point x\n * @param {number} y2 starting point y\n * @return {number} length of segment\n */\nconst calcLineLength = (\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n): number => Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n\n/**\n * Get an iterator that takes a percentage and returns a point\n * @param {number} begx\n * @param {number} begy\n * @param {number} cp1x\n * @param {number} cp1y\n * @param {number} cp2x\n * @param {number} cp2y\n * @param {number} endx\n * @param {number} endy\n */\nconst getPointOnCubicBezierIterator =\n  (\n    begx: number,\n    begy: number,\n    cp1x: number,\n    cp1y: number,\n    cp2x: number,\n    cp2y: number,\n    endx: number,\n    endy: number,\n  ) =>\n  (pct: number) => {\n    const c1 = CB1(pct),\n      c2 = CB2(pct),\n      c3 = CB3(pct),\n      c4 = CB4(pct);\n    return new Point(\n      endx * c1 + cp2x * c2 + cp1x * c3 + begx * c4,\n      endy * c1 + cp2y * c2 + cp1y * c3 + begy * c4,\n    );\n  };\n\nconst QB1 = (t: number) => t ** 2;\nconst QB2 = (t: number) => 2 * t * (1 - t);\nconst QB3 = (t: number) => (1 - t) ** 2;\n\nconst getTangentCubicIterator =\n  (\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number,\n    p4x: number,\n    p4y: number,\n  ) =>\n  (pct: number) => {\n    const qb1 = QB1(pct),\n      qb2 = QB2(pct),\n      qb3 = QB3(pct),\n      tangentX =\n        3 * (qb3 * (p2x - p1x) + qb2 * (p3x - p2x) + qb1 * (p4x - p3x)),\n      tangentY =\n        3 * (qb3 * (p2y - p1y) + qb2 * (p3y - p2y) + qb1 * (p4y - p3y));\n    return Math.atan2(tangentY, tangentX);\n  };\n\nconst getPointOnQuadraticBezierIterator =\n  (\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number,\n  ) =>\n  (pct: number) => {\n    const c1 = QB1(pct),\n      c2 = QB2(pct),\n      c3 = QB3(pct);\n    return new Point(\n      p3x * c1 + p2x * c2 + p1x * c3,\n      p3y * c1 + p2y * c2 + p1y * c3,\n    );\n  };\n\nconst getTangentQuadraticIterator =\n  (\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number,\n  ) =>\n  (pct: number) => {\n    const invT = 1 - pct,\n      tangentX = 2 * (invT * (p2x - p1x) + pct * (p3x - p2x)),\n      tangentY = 2 * (invT * (p2y - p1y) + pct * (p3y - p2y));\n    return Math.atan2(tangentY, tangentX);\n  };\n\n// this will run over a path segment (a cubic or quadratic segment) and approximate it\n// with 100 segments. This will good enough to calculate the length of the curve\nconst pathIterator = (\n  iterator: (pct: number) => Point,\n  x1: number,\n  y1: number,\n) => {\n  let tempP = new Point(x1, y1),\n    tmpLen = 0;\n  for (let perc = 1; perc <= 100; perc += 1) {\n    const p = iterator(perc / 100);\n    tmpLen += calcLineLength(tempP.x, tempP.y, p.x, p.y);\n    tempP = p;\n  }\n  return tmpLen;\n};\n\n/**\n * Given a pathInfo, and a distance in pixels, find the percentage from 0 to 1\n * that correspond to that pixels run over the path.\n * The percentage will be then used to find the correct point on the canvas for the path.\n * @param {Array} segInfo fabricJS collection of information on a parsed path\n * @param {number} distance from starting point, in pixels.\n * @return {TPointAngle} info object with x and y ( the point on canvas ) and angle, the tangent on that point;\n */\nconst findPercentageForDistance = (\n  segInfo: TCurveInfo<'Q' | 'C'>,\n  distance: number,\n): TPointAngle => {\n  let perc = 0,\n    tmpLen = 0,\n    tempP: XY = { x: segInfo.x, y: segInfo.y },\n    p: XY = { ...tempP },\n    nextLen: number,\n    nextStep = 0.01,\n    lastPerc = 0;\n  // nextStep > 0.0001 covers 0.00015625 that 1/64th of 1/100\n  // the path\n  const iterator = segInfo.iterator,\n    angleFinder = segInfo.angleFinder;\n  while (tmpLen < distance && nextStep > 0.0001) {\n    p = iterator(perc);\n    lastPerc = perc;\n    nextLen = calcLineLength(tempP.x, tempP.y, p.x, p.y);\n    // compare tmpLen each cycle with distance, decide next perc to test.\n    if (nextLen + tmpLen > distance) {\n      // we discard this step and we make smaller steps.\n      perc -= nextStep;\n      nextStep /= 2;\n    } else {\n      tempP = p;\n      perc += nextStep;\n      tmpLen += nextLen;\n    }\n  }\n  return { ...p, angle: angleFinder(lastPerc) };\n};\n\n/**\n * Run over a parsed and simplified path and extract some information (length of each command and starting point)\n * @param {TSimplePathData} path parsed path commands\n * @return {TPathSegmentInfo[]} path commands information\n */\nexport const getPathSegmentsInfo = (\n  path: TSimplePathData,\n): TPathSegmentInfo[] => {\n  let totalLength = 0,\n    //x2 and y2 are the coords of segment start\n    //x1 and y1 are the coords of the current point\n    x1 = 0,\n    y1 = 0,\n    x2 = 0,\n    y2 = 0,\n    iterator,\n    tempInfo: TPathSegmentInfo;\n  const info: TPathSegmentInfo[] = [];\n  for (const current of path) {\n    const basicInfo: TPathSegmentInfoCommon<keyof TPathSegmentCommandInfo> = {\n      x: x1,\n      y: y1,\n      command: current[0],\n      length: 0,\n    };\n    switch (\n      current[0] //first letter\n    ) {\n      case 'M':\n        tempInfo = <TPathSegmentInfoCommon<'M'>>basicInfo;\n        tempInfo.x = x2 = x1 = current[1];\n        tempInfo.y = y2 = y1 = current[2];\n        break;\n      case 'L':\n        tempInfo = <TPathSegmentInfoCommon<'L'>>basicInfo;\n        tempInfo.length = calcLineLength(x1, y1, current[1], current[2]);\n        x1 = current[1];\n        y1 = current[2];\n        break;\n      case 'C':\n        iterator = getPointOnCubicBezierIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n          current[5],\n          current[6],\n        );\n        tempInfo = <TCurveInfo<'C'>>basicInfo;\n        tempInfo.iterator = iterator;\n        tempInfo.angleFinder = getTangentCubicIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n          current[5],\n          current[6],\n        );\n        tempInfo.length = pathIterator(iterator, x1, y1);\n\n        x1 = current[5];\n        y1 = current[6];\n        break;\n      case 'Q':\n        iterator = getPointOnQuadraticBezierIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n        );\n        tempInfo = <TCurveInfo<'Q'>>basicInfo;\n        tempInfo.iterator = iterator;\n        tempInfo.angleFinder = getTangentQuadraticIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n        );\n        tempInfo.length = pathIterator(iterator, x1, y1);\n        x1 = current[3];\n        y1 = current[4];\n        break;\n      case 'Z':\n        // we add those in order to ease calculations later\n        tempInfo = <TEndPathInfo>basicInfo;\n        tempInfo.destX = x2;\n        tempInfo.destY = y2;\n        tempInfo.length = calcLineLength(x1, y1, x2, y2);\n        x1 = x2;\n        y1 = y2;\n        break;\n    }\n    totalLength += tempInfo.length;\n    info.push(tempInfo);\n  }\n  info.push({ length: totalLength, x: x1, y: y1 });\n  return info;\n};\n\n/**\n * Get the point on the path that is distance along the path\n * @param path\n * @param distance\n * @param infos\n */\nexport const getPointOnPath = (\n  path: TSimplePathData,\n  distance: number,\n  infos: TPathSegmentInfo[] = getPathSegmentsInfo(path),\n): TPointAngle | undefined => {\n  let i = 0;\n  while (distance - infos[i].length > 0 && i < infos.length - 2) {\n    distance -= infos[i].length;\n    i++;\n  }\n  const segInfo = infos[i],\n    segPercent = distance / segInfo.length,\n    segment = path[i];\n\n  switch (segInfo.command) {\n    case 'M':\n      return { x: segInfo.x, y: segInfo.y, angle: 0 };\n    case 'Z':\n      return {\n        ...new Point(segInfo.x, segInfo.y).lerp(\n          new Point(segInfo.destX, segInfo.destY),\n          segPercent,\n        ),\n        angle: Math.atan2(segInfo.destY - segInfo.y, segInfo.destX - segInfo.x),\n      };\n    case 'L':\n      return {\n        ...new Point(segInfo.x, segInfo.y).lerp(\n          new Point(segment[1]!, segment[2]!),\n          segPercent,\n        ),\n        angle: Math.atan2(segment[2]! - segInfo.y, segment[1]! - segInfo.x),\n      };\n    case 'C':\n      return findPercentageForDistance(segInfo, distance);\n    case 'Q':\n      return findPercentageForDistance(segInfo, distance);\n    default:\n    // throw Error('Invalid command');\n  }\n};\n\nconst rePathCmdAll = new RegExp(rePathCommand, 'gi');\nconst regExpArcCommandPoints = new RegExp(reArcCommandPoints, 'g');\nconst reMyNum = new RegExp(reNum, 'gi');\nconst commandLengths = {\n  m: 2,\n  l: 2,\n  h: 1,\n  v: 1,\n  c: 6,\n  s: 4,\n  q: 4,\n  t: 2,\n  a: 7,\n} as const;\n/**\n *\n * @param {string} pathString\n * @return {TComplexPathData} An array of SVG path commands\n * @example <caption>Usage</caption>\n * parsePath('M 3 4 Q 3 5 2 1 4 0 Q 9 12 2 1 4 0') === [\n *   ['M', 3, 4],\n *   ['Q', 3, 5, 2, 1, 4, 0],\n *   ['Q', 9, 12, 2, 1, 4, 0],\n * ];\n */\nexport const parsePath = (pathString: string): TComplexPathData => {\n  const chain: TComplexPathData = [];\n  const all = pathString.match(rePathCmdAll) ?? [];\n  for (const matchStr of all) {\n    // take match string and save the first letter as the command\n    const commandLetter = matchStr[0] as TComplexParsedCommandType;\n    // in case of Z we have very little to do\n    if (commandLetter === 'z' || commandLetter === 'Z') {\n      chain.push([commandLetter]);\n      continue;\n    }\n    const commandLength =\n      commandLengths[\n        commandLetter.toLowerCase() as keyof typeof commandLengths\n      ];\n\n    let paramArr = [];\n    if (commandLetter === 'a' || commandLetter === 'A') {\n      // the arc command ha some peculariaties that requires a special regex other than numbers\n      // it is possible to avoid using a space between the sweep and large arc flags, making them either\n      // 00, 01, 10 or 11, making them identical to a plain number for the regex reMyNum\n      // reset the regexp\n      regExpArcCommandPoints.lastIndex = 0;\n      for (let out = null; (out = regExpArcCommandPoints.exec(matchStr)); ) {\n        paramArr.push(...out.slice(1));\n      }\n    } else {\n      paramArr = matchStr.match(reMyNum) || [];\n    }\n\n    // inspect the length of paramArr, if is longer than commandLength\n    // we are dealing with repeated commands\n    for (let i = 0; i < paramArr.length; i += commandLength) {\n      const newCommand = new Array(commandLength) as TComplexParsedCommand;\n      const transformedCommand = repeatedCommands[commandLetter];\n      newCommand[0] =\n        i > 0 && transformedCommand ? transformedCommand : commandLetter;\n      for (let j = 0; j < commandLength; j++) {\n        newCommand[j + 1] = parseFloat(paramArr[i + j]);\n      }\n      chain.push(newCommand);\n    }\n  }\n  return chain;\n};\n\n/**\n *\n * Converts points to a smooth SVG path\n * @param {XY[]} points Array of points\n * @param {number} [correction] Apply a correction to the path (usually we use `width / 1000`). If value is undefined 0 is used as the correction value.\n * @return {(string|number)[][]} An array of SVG path commands\n */\nexport const getSmoothPathFromPoints = (\n  points: Point[],\n  correction = 0,\n): TSimplePathData => {\n  let p1 = new Point(points[0]),\n    p2 = new Point(points[1]),\n    multSignX = 1,\n    multSignY = 0;\n  const path: TSimplePathData = [],\n    len = points.length,\n    manyPoints = len > 2;\n\n  if (manyPoints) {\n    multSignX = points[2].x < p2.x ? -1 : points[2].x === p2.x ? 0 : 1;\n    multSignY = points[2].y < p2.y ? -1 : points[2].y === p2.y ? 0 : 1;\n  }\n  path.push([\n    'M',\n    p1.x - multSignX * correction,\n    p1.y - multSignY * correction,\n  ]);\n  let i;\n  for (i = 1; i < len; i++) {\n    if (!p1.eq(p2)) {\n      const midPoint = p1.midPointFrom(p2);\n      // p1 is our bezier control point\n      // midpoint is our endpoint\n      // start point is p(i-1) value.\n      path.push(['Q', p1.x, p1.y, midPoint.x, midPoint.y]);\n    }\n    p1 = points[i];\n    if (i + 1 < points.length) {\n      p2 = points[i + 1];\n    }\n  }\n  if (manyPoints) {\n    multSignX = p1.x > points[i - 2].x ? 1 : p1.x === points[i - 2].x ? 0 : -1;\n    multSignY = p1.y > points[i - 2].y ? 1 : p1.y === points[i - 2].y ? 0 : -1;\n  }\n  path.push([\n    'L',\n    p1.x + multSignX * correction,\n    p1.y + multSignY * correction,\n  ]);\n  return path;\n};\n\n/**\n * Transform a path by transforming each segment.\n * it has to be a simplified path or it won't work.\n * WARNING: this depends from pathOffset for correct operation\n * @param {TSimplePathData} path fabricJS parsed and simplified path commands\n * @param {TMat2D} transform matrix that represent the transformation\n * @param {Point} [pathOffset] `Path.pathOffset`\n * @returns {TSimplePathData} the transformed path\n */\nexport const transformPath = (\n  path: TSimplePathData,\n  transform: TMat2D,\n  pathOffset: Point,\n): TSimplePathData => {\n  if (pathOffset) {\n    transform = multiplyTransformMatrices(transform, [\n      1,\n      0,\n      0,\n      1,\n      -pathOffset.x,\n      -pathOffset.y,\n    ]);\n  }\n  return path.map((pathSegment) => {\n    const newSegment: TSimpleParsedCommand = [...pathSegment];\n    for (let i = 1; i < pathSegment.length - 1; i += 2) {\n      // TODO: is there a way to get around casting to any?\n      const { x, y } = transformPoint(\n        {\n          x: pathSegment[i] as number,\n          y: pathSegment[i + 1] as number,\n        },\n        transform,\n      );\n      newSegment[i] = x;\n      newSegment[i + 1] = y;\n    }\n    return newSegment;\n  });\n};\n\n/**\n * Returns an array of path commands to create a regular polygon\n * @param {number} numVertexes\n * @param {number} radius\n * @returns {TSimplePathData} An array of SVG path commands\n */\nexport const getRegularPolygonPath = (\n  numVertexes: number,\n  radius: number,\n): TSimplePathData => {\n  const interiorAngle = (Math.PI * 2) / numVertexes;\n  // rotationAdjustment rotates the path by 1/2 the interior angle so that the polygon always has a flat side on the bottom\n  // This isn't strictly necessary, but it's how we tend to think of and expect polygons to be drawn\n  let rotationAdjustment = -halfPI;\n  if (numVertexes % 2 === 0) {\n    rotationAdjustment += interiorAngle / 2;\n  }\n  const d = new Array(numVertexes + 1);\n  for (let i = 0; i < numVertexes; i++) {\n    const rad = i * interiorAngle + rotationAdjustment;\n    const { x, y } = new Point(cos(rad), sin(rad)).scalarMultiply(radius);\n    d[i] = [i === 0 ? 'M' : 'L', x, y];\n  }\n  d[numVertexes] = ['Z'];\n  return d;\n};\n\n/**\n * Join path commands to go back to svg format\n * @param {TSimplePathData} pathData fabricJS parsed path commands\n * @param {number} fractionDigits number of fraction digits to \"leave\"\n * @return {String} joined path 'M 0 0 L 20 30'\n */\nexport const joinPath = (pathData: TSimplePathData, fractionDigits?: number) =>\n  pathData\n    .map((segment) => {\n      return segment\n        .map((arg, i) => {\n          if (i === 0) return arg;\n          return fractionDigits === undefined\n            ? arg\n            : toFixed(arg, fractionDigits);\n        })\n        .join(' ');\n    })\n    .join(' ');\n","// TODO this file needs to go away, cross browser style support is not fabricjs domain.\n\n/**\n * wrapper for setting element's style\n * @param {HTMLElement} element\n * @param {Object | string} styles\n */\nexport function setStyle(\n  element: HTMLElement,\n  styles: string | Record<string, string>,\n) {\n  const elementStyle = element.style;\n  if (!elementStyle || !styles) {\n    return;\n  } else if (typeof styles === 'string') {\n    elementStyle.cssText += ';' + styles;\n  } else {\n    Object.entries(styles).forEach(([property, value]) =>\n      elementStyle.setProperty(property, value),\n    );\n  }\n}\n","import type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { sendObjectToPlane } from './planeChange';\nimport { Group } from '../../shapes/Group';\n/**\n * Merges 2 clip paths into one visually equal clip path\n *\n * **IMPORTANT**:\\\n * Does **NOT** clone the arguments, clone them proir if necessary.\n *\n * Creates a wrapper (group) that contains one clip path and is clipped by the other so content is kept where both overlap.\n * Use this method if both the clip paths may have nested clip paths of their own, so assigning one to the other's clip path property is not possible.\n *\n * In order to handle the `inverted` property we follow logic described in the following cases:\\\n * **(1)** both clip paths are inverted - the clip paths pass the inverted prop to the wrapper and loose it themselves.\\\n * **(2)** one is inverted and the other isn't - the wrapper shouldn't become inverted and the inverted clip path must clip the non inverted one to produce an identical visual effect.\\\n * **(3)** both clip paths are not inverted - wrapper and clip paths remain unchanged.\n *\n * @memberOf fabric.util\n * @param {fabric.Object} c1\n * @param {fabric.Object} c2\n * @returns {fabric.Object} merged clip path\n */\nexport const mergeClipPaths = (c1: FabricObject, c2: FabricObject) => {\n  let a = c1,\n    b = c2;\n  if (a.inverted && !b.inverted) {\n    //  case (2)\n    a = c2;\n    b = c1;\n  }\n  //  `b` becomes `a`'s clip path so we transform `b` to `a` coordinate plane\n  sendObjectToPlane(b, b.group?.calcTransformMatrix(), a.calcTransformMatrix());\n  //  assign the `inverted` prop to the wrapping group\n  const inverted = a.inverted && b.inverted;\n  if (inverted) {\n    //  case (1)\n    a.inverted = b.inverted = false;\n  }\n  return new Group([a], { clipPath: b, inverted });\n};\n","/**\n * Returns random number between 2 specified ones.\n * @param {Number} min lower limit\n * @param {Number} max upper limit\n * @return {Number} random value (between min and max)\n */\nexport const getRandomInt = (min: number, max: number): number =>\n  Math.floor(Math.random() * (max - min + 1)) + min;\n","import { getFabricWindow } from '../../env';\nimport { noop } from '../../constants';\nimport type { Abortable } from '../../typedefs';\nimport { SignalAbortedError } from './console';\n\ntype requestOptions = Abortable & {\n  onComplete?: (xhr: XMLHttpRequest) => void;\n};\n\n/**\n * Cross-browser abstraction for sending XMLHttpRequest\n * @deprecated this has to go away, we can use a modern browser method to do the same.\n * @param {String} url URL to send XMLHttpRequest to\n * @param {Object} [options] Options object\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @param {Function} options.onComplete Callback to invoke when request is completed\n * @return {XMLHttpRequest} request\n */\n\nexport function request(url: string, options: requestOptions = {}) {\n  const onComplete = options.onComplete || noop,\n    xhr = new (getFabricWindow().XMLHttpRequest)(),\n    signal = options.signal,\n    abort = function () {\n      xhr.abort();\n    },\n    removeListener = function () {\n      signal && signal.removeEventListener('abort', abort);\n      xhr.onerror = xhr.ontimeout = noop;\n    };\n\n  if (signal && signal.aborted) {\n    throw new SignalAbortedError('request');\n  } else if (signal) {\n    signal.addEventListener('abort', abort, { once: true });\n  }\n\n  /** @ignore */\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4) {\n      removeListener();\n      onComplete(xhr);\n      xhr.onreadystatechange = noop;\n    }\n  };\n\n  xhr.onerror = xhr.ontimeout = removeListener;\n\n  xhr.open('get', url, true);\n\n  xhr.send();\n  return xhr;\n}\n","import { CENTER, SCALE_X, SCALE_Y } from '../constants';\nimport type { FabricImage } from '../shapes/Image';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TMat2D } from '../typedefs';\nimport { qrDecompose } from './misc/matrix';\n\ntype FabricObjectWithTransformMatrix = FabricObject & {\n  transformMatrix?: TMat2D;\n};\n\n/**\n * This function is an helper for svg import. it decompose the transformMatrix\n * and assign properties to object.\n * untransformed coordinates\n * @private\n */\nconst _assignTransformMatrixProps = (\n  object: FabricObjectWithTransformMatrix,\n) => {\n  if (object.transformMatrix) {\n    const { scaleX, scaleY, angle, skewX } = qrDecompose(\n      object.transformMatrix,\n    );\n    object.flipX = false;\n    object.flipY = false;\n    object.set(SCALE_X, scaleX);\n    object.set(SCALE_Y, scaleY);\n    object.angle = angle;\n    object.skewX = skewX;\n    object.skewY = 0;\n  }\n};\n\n/**\n * This function is an helper for svg import. it removes the transform matrix\n * and set to object properties that fabricjs can handle\n * @private\n * @param {Object} preserveAspectRatioOptions\n */\nexport const removeTransformMatrixForSvgParsing = (\n  object: FabricObjectWithTransformMatrix,\n  preserveAspectRatioOptions?: any,\n) => {\n  let center = object._findCenterFromElement();\n  if (object.transformMatrix) {\n    _assignTransformMatrixProps(object);\n    center = center.transform(object.transformMatrix);\n  }\n  delete object.transformMatrix;\n  if (preserveAspectRatioOptions) {\n    object.scaleX *= preserveAspectRatioOptions.scaleX;\n    object.scaleY *= preserveAspectRatioOptions.scaleY;\n    (object as FabricImage).cropX = preserveAspectRatioOptions.cropX;\n    (object as FabricImage).cropY = preserveAspectRatioOptions.cropY;\n    center.x += preserveAspectRatioOptions.offsetLeft;\n    center.y += preserveAspectRatioOptions.offsetTop;\n    object.width = preserveAspectRatioOptions.width;\n    object.height = preserveAspectRatioOptions.height;\n  }\n  object.setPositionByOrigin(center, CENTER, CENTER);\n};\n","import type { Point } from '../../Point';\nimport type { TRadian } from '../../typedefs';\n/**\n * Rotates `point` around `origin` with `radians`\n * @deprecated use the Point.rotate\n * @param {Point} origin The origin of the rotation\n * @param {Point} origin The origin of the rotation\n * @param {TRadian} radians The radians of the angle for the rotation\n * @return {Point} The new rotated point\n */\nexport const rotatePoint = (\n  point: Point,\n  origin: Point,\n  radians: TRadian,\n): Point => point.rotate(radians, origin);\n","import { getEnv, getFabricDocument } from '../../env';\nimport type { TSize } from '../../typedefs';\nimport { createCanvasElement, setStyle } from '../../util';\nimport type { CSSDimensions } from './util';\nimport { makeElementUnselectable, setCSSDimensions } from './util';\nimport type { CanvasItem } from './StaticCanvasDOMManager';\nimport { StaticCanvasDOMManager } from './StaticCanvasDOMManager';\nimport { setCanvasDimensions } from './util';\nimport { NONE } from '../../constants';\n\nexport class CanvasDOMManager extends StaticCanvasDOMManager {\n  upper: CanvasItem;\n  container: HTMLDivElement;\n\n  constructor(\n    arg0?: string | HTMLCanvasElement,\n    {\n      allowTouchScrolling = false,\n      containerClass = '',\n    }: {\n      allowTouchScrolling?: boolean;\n      /**\n       * @deprecated here only for backward compatibility\n       */\n      containerClass?: string;\n    } = {},\n  ) {\n    super(arg0);\n    const { el: lowerCanvasEl } = this.lower;\n    const upperCanvasEl = this.createUpperCanvas();\n    this.upper = { el: upperCanvasEl, ctx: upperCanvasEl.getContext('2d')! };\n    this.applyCanvasStyle(lowerCanvasEl, {\n      allowTouchScrolling,\n    });\n    this.applyCanvasStyle(upperCanvasEl, {\n      allowTouchScrolling,\n      styles: {\n        position: 'absolute',\n        left: '0',\n        top: '0',\n      },\n    });\n    const container = this.createContainerElement();\n    container.classList.add(containerClass);\n    if (lowerCanvasEl.parentNode) {\n      lowerCanvasEl.parentNode.replaceChild(container, lowerCanvasEl);\n    }\n    container.append(lowerCanvasEl, upperCanvasEl);\n    this.container = container;\n  }\n\n  protected createUpperCanvas() {\n    const { el: lowerCanvasEl } = this.lower;\n    const el = createCanvasElement();\n    // we assign the same classname of the lowerCanvas\n    el.className = lowerCanvasEl.className;\n    // but then we remove the lower-canvas specific className\n    el.classList.remove('lower-canvas');\n    // we add the specific upper-canvas class\n    el.classList.add('upper-canvas');\n    el.setAttribute('data-fabric', 'top');\n    el.style.cssText = lowerCanvasEl.style.cssText;\n    el.setAttribute('draggable', 'true');\n    return el;\n  }\n\n  protected createContainerElement() {\n    const container = getFabricDocument().createElement('div');\n    container.setAttribute('data-fabric', 'wrapper');\n    setStyle(container, {\n      position: 'relative',\n    });\n    makeElementUnselectable(container);\n    return container;\n  }\n\n  /**\n   * @private\n   * @param {HTMLCanvasElement} element canvas element to apply styles on\n   */\n  protected applyCanvasStyle(\n    element: HTMLCanvasElement,\n    options: {\n      allowTouchScrolling?: boolean;\n      styles?: Record<string, string>;\n    },\n  ) {\n    const { styles, allowTouchScrolling } = options;\n    setStyle(element, {\n      ...styles,\n      'touch-action': allowTouchScrolling ? 'manipulation' : NONE,\n    });\n    makeElementUnselectable(element);\n  }\n\n  setDimensions(size: TSize, retinaScaling: number) {\n    super.setDimensions(size, retinaScaling);\n    const { el, ctx } = this.upper;\n    setCanvasDimensions(el, ctx, size, retinaScaling);\n  }\n\n  setCSSDimensions(size: Partial<CSSDimensions>): void {\n    super.setCSSDimensions(size);\n    setCSSDimensions(this.upper.el, size);\n    setCSSDimensions(this.container, size);\n  }\n\n  cleanupDOM(size: TSize) {\n    const container = this.container,\n      { el: lowerCanvasEl } = this.lower,\n      { el: upperCanvasEl } = this.upper;\n    super.cleanupDOM(size);\n    container.removeChild(upperCanvasEl);\n    container.removeChild(lowerCanvasEl);\n    if (container.parentNode) {\n      container.parentNode.replaceChild(lowerCanvasEl, container);\n    }\n  }\n\n  dispose() {\n    super.dispose();\n    getEnv().dispose(this.upper.el);\n    // @ts-expect-error disposing\n    delete this.upper;\n    // @ts-expect-error disposing\n    delete this.container;\n  }\n}\n","import { dragHandler } from '../controls/drag';\nimport { getActionFromCorner } from '../controls/util';\nimport { Point } from '../Point';\nimport { FabricObject } from '../shapes/Object/FabricObject';\nimport type {\n  CanvasEvents,\n  ModifierKey,\n  TOptionalModifierKey,\n  TPointerEvent,\n  Transform,\n} from '../EventTypeDefs';\nimport {\n  addTransformToObject,\n  saveObjectTransform,\n} from '../util/misc/objectTransforms';\nimport type { TCanvasSizeOptions } from './StaticCanvas';\nimport { StaticCanvas } from './StaticCanvas';\nimport { isCollection } from '../Collection';\nimport { isTransparent } from '../util/misc/isTransparent';\nimport type {\n  TMat2D,\n  TOriginX,\n  TOriginY,\n  TSize,\n  TSVGReviver,\n} from '../typedefs';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport { getPointer, isTouchEvent } from '../util/dom_event';\nimport type { IText } from '../shapes/IText/IText';\nimport type { BaseBrush } from '../brushes/BaseBrush';\nimport { pick } from '../util/misc/pick';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport { cos, createCanvasElement, sin } from '../util';\nimport { CanvasDOMManager } from './DOMManagers/CanvasDOMManager';\nimport {\n  BOTTOM,\n  CENTER,\n  LEFT,\n  MODIFIED,\n  RESIZING,\n  RIGHT,\n  ROTATE,\n  SCALE,\n  SCALE_X,\n  SCALE_Y,\n  SKEW_X,\n  SKEW_Y,\n  TOP,\n} from '../constants';\nimport type { CanvasOptions } from './CanvasOptions';\nimport { canvasDefaults } from './CanvasOptions';\nimport { Intersection } from '../Intersection';\nimport { isActiveSelection } from '../util/typeAssertions';\n\n/**\n * Canvas class\n * @class Canvas\n * @extends StaticCanvas\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#canvas}\n *\n * @fires object:modified at the end of a transform\n * @fires object:rotating while an object is being rotated from the control\n * @fires object:scaling while an object is being scaled by controls\n * @fires object:moving while an object is being dragged\n * @fires object:skewing while an object is being skewed from the controls\n *\n * @fires before:transform before a transform is is started\n * @fires before:selection:cleared\n * @fires selection:cleared\n * @fires selection:updated\n * @fires selection:created\n *\n * @fires path:created after a drawing operation ends and the path is added\n * @fires mouse:down\n * @fires mouse:move\n * @fires mouse:up\n * @fires mouse:down:before  on mouse down, before the inner fabric logic runs\n * @fires mouse:move:before on mouse move, before the inner fabric logic runs\n * @fires mouse:up:before on mouse up, before the inner fabric logic runs\n * @fires mouse:over\n * @fires mouse:out\n * @fires mouse:dblclick whenever a native dbl click event fires on the canvas.\n *\n * @fires dragover\n * @fires dragenter\n * @fires dragleave\n * @fires drag:enter object drag enter\n * @fires drag:leave object drag leave\n * @fires drop:before before drop event. Prepare for the drop event (same native event).\n * @fires drop\n * @fires drop:after after drop event. Run logic on canvas after event has been accepted/declined (same native event).\n * @example\n * let a: fabric.Object, b: fabric.Object;\n * let flag = false;\n * canvas.add(a, b);\n * a.on('drop:before', opt => {\n *  //  we want a to accept the drop even though it's below b in the stack\n *  flag = this.canDrop(opt.e);\n * });\n * b.canDrop = function(e) {\n *  !flag && this.draggableTextDelegate.canDrop(e);\n * }\n * b.on('dragover', opt => b.set('fill', opt.dropTarget === b ? 'pink' : 'black'));\n * a.on('drop', opt => {\n *  opt.e.defaultPrevented  //  drop occurred\n *  opt.didDrop             //  drop occurred on canvas\n *  opt.target              //  drop target\n *  opt.target !== a && a.set('text', 'I lost');\n * });\n * canvas.on('drop:after', opt => {\n *  //  inform user who won\n *  if(!opt.e.defaultPrevented) {\n *    // no winners\n *  }\n *  else if(!opt.didDrop) {\n *    //  my objects didn't win, some other lucky object\n *  }\n *  else {\n *    //  we have a winner it's opt.target!!\n *  }\n * })\n *\n * @fires after:render at the end of the render process, receives the context in the callback\n * @fires before:render at start the render process, receives the context in the callback\n *\n * @fires contextmenu:before\n * @fires contextmenu\n * @example\n * let handler;\n * targets.forEach(target => {\n *   target.on('contextmenu:before', opt => {\n *     //  decide which target should handle the event before canvas hijacks it\n *     if (someCaseHappens && opt.targets.includes(target)) {\n *       handler = target;\n *     }\n *   });\n *   target.on('contextmenu', opt => {\n *     //  do something fantastic\n *   });\n * });\n * canvas.on('contextmenu', opt => {\n *   if (!handler) {\n *     //  no one takes responsibility, it's always left to me\n *     //  let's show them how it's done!\n *   }\n * });\n *\n */\nexport class SelectableCanvas<EventSpec extends CanvasEvents = CanvasEvents>\n  extends StaticCanvas<EventSpec>\n  implements Omit<CanvasOptions, 'enablePointerEvents'>\n{\n  declare _objects: FabricObject[];\n\n  // transform config\n  declare uniformScaling: boolean;\n  declare uniScaleKey: TOptionalModifierKey;\n  declare centeredScaling: boolean;\n  declare centeredRotation: boolean;\n  declare centeredKey: TOptionalModifierKey;\n  declare altActionKey: TOptionalModifierKey;\n\n  // selection config\n  declare selection: boolean;\n  declare selectionKey: TOptionalModifierKey | ModifierKey[];\n  declare altSelectionKey: TOptionalModifierKey;\n  declare selectionColor: string;\n  declare selectionDashArray: number[];\n  declare selectionBorderColor: string;\n  declare selectionLineWidth: number;\n  declare selectionFullyContained: boolean;\n\n  // cursors\n  declare hoverCursor: CSSStyleDeclaration['cursor'];\n  declare moveCursor: CSSStyleDeclaration['cursor'];\n  declare defaultCursor: CSSStyleDeclaration['cursor'];\n  declare freeDrawingCursor: CSSStyleDeclaration['cursor'];\n  declare notAllowedCursor: CSSStyleDeclaration['cursor'];\n\n  declare containerClass: string;\n\n  // target find config\n  declare perPixelTargetFind: boolean;\n  declare targetFindTolerance: number;\n  declare skipTargetFind: boolean;\n\n  /**\n   * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.\n   * After mousedown, mousemove creates a shape,\n   * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}\n   * @type Boolean\n   * @default\n   */\n  declare isDrawingMode: boolean;\n\n  declare preserveObjectStacking: boolean;\n\n  // event config\n  declare stopContextMenu: boolean;\n  declare fireRightClick: boolean;\n  declare fireMiddleClick: boolean;\n\n  /**\n   * Keep track of the subTargets for Mouse Events, ordered bottom up from innermost nested subTarget\n   * @type FabricObject[]\n   */\n  targets: FabricObject[] = [];\n\n  /**\n   * Keep track of the hovered target\n   * @type FabricObject | null\n   * @private\n   */\n  declare _hoveredTarget?: FabricObject;\n\n  /**\n   * hold the list of nested targets hovered\n   * @type FabricObject[]\n   * @private\n   */\n  _hoveredTargets: FabricObject[] = [];\n\n  /**\n   * hold the list of objects to render\n   * @type FabricObject[]\n   * @private\n   */\n  _objectsToRender?: FabricObject[];\n\n  /**\n   * hold a reference to a data structure that contains information\n   * on the current on going transform\n   * @type\n   * @private\n   */\n  _currentTransform: Transform | null = null;\n\n  /**\n   * hold a reference to a data structure used to track the selection\n   * box on canvas drag\n   * on the current on going transform\n   * x, y, deltaX and deltaY are in scene plane\n   * @type\n   * @private\n   */\n  protected _groupSelector: {\n    x: number;\n    y: number;\n    deltaX: number;\n    deltaY: number;\n  } | null = null;\n\n  /**\n   * internal flag used to understand if the context top requires a cleanup\n   * in case this is true, the contextTop will be cleared at the next render\n   * @type boolean\n   * @private\n   */\n  contextTopDirty = false;\n\n  /**\n   * During a mouse event we may need the pointer multiple times in multiple functions.\n   * _absolutePointer holds a reference to the pointer in fabricCanvas/design coordinates that is valid for the event\n   * lifespan. Every fabricJS mouse event create and delete the cache every time\n   * We do this because there are some HTML DOM inspection functions to get the actual pointer coordinates\n   * @type {Point}\n   */\n  protected declare _absolutePointer?: Point;\n\n  /**\n   * During a mouse event we may need the pointer multiple times in multiple functions.\n   * _pointer holds a reference to the pointer in html coordinates that is valid for the event\n   * lifespan. Every fabricJS mouse event create and delete the cache every time\n   * We do this because there are some HTML DOM inspection functions to get the actual pointer coordinates\n   * @type {Point}\n   */\n  protected declare _pointer?: Point;\n\n  /**\n   * During a mouse event we may need the target multiple times in multiple functions.\n   * _target holds a reference to the target that is valid for the event\n   * lifespan. Every fabricJS mouse event create and delete the cache every time\n   * @type {FabricObject}\n   */\n  protected declare _target?: FabricObject;\n\n  static ownDefaults = canvasDefaults;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...SelectableCanvas.ownDefaults };\n  }\n\n  declare elements: CanvasDOMManager;\n  get upperCanvasEl() {\n    return this.elements.upper?.el;\n  }\n  get contextTop() {\n    return this.elements.upper?.ctx;\n  }\n  get wrapperEl() {\n    return this.elements.container;\n  }\n  private declare pixelFindCanvasEl: HTMLCanvasElement;\n  private declare pixelFindContext: CanvasRenderingContext2D;\n\n  protected declare _isCurrentlyDrawing: boolean;\n  declare freeDrawingBrush?: BaseBrush;\n  declare _activeObject?: FabricObject;\n\n  protected initElements(el?: string | HTMLCanvasElement) {\n    this.elements = new CanvasDOMManager(el, {\n      allowTouchScrolling: this.allowTouchScrolling,\n      containerClass: this.containerClass,\n    });\n    this._createCacheCanvas();\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} obj Object that was added\n   */\n  _onObjectAdded(obj: FabricObject) {\n    this._objectsToRender = undefined;\n    super._onObjectAdded(obj);\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} obj Object that was removed\n   */\n  _onObjectRemoved(obj: FabricObject) {\n    this._objectsToRender = undefined;\n    // removing active object should fire \"selection:cleared\" events\n    if (obj === this._activeObject) {\n      this.fire('before:selection:cleared', { deselected: [obj] });\n      this._discardActiveObject();\n      this.fire('selection:cleared', { deselected: [obj] });\n      obj.fire('deselected', {\n        target: obj,\n      });\n    }\n    if (obj === this._hoveredTarget) {\n      this._hoveredTarget = undefined;\n      this._hoveredTargets = [];\n    }\n    super._onObjectRemoved(obj);\n  }\n\n  _onStackOrderChanged() {\n    this._objectsToRender = undefined;\n    super._onStackOrderChanged();\n  }\n\n  /**\n   * Divides objects in two groups, one to render immediately\n   * and one to render as activeGroup.\n   * @return {Array} objects to render immediately and pushes the other in the activeGroup.\n   */\n  _chooseObjectsToRender(): FabricObject[] {\n    const activeObject = this._activeObject;\n    return !this.preserveObjectStacking && activeObject\n      ? this._objects\n          .filter((object) => !object.group && object !== activeObject)\n          .concat(activeObject)\n      : this._objects;\n  }\n\n  /**\n   * Renders both the top canvas and the secondary container canvas.\n   */\n  renderAll() {\n    this.cancelRequestedRender();\n    if (this.destroyed) {\n      return;\n    }\n    if (this.contextTopDirty && !this._groupSelector && !this.isDrawingMode) {\n      this.clearContext(this.contextTop);\n      this.contextTopDirty = false;\n    }\n    if (this.hasLostContext) {\n      this.renderTopLayer(this.contextTop);\n      this.hasLostContext = false;\n    }\n    !this._objectsToRender &&\n      (this._objectsToRender = this._chooseObjectsToRender());\n    this.renderCanvas(this.getContext(), this._objectsToRender);\n  }\n\n  /**\n   * text selection is rendered by the active text instance during the rendering cycle\n   */\n  renderTopLayer(ctx: CanvasRenderingContext2D): void {\n    ctx.save();\n    if (this.isDrawingMode && this._isCurrentlyDrawing) {\n      this.freeDrawingBrush && this.freeDrawingBrush._render();\n      this.contextTopDirty = true;\n    }\n    // we render the top context - last object\n    if (this.selection && this._groupSelector) {\n      this._drawSelection(ctx);\n      this.contextTopDirty = true;\n    }\n    ctx.restore();\n  }\n\n  /**\n   * Method to render only the top canvas.\n   * Also used to render the group selection box.\n   * Does not render text selection.\n   */\n  renderTop() {\n    const ctx = this.contextTop;\n    this.clearContext(ctx);\n    this.renderTopLayer(ctx);\n    // todo: how do i know if the after:render is for the top or normal contex?\n    this.fire('after:render', { ctx });\n  }\n\n  /**\n   * Set the canvas tolerance value for pixel taret find.\n   * Use only integer numbers.\n   * @private\n   */\n  setTargetFindTolerance(value: number) {\n    value = Math.round(value);\n    this.targetFindTolerance = value;\n    const retina = this.getRetinaScaling();\n    const size = Math.ceil((value * 2 + 1) * retina);\n    this.pixelFindCanvasEl.width = this.pixelFindCanvasEl.height = size;\n    this.pixelFindContext.scale(retina, retina);\n  }\n\n  /**\n   * Returns true if object is transparent at a certain location\n   * Clarification: this is `is target transparent at location X or are controls there`\n   * @TODO this seems dumb that we treat controls with transparency. we can find controls\n   * programmatically without painting them, the cache canvas optimization is always valid\n   * @param {FabricObject} target Object to check\n   * @param {Number} x Left coordinate in viewport space\n   * @param {Number} y Top coordinate in viewport space\n   * @return {Boolean}\n   */\n  isTargetTransparent(target: FabricObject, x: number, y: number): boolean {\n    const tolerance = this.targetFindTolerance;\n    const ctx = this.pixelFindContext;\n    this.clearContext(ctx);\n    ctx.save();\n    ctx.translate(-x + tolerance, -y + tolerance);\n    ctx.transform(...this.viewportTransform);\n    const selectionBgc = target.selectionBackgroundColor;\n    target.selectionBackgroundColor = '';\n    target.render(ctx);\n    target.selectionBackgroundColor = selectionBgc;\n    ctx.restore();\n    // our canvas is square, and made around tolerance.\n    // so tolerance in this case also represent the center of the canvas.\n    const enhancedTolerance = Math.round(tolerance * this.getRetinaScaling());\n    return isTransparent(\n      ctx,\n      enhancedTolerance,\n      enhancedTolerance,\n      enhancedTolerance,\n    );\n  }\n\n  /**\n   * takes an event and determines if selection key has been pressed\n   * @private\n   * @param {TPointerEvent} e Event object\n   */\n  _isSelectionKeyPressed(e: TPointerEvent): boolean {\n    const sKey = this.selectionKey;\n    if (!sKey) {\n      return false;\n    }\n    if (Array.isArray(sKey)) {\n      return !!sKey.find((key) => !!key && e[key] === true);\n    } else {\n      return e[sKey];\n    }\n  }\n\n  /**\n   * @private\n   * @param {TPointerEvent} e Event object\n   * @param {FabricObject} target\n   */\n  _shouldClearSelection(\n    e: TPointerEvent,\n    target?: FabricObject,\n  ): target is undefined {\n    const activeObjects = this.getActiveObjects(),\n      activeObject = this._activeObject;\n\n    return !!(\n      !target ||\n      (target &&\n        activeObject &&\n        activeObjects.length > 1 &&\n        activeObjects.indexOf(target) === -1 &&\n        activeObject !== target &&\n        !this._isSelectionKeyPressed(e)) ||\n      (target && !target.evented) ||\n      (target && !target.selectable && activeObject && activeObject !== target)\n    );\n  }\n\n  /**\n   * This method will take in consideration a modifier key pressed and the control we are\n   * about to drag, and try to guess the anchor point ( origin ) of the transormation.\n   * This should be really in the realm of controls, and we should remove specific code for legacy\n   * embedded actions.\n   * @TODO this probably deserve discussion/rediscovery and change/refactor\n   * @private\n   * @deprecated\n   * @param {FabricObject} target\n   * @param {string} action\n   * @param {boolean} altKey\n   * @returns {boolean} true if the transformation should be centered\n   */\n  private _shouldCenterTransform(\n    target: FabricObject,\n    action: string,\n    modifierKeyPressed: boolean,\n  ) {\n    if (!target) {\n      return;\n    }\n\n    let centerTransform;\n\n    if (\n      action === SCALE ||\n      action === SCALE_X ||\n      action === SCALE_Y ||\n      action === RESIZING\n    ) {\n      centerTransform = this.centeredScaling || target.centeredScaling;\n    } else if (action === ROTATE) {\n      centerTransform = this.centeredRotation || target.centeredRotation;\n    }\n\n    return centerTransform ? !modifierKeyPressed : modifierKeyPressed;\n  }\n\n  /**\n   * Given the control clicked, determine the origin of the transform.\n   * This is bad because controls can totally have custom names\n   * should disappear before release 4.0\n   * @private\n   * @deprecated\n   */\n  _getOriginFromCorner(\n    target: FabricObject,\n    controlName: string,\n  ): { x: TOriginX; y: TOriginY } {\n    const origin = {\n      x: target.originX,\n      y: target.originY,\n    };\n\n    if (!controlName) {\n      return origin;\n    }\n\n    // is a left control ?\n    if (['ml', 'tl', 'bl'].includes(controlName)) {\n      origin.x = RIGHT;\n      // is a right control ?\n    } else if (['mr', 'tr', 'br'].includes(controlName)) {\n      origin.x = LEFT;\n    }\n    // is a top control ?\n    if (['tl', 'mt', 'tr'].includes(controlName)) {\n      origin.y = BOTTOM;\n      // is a bottom control ?\n    } else if (['bl', 'mb', 'br'].includes(controlName)) {\n      origin.y = TOP;\n    }\n    return origin;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object\n   * @param {FabricObject} target\n   * @param {boolean} [alreadySelected] pass true to setup the active control\n   */\n  _setupCurrentTransform(\n    e: TPointerEvent,\n    target: FabricObject,\n    alreadySelected: boolean,\n  ): void {\n    const pointer = target.group\n      ? // transform pointer to target's containing coordinate plane\n        sendPointToPlane(\n          this.getScenePoint(e),\n          undefined,\n          target.group.calcTransformMatrix(),\n        )\n      : this.getScenePoint(e);\n    const { key: corner = '', control } = target.getActiveControl() || {},\n      actionHandler =\n        alreadySelected && control\n          ? control.getActionHandler(e, target, control)?.bind(control)\n          : dragHandler,\n      action = getActionFromCorner(alreadySelected, corner, e, target),\n      altKey = e[this.centeredKey as ModifierKey],\n      origin = this._shouldCenterTransform(target, action, altKey)\n        ? ({ x: CENTER, y: CENTER } as const)\n        : this._getOriginFromCorner(target, corner),\n      /**\n       * relative to target's containing coordinate plane\n       * both agree on every point\n       **/\n      transform: Transform = {\n        target: target,\n        action,\n        actionHandler,\n        actionPerformed: false,\n        corner,\n        scaleX: target.scaleX,\n        scaleY: target.scaleY,\n        skewX: target.skewX,\n        skewY: target.skewY,\n        offsetX: pointer.x - target.left,\n        offsetY: pointer.y - target.top,\n        originX: origin.x,\n        originY: origin.y,\n        ex: pointer.x,\n        ey: pointer.y,\n        lastX: pointer.x,\n        lastY: pointer.y,\n        theta: degreesToRadians(target.angle),\n        width: target.width,\n        height: target.height,\n        shiftKey: e.shiftKey,\n        altKey,\n        original: {\n          ...saveObjectTransform(target),\n          originX: origin.x,\n          originY: origin.y,\n        },\n      };\n\n    this._currentTransform = transform;\n\n    this.fire('before:transform', {\n      e,\n      transform,\n    });\n  }\n\n  /**\n   * Set the cursor type of the canvas element\n   * @param {String} value Cursor type of the canvas element.\n   * @see http://www.w3.org/TR/css3-ui/#cursor\n   */\n  setCursor(value: CSSStyleDeclaration['cursor']): void {\n    this.upperCanvasEl.style.cursor = value;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx to draw the selection on\n   */\n  _drawSelection(ctx: CanvasRenderingContext2D): void {\n    const { x, y, deltaX, deltaY } = this._groupSelector!,\n      start = new Point(x, y).transform(this.viewportTransform),\n      extent = new Point(x + deltaX, y + deltaY).transform(\n        this.viewportTransform,\n      ),\n      strokeOffset = this.selectionLineWidth / 2;\n    let minX = Math.min(start.x, extent.x),\n      minY = Math.min(start.y, extent.y),\n      maxX = Math.max(start.x, extent.x),\n      maxY = Math.max(start.y, extent.y);\n\n    if (this.selectionColor) {\n      ctx.fillStyle = this.selectionColor;\n      ctx.fillRect(minX, minY, maxX - minX, maxY - minY);\n    }\n\n    if (!this.selectionLineWidth || !this.selectionBorderColor) {\n      return;\n    }\n    ctx.lineWidth = this.selectionLineWidth;\n    ctx.strokeStyle = this.selectionBorderColor;\n\n    minX += strokeOffset;\n    minY += strokeOffset;\n    maxX -= strokeOffset;\n    maxY -= strokeOffset;\n    // selection border\n    // @TODO: is _setLineDash still necessary on modern canvas?\n    FabricObject.prototype._setLineDash.call(\n      this,\n      ctx,\n      this.selectionDashArray,\n    );\n    ctx.strokeRect(minX, minY, maxX - minX, maxY - minY);\n  }\n\n  /**\n   * Method that determines what object we are clicking on\n   * 11/09/2018 TODO: would be cool if findTarget could discern between being a full target\n   * or the outside part of the corner.\n   * @param {Event} e mouse event\n   * @return {FabricObject | null} the target found\n   */\n  findTarget(e: TPointerEvent): FabricObject | undefined {\n    if (this.skipTargetFind) {\n      return undefined;\n    }\n\n    const pointer = this.getViewportPoint(e),\n      activeObject = this._activeObject,\n      aObjects = this.getActiveObjects();\n\n    this.targets = [];\n\n    if (activeObject && aObjects.length >= 1) {\n      if (activeObject.findControl(pointer, isTouchEvent(e))) {\n        // if we hit the corner of the active object, let's return that.\n        return activeObject;\n      } else if (\n        aObjects.length > 1 &&\n        // check pointer is over active selection and possibly perform `subTargetCheck`\n        this.searchPossibleTargets([activeObject], pointer)\n      ) {\n        // active selection does not select sub targets like normal groups\n        return activeObject;\n      } else if (\n        activeObject === this.searchPossibleTargets([activeObject], pointer)\n      ) {\n        // active object is not an active selection\n        if (!this.preserveObjectStacking) {\n          return activeObject;\n        } else {\n          const subTargets = this.targets;\n          this.targets = [];\n          const target = this.searchPossibleTargets(this._objects, pointer);\n          if (\n            e[this.altSelectionKey as ModifierKey] &&\n            target &&\n            target !== activeObject\n          ) {\n            // alt selection: select active object even though it is not the top most target\n            // restore targets\n            this.targets = subTargets;\n            return activeObject;\n          }\n          return target;\n        }\n      }\n    }\n\n    return this.searchPossibleTargets(this._objects, pointer);\n  }\n\n  /**\n   * Checks if the point is inside the object selection area including padding\n   * @param {FabricObject} obj Object to test against\n   * @param {Object} [pointer] point in scene coordinates\n   * @return {Boolean} true if point is contained within an area of given object\n   * @private\n   */\n  private _pointIsInObjectSelectionArea(obj: FabricObject, point: Point) {\n    // getCoords will already take care of group de-nesting\n    let coords = obj.getCoords();\n    const viewportZoom = this.getZoom();\n    const padding = obj.padding / viewportZoom;\n    if (padding) {\n      const [tl, tr, br, bl] = coords;\n      // what is the angle of the object?\n      // we could use getTotalAngle, but is way easier to look at it\n      // from how coords are oriented, since if something went wrong\n      // at least we are consistent.\n      const angleRadians = Math.atan2(tr.y - tl.y, tr.x - tl.x),\n        cosP = cos(angleRadians) * padding,\n        sinP = sin(angleRadians) * padding,\n        cosPSinP = cosP + sinP,\n        cosPMinusSinP = cosP - sinP;\n\n      coords = [\n        new Point(tl.x - cosPMinusSinP, tl.y - cosPSinP),\n        new Point(tr.x + cosPSinP, tr.y - cosPMinusSinP),\n        new Point(br.x + cosPMinusSinP, br.y + cosPSinP),\n        new Point(bl.x - cosPSinP, bl.y + cosPMinusSinP),\n      ];\n      // in case of padding we calculate the new coords on the fly.\n      // otherwise we have to maintain 2 sets of coordinates for everything.\n      // we can reiterate on storing them.\n      // if this is slow, for now the semplification is large and doesn't impact\n      // rendering.\n      // the idea behind this is that outside target check we don't need ot know\n      // where those coords are\n    }\n    return Intersection.isPointInPolygon(point, coords);\n  }\n\n  /**\n   * Checks point is inside the object selection condition. Either area with padding\n   * or over pixels if perPixelTargetFind is enabled\n   * @param {FabricObject} obj Object to test against\n   * @param {Object} [pointer] point from viewport.\n   * @return {Boolean} true if point is contained within an area of given object\n   * @private\n   */\n  _checkTarget(obj: FabricObject, pointer: Point): boolean {\n    if (\n      obj &&\n      obj.visible &&\n      obj.evented &&\n      this._pointIsInObjectSelectionArea(\n        obj,\n        sendPointToPlane(pointer, undefined, this.viewportTransform),\n      )\n    ) {\n      if (\n        (this.perPixelTargetFind || obj.perPixelTargetFind) &&\n        !(obj as unknown as IText).isEditing\n      ) {\n        if (!this.isTargetTransparent(obj, pointer.x, pointer.y)) {\n          return true;\n        }\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Internal Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted\n   * @param {Array} [objects] objects array to look into\n   * @param {Object} [pointer] x,y object of point coordinates we want to check.\n   * @return {FabricObject} **top most object from given `objects`** that contains pointer\n   * @private\n   */\n  _searchPossibleTargets(\n    objects: FabricObject[],\n    pointer: Point,\n  ): FabricObject | undefined {\n    // Cache all targets where their bounding box contains point.\n    let i = objects.length;\n    // Do not check for currently grouped objects, since we check the parent group itself.\n    // until we call this function specifically to search inside the activeGroup\n    while (i--) {\n      const target = objects[i];\n      if (this._checkTarget(target, pointer)) {\n        if (isCollection(target) && target.subTargetCheck) {\n          const subTarget = this._searchPossibleTargets(\n            target._objects as FabricObject[],\n            pointer,\n          );\n          subTarget && this.targets.push(subTarget);\n        }\n        return target;\n      }\n    }\n  }\n\n  /**\n   * Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted\n   * @see {@link _searchPossibleTargets}\n   * @param {FabricObject[]} [objects] objects array to look into\n   * @param {Point} [pointer] coordinates from viewport to check.\n   * @return {FabricObject} **top most object on screen** that contains pointer\n   */\n  searchPossibleTargets(\n    objects: FabricObject[],\n    pointer: Point,\n  ): FabricObject | undefined {\n    const target = this._searchPossibleTargets(objects, pointer);\n\n    // if we found something in this.targets, and the group is interactive, return the innermost subTarget\n    // that is still interactive\n    // TODO: reverify why interactive. the target should be returned always, but selected only\n    // if interactive.\n    if (\n      target &&\n      isCollection(target) &&\n      target.interactive &&\n      this.targets[0]\n    ) {\n      /** targets[0] is the innermost nested target, but it could be inside non interactive groups and so not a selection target */\n      const targets = this.targets;\n      for (let i = targets.length - 1; i > 0; i--) {\n        const t = targets[i];\n        if (!(isCollection(t) && t.interactive)) {\n          // one of the subtargets was not interactive. that is the last subtarget we can return.\n          // we can't dig more deep;\n          return t;\n        }\n      }\n      return targets[0];\n    }\n\n    return target;\n  }\n\n  /**\n   * @returns point existing in the same plane as the {@link HTMLCanvasElement},\n   * `(0, 0)` being the top left corner of the {@link HTMLCanvasElement}.\n   * This means that changes to the {@link viewportTransform} do not change the values of the point\n   * and it remains unchanged from the viewer's perspective.\n   *\n   * @example\n   * const scenePoint = sendPointToPlane(\n   *  this.getViewportPoint(e),\n   *  undefined,\n   *  canvas.viewportTransform\n   * );\n   *\n   */\n  getViewportPoint(e: TPointerEvent) {\n    if (this._pointer) {\n      return this._pointer;\n    }\n    return this.getPointer(e, true);\n  }\n\n  /**\n   * @returns point existing in the scene (the same plane as the plane {@link FabricObject#getCenterPoint} exists in).\n   * This means that changes to the {@link viewportTransform} do not change the values of the point,\n   * however, from the viewer's perspective, the point is changed.\n   *\n   * @example\n   * const viewportPoint = sendPointToPlane(\n   *  this.getScenePoint(e),\n   *  canvas.viewportTransform\n   * );\n   *\n   */\n  getScenePoint(e: TPointerEvent) {\n    if (this._absolutePointer) {\n      return this._absolutePointer;\n    }\n    return this.getPointer(e);\n  }\n\n  /**\n   * Returns pointer relative to canvas.\n   *\n   * @deprecated This method is deprecated since v6 to protect you from misuse.\n   * Use {@link getViewportPoint} or {@link getScenePoint} instead.\n   *\n   * @param {Event} e\n   * @param {Boolean} [fromViewport] whether to return the point from the viewport or in the scene\n   * @return {Point}\n   */\n  getPointer(e: TPointerEvent, fromViewport = false): Point {\n    const upperCanvasEl = this.upperCanvasEl,\n      bounds = upperCanvasEl.getBoundingClientRect();\n    let pointer = getPointer(e),\n      boundsWidth = bounds.width || 0,\n      boundsHeight = bounds.height || 0;\n\n    if (!boundsWidth || !boundsHeight) {\n      if (TOP in bounds && BOTTOM in bounds) {\n        boundsHeight = Math.abs(bounds.top - bounds.bottom);\n      }\n      if (RIGHT in bounds && LEFT in bounds) {\n        boundsWidth = Math.abs(bounds.right - bounds.left);\n      }\n    }\n\n    this.calcOffset();\n    pointer.x = pointer.x - this._offset.left;\n    pointer.y = pointer.y - this._offset.top;\n    if (!fromViewport) {\n      pointer = sendPointToPlane(pointer, undefined, this.viewportTransform);\n    }\n\n    const retinaScaling = this.getRetinaScaling();\n    if (retinaScaling !== 1) {\n      pointer.x /= retinaScaling;\n      pointer.y /= retinaScaling;\n    }\n\n    // If bounds are not available (i.e. not visible), do not apply scale.\n    const cssScale =\n      boundsWidth === 0 || boundsHeight === 0\n        ? new Point(1, 1)\n        : new Point(\n            upperCanvasEl.width / boundsWidth,\n            upperCanvasEl.height / boundsHeight,\n          );\n\n    return pointer.multiply(cssScale);\n  }\n\n  /**\n   * Internal use only\n   * @protected\n   */\n  protected _setDimensionsImpl(\n    dimensions: TSize,\n    options?: TCanvasSizeOptions,\n  ) {\n    // @ts-expect-error this method exists in the subclass - should be moved or declared as abstract\n    this._resetTransformEventData();\n    super._setDimensionsImpl(dimensions, options);\n    if (this._isCurrentlyDrawing) {\n      this.freeDrawingBrush &&\n        this.freeDrawingBrush._setBrushStyles(this.contextTop);\n    }\n  }\n\n  protected _createCacheCanvas() {\n    this.pixelFindCanvasEl = createCanvasElement();\n    this.pixelFindContext = this.pixelFindCanvasEl.getContext('2d', {\n      willReadFrequently: true,\n    })!;\n    this.setTargetFindTolerance(this.targetFindTolerance);\n  }\n\n  /**\n   * Returns context of top canvas where interactions are drawn\n   * @returns {CanvasRenderingContext2D}\n   */\n  getTopContext(): CanvasRenderingContext2D {\n    return this.elements.upper.ctx;\n  }\n\n  /**\n   * Returns context of canvas where object selection is drawn\n   * @alias\n   * @return {CanvasRenderingContext2D}\n   */\n  getSelectionContext(): CanvasRenderingContext2D {\n    return this.elements.upper.ctx;\n  }\n\n  /**\n   * Returns &lt;canvas> element on which object selection is drawn\n   * @return {HTMLCanvasElement}\n   */\n  getSelectionElement(): HTMLCanvasElement {\n    return this.elements.upper.el;\n  }\n\n  /**\n   * Returns currently active object\n   * @return {FabricObject | null} active object\n   */\n  getActiveObject(): FabricObject | undefined {\n    return this._activeObject;\n  }\n\n  /**\n   * Returns an array with the current selected objects\n   * @return {FabricObject[]} active objects array\n   */\n  getActiveObjects(): FabricObject[] {\n    const active = this._activeObject;\n    return isActiveSelection(active)\n      ? active.getObjects()\n      : active\n        ? [active]\n        : [];\n  }\n\n  /**\n   * @private\n   * Compares the old activeObject with the current one and fires correct events\n   * @param {FabricObject[]} oldObjects old activeObject\n   * @param {TPointerEvent} e mouse event triggering the selection events\n   */\n  _fireSelectionEvents(oldObjects: FabricObject[], e?: TPointerEvent) {\n    let somethingChanged = false,\n      invalidate = false;\n    const objects = this.getActiveObjects(),\n      added: FabricObject[] = [],\n      removed: FabricObject[] = [];\n\n    oldObjects.forEach((target) => {\n      if (!objects.includes(target)) {\n        somethingChanged = true;\n        target.fire('deselected', {\n          e,\n          target,\n        });\n        removed.push(target);\n      }\n    });\n\n    objects.forEach((target) => {\n      if (!oldObjects.includes(target)) {\n        somethingChanged = true;\n        target.fire('selected', {\n          e,\n          target,\n        });\n        added.push(target);\n      }\n    });\n\n    if (oldObjects.length > 0 && objects.length > 0) {\n      invalidate = true;\n      somethingChanged &&\n        this.fire('selection:updated', {\n          e,\n          selected: added,\n          deselected: removed,\n        });\n    } else if (objects.length > 0) {\n      invalidate = true;\n      this.fire('selection:created', {\n        e,\n        selected: added,\n      });\n    } else if (oldObjects.length > 0) {\n      invalidate = true;\n      this.fire('selection:cleared', {\n        e,\n        deselected: removed,\n      });\n    }\n    invalidate && (this._objectsToRender = undefined);\n  }\n\n  /**\n   * Sets given object as the only active object on canvas\n   * @param {FabricObject} object Object to set as an active one\n   * @param {TPointerEvent} [e] Event (passed along when firing \"object:selected\")\n   * @return {Boolean} true if the object has been selected\n   */\n  setActiveObject(object: FabricObject, e?: TPointerEvent) {\n    // we can't inline this, since _setActiveObject will change what getActiveObjects returns\n    const currentActives = this.getActiveObjects();\n    const selected = this._setActiveObject(object, e);\n    this._fireSelectionEvents(currentActives, e);\n    return selected;\n  }\n\n  /**\n   * This is supposed to be equivalent to setActiveObject but without firing\n   * any event. There is commitment to have this stay this way.\n   * This is the functional part of setActiveObject.\n   * @param {Object} object to set as active\n   * @param {Event} [e] Event (passed along when firing \"object:selected\")\n   * @return {Boolean} true if the object has been selected\n   */\n  _setActiveObject(object: FabricObject, e?: TPointerEvent) {\n    const prevActiveObject = this._activeObject;\n    if (prevActiveObject === object) {\n      return false;\n    }\n    // after calling this._discardActiveObject, this,_activeObject could be undefined\n    if (!this._discardActiveObject(e, object) && this._activeObject) {\n      // refused to deselect\n      return false;\n    }\n    if (object.onSelect({ e })) {\n      return false;\n    }\n\n    this._activeObject = object;\n\n    if (isActiveSelection(object) && prevActiveObject !== object) {\n      object.set('canvas', this);\n    }\n    object.setCoords();\n\n    return true;\n  }\n\n  /**\n   * This is supposed to be equivalent to discardActiveObject but without firing\n   * any selection events ( can still fire object transformation events ). There is commitment to have this stay this way.\n   * This is the functional part of discardActiveObject.\n   * @param {Event} [e] Event (passed along when firing \"object:deselected\")\n   * @param {Object} object the next object to set as active, reason why we are discarding this\n   * @return {Boolean} true if the active object has been discarded\n   */\n  _discardActiveObject(\n    e?: TPointerEvent,\n    object?: FabricObject,\n  ): this is { _activeObject: undefined } {\n    const obj = this._activeObject;\n    if (obj) {\n      // onDeselect return TRUE to cancel selection;\n      if (obj.onDeselect({ e, object })) {\n        return false;\n      }\n      if (this._currentTransform && this._currentTransform.target === obj) {\n        this.endCurrentTransform(e);\n      }\n      if (isActiveSelection(obj) && obj === this._hoveredTarget) {\n        this._hoveredTarget = undefined;\n      }\n      this._activeObject = undefined;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Discards currently active object and fire events. If the function is called by fabric\n   * as a consequence of a mouse event, the event is passed as a parameter and\n   * sent to the fire function for the custom events. When used as a method the\n   * e param does not have any application.\n   * @param {event} e\n   * @return {Boolean} true if the active object has been discarded\n   */\n  discardActiveObject(e?: TPointerEvent): this is { _activeObject: undefined } {\n    const currentActives = this.getActiveObjects(),\n      activeObject = this.getActiveObject();\n    if (currentActives.length) {\n      this.fire('before:selection:cleared', {\n        e,\n        deselected: [activeObject!],\n      });\n    }\n    const discarded = this._discardActiveObject(e);\n    this._fireSelectionEvents(currentActives, e);\n    return discarded;\n  }\n\n  /**\n   * End the current transform.\n   * You don't usually need to call this method unless you are interrupting a user initiated transform\n   * because of some other event ( a press of key combination, or something that block the user UX )\n   * @param {Event} [e] send the mouse event that generate the finalize down, so it can be used in the event\n   */\n  endCurrentTransform(e?: TPointerEvent) {\n    const transform = this._currentTransform;\n    this._finalizeCurrentTransform(e);\n    if (transform && transform.target) {\n      // this could probably go inside _finalizeCurrentTransform\n      transform.target.isMoving = false;\n    }\n    this._currentTransform = null;\n  }\n\n  /**\n   * @private\n   * @param {Event} e send the mouse event that generate the finalize down, so it can be used in the event\n   */\n  _finalizeCurrentTransform(e?: TPointerEvent) {\n    const transform = this._currentTransform!,\n      target = transform.target,\n      options = {\n        e,\n        target,\n        transform,\n        action: transform.action,\n      };\n\n    if (target._scaling) {\n      target._scaling = false;\n    }\n\n    target.setCoords();\n\n    if (transform.actionPerformed) {\n      this.fire('object:modified', options);\n      target.fire(MODIFIED, options);\n    }\n  }\n\n  /**\n   * Sets viewport transformation of this canvas instance\n   * @param {Array} vpt a Canvas 2D API transform matrix\n   */\n  setViewportTransform(vpt: TMat2D) {\n    super.setViewportTransform(vpt);\n    const activeObject = this._activeObject;\n    if (activeObject) {\n      activeObject.setCoords();\n    }\n  }\n\n  /**\n   * @override clears active selection ref and interactive canvas elements and contexts\n   */\n  destroy() {\n    // dispose of active selection\n    const activeObject = this._activeObject;\n    if (isActiveSelection(activeObject)) {\n      activeObject.removeAll();\n      activeObject.dispose();\n    }\n\n    delete this._activeObject;\n\n    super.destroy();\n\n    // free resources\n\n    // pixel find canvas\n    // @ts-expect-error disposing\n    this.pixelFindContext = null;\n    // @ts-expect-error disposing\n    this.pixelFindCanvasEl = undefined;\n  }\n\n  /**\n   * Clears all contexts (background, main, top) of an instance\n   */\n  clear() {\n    // discard active object and fire events\n    this.discardActiveObject();\n    // make sure we clear the active object in case it refused to be discarded\n    this._activeObject = undefined;\n    this.clearContext(this.contextTop);\n    super.clear();\n  }\n\n  /**\n   * Draws objects' controls (borders/controls)\n   * @param {CanvasRenderingContext2D} ctx Context to render controls on\n   */\n  drawControls(ctx: CanvasRenderingContext2D) {\n    const activeObject = this._activeObject;\n\n    if (activeObject) {\n      activeObject._renderControls(ctx);\n    }\n  }\n\n  /**\n   * @private\n   */\n  protected _toObject(\n    instance: FabricObject,\n    methodName: 'toObject' | 'toDatalessObject',\n    propertiesToInclude: string[],\n  ): Record<string, any> {\n    // If the object is part of the current selection group, it should\n    // be transformed appropriately\n    // i.e. it should be serialised as it would appear if the selection group\n    // were to be destroyed.\n    const originalProperties = this._realizeGroupTransformOnObject(instance),\n      object = super._toObject(instance, methodName, propertiesToInclude);\n    //Undo the damage we did by changing all of its properties\n    instance.set(originalProperties);\n    return object;\n  }\n\n  /**\n   * Realizes an object's group transformation on it\n   * @private\n   * @param {FabricObject} [instance] the object to transform (gets mutated)\n   * @returns the original values of instance which were changed\n   */\n  private _realizeGroupTransformOnObject(\n    instance: FabricObject,\n  ): Partial<typeof instance> {\n    const { group } = instance;\n    if (group && isActiveSelection(group) && this._activeObject === group) {\n      const layoutProps = [\n        'angle',\n        'flipX',\n        'flipY',\n        LEFT,\n        SCALE_X,\n        SCALE_Y,\n        SKEW_X,\n        SKEW_Y,\n        TOP,\n      ] as (keyof typeof instance)[];\n      const originalValues = pick<typeof instance>(instance, layoutProps);\n      addTransformToObject(instance, group.calcOwnMatrix());\n      return originalValues;\n    } else {\n      return {};\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setSVGObject(\n    markup: string[],\n    instance: FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    // If the object is in a selection group, simulate what would happen to that\n    // object when the group is deselected\n    const originalProperties = this._realizeGroupTransformOnObject(instance);\n    super._setSVGObject(markup, instance, reviver);\n    instance.set(originalProperties);\n  }\n}\n","import type { ModifierKey, TOptionalModifierKey } from '../EventTypeDefs';\nimport type { TOptions } from '../typedefs';\nimport type { StaticCanvasOptions } from './StaticCanvasOptions';\n\nexport interface CanvasTransformOptions {\n  /**\n   * When true, objects can be transformed by one side (unproportionately)\n   * when dragged on the corners that normally would not do that.\n   * @type Boolean\n   * @default\n   * @since fabric 4.0 // changed name and default value\n   */\n  uniformScaling: boolean;\n\n  /**\n   * Indicates which key switches uniform scaling.\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled.\n   * totally wrong named. this sounds like `uniform scaling`\n   * if Canvas.uniformScaling is true, pressing this will set it to false\n   * and viceversa.\n   * @since 1.6.2\n   * @type ModifierKey\n   * @default\n   */\n  uniScaleKey: TOptionalModifierKey;\n\n  /**\n   * When true, objects use center point as the origin of scale transformation.\n   * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n   * @since 1.3.4\n   * @type Boolean\n   * @default\n   */\n  centeredScaling: boolean;\n\n  /**\n   * When true, objects use center point as the origin of rotate transformation.\n   * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n   * @since 1.3.4\n   * @type Boolean\n   * @default\n   */\n  centeredRotation: boolean;\n\n  /**\n   * Indicates which key enable centered Transform\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled feature disabled.\n   * @since 1.6.2\n   * @type ModifierKey\n   * @default\n   */\n  centeredKey: TOptionalModifierKey;\n\n  /**\n   * Indicates which key enable alternate action on corner\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled feature disabled.\n   * @since 1.6.2\n   * @type ModifierKey\n   * @default\n   */\n  altActionKey: TOptionalModifierKey;\n}\n\nexport interface CanvasSelectionOptions {\n  /**\n   * Indicates whether group selection should be enabled\n   * @type Boolean\n   * @default\n   */\n  selection: boolean;\n\n  /**\n   * Indicates which key or keys enable multiple click selection\n   * Pass value as a string or array of strings\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or empty or containing any other string that is not a modifier key\n   * feature is disabled.\n   * @since 1.6.2\n   * @type ModifierKey|ModifierKey[]\n   * @default\n   */\n  selectionKey: TOptionalModifierKey | ModifierKey[];\n\n  /**\n   * Indicates which key enable alternative selection\n   * in case of target overlapping with active object\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * For a series of reason that come from the general expectations on how\n   * things should work, this feature works only for preserveObjectStacking true.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled.\n   * @since 1.6.5\n   * @type null|ModifierKey\n   * @default\n   */\n  altSelectionKey: TOptionalModifierKey;\n\n  /**\n   * Color of selection\n   * @type String\n   * @default\n   */\n  selectionColor: string;\n\n  /**\n   * Default dash array pattern\n   * If not empty the selection border is dashed\n   * @type Array\n   */\n  selectionDashArray: number[];\n\n  /**\n   * Color of the border of selection (usually slightly darker than color of selection itself)\n   * @type String\n   * @default\n   */\n  selectionBorderColor: string;\n\n  /**\n   * Width of a line used in object/group selection\n   * @type Number\n   * @default\n   */\n  selectionLineWidth: number;\n\n  /**\n   * Select only shapes that are fully contained in the dragged selection rectangle.\n   * @type Boolean\n   * @default\n   */\n  selectionFullyContained: boolean;\n}\n\nexport interface CanvasCursorOptions {\n  /**\n   * Default cursor value used when hovering over an object on canvas\n   * @type CSSStyleDeclaration['cursor']\n   * @default move\n   */\n  hoverCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Default cursor value used when moving an object on canvas\n   * @type CSSStyleDeclaration['cursor']\n   * @default move\n   */\n  moveCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Default cursor value used for the entire canvas\n   * @type String\n   * @default default\n   */\n  defaultCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Cursor value used during free drawing\n   * @type String\n   * @default crosshair\n   */\n  freeDrawingCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Cursor value used for disabled elements ( corners with disabled action )\n   * @type String\n   * @since 2.0.0\n   * @default not-allowed\n   */\n  notAllowedCursor: CSSStyleDeclaration['cursor'];\n}\n\nexport interface TargetFindOptions {\n  /**\n   * When true, object detection happens on per-pixel basis rather than on per-bounding-box\n   * @type Boolean\n   * @default\n   */\n  perPixelTargetFind: boolean;\n\n  /**\n   * Number of pixels around target pixel to tolerate (consider active) during object detection\n   * @type Number\n   * @default\n   */\n  targetFindTolerance: number;\n\n  /**\n   * When true, target detection is skipped. Target detection will return always undefined.\n   * click selection won't work anymore, events will fire with no targets.\n   * if something is selected before setting it to true, it will be deselected at the first click.\n   * area selection will still work. check the `selection` property too.\n   * if you deactivate both, you should look into staticCanvas.\n   * @type Boolean\n   * @default\n   */\n  skipTargetFind: boolean;\n}\n\nexport interface CanvasEventsOptions {\n  /**\n   * Indicates if the right click on canvas can output the context menu or not\n   * @type Boolean\n   * @since 1.6.5\n   * @default\n   */\n  stopContextMenu: boolean;\n\n  /**\n   * Indicates if the canvas can fire right click events\n   * @type Boolean\n   * @since 1.6.5\n   * @default\n   */\n  fireRightClick: boolean;\n\n  /**\n   * Indicates if the canvas can fire middle click events\n   * @type Boolean\n   * @since 1.7.8\n   * @default\n   */\n  fireMiddleClick: boolean;\n\n  /**\n   * When the option is enabled, PointerEvent is used instead of TPointerEvent.\n   * @type Boolean\n   * @default\n   */\n  enablePointerEvents: boolean;\n}\n\nexport interface CanvasOptions\n  extends StaticCanvasOptions,\n    CanvasTransformOptions,\n    CanvasSelectionOptions,\n    CanvasCursorOptions,\n    TargetFindOptions,\n    CanvasEventsOptions {\n  /**\n   * Default element class that's given to wrapper (div) element of canvas\n   * @type String\n   * @default\n   * @deprecated customize {@link CanvasDOMManager} instead or access {@link elements} directly\n   */\n  containerClass: string;\n\n  /**\n   * Indicates whether objects should remain in current stack position when selected.\n   * When false objects are brought to top and rendered as part of the selection group\n   * @type Boolean\n   * @default\n   */\n  preserveObjectStacking: boolean;\n}\n\nexport type TCanvasOptions = TOptions<CanvasOptions>;\n\nexport const canvasDefaults: TOptions<CanvasOptions> = {\n  uniformScaling: true,\n  uniScaleKey: 'shiftKey',\n  centeredScaling: false,\n  centeredRotation: false,\n  centeredKey: 'altKey',\n  altActionKey: 'shiftKey',\n\n  selection: true,\n  selectionKey: 'shiftKey',\n  selectionColor: 'rgba(100, 100, 255, 0.3)',\n  selectionDashArray: [],\n  selectionBorderColor: 'rgba(255, 255, 255, 0.3)',\n  selectionLineWidth: 1,\n  selectionFullyContained: false,\n\n  hoverCursor: 'move',\n  moveCursor: 'move',\n  defaultCursor: 'default',\n  freeDrawingCursor: 'crosshair',\n  notAllowedCursor: 'not-allowed',\n\n  perPixelTargetFind: false,\n  targetFindTolerance: 0,\n  skipTargetFind: false,\n\n  stopContextMenu: false,\n  fireRightClick: false,\n  fireMiddleClick: false,\n  enablePointerEvents: false,\n\n  containerClass: 'canvas-container',\n\n  preserveObjectStacking: false,\n};\n","import type { TPointerEvent } from '../EventTypeDefs';\nimport type { ITextBehavior } from '../shapes/IText/ITextBehavior';\nimport { removeFromArray } from '../util/internals/removeFromArray';\nimport type { Canvas } from './Canvas';\n\n/**\n * In charge of synchronizing all interactive text instances of a canvas\n */\nexport class TextEditingManager {\n  private targets: ITextBehavior[] = [];\n  private declare target?: ITextBehavior;\n  private __disposer: VoidFunction;\n\n  constructor(canvas: Canvas) {\n    const cb = () => {\n      const { hiddenTextarea } =\n        (canvas.getActiveObject() as ITextBehavior) || {};\n      hiddenTextarea && hiddenTextarea.focus();\n    };\n    const el = canvas.upperCanvasEl;\n    el.addEventListener('click', cb);\n    this.__disposer = () => el.removeEventListener('click', cb);\n  }\n\n  exitTextEditing() {\n    this.target = undefined;\n    this.targets.forEach((target) => {\n      if (target.isEditing) {\n        target.exitEditing();\n      }\n    });\n  }\n\n  add(target: ITextBehavior) {\n    this.targets.push(target);\n  }\n\n  remove(target: ITextBehavior) {\n    this.unregister(target);\n    removeFromArray(this.targets, target);\n  }\n\n  register(target: ITextBehavior) {\n    this.target = target;\n  }\n\n  unregister(target: ITextBehavior) {\n    if (target === this.target) {\n      this.target = undefined;\n    }\n  }\n\n  onMouseMove(e: TPointerEvent) {\n    this.target?.isEditing && this.target.updateSelectionOnMouseMove(e);\n  }\n\n  clear() {\n    this.targets = [];\n    this.target = undefined;\n  }\n\n  dispose() {\n    this.clear();\n    this.__disposer();\n    // @ts-expect-error disposing\n    delete this.__disposer;\n  }\n}\n","import { classRegistry } from '../ClassRegistry';\nimport { NONE } from '../constants';\nimport type {\n  CanvasEvents,\n  DragEventData,\n  ObjectEvents,\n  TPointerEvent,\n  TPointerEventNames,\n  Transform,\n} from '../EventTypeDefs';\nimport { Point } from '../Point';\nimport type { ActiveSelection } from '../shapes/ActiveSelection';\nimport type { Group } from '../shapes/Group';\nimport type { IText } from '../shapes/IText/IText';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport { isTouchEvent, stopEvent } from '../util/dom_event';\nimport { getDocumentFromElement, getWindowFromElement } from '../util/dom_misc';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport { isActiveSelection } from '../util/typeAssertions';\nimport type { CanvasOptions, TCanvasOptions } from './CanvasOptions';\nimport { SelectableCanvas } from './SelectableCanvas';\nimport { TextEditingManager } from './TextEditingManager';\n\nconst addEventOptions = { passive: false } as EventListenerOptions;\n\nconst getEventPoints = (canvas: Canvas, e: TPointerEvent) => {\n  const viewportPoint = canvas.getViewportPoint(e);\n  const scenePoint = canvas.getScenePoint(e);\n  return {\n    viewportPoint,\n    scenePoint,\n    pointer: viewportPoint,\n    absolutePointer: scenePoint,\n  };\n};\n\n// just to be clear, the utils are now deprecated and those are here exactly as minifier helpers\n// because el.addEventListener can't me be minified while a const yes and we use it 47 times in this file.\n// few bytes but why give it away.\nconst addListener = (\n  el: HTMLElement | Document,\n  ...args: Parameters<HTMLElement['addEventListener']>\n) => el.addEventListener(...args);\nconst removeListener = (\n  el: HTMLElement | Document,\n  ...args: Parameters<HTMLElement['removeEventListener']>\n) => el.removeEventListener(...args);\n\nconst syntheticEventConfig = {\n  mouse: {\n    in: 'over',\n    out: 'out',\n    targetIn: 'mouseover',\n    targetOut: 'mouseout',\n    canvasIn: 'mouse:over',\n    canvasOut: 'mouse:out',\n  },\n  drag: {\n    in: 'enter',\n    out: 'leave',\n    targetIn: 'dragenter',\n    targetOut: 'dragleave',\n    canvasIn: 'drag:enter',\n    canvasOut: 'drag:leave',\n  },\n} as const;\n\ntype TSyntheticEventContext = {\n  mouse: { e: TPointerEvent };\n  drag: DragEventData;\n};\n\nexport class Canvas extends SelectableCanvas implements CanvasOptions {\n  /**\n   * Contains the id of the touch event that owns the fabric transform\n   * @type Number\n   * @private\n   */\n  declare mainTouchId?: number;\n\n  declare enablePointerEvents: boolean;\n\n  /**\n   * Holds a reference to a setTimeout timer for event synchronization\n   * @type number\n   * @private\n   */\n  private declare _willAddMouseDown: number;\n\n  /**\n   * Holds a reference to an object on the canvas that is receiving the drag over event.\n   * @type FabricObject\n   * @private\n   */\n  private declare _draggedoverTarget?: FabricObject;\n\n  /**\n   * Holds a reference to an object on the canvas from where the drag operation started\n   * @type FabricObject\n   * @private\n   */\n  private declare _dragSource?: FabricObject;\n\n  /**\n   * Holds a reference to an object on the canvas that is the current drop target\n   * May differ from {@link _draggedoverTarget}\n   * @todo inspect whether {@link _draggedoverTarget} and {@link _dropTarget} should be merged somehow\n   * @type FabricObject\n   * @private\n   */\n  private declare _dropTarget: FabricObject<ObjectEvents> | undefined;\n\n  private _isClick: boolean;\n\n  textEditingManager = new TextEditingManager(this);\n\n  constructor(el?: string | HTMLCanvasElement, options: TCanvasOptions = {}) {\n    super(el, options);\n    // bind event handlers\n    (\n      [\n        '_onMouseDown',\n        '_onTouchStart',\n        '_onMouseMove',\n        '_onMouseUp',\n        '_onTouchEnd',\n        '_onResize',\n        // '_onGesture',\n        // '_onDrag',\n        // '_onShake',\n        // '_onLongPress',\n        // '_onOrientationChange',\n        '_onMouseWheel',\n        '_onMouseOut',\n        '_onMouseEnter',\n        '_onContextMenu',\n        '_onDoubleClick',\n        '_onDragStart',\n        '_onDragEnd',\n        '_onDragProgress',\n        '_onDragOver',\n        '_onDragEnter',\n        '_onDragLeave',\n        '_onDrop',\n      ] as (keyof this)[]\n    ).forEach((eventHandler) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n      this[eventHandler] = (this[eventHandler] as Function).bind(this);\n    });\n    // register event handlers\n    this.addOrRemove(addListener, 'add');\n  }\n\n  /**\n   * return an event prefix pointer or mouse.\n   * @private\n   */\n  private _getEventPrefix() {\n    return this.enablePointerEvents ? 'pointer' : 'mouse';\n  }\n\n  addOrRemove(functor: any, _eventjsFunctor: 'add' | 'remove') {\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    functor(getWindowFromElement(canvasElement), 'resize', this._onResize);\n    functor(canvasElement, eventTypePrefix + 'down', this._onMouseDown);\n    functor(\n      canvasElement,\n      `${eventTypePrefix}move`,\n      this._onMouseMove,\n      addEventOptions,\n    );\n    functor(canvasElement, `${eventTypePrefix}out`, this._onMouseOut);\n    functor(canvasElement, `${eventTypePrefix}enter`, this._onMouseEnter);\n    functor(canvasElement, 'wheel', this._onMouseWheel);\n    functor(canvasElement, 'contextmenu', this._onContextMenu);\n    functor(canvasElement, 'dblclick', this._onDoubleClick);\n    functor(canvasElement, 'dragstart', this._onDragStart);\n    functor(canvasElement, 'dragend', this._onDragEnd);\n    functor(canvasElement, 'dragover', this._onDragOver);\n    functor(canvasElement, 'dragenter', this._onDragEnter);\n    functor(canvasElement, 'dragleave', this._onDragLeave);\n    functor(canvasElement, 'drop', this._onDrop);\n    if (!this.enablePointerEvents) {\n      functor(canvasElement, 'touchstart', this._onTouchStart, addEventOptions);\n    }\n    // if (typeof eventjs !== 'undefined' && eventjsFunctor in eventjs) {\n    //   eventjs[eventjsFunctor](canvasElement, 'gesture', this._onGesture);\n    //   eventjs[eventjsFunctor](canvasElement, 'drag', this._onDrag);\n    //   eventjs[eventjsFunctor](\n    //     canvasElement,\n    //     'orientation',\n    //     this._onOrientationChange\n    //   );\n    //   eventjs[eventjsFunctor](canvasElement, 'shake', this._onShake);\n    //   eventjs[eventjsFunctor](canvasElement, 'longpress', this._onLongPress);\n    // }\n  }\n\n  /**\n   * Removes all event listeners, used when disposing the instance\n   */\n  removeListeners() {\n    this.addOrRemove(removeListener, 'remove');\n    // if you dispose on a mouseDown, before mouse up, you need to clean document to...\n    const eventTypePrefix = this._getEventPrefix();\n    const doc = getDocumentFromElement(this.upperCanvasEl);\n    removeListener(\n      doc,\n      `${eventTypePrefix}up`,\n      this._onMouseUp as EventListener,\n    );\n    removeListener(\n      doc,\n      'touchend',\n      this._onTouchEnd as EventListener,\n      addEventOptions,\n    );\n    removeListener(\n      doc,\n      `${eventTypePrefix}move`,\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    removeListener(\n      doc,\n      'touchmove',\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    clearTimeout(this._willAddMouseDown);\n  }\n\n  /**\n   * @private\n   * @param {Event} [e] Event object fired on wheel event\n   */\n  private _onMouseWheel(e: MouseEvent) {\n    this.__onMouseWheel(e);\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  private _onMouseOut(e: TPointerEvent) {\n    const target = this._hoveredTarget;\n    const shared = {\n      e,\n      ...getEventPoints(this, e),\n    };\n    this.fire('mouse:out', { ...shared, target });\n    this._hoveredTarget = undefined;\n    target && target.fire('mouseout', { ...shared });\n    this._hoveredTargets.forEach((nestedTarget) => {\n      this.fire('mouse:out', { ...shared, target: nestedTarget });\n      nestedTarget && nestedTarget.fire('mouseout', { ...shared });\n    });\n    this._hoveredTargets = [];\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mouseenter\n   */\n  private _onMouseEnter(e: TPointerEvent) {\n    // This find target and consequent 'mouse:over' is used to\n    // clear old instances on hovered target.\n    // calling findTarget has the side effect of killing target.__corner.\n    // as a short term fix we are not firing this if we are currently transforming.\n    // as a long term fix we need to separate the action of finding a target with the\n    // side effects we added to it.\n    if (!this._currentTransform && !this.findTarget(e)) {\n      this.fire('mouse:over', {\n        e,\n        ...getEventPoints(this, e),\n      });\n      this._hoveredTarget = undefined;\n      this._hoveredTargets = [];\n    }\n  }\n\n  /**\n   * supports native like text dragging\n   * @private\n   * @param {DragEvent} e\n   */\n  private _onDragStart(e: DragEvent) {\n    this._isClick = false;\n    const activeObject = this.getActiveObject();\n    if (activeObject && activeObject.onDragStart(e)) {\n      this._dragSource = activeObject;\n      const options = { e, target: activeObject };\n      this.fire('dragstart', options);\n      activeObject.fire('dragstart', options);\n      addListener(\n        this.upperCanvasEl,\n        'drag',\n        this._onDragProgress as EventListener,\n      );\n      return;\n    }\n    stopEvent(e);\n  }\n\n  /**\n   * First we clear top context where the effects are being rendered.\n   * Then we render the effects.\n   * Doing so will render the correct effect for all cases including an overlap between `source` and `target`.\n   * @private\n   */\n  private _renderDragEffects(\n    e: DragEvent,\n    source?: FabricObject,\n    target?: FabricObject,\n  ) {\n    let dirty = false;\n    // clear top context\n    const dropTarget = this._dropTarget;\n    if (dropTarget && dropTarget !== source && dropTarget !== target) {\n      dropTarget.clearContextTop();\n      dirty = true;\n    }\n    source?.clearContextTop();\n    target !== source && target?.clearContextTop();\n    // render effects\n    const ctx = this.contextTop;\n    ctx.save();\n    ctx.transform(...this.viewportTransform);\n    if (source) {\n      ctx.save();\n      source.transform(ctx);\n      source.renderDragSourceEffect(e);\n      ctx.restore();\n      dirty = true;\n    }\n    if (target) {\n      ctx.save();\n      target.transform(ctx);\n      target.renderDropTargetEffect(e);\n      ctx.restore();\n      dirty = true;\n    }\n    ctx.restore();\n    dirty && (this.contextTopDirty = true);\n  }\n\n  /**\n   * supports native like text dragging\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#finishing_a_drag\n   * @private\n   * @param {DragEvent} e\n   */\n  private _onDragEnd(e: DragEvent) {\n    const didDrop = !!e.dataTransfer && e.dataTransfer.dropEffect !== NONE,\n      dropTarget = didDrop ? this._activeObject : undefined,\n      options = {\n        e,\n        target: this._dragSource as FabricObject,\n        subTargets: this.targets,\n        dragSource: this._dragSource as FabricObject,\n        didDrop,\n        dropTarget: dropTarget as FabricObject,\n      };\n    removeListener(\n      this.upperCanvasEl,\n      'drag',\n      this._onDragProgress as EventListener,\n    );\n    this.fire('dragend', options);\n    this._dragSource && this._dragSource.fire('dragend', options);\n    delete this._dragSource;\n    // we need to call mouse up synthetically because the browser won't\n    this._onMouseUp(e);\n  }\n\n  /**\n   * fire `drag` event on canvas and drag source\n   * @private\n   * @param {DragEvent} e\n   */\n  private _onDragProgress(e: DragEvent) {\n    const options = {\n      e,\n      target: this._dragSource as FabricObject | undefined,\n      dragSource: this._dragSource as FabricObject | undefined,\n      dropTarget: this._draggedoverTarget as FabricObject,\n    };\n    this.fire('drag', options);\n    this._dragSource && this._dragSource.fire('drag', options);\n  }\n\n  /**\n   * As opposed to {@link findTarget} we want the top most object to be returned w/o the active object cutting in line.\n   * Override at will\n   */\n  protected findDragTargets(e: DragEvent) {\n    this.targets = [];\n    const target = this._searchPossibleTargets(\n      this._objects,\n      this.getViewportPoint(e),\n    );\n    return {\n      target,\n      targets: [...this.targets],\n    };\n  }\n\n  /**\n   * prevent default to allow drop event to be fired\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#specifying_drop_targets\n   * @private\n   * @param {DragEvent} [e] Event object fired on Event.js shake\n   */\n  private _onDragOver(e: DragEvent) {\n    const eventType = 'dragover';\n    const { target, targets } = this.findDragTargets(e);\n    const dragSource = this._dragSource as FabricObject;\n    const options = {\n      e,\n      target,\n      subTargets: targets,\n      dragSource,\n      canDrop: false,\n      dropTarget: undefined,\n    };\n    let dropTarget;\n    //  fire on canvas\n    this.fire(eventType, options);\n    //  make sure we fire dragenter events before dragover\n    //  if dragleave is needed, object will not fire dragover so we don't need to trouble ourselves with it\n    this._fireEnterLeaveEvents(target, options);\n    if (target) {\n      if (target.canDrop(e)) {\n        dropTarget = target;\n      }\n      target.fire(eventType, options);\n    }\n    //  propagate the event to subtargets\n    for (let i = 0; i < targets.length; i++) {\n      const subTarget = targets[i];\n      // accept event only if previous targets didn't (the accepting target calls `preventDefault` to inform that the event is taken)\n      // TODO: verify if those should loop in inverse order then?\n      // what is the order of subtargets?\n      if (subTarget.canDrop(e)) {\n        dropTarget = subTarget;\n      }\n      subTarget.fire(eventType, options);\n    }\n    //  render drag effects now that relations between source and target is clear\n    this._renderDragEffects(e, dragSource, dropTarget);\n    this._dropTarget = dropTarget;\n  }\n\n  /**\n   * fire `dragleave` on `dragover` targets\n   * @private\n   * @param {Event} [e] Event object fired on Event.js shake\n   */\n  private _onDragEnter(e: DragEvent) {\n    const { target, targets } = this.findDragTargets(e);\n    const options = {\n      e,\n      target,\n      subTargets: targets,\n      dragSource: this._dragSource,\n    };\n    this.fire('dragenter', options);\n    //  fire dragenter on targets\n    this._fireEnterLeaveEvents(target, options);\n  }\n\n  /**\n   * fire `dragleave` on `dragover` targets\n   * @private\n   * @param {Event} [e] Event object fired on Event.js shake\n   */\n  private _onDragLeave(e: DragEvent) {\n    const options = {\n      e,\n      target: this._draggedoverTarget,\n      subTargets: this.targets,\n      dragSource: this._dragSource,\n    };\n    this.fire('dragleave', options);\n\n    //  fire dragleave on targets\n    this._fireEnterLeaveEvents(undefined, options);\n    this._renderDragEffects(e, this._dragSource);\n    this._dropTarget = undefined;\n    //  clear targets\n    this.targets = [];\n    this._hoveredTargets = [];\n  }\n\n  /**\n   * `drop:before` is a an event that allows you to schedule logic\n   * before the `drop` event. Prefer `drop` event always, but if you need\n   * to run some drop-disabling logic on an event, since there is no way\n   * to handle event handlers ordering, use `drop:before`\n   * @private\n   * @param {Event} e\n   */\n  private _onDrop(e: DragEvent) {\n    const { target, targets } = this.findDragTargets(e);\n    const options = this._basicEventHandler('drop:before', {\n      e,\n      target,\n      subTargets: targets,\n      dragSource: this._dragSource,\n      ...getEventPoints(this, e),\n    });\n    //  will be set by the drop target\n    options.didDrop = false;\n    //  will be set by the drop target, used in case options.target refuses the drop\n    options.dropTarget = undefined;\n    //  fire `drop`\n    this._basicEventHandler('drop', options);\n    //  inform canvas of the drop\n    //  we do this because canvas was unaware of what happened at the time the `drop` event was fired on it\n    //  use for side effects\n    this.fire('drop:after', options);\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  private _onContextMenu(e: TPointerEvent): false {\n    const target = this.findTarget(e),\n      subTargets = this.targets || [];\n    const options = this._basicEventHandler('contextmenu:before', {\n      e,\n      target,\n      subTargets,\n    });\n    // TODO: this line is silly because the dev can subscribe to the event and prevent it themselves\n    this.stopContextMenu && stopEvent(e);\n    this._basicEventHandler('contextmenu', options);\n    return false;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  private _onDoubleClick(e: TPointerEvent) {\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'dblclick');\n    this._resetTransformEventData();\n  }\n\n  /**\n   * Return a the id of an event.\n   * returns either the pointerId or the identifier or 0 for the mouse event\n   * @private\n   * @param {Event} evt Event object\n   */\n  getPointerId(evt: TouchEvent | PointerEvent): number {\n    const changedTouches = (evt as TouchEvent).changedTouches;\n\n    if (changedTouches) {\n      return changedTouches[0] && changedTouches[0].identifier;\n    }\n\n    if (this.enablePointerEvents) {\n      return (evt as PointerEvent).pointerId;\n    }\n\n    return -1;\n  }\n\n  /**\n   * Determines if an event has the id of the event that is considered main\n   * @private\n   * @param {evt} event Event object\n   */\n  _isMainEvent(evt: TPointerEvent): boolean {\n    if ((evt as PointerEvent).isPrimary === true) {\n      return true;\n    }\n    if ((evt as PointerEvent).isPrimary === false) {\n      return false;\n    }\n    if (evt.type === 'touchend' && (evt as TouchEvent).touches.length === 0) {\n      return true;\n    }\n    if ((evt as TouchEvent).changedTouches) {\n      return (\n        (evt as TouchEvent).changedTouches[0].identifier === this.mainTouchId\n      );\n    }\n    return true;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onTouchStart(e: TouchEvent) {\n    // we will prevent scrolling if allowTouchScrolling is not enabled and\n    let shouldPreventScrolling = !this.allowTouchScrolling;\n    const currentActiveObject = this._activeObject;\n    if (this.mainTouchId === undefined) {\n      this.mainTouchId = this.getPointerId(e);\n    }\n    this.__onMouseDown(e);\n    // after executing fabric logic for mouse down let's see\n    // if we didn't change target or if we are drawing\n    // we want to prevent scrolling anyway\n    if (\n      this.isDrawingMode ||\n      (currentActiveObject && this._target === currentActiveObject)\n    ) {\n      shouldPreventScrolling = true;\n    }\n    // prevent default, will block scrolling from start\n    shouldPreventScrolling && e.preventDefault();\n    this._resetTransformEventData();\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    const doc = getDocumentFromElement(canvasElement);\n    addListener(\n      doc,\n      'touchend',\n      this._onTouchEnd as EventListener,\n      addEventOptions,\n    );\n    // if we scroll don't register the touch move event\n    shouldPreventScrolling &&\n      addListener(\n        doc,\n        'touchmove',\n        this._onMouseMove as EventListener,\n        addEventOptions,\n      );\n    // Unbind mousedown to prevent double triggers from touch devices\n    removeListener(\n      canvasElement,\n      `${eventTypePrefix}down`,\n      this._onMouseDown as EventListener,\n    );\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onMouseDown(e: TPointerEvent) {\n    this.__onMouseDown(e);\n    this._resetTransformEventData();\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    removeListener(\n      canvasElement,\n      `${eventTypePrefix}move`,\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    const doc = getDocumentFromElement(canvasElement);\n    addListener(doc, `${eventTypePrefix}up`, this._onMouseUp as EventListener);\n    addListener(\n      doc,\n      `${eventTypePrefix}move`,\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onTouchEnd(e: TouchEvent) {\n    if (e.touches.length > 0) {\n      // if there are still touches stop here\n      return;\n    }\n    this.__onMouseUp(e);\n    this._resetTransformEventData();\n    delete this.mainTouchId;\n    const eventTypePrefix = this._getEventPrefix();\n    const doc = getDocumentFromElement(this.upperCanvasEl);\n    removeListener(\n      doc,\n      'touchend',\n      this._onTouchEnd as EventListener,\n      addEventOptions,\n    );\n    removeListener(\n      doc,\n      'touchmove',\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    if (this._willAddMouseDown) {\n      clearTimeout(this._willAddMouseDown);\n    }\n    this._willAddMouseDown = setTimeout(() => {\n      // Wait 400ms before rebinding mousedown to prevent double triggers\n      // from touch devices\n      addListener(\n        this.upperCanvasEl,\n        `${eventTypePrefix}down`,\n        this._onMouseDown as EventListener,\n      );\n      this._willAddMouseDown = 0;\n    }, 400) as unknown as number;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mouseup\n   */\n  _onMouseUp(e: TPointerEvent) {\n    this.__onMouseUp(e);\n    this._resetTransformEventData();\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    if (this._isMainEvent(e)) {\n      const doc = getDocumentFromElement(this.upperCanvasEl);\n      removeListener(\n        doc,\n        `${eventTypePrefix}up`,\n        this._onMouseUp as EventListener,\n      );\n      removeListener(\n        doc,\n        `${eventTypePrefix}move`,\n        this._onMouseMove as EventListener,\n        addEventOptions,\n      );\n      addListener(\n        canvasElement,\n        `${eventTypePrefix}move`,\n        this._onMouseMove as EventListener,\n        addEventOptions,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousemove\n   */\n  _onMouseMove(e: TPointerEvent) {\n    const activeObject = this.getActiveObject();\n    !this.allowTouchScrolling &&\n      (!activeObject ||\n        // a drag event sequence is started by the active object flagging itself on mousedown / mousedown:before\n        // we must not prevent the event's default behavior in order for the window to start dragging\n        !activeObject.shouldStartDragging(e)) &&\n      e.preventDefault &&\n      e.preventDefault();\n    this.__onMouseMove(e);\n  }\n\n  /**\n   * @private\n   */\n  _onResize() {\n    this.calcOffset();\n    this._resetTransformEventData();\n  }\n\n  /**\n   * Decides whether the canvas should be redrawn in mouseup and mousedown events.\n   * @private\n   * @param {Object} target\n   */\n  _shouldRender(target: FabricObject | undefined) {\n    const activeObject = this.getActiveObject();\n    // if just one of them is available or if they are both but are different objects\n    // this covers: switch of target, from target to no target, selection of target\n    // multiSelection with key and mouse\n    return (\n      !!activeObject !== !!target ||\n      (activeObject && target && activeObject !== target)\n    );\n  }\n\n  /**\n   * Method that defines the actions when mouse is released on canvas.\n   * The method resets the currentTransform parameters, store the image corner\n   * position in the image object and render the canvas on top.\n   * @private\n   * @param {Event} e Event object fired on mouseup\n   */\n  __onMouseUp(e: TPointerEvent) {\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'up:before');\n\n    const transform = this._currentTransform;\n    const isClick = this._isClick;\n    const target = this._target;\n\n    // if right/middle click just fire events and return\n    // target undefined will make the _handleEvent search the target\n    const { button } = e as MouseEvent;\n    if (button) {\n      ((this.fireMiddleClick && button === 1) ||\n        (this.fireRightClick && button === 2)) &&\n        this._handleEvent(e, 'up');\n      this._resetTransformEventData();\n      return;\n    }\n\n    if (this.isDrawingMode && this._isCurrentlyDrawing) {\n      this._onMouseUpInDrawingMode(e);\n      return;\n    }\n\n    if (!this._isMainEvent(e)) {\n      return;\n    }\n    let shouldRender = false;\n    if (transform) {\n      this._finalizeCurrentTransform(e);\n      shouldRender = transform.actionPerformed;\n    }\n    if (!isClick) {\n      const targetWasActive = target === this._activeObject;\n      this.handleSelection(e);\n      if (!shouldRender) {\n        shouldRender =\n          this._shouldRender(target) ||\n          (!targetWasActive && target === this._activeObject);\n      }\n    }\n    let pointer, corner;\n    if (target) {\n      const found = target.findControl(\n        this.getViewportPoint(e),\n        isTouchEvent(e),\n      );\n      const { key, control } = found || {};\n      corner = key;\n      if (\n        target.selectable &&\n        target !== this._activeObject &&\n        target.activeOn === 'up'\n      ) {\n        this.setActiveObject(target, e);\n        shouldRender = true;\n      } else if (control) {\n        const mouseUpHandler = control.getMouseUpHandler(e, target, control);\n        if (mouseUpHandler) {\n          pointer = this.getScenePoint(e);\n          mouseUpHandler.call(control, e, transform!, pointer.x, pointer.y);\n        }\n      }\n      target.isMoving = false;\n    }\n    // if we are ending up a transform on a different control or a new object\n    // fire the original mouse up from the corner that started the transform\n    if (\n      transform &&\n      (transform.target !== target || transform.corner !== corner)\n    ) {\n      const originalControl =\n          transform.target && transform.target.controls[transform.corner],\n        originalMouseUpHandler =\n          originalControl &&\n          originalControl.getMouseUpHandler(\n            e,\n            transform.target,\n            originalControl,\n          );\n      pointer = pointer || this.getScenePoint(e);\n      originalMouseUpHandler &&\n        originalMouseUpHandler.call(\n          originalControl,\n          e,\n          transform,\n          pointer.x,\n          pointer.y,\n        );\n    }\n    this._setCursorFromEvent(e, target);\n    this._handleEvent(e, 'up');\n    this._groupSelector = null;\n    this._currentTransform = null;\n    // reset the target information about which corner is selected\n    target && (target.__corner = undefined);\n    if (shouldRender) {\n      this.requestRenderAll();\n    } else if (!isClick && !(this._activeObject as IText)?.isEditing) {\n      this.renderTop();\n    }\n  }\n\n  _basicEventHandler<T extends keyof (CanvasEvents | ObjectEvents)>(\n    eventType: T,\n    options: (CanvasEvents & ObjectEvents)[T],\n  ) {\n    const { target, subTargets = [] } = options as {\n      target?: FabricObject;\n      subTargets: FabricObject[];\n    };\n    this.fire(eventType, options);\n    target && target.fire(eventType, options);\n    for (let i = 0; i < subTargets.length; i++) {\n      subTargets[i] !== target && subTargets[i].fire(eventType, options);\n    }\n    return options;\n  }\n\n  /**\n   * @private\n   * Handle event firing for target and subtargets\n   * @param {TPointerEvent} e event from mouse\n   * @param {TPointerEventNames} eventType\n   */\n  _handleEvent<T extends TPointerEventNames>(e: TPointerEvent, eventType: T) {\n    const target = this._target,\n      targets = this.targets || [],\n      options: CanvasEvents[`mouse:${T}`] = {\n        e,\n        target,\n        subTargets: targets,\n        ...getEventPoints(this, e),\n        transform: this._currentTransform,\n        ...(eventType === 'up:before' || eventType === 'up'\n          ? {\n              isClick: this._isClick,\n              currentTarget: this.findTarget(e),\n              // set by the preceding `findTarget` call\n              currentSubTargets: this.targets,\n            }\n          : {}),\n      } as CanvasEvents[`mouse:${T}`];\n    this.fire(`mouse:${eventType}`, options);\n    // this may be a little be more complicated of what we want to handle\n    target && target.fire(`mouse${eventType}`, options);\n    for (let i = 0; i < targets.length; i++) {\n      targets[i] !== target && targets[i].fire(`mouse${eventType}`, options);\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onMouseDownInDrawingMode(e: TPointerEvent) {\n    this._isCurrentlyDrawing = true;\n    if (this.getActiveObject()) {\n      this.discardActiveObject(e);\n      this.requestRenderAll();\n    }\n    // TODO: this is a scene point so it should be renamed\n    const pointer = this.getScenePoint(e);\n    this.freeDrawingBrush &&\n      this.freeDrawingBrush.onMouseDown(pointer, { e, pointer });\n    this._handleEvent(e, 'down');\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousemove\n   */\n  _onMouseMoveInDrawingMode(e: TPointerEvent) {\n    if (this._isCurrentlyDrawing) {\n      const pointer = this.getScenePoint(e);\n      this.freeDrawingBrush &&\n        this.freeDrawingBrush.onMouseMove(pointer, {\n          e,\n          // this is an absolute pointer, the naming is wrong\n          pointer,\n        });\n    }\n    this.setCursor(this.freeDrawingCursor);\n    this._handleEvent(e, 'move');\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mouseup\n   */\n  _onMouseUpInDrawingMode(e: TPointerEvent) {\n    const pointer = this.getScenePoint(e);\n    if (this.freeDrawingBrush) {\n      this._isCurrentlyDrawing = !!this.freeDrawingBrush.onMouseUp({\n        e: e,\n        // this is an absolute pointer, the naming is wrong\n        pointer,\n      });\n    } else {\n      this._isCurrentlyDrawing = false;\n    }\n    this._handleEvent(e, 'up');\n  }\n\n  /**\n   * Method that defines the actions when mouse is clicked on canvas.\n   * The method inits the currentTransform parameters and renders all the\n   * canvas so the current image can be placed on the top canvas and the rest\n   * in on the container one.\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  __onMouseDown(e: TPointerEvent) {\n    this._isClick = true;\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'down:before');\n\n    let target: FabricObject | undefined = this._target;\n\n    // if right/middle click just fire events\n    const { button } = e as MouseEvent;\n    if (button) {\n      ((this.fireMiddleClick && button === 1) ||\n        (this.fireRightClick && button === 2)) &&\n        this._handleEvent(e, 'down');\n      this._resetTransformEventData();\n      return;\n    }\n\n    if (this.isDrawingMode) {\n      this._onMouseDownInDrawingMode(e);\n      return;\n    }\n\n    if (!this._isMainEvent(e)) {\n      return;\n    }\n\n    // ignore if some object is being transformed at this moment\n    if (this._currentTransform) {\n      return;\n    }\n\n    let shouldRender = this._shouldRender(target);\n    let grouped = false;\n    if (this.handleMultiSelection(e, target)) {\n      // active object might have changed while grouping\n      target = this._activeObject;\n      grouped = true;\n      shouldRender = true;\n    } else if (this._shouldClearSelection(e, target)) {\n      this.discardActiveObject(e);\n    }\n    // we start a group selector rectangle if\n    // selection is enabled\n    // and there is no target, or the following 3 conditions are satisfied:\n    // target is not selectable ( otherwise we selected it )\n    // target is not editing\n    // target is not already selected ( otherwise we drag )\n    if (\n      this.selection &&\n      (!target ||\n        (!target.selectable &&\n          !(target as IText).isEditing &&\n          target !== this._activeObject))\n    ) {\n      const p = this.getScenePoint(e);\n      this._groupSelector = {\n        x: p.x,\n        y: p.y,\n        deltaY: 0,\n        deltaX: 0,\n      };\n    }\n\n    if (target) {\n      const alreadySelected = target === this._activeObject;\n      if (target.selectable && target.activeOn === 'down') {\n        this.setActiveObject(target, e);\n      }\n      const handle = target.findControl(\n        this.getViewportPoint(e),\n        isTouchEvent(e),\n      );\n      if (target === this._activeObject && (handle || !grouped)) {\n        this._setupCurrentTransform(e, target, alreadySelected);\n        const control = handle ? handle.control : undefined,\n          pointer = this.getScenePoint(e),\n          mouseDownHandler =\n            control && control.getMouseDownHandler(e, target, control);\n        mouseDownHandler &&\n          mouseDownHandler.call(\n            control,\n            e,\n            this._currentTransform!,\n            pointer.x,\n            pointer.y,\n          );\n      }\n    }\n    //  we clear `_objectsToRender` in case of a change in order to repopulate it at rendering\n    //  run before firing the `down` event to give the dev a chance to populate it themselves\n    shouldRender && (this._objectsToRender = undefined);\n    this._handleEvent(e, 'down');\n    // we must renderAll so that we update the visuals\n    shouldRender && this.requestRenderAll();\n  }\n\n  /**\n   * reset cache form common information needed during event processing\n   * @private\n   */\n  _resetTransformEventData() {\n    this._target = this._pointer = this._absolutePointer = undefined;\n  }\n\n  /**\n   * Cache common information needed during event processing\n   * @private\n   * @param {Event} e Event object fired on event\n   */\n  _cacheTransformEventData(e: TPointerEvent) {\n    // reset in order to avoid stale caching\n    this._resetTransformEventData();\n    this._pointer = this.getViewportPoint(e);\n    this._absolutePointer = sendPointToPlane(\n      this._pointer,\n      undefined,\n      this.viewportTransform,\n    );\n    this._target = this._currentTransform\n      ? this._currentTransform.target\n      : this.findTarget(e);\n  }\n\n  /**\n   * Method that defines the actions when mouse is hovering the canvas.\n   * The currentTransform parameter will define whether the user is rotating/scaling/translating\n   * an image or neither of them (only hovering). A group selection is also possible and would cancel\n   * all any other type of action.\n   * In case of an image transformation only the top canvas will be rendered.\n   * @private\n   * @param {Event} e Event object fired on mousemove\n   */\n  __onMouseMove(e: TPointerEvent) {\n    this._isClick = false;\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'move:before');\n\n    if (this.isDrawingMode) {\n      this._onMouseMoveInDrawingMode(e);\n      return;\n    }\n\n    if (!this._isMainEvent(e)) {\n      return;\n    }\n\n    const groupSelector = this._groupSelector;\n\n    // We initially clicked in an empty area, so we draw a box for multiple selection\n    if (groupSelector) {\n      const pointer = this.getScenePoint(e);\n\n      groupSelector.deltaX = pointer.x - groupSelector.x;\n      groupSelector.deltaY = pointer.y - groupSelector.y;\n\n      this.renderTop();\n    } else if (!this._currentTransform) {\n      const target = this.findTarget(e);\n      this._setCursorFromEvent(e, target);\n      this._fireOverOutEvents(e, target);\n    } else {\n      this._transformObject(e);\n    }\n    this.textEditingManager.onMouseMove(e);\n    this._handleEvent(e, 'move');\n    this._resetTransformEventData();\n  }\n\n  /**\n   * Manage the mouseout, mouseover events for the fabric object on the canvas\n   * @param {Fabric.Object} target the target where the target from the mousemove event\n   * @param {Event} e Event object fired on mousemove\n   * @private\n   */\n  _fireOverOutEvents(e: TPointerEvent, target?: FabricObject) {\n    const _hoveredTarget = this._hoveredTarget,\n      _hoveredTargets = this._hoveredTargets,\n      targets = this.targets,\n      length = Math.max(_hoveredTargets.length, targets.length);\n\n    this.fireSyntheticInOutEvents('mouse', {\n      e,\n      target,\n      oldTarget: _hoveredTarget,\n      fireCanvas: true,\n    });\n    for (let i = 0; i < length; i++) {\n      this.fireSyntheticInOutEvents('mouse', {\n        e,\n        target: targets[i],\n        oldTarget: _hoveredTargets[i],\n      });\n    }\n    this._hoveredTarget = target;\n    this._hoveredTargets = this.targets.concat();\n  }\n\n  /**\n   * Manage the dragEnter, dragLeave events for the fabric objects on the canvas\n   * @param {Fabric.Object} target the target where the target from the onDrag event\n   * @param {Object} data Event object fired on dragover\n   * @private\n   */\n  _fireEnterLeaveEvents(target: FabricObject | undefined, data: DragEventData) {\n    const draggedoverTarget = this._draggedoverTarget,\n      _hoveredTargets = this._hoveredTargets,\n      targets = this.targets,\n      length = Math.max(_hoveredTargets.length, targets.length);\n\n    this.fireSyntheticInOutEvents('drag', {\n      ...data,\n      target,\n      oldTarget: draggedoverTarget,\n      fireCanvas: true,\n    });\n    for (let i = 0; i < length; i++) {\n      this.fireSyntheticInOutEvents('drag', {\n        ...data,\n        target: targets[i],\n        oldTarget: _hoveredTargets[i],\n      });\n    }\n    this._draggedoverTarget = target;\n  }\n\n  /**\n   * Manage the synthetic in/out events for the fabric objects on the canvas\n   * @param {Fabric.Object} target the target where the target from the supported events\n   * @param {Object} data Event object fired\n   * @param {Object} config configuration for the function to work\n   * @param {String} config.targetName property on the canvas where the old target is stored\n   * @param {String} [config.canvasEvtOut] name of the event to fire at canvas level for out\n   * @param {String} config.evtOut name of the event to fire for out\n   * @param {String} [config.canvasEvtIn] name of the event to fire at canvas level for in\n   * @param {String} config.evtIn name of the event to fire for in\n   * @private\n   */\n  fireSyntheticInOutEvents<T extends keyof TSyntheticEventContext>(\n    type: T,\n    {\n      target,\n      oldTarget,\n      fireCanvas,\n      e,\n      ...data\n    }: TSyntheticEventContext[T] & {\n      target?: FabricObject;\n      oldTarget?: FabricObject;\n      fireCanvas?: boolean;\n    },\n  ) {\n    const { targetIn, targetOut, canvasIn, canvasOut } =\n      syntheticEventConfig[type];\n    const targetChanged = oldTarget !== target;\n\n    if (oldTarget && targetChanged) {\n      const outOpt: CanvasEvents[typeof canvasOut] = {\n        ...data,\n        e,\n        target: oldTarget,\n        nextTarget: target,\n        ...getEventPoints(this, e),\n      };\n      fireCanvas && this.fire(canvasOut, outOpt);\n      oldTarget.fire(targetOut, outOpt);\n    }\n    if (target && targetChanged) {\n      const inOpt: CanvasEvents[typeof canvasIn] = {\n        ...data,\n        e,\n        target,\n        previousTarget: oldTarget,\n        ...getEventPoints(this, e),\n      };\n      fireCanvas && this.fire(canvasIn, inOpt);\n      target.fire(targetIn, inOpt);\n    }\n  }\n\n  /**\n   * Method that defines actions when an Event Mouse Wheel\n   * @param {Event} e Event object fired on mouseup\n   */\n  __onMouseWheel(e: TPointerEvent) {\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'wheel');\n    this._resetTransformEventData();\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event fired on mousemove\n   */\n  _transformObject(e: TPointerEvent) {\n    const scenePoint = this.getScenePoint(e),\n      transform = this._currentTransform!,\n      target = transform.target,\n      //  transform pointer to target's containing coordinate plane\n      //  both pointer and object should agree on every point\n      localPointer = target.group\n        ? sendPointToPlane(\n            scenePoint,\n            undefined,\n            target.group.calcTransformMatrix(),\n          )\n        : scenePoint;\n    transform.shiftKey = e.shiftKey;\n    transform.altKey = !!this.centeredKey && e[this.centeredKey];\n\n    this._performTransformAction(e, transform, localPointer);\n    transform.actionPerformed && this.requestRenderAll();\n  }\n\n  /**\n   * @private\n   */\n  _performTransformAction(\n    e: TPointerEvent,\n    transform: Transform,\n    pointer: Point,\n  ) {\n    const { action, actionHandler, target } = transform;\n\n    const actionPerformed =\n      !!actionHandler && actionHandler(e, transform, pointer.x, pointer.y);\n    actionPerformed && target.setCoords();\n\n    // this object could be created from the function in the control handlers\n    if (action === 'drag' && actionPerformed) {\n      transform.target.isMoving = true;\n      this.setCursor(transform.target.moveCursor || this.moveCursor);\n    }\n    transform.actionPerformed = transform.actionPerformed || actionPerformed;\n  }\n\n  /**\n   * Sets the cursor depending on where the canvas is being hovered.\n   * Note: very buggy in Opera\n   * @param {Event} e Event object\n   * @param {Object} target Object that the mouse is hovering, if so.\n   */\n  _setCursorFromEvent(e: TPointerEvent, target?: FabricObject) {\n    if (!target) {\n      this.setCursor(this.defaultCursor);\n      return;\n    }\n    let hoverCursor = target.hoverCursor || this.hoverCursor;\n    const activeSelection = isActiveSelection(this._activeObject)\n        ? this._activeObject\n        : null,\n      // only show proper corner when group selection is not active\n      corner =\n        (!activeSelection || target.group !== activeSelection) &&\n        // here we call findTargetCorner always with undefined for the touch parameter.\n        // we assume that if you are using a cursor you do not need to interact with\n        // the bigger touch area.\n        target.findControl(this.getViewportPoint(e));\n\n    if (!corner) {\n      if ((target as Group).subTargetCheck) {\n        // hoverCursor should come from top-most subTarget,\n        // so we walk the array backwards\n        this.targets\n          .concat()\n          .reverse()\n          .map((_target) => {\n            hoverCursor = _target.hoverCursor || hoverCursor;\n          });\n      }\n      this.setCursor(hoverCursor);\n    } else {\n      const control = corner.control;\n      this.setCursor(control.cursorStyleHandler(e, control, target));\n    }\n  }\n\n  /**\n   * ## Handles multiple selection\n   * - toggles `target` selection (selects/deselects `target` if it isn't/is selected respectively)\n   * - sets the active object in case it is not set or in case there is a single active object left under active selection.\n   * ---\n   * - If the active object is the active selection we add/remove `target` from it\n   * - If not, add the active object and `target` to the active selection and make it the active object.\n   * @private\n   * @param {TPointerEvent} e Event object\n   * @param {FabricObject} target target of event to select/deselect\n   * @returns true if grouping occurred\n   */\n  protected handleMultiSelection(e: TPointerEvent, target?: FabricObject) {\n    const activeObject = this._activeObject;\n    const isAS = isActiveSelection(activeObject);\n    if (\n      // check if an active object exists on canvas and if the user is pressing the `selectionKey` while canvas supports multi selection.\n      !!activeObject &&\n      this._isSelectionKeyPressed(e) &&\n      this.selection &&\n      // on top of that the user also has to hit a target that is selectable.\n      !!target &&\n      target.selectable &&\n      // group target and active object only if they are different objects\n      // else we try to find a subtarget of `ActiveSelection`\n      (activeObject !== target || isAS) &&\n      //  make sure `activeObject` and `target` aren't ancestors of each other in case `activeObject` is not `ActiveSelection`\n      // if it is then we want to remove `target` from it\n      (isAS ||\n        (!target.isDescendantOf(activeObject) &&\n          !activeObject.isDescendantOf(target))) &&\n      //  target accepts selection\n      !target.onSelect({ e }) &&\n      // make sure we are not on top of a control\n      !activeObject.getActiveControl()\n    ) {\n      if (isAS) {\n        const prevActiveObjects = activeObject.getObjects();\n        if (target === activeObject) {\n          const pointer = this.getViewportPoint(e);\n          target =\n            // first search active objects for a target to remove\n            this.searchPossibleTargets(prevActiveObjects, pointer) ||\n            //  if not found, search under active selection for a target to add\n            // `prevActiveObjects` will be searched but we already know they will not be found\n            this.searchPossibleTargets(this._objects, pointer);\n          // if nothing is found bail out\n          if (!target || !target.selectable) {\n            return false;\n          }\n        }\n        if (target.group === activeObject) {\n          // `target` is part of active selection => remove it\n          activeObject.remove(target);\n          this._hoveredTarget = target;\n          this._hoveredTargets = [...this.targets];\n          // if after removing an object we are left with one only...\n          if (activeObject.size() === 1) {\n            // activate last remaining object\n            // deselecting the active selection will remove the remaining object from it\n            this._setActiveObject(activeObject.item(0), e);\n          }\n        } else {\n          // `target` isn't part of active selection => add it\n          activeObject.multiSelectAdd(target);\n          this._hoveredTarget = activeObject;\n          this._hoveredTargets = [...this.targets];\n        }\n        this._fireSelectionEvents(prevActiveObjects, e);\n      } else {\n        (activeObject as IText).isEditing &&\n          (activeObject as IText).exitEditing();\n        // add the active object and the target to the active selection and set it as the active object\n        const klass =\n          classRegistry.getClass<typeof ActiveSelection>('ActiveSelection');\n        const newActiveSelection = new klass([], {\n          /**\n           * it is crucial to pass the canvas ref before calling {@link ActiveSelection#multiSelectAdd}\n           * since it uses {@link FabricObject#isInFrontOf} which relies on the canvas ref\n           */\n          canvas: this,\n        });\n        newActiveSelection.multiSelectAdd(activeObject, target);\n        this._hoveredTarget = newActiveSelection;\n        // ISSUE 4115: should we consider subTargets here?\n        // this._hoveredTargets = [];\n        // this._hoveredTargets = this.targets.concat();\n        this._setActiveObject(newActiveSelection, e);\n        this._fireSelectionEvents([activeObject], e);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * ## Handles selection\n   * - selects objects that are contained in (and possibly intersecting) the selection bounding box\n   * - sets the active object\n   * ---\n   * runs on mouse up after a mouse move\n   */\n  protected handleSelection(e: TPointerEvent) {\n    if (!this.selection || !this._groupSelector) {\n      return false;\n    }\n    const { x, y, deltaX, deltaY } = this._groupSelector,\n      point1 = new Point(x, y),\n      point2 = point1.add(new Point(deltaX, deltaY)),\n      tl = point1.min(point2),\n      br = point1.max(point2),\n      size = br.subtract(tl);\n\n    const collectedObjects = this.collectObjects(\n      {\n        left: tl.x,\n        top: tl.y,\n        width: size.x,\n        height: size.y,\n      },\n      { includeIntersecting: !this.selectionFullyContained },\n    ) as FabricObject[];\n\n    const objects =\n      // though this method runs only after mouse move the pointer could do a mouse up on the same position as mouse down\n      // should it be handled as is?\n      point1.eq(point2)\n        ? collectedObjects[0]\n          ? [collectedObjects[0]]\n          : []\n        : collectedObjects.length > 1\n          ? collectedObjects\n              .filter((object) => !object.onSelect({ e }))\n              .reverse()\n          : // `setActiveObject` will call `onSelect(collectedObjects[0])` in this case\n            collectedObjects;\n\n    // set active object\n    if (objects.length === 1) {\n      // set as active object\n      this.setActiveObject(objects[0], e);\n    } else if (objects.length > 1) {\n      // add to active selection and make it the active object\n      const klass =\n        classRegistry.getClass<typeof ActiveSelection>('ActiveSelection');\n      this.setActiveObject(new klass(objects, { canvas: this }), e);\n    }\n\n    // cleanup\n    this._groupSelector = null;\n    return true;\n  }\n\n  /**\n   * @override clear {@link textEditingManager}\n   */\n  clear() {\n    this.textEditingManager.clear();\n    super.clear();\n  }\n\n  /**\n   * @override clear {@link textEditingManager}\n   */\n  destroy() {\n    this.removeListeners();\n    this.textEditingManager.dispose();\n    super.destroy();\n  }\n}\n","export const linearDefaultCoords = {\n  x1: 0,\n  y1: 0,\n  x2: 0,\n  y2: 0,\n};\n\nexport const radialDefaultCoords = {\n  ...linearDefaultCoords,\n  r1: 0,\n  r2: 0,\n};\n","/**\n *\n * @param value value to check if NaN\n * @param [valueIfNaN]\n * @returns `fallback` is `value is NaN\n */\nexport const ifNaN = (value: number, valueIfNaN?: number) => {\n  return isNaN(value) && typeof valueIfNaN === 'number' ? valueIfNaN : value;\n};\n","import { ifNaN } from '../util/internals/ifNaN';\nimport { capValue } from '../util/misc/capValue';\n\nconst RE_PERCENT = /^(\\d+\\.\\d+)%|(\\d+)%$/;\n\nexport function isPercent(value: string | null) {\n  return value && RE_PERCENT.test(value);\n}\n\n/**\n *\n * @param value\n * @param valueIfNaN\n * @returns ∈ [0, 1]\n */\nexport function parsePercent(\n  value: string | number | null | undefined,\n  valueIfNaN?: number,\n) {\n  const parsed =\n    typeof value === 'number'\n      ? value\n      : typeof value === 'string'\n        ? parseFloat(value) / (isPercent(value) ? 100 : 1)\n        : NaN;\n  return capValue(0, ifNaN(parsed, valueIfNaN), 1);\n}\n","import { Color } from '../../color/Color';\nimport { parsePercent } from '../../parser/percent';\nimport { ifNaN } from '../../util/internals/ifNaN';\nimport type { ColorStop } from '../typedefs';\n\nconst RE_KEY_VALUE_PAIRS = /\\s*;\\s*/;\nconst RE_KEY_VALUE = /\\s*:\\s*/;\n\nfunction parseColorStop(el: SVGStopElement, multiplier: number) {\n  let colorValue, opacity;\n  const style = el.getAttribute('style');\n  if (style) {\n    const keyValuePairs = style.split(RE_KEY_VALUE_PAIRS);\n\n    if (keyValuePairs[keyValuePairs.length - 1] === '') {\n      keyValuePairs.pop();\n    }\n\n    for (let i = keyValuePairs.length; i--; ) {\n      const [key, value] = keyValuePairs[i]\n        .split(RE_KEY_VALUE)\n        .map((s) => s.trim());\n      if (key === 'stop-color') {\n        colorValue = value;\n      } else if (key === 'stop-opacity') {\n        opacity = value;\n      }\n    }\n  }\n\n  const color = new Color(\n    colorValue || el.getAttribute('stop-color') || 'rgb(0,0,0)',\n  );\n\n  return {\n    offset: parsePercent(el.getAttribute('offset'), 0),\n    color: color.toRgb(),\n    opacity:\n      ifNaN(parseFloat(opacity || el.getAttribute('stop-opacity') || ''), 1) *\n      color.getAlpha() *\n      multiplier,\n  };\n}\n\nexport function parseColorStops(\n  el: SVGGradientElement,\n  opacityAttr: string | null,\n) {\n  const colorStops: ColorStop[] = [],\n    colorStopEls = el.getElementsByTagName('stop'),\n    multiplier = parsePercent(opacityAttr, 1);\n  for (let i = colorStopEls.length; i--; ) {\n    colorStops.push(parseColorStop(colorStopEls[i], multiplier));\n  }\n  return colorStops;\n}\n","import type { GradientType, GradientUnits } from '../typedefs';\n\nexport function parseType(el: SVGGradientElement): GradientType {\n  return el.nodeName === 'linearGradient' || el.nodeName === 'LINEARGRADIENT'\n    ? 'linear'\n    : 'radial';\n}\n\nexport function parseGradientUnits(el: SVGGradientElement): GradientUnits {\n  return el.getAttribute('gradientUnits') === 'userSpaceOnUse'\n    ? 'pixels'\n    : 'percentage';\n}\n","import { isPercent } from '../../parser/percent';\nimport type { TSize } from '../../typedefs';\nimport type { GradientCoords, GradientType, GradientUnits } from '../typedefs';\nimport { parseGradientUnits, parseType } from './misc';\n\nfunction convertPercentUnitsToValues<\n  T extends GradientType,\n  K extends keyof GradientCoords<T>,\n>(\n  valuesToConvert: Record<K, string | number>,\n  { width, height, gradientUnits }: TSize & { gradientUnits: GradientUnits },\n) {\n  let finalValue;\n  return (Object.keys(valuesToConvert) as K[]).reduce(\n    (acc, prop) => {\n      const propValue = valuesToConvert[prop];\n      if (propValue === 'Infinity') {\n        finalValue = 1;\n      } else if (propValue === '-Infinity') {\n        finalValue = 0;\n      } else {\n        finalValue =\n          typeof propValue === 'string' ? parseFloat(propValue) : propValue;\n        if (typeof propValue === 'string' && isPercent(propValue)) {\n          finalValue *= 0.01;\n          if (gradientUnits === 'pixels') {\n            // then we need to fix those percentages here in svg parsing\n            if (prop === 'x1' || prop === 'x2' || prop === 'r2') {\n              finalValue *= width;\n            }\n            if (prop === 'y1' || prop === 'y2') {\n              finalValue *= height;\n            }\n          }\n        }\n      }\n      acc[prop] = finalValue;\n      return acc;\n    },\n    {} as Record<K, number>,\n  );\n}\n\nfunction getValue(el: SVGGradientElement, key: string) {\n  return el.getAttribute(key);\n}\n\nexport function parseLinearCoords(el: SVGGradientElement) {\n  return {\n    x1: getValue(el, 'x1') || 0,\n    y1: getValue(el, 'y1') || 0,\n    x2: getValue(el, 'x2') || '100%',\n    y2: getValue(el, 'y2') || 0,\n  };\n}\n\nexport function parseRadialCoords(el: SVGGradientElement) {\n  return {\n    x1: getValue(el, 'fx') || getValue(el, 'cx') || '50%',\n    y1: getValue(el, 'fy') || getValue(el, 'cy') || '50%',\n    r1: 0,\n    x2: getValue(el, 'cx') || '50%',\n    y2: getValue(el, 'cy') || '50%',\n    r2: getValue(el, 'r') || '50%',\n  };\n}\n\nexport function parseCoords(el: SVGGradientElement, size: TSize) {\n  return convertPercentUnitsToValues(\n    parseType(el) === 'linear' ? parseLinearCoords(el) : parseRadialCoords(el),\n    {\n      ...size,\n      gradientUnits: parseGradientUnits(el),\n    },\n  );\n}\n","import { Color } from '../color/Color';\nimport { iMatrix } from '../constants';\nimport { parseTransformAttribute } from '../parser/parseTransformAttribute';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TMat2D } from '../typedefs';\nimport { uid } from '../util/internals/uid';\nimport { pick } from '../util/misc/pick';\nimport { matrixToSVG } from '../util/misc/svgParsing';\nimport { linearDefaultCoords, radialDefaultCoords } from './constants';\nimport { parseColorStops } from './parser/parseColorStops';\nimport { parseCoords } from './parser/parseCoords';\nimport { parseType, parseGradientUnits } from './parser/misc';\nimport type {\n  ColorStop,\n  GradientCoords,\n  GradientOptions,\n  GradientType,\n  GradientUnits,\n  SVGOptions,\n} from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { isPath } from '../util/typeAssertions';\n\n/**\n * Gradient class\n * @class Gradient\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#gradients}\n */\nexport class Gradient<\n  S,\n  T extends GradientType = S extends GradientType ? S : 'linear',\n> {\n  /**\n   * Horizontal offset for aligning gradients coming from SVG when outside pathgroups\n   * @type Number\n   * @default 0\n   */\n  declare offsetX: number;\n\n  /**\n   * Vertical offset for aligning gradients coming from SVG when outside pathgroups\n   * @type Number\n   * @default 0\n   */\n  declare offsetY: number;\n\n  /**\n   * A transform matrix to apply to the gradient before painting.\n   * Imported from svg gradients, is not applied with the current transform in the center.\n   * Before this transform is applied, the origin point is at the top left corner of the object\n   * plus the addition of offsetY and offsetX.\n   * @type Number[]\n   * @default null\n   */\n  declare gradientTransform?: TMat2D;\n\n  /**\n   * coordinates units for coords.\n   * If `pixels`, the number of coords are in the same unit of width / height.\n   * If set as `percentage` the coords are still a number, but 1 means 100% of width\n   * for the X and 100% of the height for the y. It can be bigger than 1 and negative.\n   * allowed values pixels or percentage.\n   * @type GradientUnits\n   * @default 'pixels'\n   */\n  declare gradientUnits: GradientUnits;\n\n  /**\n   * Gradient type linear or radial\n   * @type GradientType\n   * @default 'linear'\n   */\n  declare type: T;\n\n  /**\n   * Defines how the gradient is located in space and spread\n   * @type GradientCoords\n   */\n  declare coords: GradientCoords<T>;\n\n  /**\n   * Defines how many colors a gradient has and how they are located on the axis\n   * defined by coords\n   * @type GradientCoords\n   */\n  declare colorStops: ColorStop[];\n\n  /**\n   * If true, this object will not be exported during the serialization of a canvas\n   * @type boolean\n   */\n  declare excludeFromExport?: boolean;\n\n  /**\n   * ID used for SVG export functionalities\n   * @type number | string\n   */\n  declare readonly id: string | number;\n\n  static type = 'Gradient';\n\n  constructor(options: GradientOptions<T>) {\n    const {\n      type = 'linear' as T,\n      gradientUnits = 'pixels',\n      coords = {},\n      colorStops = [],\n      offsetX = 0,\n      offsetY = 0,\n      gradientTransform,\n      id,\n    } = options || {};\n    Object.assign(this, {\n      type,\n      gradientUnits,\n      coords: {\n        ...(type === 'radial' ? radialDefaultCoords : linearDefaultCoords),\n        ...coords,\n      },\n      colorStops,\n      offsetX,\n      offsetY,\n      gradientTransform,\n      id: id ? `${id}_${uid()}` : uid(),\n    });\n  }\n\n  /**\n   * Adds another colorStop\n   * @param {Record<string, string>} colorStop Object with offset and color\n   * @return {Gradient} thisArg\n   */\n  addColorStop(colorStops: Record<string, string>) {\n    for (const position in colorStops) {\n      const color = new Color(colorStops[position]);\n      this.colorStops.push({\n        offset: parseFloat(position),\n        color: color.toRgb(),\n        opacity: color.getAlpha(),\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Returns object representation of a gradient\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {object}\n   */\n  toObject(propertiesToInclude?: (keyof this | string)[]) {\n    return {\n      ...pick(this, propertiesToInclude as (keyof this)[]),\n      type: this.type,\n      coords: { ...this.coords },\n      colorStops: this.colorStops.map((colorStop) => ({ ...colorStop })),\n      offsetX: this.offsetX,\n      offsetY: this.offsetY,\n      gradientUnits: this.gradientUnits,\n      gradientTransform: this.gradientTransform\n        ? [...this.gradientTransform]\n        : undefined,\n    };\n  }\n\n  /* _TO_SVG_START_ */\n  /**\n   * Returns SVG representation of an gradient\n   * @param {FabricObject} object Object to create a gradient for\n   * @return {String} SVG representation of an gradient (linear/radial)\n   */\n  toSVG(\n    object: FabricObject,\n    {\n      additionalTransform: preTransform,\n    }: { additionalTransform?: string } = {},\n  ) {\n    const markup = [],\n      transform = (\n        this.gradientTransform\n          ? this.gradientTransform.concat()\n          : iMatrix.concat()\n      ) as TMat2D,\n      gradientUnits =\n        this.gradientUnits === 'pixels'\n          ? 'userSpaceOnUse'\n          : 'objectBoundingBox';\n    // colorStops must be sorted ascending, and guarded against deep mutations\n    const colorStops = this.colorStops\n      .map((colorStop) => ({ ...colorStop }))\n      .sort((a, b) => {\n        return a.offset - b.offset;\n      });\n\n    let offsetX = -this.offsetX,\n      offsetY = -this.offsetY;\n    if (gradientUnits === 'objectBoundingBox') {\n      offsetX /= object.width;\n      offsetY /= object.height;\n    } else {\n      offsetX += object.width / 2;\n      offsetY += object.height / 2;\n    }\n    // todo what about polygon/polyline?\n    if (isPath(object) && this.gradientUnits !== 'percentage') {\n      offsetX -= object.pathOffset.x;\n      offsetY -= object.pathOffset.y;\n    }\n    transform[4] -= offsetX;\n    transform[5] -= offsetY;\n\n    const commonAttributes = [\n      `id=\"SVGID_${this.id}\"`,\n      `gradientUnits=\"${gradientUnits}\"`,\n      `gradientTransform=\"${\n        preTransform ? preTransform + ' ' : ''\n      }${matrixToSVG(transform)}\"`,\n      '',\n    ].join(' ');\n\n    if (this.type === 'linear') {\n      const { x1, y1, x2, y2 } = this.coords;\n      markup.push(\n        '<linearGradient ',\n        commonAttributes,\n        ' x1=\"',\n        x1,\n        '\" y1=\"',\n        y1,\n        '\" x2=\"',\n        x2,\n        '\" y2=\"',\n        y2,\n        '\">\\n',\n      );\n    } else if (this.type === 'radial') {\n      const { x1, y1, x2, y2, r1, r2 } = this\n        .coords as GradientCoords<'radial'>;\n      const needsSwap = r1 > r2;\n      // svg radial gradient has just 1 radius. the biggest.\n      markup.push(\n        '<radialGradient ',\n        commonAttributes,\n        ' cx=\"',\n        needsSwap ? x1 : x2,\n        '\" cy=\"',\n        needsSwap ? y1 : y2,\n        '\" r=\"',\n        needsSwap ? r1 : r2,\n        '\" fx=\"',\n        needsSwap ? x2 : x1,\n        '\" fy=\"',\n        needsSwap ? y2 : y1,\n        '\">\\n',\n      );\n      if (needsSwap) {\n        // svg goes from internal to external radius. if radius are inverted, swap color stops.\n        colorStops.reverse(); //  mutates array\n        colorStops.forEach((colorStop) => {\n          colorStop.offset = 1 - colorStop.offset;\n        });\n      }\n      const minRadius = Math.min(r1, r2);\n      if (minRadius > 0) {\n        // i have to shift all colorStops and add new one in 0.\n        const maxRadius = Math.max(r1, r2),\n          percentageShift = minRadius / maxRadius;\n        colorStops.forEach((colorStop) => {\n          colorStop.offset += percentageShift * (1 - colorStop.offset);\n        });\n      }\n    }\n\n    colorStops.forEach(({ color, offset, opacity }) => {\n      markup.push(\n        '<stop ',\n        'offset=\"',\n        offset * 100 + '%',\n        '\" style=\"stop-color:',\n        color,\n        typeof opacity !== 'undefined' ? ';stop-opacity: ' + opacity : ';',\n        '\"/>\\n',\n      );\n    });\n\n    markup.push(\n      this.type === 'linear' ? '</linearGradient>' : '</radialGradient>',\n      '\\n',\n    );\n\n    return markup.join('');\n  }\n  /* _TO_SVG_END_ */\n\n  /**\n   * Returns an instance of CanvasGradient\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @return {CanvasGradient}\n   */\n  toLive(ctx: CanvasRenderingContext2D): CanvasGradient {\n    const { x1, y1, x2, y2, r1, r2 } = this.coords as GradientCoords<'radial'>;\n    const gradient =\n      this.type === 'linear'\n        ? ctx.createLinearGradient(x1, y1, x2, y2)\n        : ctx.createRadialGradient(x1, y1, r1, x2, y2, r2);\n\n    this.colorStops.forEach(({ color, opacity, offset }) => {\n      gradient.addColorStop(\n        offset,\n        typeof opacity !== 'undefined'\n          ? new Color(color).setAlpha(opacity).toRgba()\n          : color,\n      );\n    });\n\n    return gradient;\n  }\n\n  static async fromObject(\n    options: GradientOptions<'linear'>,\n  ): Promise<Gradient<'radial'>>;\n  static async fromObject(\n    options: GradientOptions<'radial'>,\n  ): Promise<Gradient<'radial'>>;\n  static async fromObject(\n    options: GradientOptions<'linear'> | GradientOptions<'radial'>,\n  ) {\n    const { colorStops, gradientTransform } = options;\n    return new this({\n      ...options,\n      colorStops: colorStops\n        ? colorStops.map((colorStop) => ({ ...colorStop }))\n        : undefined,\n      gradientTransform: gradientTransform ? [...gradientTransform] : undefined,\n    });\n  }\n\n  /* _FROM_SVG_START_ */\n  /**\n   * Returns {@link Gradient} instance from an SVG element\n   * @static\n   * @memberOf Gradient\n   * @param {SVGGradientElement} el SVG gradient element\n   * @param {FabricObject} instance\n   * @param {String} opacity A fill-opacity or stroke-opacity attribute to multiply to each stop's opacity.\n   * @param {SVGOptions} svgOptions an object containing the size of the SVG in order to parse correctly gradients\n   * that uses gradientUnits as 'userSpaceOnUse' and percentages.\n   * @return {Gradient} Gradient instance\n   * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement\n   * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement\n   *\n   *  @example\n   *\n   *  <linearGradient id=\"linearGrad1\">\n   *    <stop offset=\"0%\" stop-color=\"white\"/>\n   *    <stop offset=\"100%\" stop-color=\"black\"/>\n   *  </linearGradient>\n   *\n   *  OR\n   *\n   *  <linearGradient id=\"linearGrad2\">\n   *    <stop offset=\"0\" style=\"stop-color:rgb(255,255,255)\"/>\n   *    <stop offset=\"1\" style=\"stop-color:rgb(0,0,0)\"/>\n   *  </linearGradient>\n   *\n   *  OR\n   *\n   *  <radialGradient id=\"radialGrad1\">\n   *    <stop offset=\"0%\" stop-color=\"white\" stop-opacity=\"1\" />\n   *    <stop offset=\"50%\" stop-color=\"black\" stop-opacity=\"0.5\" />\n   *    <stop offset=\"100%\" stop-color=\"white\" stop-opacity=\"1\" />\n   *  </radialGradient>\n   *\n   *  OR\n   *\n   *  <radialGradient id=\"radialGrad2\">\n   *    <stop offset=\"0\" stop-color=\"rgb(255,255,255)\" />\n   *    <stop offset=\"0.5\" stop-color=\"rgb(0,0,0)\" />\n   *    <stop offset=\"1\" stop-color=\"rgb(255,255,255)\" />\n   *  </radialGradient>\n   *\n   */\n  static fromElement(\n    el: SVGGradientElement,\n    instance: FabricObject,\n    svgOptions: SVGOptions,\n  ): Gradient<GradientType> {\n    const gradientUnits = parseGradientUnits(el);\n    const center = instance._findCenterFromElement();\n    return new this({\n      id: el.getAttribute('id') || undefined,\n      type: parseType(el),\n      coords: parseCoords(el, {\n        width: svgOptions.viewBoxWidth || svgOptions.width,\n        height: svgOptions.viewBoxHeight || svgOptions.height,\n      }),\n      colorStops: parseColorStops(el, svgOptions.opacity),\n      gradientUnits,\n      gradientTransform: parseTransformAttribute(\n        el.getAttribute('gradientTransform') || '',\n      ),\n      ...(gradientUnits === 'pixels'\n        ? {\n            offsetX: instance.width / 2 - center.x,\n            offsetY: instance.height / 2 - center.y,\n          }\n        : {\n            offsetX: 0,\n            offsetY: 0,\n          }),\n    });\n  }\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Gradient, 'gradient');\nclassRegistry.setClass(Gradient, 'linear');\nclassRegistry.setClass(Gradient, 'radial');\n","import { config } from '../config';\nimport type { Abortable, TCrossOrigin, TMat2D, TSize } from '../typedefs';\nimport { ifNaN } from '../util/internals/ifNaN';\nimport { uid } from '../util/internals/uid';\nimport { loadImage } from '../util/misc/objectEnlive';\nimport { pick } from '../util/misc/pick';\nimport { toFixed } from '../util/misc/toFixed';\nimport { classRegistry } from '../ClassRegistry';\nimport type {\n  PatternRepeat,\n  PatternOptions,\n  SerializedPatternOptions,\n} from './types';\nimport { log } from '../util/internals/console';\n\n/**\n * @see {@link http://fabricjs.com/patterns demo}\n * @see {@link http://fabricjs.com/dynamic-patterns demo}\n */\nexport class Pattern {\n  static type = 'Pattern';\n\n  /**\n   * Legacy identifier of the class. Prefer using this.constructor.type 'Pattern'\n   * or utils like isPattern, or instance of to indentify a pattern in your code.\n   * Will be removed in future versiones\n   * @TODO add sustainable warning message\n   * @type string\n   * @deprecated\n   */\n  get type() {\n    return 'pattern';\n  }\n\n  set type(value) {\n    log('warn', 'Setting type has no effect', value);\n  }\n\n  /**\n   * @type PatternRepeat\n   * @defaults\n   */\n  repeat: PatternRepeat = 'repeat';\n\n  /**\n   * Pattern horizontal offset from object's left/top corner\n   * @type Number\n   * @default\n   */\n  offsetX = 0;\n\n  /**\n   * Pattern vertical offset from object's left/top corner\n   * @type Number\n   * @default\n   */\n  offsetY = 0;\n\n  /**\n   * @type TCrossOrigin\n   * @default\n   */\n  crossOrigin: TCrossOrigin = '';\n\n  /**\n   * transform matrix to change the pattern, imported from svgs.\n   * @todo verify if using the identity matrix as default makes the rest of the code more easy\n   * @type Array\n   * @default\n   */\n  declare patternTransform?: TMat2D;\n\n  /**\n   * The actual pixel source of the pattern\n   */\n  declare source: CanvasImageSource;\n\n  /**\n   * If true, this object will not be exported during the serialization of a canvas\n   * @type boolean\n   */\n  declare excludeFromExport?: boolean;\n\n  /**\n   * ID used for SVG export functionalities\n   * @type number\n   */\n  declare readonly id: number;\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   * @param {option.source} [source] the pattern source, eventually empty or a drawable\n   */\n  constructor(options: PatternOptions) {\n    this.id = uid();\n    Object.assign(this, options);\n  }\n\n  /**\n   * @returns true if {@link source} is an <img> element\n   */\n  isImageSource(): this is { source: HTMLImageElement } {\n    return (\n      !!this.source && typeof (this.source as HTMLImageElement).src === 'string'\n    );\n  }\n\n  /**\n   * @returns true if {@link source} is a <canvas> element\n   */\n  isCanvasSource(): this is { source: HTMLCanvasElement } {\n    return !!this.source && !!(this.source as HTMLCanvasElement).toDataURL;\n  }\n\n  sourceToString(): string {\n    return this.isImageSource()\n      ? this.source.src\n      : this.isCanvasSource()\n        ? this.source.toDataURL()\n        : '';\n  }\n\n  /**\n   * Returns an instance of CanvasPattern\n   * @param {CanvasRenderingContext2D} ctx Context to create pattern\n   * @return {CanvasPattern}\n   */\n  toLive(ctx: CanvasRenderingContext2D): CanvasPattern | null {\n    if (\n      // if the image failed to load, return, and allow rest to continue loading\n      !this.source ||\n      // if an image\n      (this.isImageSource() &&\n        (!this.source.complete ||\n          this.source.naturalWidth === 0 ||\n          this.source.naturalHeight === 0))\n    ) {\n      return null;\n    }\n\n    return ctx.createPattern(this.source, this.repeat)!;\n  }\n\n  /**\n   * Returns object representation of a pattern\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {object} Object representation of a pattern instance\n   */\n  toObject(propertiesToInclude: string[] = []): Record<string, any> {\n    const { repeat, crossOrigin } = this;\n    return {\n      ...pick(this, propertiesToInclude as (keyof this)[]),\n      type: 'pattern',\n      source: this.sourceToString(),\n      repeat,\n      crossOrigin,\n      offsetX: toFixed(this.offsetX, config.NUM_FRACTION_DIGITS),\n      offsetY: toFixed(this.offsetY, config.NUM_FRACTION_DIGITS),\n      patternTransform: this.patternTransform\n        ? [...this.patternTransform]\n        : null,\n    };\n  }\n\n  /* _TO_SVG_START_ */\n  /**\n   * Returns SVG representation of a pattern\n   */\n  toSVG({ width, height }: TSize): string {\n    const { source: patternSource, repeat, id } = this,\n      patternOffsetX = ifNaN(this.offsetX / width, 0),\n      patternOffsetY = ifNaN(this.offsetY / height, 0),\n      patternWidth =\n        repeat === 'repeat-y' || repeat === 'no-repeat'\n          ? 1 + Math.abs(patternOffsetX || 0)\n          : ifNaN(\n              ((patternSource as HTMLImageElement).width as number) / width,\n              0,\n            ),\n      patternHeight =\n        repeat === 'repeat-x' || repeat === 'no-repeat'\n          ? 1 + Math.abs(patternOffsetY || 0)\n          : ifNaN(\n              ((patternSource as HTMLImageElement).height as number) / height,\n              0,\n            );\n\n    return [\n      `<pattern id=\"SVGID_${id}\" x=\"${patternOffsetX}\" y=\"${patternOffsetY}\" width=\"${patternWidth}\" height=\"${patternHeight}\">`,\n      `<image x=\"0\" y=\"0\" width=\"${\n        (patternSource as HTMLImageElement).width\n      }\" height=\"${\n        (patternSource as HTMLImageElement).height\n      }\" xlink:href=\"${this.sourceToString()}\"></image>`,\n      `</pattern>`,\n      '',\n    ].join('\\n');\n  }\n  /* _TO_SVG_END_ */\n\n  static async fromObject(\n    {\n      type,\n      source,\n      patternTransform,\n      ...otherOptions\n    }: SerializedPatternOptions,\n    options?: Abortable,\n  ): Promise<Pattern> {\n    const img = await loadImage(source, {\n      ...options,\n      crossOrigin: otherOptions.crossOrigin,\n    });\n    return new this({\n      ...otherOptions,\n      patternTransform:\n        patternTransform && (patternTransform.slice(0) as TMat2D),\n      source: img,\n    });\n  }\n}\n\nclassRegistry.setClass(Pattern);\n// kept for compatibility reason\nclassRegistry.setClass(Pattern, 'pattern');\n","import { Color } from '../color/Color';\nimport type { Point } from '../Point';\nimport type { Shadow } from '../Shadow';\nimport type { Canvas } from '../canvas/Canvas';\nimport type { TBrushEventData } from './typedefs';\n\n/**\n * @see {@link http://fabricjs.com/freedrawing|Freedrawing demo}\n */\nexport abstract class BaseBrush {\n  /**\n   * Color of a brush\n   * @type String\n   * @default\n   */\n  color = 'rgb(0, 0, 0)';\n\n  /**\n   * Width of a brush, has to be a Number, no string literals\n   * @type Number\n   * @default\n   */\n  width = 1;\n\n  /**\n   * Shadow object representing shadow of this shape.\n   * <b>Backwards incompatibility note:</b> This property replaces \"shadowColor\" (String), \"shadowOffsetX\" (Number),\n   * \"shadowOffsetY\" (Number) and \"shadowBlur\" (Number) since v1.2.12\n   * @type Shadow\n   * @default\n   */\n  shadow: Shadow | null = null;\n\n  /**\n   * Line endings style of a brush (one of \"butt\", \"round\", \"square\")\n   * @type String\n   * @default\n   */\n  strokeLineCap: CanvasLineCap = 'round';\n\n  /**\n   * Corner style of a brush (one of \"bevel\", \"round\", \"miter\")\n   * @type String\n   * @default\n   */\n  strokeLineJoin: CanvasLineJoin = 'round';\n\n  /**\n   * Maximum miter length (used for strokeLineJoin = \"miter\") of a brush's\n   * @type Number\n   * @default\n   */\n  strokeMiterLimit = 10;\n\n  /**\n   * Stroke Dash Array.\n   * @type Array\n   * @default\n   */\n  strokeDashArray: number[] | null = null;\n\n  /**\n   * When `true`, the free drawing is limited to the whiteboard size. Default to false.\n   * @type Boolean\n   * @default false\n   */\n\n  limitedToCanvasSize = false;\n\n  /**\n   * @todo add type\n   */\n  declare canvas: Canvas;\n\n  constructor(canvas: Canvas) {\n    this.canvas = canvas;\n  }\n\n  abstract _render(): void;\n  abstract onMouseDown(pointer: Point, ev: TBrushEventData): void;\n  abstract onMouseMove(pointer: Point, ev: TBrushEventData): void;\n  /**\n   * @returns true if brush should continue blocking interaction\n   */\n  abstract onMouseUp(ev: TBrushEventData): boolean | void;\n\n  /**\n   * Sets brush styles\n   * @private\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  _setBrushStyles(ctx: CanvasRenderingContext2D) {\n    ctx.strokeStyle = this.color;\n    ctx.lineWidth = this.width;\n    ctx.lineCap = this.strokeLineCap;\n    ctx.miterLimit = this.strokeMiterLimit;\n    ctx.lineJoin = this.strokeLineJoin;\n    ctx.setLineDash(this.strokeDashArray || []);\n  }\n\n  /**\n   * Sets the transformation on given context\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   * @private\n   */\n  protected _saveAndTransform(ctx: CanvasRenderingContext2D) {\n    const v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n  }\n\n  protected needsFullRender() {\n    const color = new Color(this.color);\n    return color.getAlpha() < 1 || !!this.shadow;\n  }\n\n  /**\n   * Sets brush shadow styles\n   * @private\n   */\n  protected _setShadow() {\n    if (!this.shadow || !this.canvas) {\n      return;\n    }\n\n    const canvas = this.canvas,\n      shadow = this.shadow,\n      ctx = canvas.contextTop,\n      zoom = canvas.getZoom() * canvas.getRetinaScaling();\n\n    ctx.shadowColor = shadow.color;\n    ctx.shadowBlur = shadow.blur * zoom;\n    ctx.shadowOffsetX = shadow.offsetX * zoom;\n    ctx.shadowOffsetY = shadow.offsetY * zoom;\n  }\n\n  /**\n   * Removes brush shadow styles\n   * @private\n   */\n  protected _resetShadow() {\n    const ctx = this.canvas.contextTop;\n\n    ctx.shadowColor = '';\n    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n  }\n\n  /**\n   * Check is pointer is outside canvas boundaries\n   * @param {Object} pointer\n   * @private\n   */\n  protected _isOutSideCanvas(pointer: Point) {\n    return (\n      pointer.x < 0 ||\n      pointer.x > this.canvas.getWidth() ||\n      pointer.y < 0 ||\n      pointer.y > this.canvas.getHeight()\n    );\n  }\n}\n","import { config } from '../config';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { XY } from '../Point';\nimport { Point } from '../Point';\nimport { makeBoundingBoxFromPoints } from '../util/misc/boundingBoxFromPoints';\nimport { toFixed } from '../util/misc/toFixed';\nimport {\n  getBoundsOfCurve,\n  joinPath,\n  makePathSimpler,\n  parsePath,\n} from '../util/path';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type {\n  TComplexPathData,\n  TPathSegmentInfo,\n  TSimplePathData,\n} from '../util/path/typedefs';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type {\n  TBBox,\n  TClassProperties,\n  TSVGReviver,\n  TOptions,\n} from '../typedefs';\nimport { CENTER, LEFT, TOP } from '../constants';\nimport type { CSSRules } from '../parser/typedefs';\n\ninterface UniquePathProps {\n  sourcePath?: string;\n  path?: TSimplePathData;\n}\n\nexport interface SerializedPathProps\n  extends SerializedObjectProps,\n    UniquePathProps {}\n\nexport interface PathProps extends FabricObjectProps, UniquePathProps {}\n\nexport interface IPathBBox extends TBBox {\n  left: number;\n  top: number;\n  pathOffset: Point;\n}\n\nexport class Path<\n  Props extends TOptions<PathProps> = Partial<PathProps>,\n  SProps extends SerializedPathProps = SerializedPathProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObject<Props, SProps, EventSpec> {\n  /**\n   * Array of path points\n   * @type Array\n   * @default\n   */\n  declare path: TSimplePathData;\n\n  declare pathOffset: Point;\n\n  declare sourcePath?: string;\n\n  declare segmentsInfo?: TPathSegmentInfo[];\n\n  static type = 'Path';\n\n  static cacheProperties = [...cacheProperties, 'path', 'fillRule'];\n\n  /**\n   * Constructor\n   * @param {TComplexPathData} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n   * @param {Partial<PathProps>} [options] Options object\n   * @return {Path} thisArg\n   */\n  constructor(\n    path: TComplexPathData | string,\n    // todo: evaluate this spread here\n    { path: _, left, top, ...options }: Partial<Props> = {},\n  ) {\n    super();\n    Object.assign(this, Path.ownDefaults);\n    this.setOptions(options);\n    this._setPath(path || [], true);\n    typeof left === 'number' && this.set(LEFT, left);\n    typeof top === 'number' && this.set(TOP, top);\n  }\n\n  /**\n   * @private\n   * @param {TComplexPathData | string} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n   * @param {boolean} [adjustPosition] pass true to reposition the object according to the bounding box\n   * @returns {Point} top left position of the bounding box, useful for complementary positioning\n   */\n  _setPath(path: TComplexPathData | string, adjustPosition?: boolean) {\n    this.path = makePathSimpler(Array.isArray(path) ? path : parsePath(path));\n    this.setBoundingBox(adjustPosition);\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates, by look at the polyline/polygon points.\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement(): Point {\n    const bbox = this._calcBoundsFromPath();\n    return new Point(bbox.left + bbox.width / 2, bbox.top + bbox.height / 2);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render path on\n   */\n  _renderPathCommands(ctx: CanvasRenderingContext2D) {\n    const l = -this.pathOffset.x,\n      t = -this.pathOffset.y;\n\n    ctx.beginPath();\n\n    for (const command of this.path) {\n      switch (\n        command[0] // first letter\n      ) {\n        case 'L': // lineto, absolute\n          ctx.lineTo(command[1] + l, command[2] + t);\n          break;\n\n        case 'M': // moveTo, absolute\n          ctx.moveTo(command[1] + l, command[2] + t);\n          break;\n\n        case 'C': // bezierCurveTo, absolute\n          ctx.bezierCurveTo(\n            command[1] + l,\n            command[2] + t,\n            command[3] + l,\n            command[4] + t,\n            command[5] + l,\n            command[6] + t,\n          );\n          break;\n\n        case 'Q': // quadraticCurveTo, absolute\n          ctx.quadraticCurveTo(\n            command[1] + l,\n            command[2] + t,\n            command[3] + l,\n            command[4] + t,\n          );\n          break;\n\n        case 'Z':\n          ctx.closePath();\n          break;\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render path on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    this._renderPathCommands(ctx);\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {string} string representation of an instance\n   */\n  toString() {\n    return `#<Path (${this.complexity()}): { \"top\": ${this.top}, \"left\": ${\n      this.left\n    } }>`;\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject(propertiesToInclude),\n      path: this.path.map((pathCmd) => pathCmd.slice()),\n    };\n  }\n\n  /**\n   * Returns dataless object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toDatalessObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    const o = this.toObject<T, K>(propertiesToInclude);\n    if (this.sourcePath) {\n      delete o.path;\n      o.sourcePath = this.sourcePath;\n    }\n    return o;\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const path = joinPath(this.path, config.NUM_FRACTION_DIGITS);\n    return [\n      '<path ',\n      'COMMON_PARTS',\n      `d=\"${path}\" stroke-linecap=\"round\" />\\n`,\n    ];\n  }\n\n  /**\n   * @private\n   * @return the path command's translate transform attribute\n   */\n  _getOffsetTransform() {\n    const digits = config.NUM_FRACTION_DIGITS;\n    return ` translate(${toFixed(-this.pathOffset.x, digits)}, ${toFixed(\n      -this.pathOffset.y,\n      digits,\n    )})`;\n  }\n\n  /**\n   * Returns svg clipPath representation of an instance\n   * @param {Function} [reviver] Method for further parsing of svg representation.\n   * @return {string} svg representation of an instance\n   */\n  toClipPathSVG(reviver?: TSVGReviver): string {\n    const additionalTransform = this._getOffsetTransform();\n    return (\n      '\\t' +\n      this._createBaseClipPathSVGMarkup(this._toSVG(), {\n        reviver,\n        additionalTransform: additionalTransform,\n      })\n    );\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @param {Function} [reviver] Method for further parsing of svg representation.\n   * @return {string} svg representation of an instance\n   */\n  toSVG(reviver?: TSVGReviver): string {\n    const additionalTransform = this._getOffsetTransform();\n    return this._createBaseSVGMarkup(this._toSVG(), {\n      reviver,\n      additionalTransform: additionalTransform,\n    });\n  }\n\n  /**\n   * Returns number representation of an instance complexity\n   * @return {number} complexity of this instance\n   */\n  complexity() {\n    return this.path.length;\n  }\n\n  setDimensions() {\n    this.setBoundingBox();\n  }\n\n  setBoundingBox(adjustPosition?: boolean) {\n    const { width, height, pathOffset } = this._calcDimensions();\n    this.set({ width, height, pathOffset });\n    // using pathOffset because it match the use case.\n    // if pathOffset change here we need to use left + width/2 , top + height/2\n    adjustPosition && this.setPositionByOrigin(pathOffset, CENTER, CENTER);\n  }\n\n  _calcBoundsFromPath(): TBBox {\n    const bounds: XY[] = [];\n    let subpathStartX = 0,\n      subpathStartY = 0,\n      x = 0, // current x\n      y = 0; // current y\n\n    for (const command of this.path) {\n      // current instruction\n      switch (\n        command[0] // first letter\n      ) {\n        case 'L': // lineto, absolute\n          x = command[1];\n          y = command[2];\n          bounds.push({ x: subpathStartX, y: subpathStartY }, { x, y });\n          break;\n\n        case 'M': // moveTo, absolute\n          x = command[1];\n          y = command[2];\n          subpathStartX = x;\n          subpathStartY = y;\n          break;\n\n        case 'C': // bezierCurveTo, absolute\n          bounds.push(\n            ...getBoundsOfCurve(\n              x,\n              y,\n              command[1],\n              command[2],\n              command[3],\n              command[4],\n              command[5],\n              command[6],\n            ),\n          );\n          x = command[5];\n          y = command[6];\n          break;\n\n        case 'Q': // quadraticCurveTo, absolute\n          bounds.push(\n            ...getBoundsOfCurve(\n              x,\n              y,\n              command[1],\n              command[2],\n              command[1],\n              command[2],\n              command[3],\n              command[4],\n            ),\n          );\n          x = command[3];\n          y = command[4];\n          break;\n\n        case 'Z':\n          x = subpathStartX;\n          y = subpathStartY;\n          break;\n      }\n    }\n    return makeBoundingBoxFromPoints(bounds);\n  }\n\n  /**\n   * @private\n   */\n  _calcDimensions(): IPathBBox {\n    const bbox = this._calcBoundsFromPath();\n\n    return {\n      ...bbox,\n      pathOffset: new Point(\n        bbox.left + bbox.width / 2,\n        bbox.top + bbox.height / 2,\n      ),\n    };\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `Path.fromElement`)\n   * @static\n   * @memberOf Path\n   * @see http://www.w3.org/TR/SVG/paths.html#PathElement\n   */\n  static ATTRIBUTE_NAMES = [...SHARED_ATTRIBUTES, 'd'];\n\n  /**\n   * Creates an instance of Path from an object\n   * @static\n   * @memberOf Path\n   * @param {Object} object\n   * @returns {Promise<Path>}\n   */\n  static fromObject<T extends TOptions<SerializedPathProps>>(object: T) {\n    return this._fromObject<Path>(object, {\n      extraParam: 'path',\n    });\n  }\n\n  /**\n   * Creates an instance of Path from an SVG <path> element\n   * @static\n   * @memberOf Path\n   * @param {HTMLElement} element to parse\n   * @param {Partial<PathProps>} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Partial<PathProps>,\n    cssRules?: CSSRules,\n  ) {\n    const { d, ...parsedAttributes } = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n    return new this(d, {\n      ...parsedAttributes,\n      ...options,\n      // we pass undefined to instruct the constructor to position the object using the bbox\n      left: undefined,\n      top: undefined,\n    });\n  }\n}\n\nclassRegistry.setClass(Path);\nclassRegistry.setSVGClass(Path);\n\n/* _FROM_SVG_START_ */\n","import type { ModifierKey, TEvent } from '../EventTypeDefs';\nimport type { Point } from '../Point';\nimport { Shadow } from '../Shadow';\nimport { Path } from '../shapes/Path';\nimport { getSmoothPathFromPoints, joinPath } from '../util/path';\nimport type { Canvas } from '../canvas/Canvas';\nimport { BaseBrush } from './BaseBrush';\nimport type { TSimplePathData } from '../util/path/typedefs';\n\n/**\n * @private\n * @param {TSimplePathData} pathData SVG path commands\n * @returns {boolean}\n */\nfunction isEmptySVGPath(pathData: TSimplePathData): boolean {\n  return joinPath(pathData) === 'M 0 0 Q 0 0 0 0 L 0 0';\n}\n\nexport class PencilBrush extends BaseBrush {\n  /**\n   * Discard points that are less than `decimate` pixel distant from each other\n   * @type Number\n   * @default 0.4\n   */\n  decimate = 0.4;\n\n  /**\n   * Draws a straight line between last recorded point to current pointer\n   * Used for `shift` functionality\n   *\n   * @type boolean\n   * @default false\n   */\n  drawStraightLine = false;\n\n  /**\n   * The event modifier key that makes the brush draw a straight line.\n   * If `null` or 'none' or any other string that is not a modifier key the feature is disabled.\n   * @type {ModifierKey | undefined | null}\n   */\n  straightLineKey: ModifierKey | undefined | null = 'shiftKey';\n\n  protected declare _points: Point[];\n  protected declare _hasStraightLine: boolean;\n  protected declare oldEnd?: Point;\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n    this._points = [];\n    this._hasStraightLine = false;\n  }\n\n  needsFullRender() {\n    return super.needsFullRender() || this._hasStraightLine;\n  }\n\n  static drawSegment(ctx: CanvasRenderingContext2D, p1: Point, p2: Point) {\n    const midPoint = p1.midPointFrom(p2);\n    ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\n    return midPoint;\n  }\n\n  /**\n   * Invoked on mouse down\n   * @param {Point} pointer\n   */\n  onMouseDown(pointer: Point, { e }: TEvent) {\n    if (!this.canvas._isMainEvent(e)) {\n      return;\n    }\n    this.drawStraightLine = !!this.straightLineKey && e[this.straightLineKey];\n    this._prepareForDrawing(pointer);\n    // capture coordinates immediately\n    // this allows to draw dots (when movement never occurs)\n    this._addPoint(pointer);\n    this._render();\n  }\n\n  /**\n   * Invoked on mouse move\n   * @param {Point} pointer\n   */\n  onMouseMove(pointer: Point, { e }: TEvent) {\n    if (!this.canvas._isMainEvent(e)) {\n      return;\n    }\n    this.drawStraightLine = !!this.straightLineKey && e[this.straightLineKey];\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    if (this._addPoint(pointer) && this._points.length > 1) {\n      if (this.needsFullRender()) {\n        // redraw curve\n        // clear top canvas\n        this.canvas.clearContext(this.canvas.contextTop);\n        this._render();\n      } else {\n        const points = this._points,\n          length = points.length,\n          ctx = this.canvas.contextTop;\n        // draw the curve update\n        this._saveAndTransform(ctx);\n        if (this.oldEnd) {\n          ctx.beginPath();\n          ctx.moveTo(this.oldEnd.x, this.oldEnd.y);\n        }\n        this.oldEnd = PencilBrush.drawSegment(\n          ctx,\n          points[length - 2],\n          points[length - 1],\n        );\n        ctx.stroke();\n        ctx.restore();\n      }\n    }\n  }\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp({ e }: TEvent) {\n    if (!this.canvas._isMainEvent(e)) {\n      return true;\n    }\n    this.drawStraightLine = false;\n    this.oldEnd = undefined;\n    this._finalizeAndAddPath();\n    return false;\n  }\n\n  /**\n   * @private\n   * @param {Point} pointer Actual mouse position related to the canvas.\n   */\n  _prepareForDrawing(pointer: Point) {\n    this._reset();\n    this._addPoint(pointer);\n    this.canvas.contextTop.moveTo(pointer.x, pointer.y);\n  }\n\n  /**\n   * @private\n   * @param {Point} point Point to be added to points array\n   */\n  _addPoint(point: Point) {\n    if (\n      this._points.length > 1 &&\n      point.eq(this._points[this._points.length - 1])\n    ) {\n      return false;\n    }\n    if (this.drawStraightLine && this._points.length > 1) {\n      this._hasStraightLine = true;\n      this._points.pop();\n    }\n    this._points.push(point);\n    return true;\n  }\n\n  /**\n   * Clear points array and set contextTop canvas style.\n   * @private\n   */\n  _reset() {\n    this._points = [];\n    this._setBrushStyles(this.canvas.contextTop);\n    this._setShadow();\n    this._hasStraightLine = false;\n  }\n\n  /**\n   * Draw a smooth path on the topCanvas using quadraticCurveTo\n   * @private\n   * @param {CanvasRenderingContext2D} [ctx]\n   */\n  _render(ctx: CanvasRenderingContext2D = this.canvas.contextTop) {\n    let p1 = this._points[0],\n      p2 = this._points[1];\n    this._saveAndTransform(ctx);\n    ctx.beginPath();\n    //if we only have 2 points in the path and they are the same\n    //it means that the user only clicked the canvas without moving the mouse\n    //then we should be drawing a dot. A path isn't drawn between two identical dots\n    //that's why we set them apart a bit\n    if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {\n      const width = this.width / 1000;\n      p1.x -= width;\n      p2.x += width;\n    }\n    ctx.moveTo(p1.x, p1.y);\n\n    for (let i = 1; i < this._points.length; i++) {\n      // we pick the point between pi + 1 & pi + 2 as the\n      // end point and p1 as our control point.\n      PencilBrush.drawSegment(ctx, p1, p2);\n      p1 = this._points[i];\n      p2 = this._points[i + 1];\n    }\n    // Draw last line as a straight line while\n    // we wait for the next point to be able to calculate\n    // the bezier control point\n    ctx.lineTo(p1.x, p1.y);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  /**\n   * Converts points to SVG path\n   * @param {Point[]} points Array of points\n   * @return {TSimplePathData} SVG path commands\n   */\n  convertPointsToSVGPath(points: Point[]): TSimplePathData {\n    const correction = this.width / 1000;\n    return getSmoothPathFromPoints(points, correction);\n  }\n\n  /**\n   * Creates a Path object to add on canvas\n   * @param {TSimplePathData} pathData Path data\n   * @return {Path} Path to add on canvas\n   */\n  createPath(pathData: TSimplePathData): Path {\n    const path = new Path(pathData, {\n      fill: null,\n      stroke: this.color,\n      strokeWidth: this.width,\n      strokeLineCap: this.strokeLineCap,\n      strokeMiterLimit: this.strokeMiterLimit,\n      strokeLineJoin: this.strokeLineJoin,\n      strokeDashArray: this.strokeDashArray,\n    });\n    if (this.shadow) {\n      this.shadow.affectStroke = true;\n      path.shadow = new Shadow(this.shadow);\n    }\n\n    return path;\n  }\n\n  /**\n   * Decimate points array with the decimate value\n   */\n  decimatePoints(points: Point[], distance: number) {\n    if (points.length <= 2) {\n      return points;\n    }\n    let lastPoint = points[0],\n      cDistance;\n    const zoom = this.canvas.getZoom(),\n      adjustedDistance = Math.pow(distance / zoom, 2),\n      l = points.length - 1,\n      newPoints = [lastPoint];\n    for (let i = 1; i < l - 1; i++) {\n      cDistance =\n        Math.pow(lastPoint.x - points[i].x, 2) +\n        Math.pow(lastPoint.y - points[i].y, 2);\n      if (cDistance >= adjustedDistance) {\n        lastPoint = points[i];\n        newPoints.push(lastPoint);\n      }\n    }\n    // Add the last point from the original line to the end of the array.\n    // This ensures decimate doesn't delete the last point on the line, and ensures the line is > 1 point.\n    newPoints.push(points[l]);\n    return newPoints;\n  }\n\n  /**\n   * On mouseup after drawing the path on contextTop canvas\n   * we use the points captured to create an new Path object\n   * and add it to the canvas.\n   */\n  _finalizeAndAddPath() {\n    const ctx = this.canvas.contextTop;\n    ctx.closePath();\n    if (this.decimate) {\n      this._points = this.decimatePoints(this._points, this.decimate);\n    }\n    const pathData = this.convertPointsToSVGPath(this._points);\n    if (isEmptySVGPath(pathData)) {\n      // do not create 0 width/height paths, as they are\n      // rendered inconsistently across browsers\n      // Firefox 4, for example, renders a dot,\n      // whereas Chrome 10 renders nothing\n      this.canvas.requestRenderAll();\n      return;\n    }\n\n    const path = this.createPath(pathData);\n    this.canvas.clearContext(this.canvas.contextTop);\n    this.canvas.fire('before:path:created', { path: path });\n    this.canvas.add(path);\n    this.canvas.requestRenderAll();\n    path.setCoords();\n    this._resetShadow();\n\n    // fire event 'path' created\n    this.canvas.fire('path:created', { path: path });\n  }\n}\n","import type { ObjectEvents } from '../EventTypeDefs';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport { cos } from '../util/misc/cos';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport { sin } from '../util/misc/sin';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { CSSRules } from '../parser/typedefs';\nimport { SCALE_X, SCALE_Y } from '../constants';\n\ninterface UniqueCircleProps {\n  /**\n   * Radius of this circle\n   * @type Number\n   * @default 0\n   */\n  radius: number;\n\n  /**\n   * Angle for the start of the circle, in degrees.\n   * @type TDegree 0 - 359\n   * @default 0\n   */\n  startAngle: number;\n\n  /**\n   * Angle for the end of the circle, in degrees\n   * @type TDegree 1 - 360\n   * @default 360\n   */\n  endAngle: number;\n\n  /**\n   * Orientation for the direction of the circle.\n   * Setting to true will switch the arc of the circle to traverse from startAngle to endAngle in a counter-clockwise direction.\n   * Note: this will only change how the circle is drawn, and does not affect rotational transformation.\n   * @default false\n   */\n  counterClockwise: boolean;\n}\n\nexport interface SerializedCircleProps\n  extends SerializedObjectProps,\n    UniqueCircleProps {}\n\nexport interface CircleProps extends FabricObjectProps, UniqueCircleProps {}\n\nconst CIRCLE_PROPS = [\n  'radius',\n  'startAngle',\n  'endAngle',\n  'counterClockwise',\n] as const;\n\nexport const circleDefaultValues: Partial<TClassProperties<Circle>> = {\n  radius: 0,\n  startAngle: 0,\n  endAngle: 360,\n  counterClockwise: false,\n};\n\nexport class Circle<\n    Props extends TOptions<CircleProps> = Partial<CircleProps>,\n    SProps extends SerializedCircleProps = SerializedCircleProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements UniqueCircleProps\n{\n  declare radius: number;\n  declare startAngle: number;\n  declare endAngle: number;\n  declare counterClockwise: boolean;\n\n  static type = 'Circle';\n\n  static cacheProperties = [...cacheProperties, ...CIRCLE_PROPS];\n\n  static ownDefaults = circleDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Circle.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Circle.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    super._set(key, value);\n\n    if (key === 'radius') {\n      this.setRadius(value);\n    }\n\n    return this;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.arc(\n      0,\n      0,\n      this.radius,\n      degreesToRadians(this.startAngle),\n      degreesToRadians(this.endAngle),\n      this.counterClockwise,\n    );\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns horizontal radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRadiusX(): number {\n    return this.get('radius') * this.get(SCALE_X);\n  }\n\n  /**\n   * Returns vertical radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRadiusY(): number {\n    return this.get('radius') * this.get(SCALE_Y);\n  }\n\n  /**\n   * Sets radius of an object (and updates width accordingly)\n   */\n  setRadius(value: number) {\n    this.radius = value;\n    this.set({ width: value * 2, height: value * 2 });\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...CIRCLE_PROPS, ...propertiesToInclude]);\n  }\n\n  /* _TO_SVG_START_ */\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG(): string[] {\n    const angle = (this.endAngle - this.startAngle) % 360;\n\n    if (angle === 0) {\n      return [\n        '<circle ',\n        'COMMON_PARTS',\n        'cx=\"0\" cy=\"0\" ',\n        'r=\"',\n        `${this.radius}`,\n        '\" />\\n',\n      ];\n    } else {\n      const { radius } = this;\n      const start = degreesToRadians(this.startAngle),\n        end = degreesToRadians(this.endAngle),\n        startX = cos(start) * radius,\n        startY = sin(start) * radius,\n        endX = cos(end) * radius,\n        endY = sin(end) * radius,\n        largeFlag = angle > 180 ? 1 : 0,\n        sweepFlag = this.counterClockwise ? 0 : 1;\n      return [\n        `<path d=\"M ${startX} ${startY} A ${radius} ${radius} 0 ${largeFlag} ${sweepFlag} ${endX} ${endY}\" `,\n        'COMMON_PARTS',\n        ' />\\n',\n      ];\n    }\n  }\n  /* _TO_SVG_END_ */\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Circle.fromElement})\n   * @static\n   * @memberOf Circle\n   * @see: http://www.w3.org/TR/SVG/shapes.html#CircleElement\n   */\n  static ATTRIBUTE_NAMES = ['cx', 'cy', 'r', ...SHARED_ATTRIBUTES];\n\n  /**\n   * Returns {@link Circle} instance from an SVG element\n   * @static\n   * @memberOf Circle\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Partial Circle object to default missing properties on the element.\n   * @throws {Error} If value of `r` attribute is missing or invalid\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ): Promise<Circle> {\n    const {\n      left = 0,\n      top = 0,\n      radius = 0,\n      ...otherParsedAttributes\n    } = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    ) as Partial<CircleProps>;\n\n    // this probably requires to be fixed for default origins not being top/left.\n\n    return new this({\n      ...otherParsedAttributes,\n      radius,\n      left: left - radius,\n      top: top - radius,\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * @todo how do we declare this??\n   */\n  static fromObject<T extends TOptions<SerializedCircleProps>>(object: T) {\n    return super._fromObject<Circle>(object);\n  }\n}\n\nclassRegistry.setClass(Circle);\nclassRegistry.setSVGClass(Circle);\n","import { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport { Point } from '../Point';\nimport { isFiller } from '../util/typeAssertions';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport { makeBoundingBoxFromPoints } from '../util';\nimport { CENTER, LEFT, TOP } from '../constants';\nimport type { CSSRules } from '../parser/typedefs';\n\n// @TODO this code is terrible and Line should be a special case of polyline.\n\nconst coordProps = ['x1', 'x2', 'y1', 'y2'] as const;\n\ninterface UniqueLineProps {\n  x1: number;\n  x2: number;\n  y1: number;\n  y2: number;\n}\n\nexport interface SerializedLineProps\n  extends SerializedObjectProps,\n    UniqueLineProps {}\n\nexport class Line<\n    Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n    SProps extends SerializedLineProps = SerializedLineProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements UniqueLineProps\n{\n  /**\n   * x value or first line edge\n   * @type number\n   * @default\n   */\n  declare x1: number;\n\n  /**\n   * y value or first line edge\n   * @type number\n   * @default\n   */\n  declare y1: number;\n\n  /**\n   * x value or second line edge\n   * @type number\n   * @default\n   */\n  declare x2: number;\n\n  /**\n   * y value or second line edge\n   * @type number\n   * @default\n   */\n  declare y2: number;\n\n  static type = 'Line';\n\n  static cacheProperties = [...cacheProperties, ...coordProps];\n  /**\n   * Constructor\n   * @param {Array} [points] Array of points\n   * @param {Object} [options] Options object\n   * @return {Line} thisArg\n   */\n  constructor([x1, y1, x2, y2] = [0, 0, 0, 0], options: Partial<Props> = {}) {\n    super();\n    Object.assign(this, Line.ownDefaults);\n    this.setOptions(options);\n    this.x1 = x1;\n    this.x2 = x2;\n    this.y1 = y1;\n    this.y2 = y2;\n    this._setWidthHeight();\n    const { left, top } = options;\n    typeof left === 'number' && this.set(LEFT, left);\n    typeof top === 'number' && this.set(TOP, top);\n  }\n\n  /**\n   * @private\n   * @param {Object} [options] Options\n   */\n  _setWidthHeight() {\n    const { x1, y1, x2, y2 } = this;\n    this.width = Math.abs(x2 - x1);\n    this.height = Math.abs(y2 - y1);\n    const { left, top, width, height } = makeBoundingBoxFromPoints([\n      { x: x1, y: y1 },\n      { x: x2, y: y2 },\n    ]);\n    const position = new Point(left + width / 2, top + height / 2);\n    this.setPositionByOrigin(position, CENTER, CENTER);\n  }\n\n  /**\n   * @private\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    super._set(key, value);\n    if (coordProps.includes(key as keyof UniqueLineProps)) {\n      // this doesn't make sense very much, since setting x1 when top or left\n      // are already set, is just going to show a strange result since the\n      // line will move way more than the developer expect.\n      // in fabric5 it worked only when the line didn't have extra transformations,\n      // in fabric6 too. With extra transform they behave bad in different ways.\n      // This needs probably a good rework or a tutorial if you have to create a dynamic line\n      this._setWidthHeight();\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n\n    const p = this.calcLinePoints();\n    ctx.moveTo(p.x1, p.y1);\n    ctx.lineTo(p.x2, p.y2);\n\n    ctx.lineWidth = this.strokeWidth;\n\n    // TODO: test this\n    // make sure setting \"fill\" changes color of a line\n    // (by copying fillStyle to strokeStyle, since line is stroked, not filled)\n    const origStrokeStyle = ctx.strokeStyle;\n    if (isFiller(this.stroke)) {\n      ctx.strokeStyle = this.stroke.toLive(ctx)!;\n    } else {\n      ctx.strokeStyle = this.stroke ?? ctx.fillStyle;\n    }\n    this.stroke && this._renderStroke(ctx);\n    ctx.strokeStyle = origStrokeStyle;\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement(): Point {\n    return new Point((this.x1 + this.x2) / 2, (this.y1 + this.y2) / 2);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @method toObject\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject(propertiesToInclude),\n      ...this.calcLinePoints(),\n    };\n  }\n\n  /*\n   * Calculate object dimensions from its properties\n   * @private\n   */\n  _getNonTransformedDimensions(): Point {\n    const dim = super._getNonTransformedDimensions();\n    if (this.strokeLineCap === 'butt') {\n      if (this.width === 0) {\n        dim.y -= this.strokeWidth;\n      }\n      if (this.height === 0) {\n        dim.x -= this.strokeWidth;\n      }\n    }\n    return dim;\n  }\n\n  /**\n   * Recalculates line points given width and height\n   * Those points are simply placed around the center,\n   * This is not useful outside internal render functions and svg output\n   * Is not meant to be for the developer.\n   * @private\n   */\n  calcLinePoints(): UniqueLineProps {\n    const { x1: _x1, x2: _x2, y1: _y1, y2: _y2, width, height } = this;\n    const xMult = _x1 <= _x2 ? -1 : 1,\n      yMult = _y1 <= _y2 ? -1 : 1,\n      x1 = (xMult * width) / 2,\n      y1 = (yMult * height) / 2,\n      x2 = (xMult * -width) / 2,\n      y2 = (yMult * -height) / 2;\n\n    return {\n      x1,\n      x2,\n      y1,\n      y2,\n    };\n  }\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const { x1, x2, y1, y2 } = this.calcLinePoints();\n    return [\n      '<line ',\n      'COMMON_PARTS',\n      `x1=\"${x1}\" y1=\"${y1}\" x2=\"${x2}\" y2=\"${y2}\" />\\n`,\n    ];\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Line.fromElement})\n   * @static\n   * @memberOf Line\n   * @see http://www.w3.org/TR/SVG/shapes.html#LineElement\n   */\n  static ATTRIBUTE_NAMES = SHARED_ATTRIBUTES.concat(coordProps);\n\n  /**\n   * Returns Line instance from an SVG element\n   * @static\n   * @memberOf Line\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @param {Function} [callback] callback function invoked after parsing\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const {\n      x1 = 0,\n      y1 = 0,\n      x2 = 0,\n      y2 = 0,\n      ...parsedAttributes\n    } = parseAttributes(element, this.ATTRIBUTE_NAMES, cssRules);\n    return new this([x1, y1, x2, y2], parsedAttributes);\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns Line instance from an object representation\n   * @static\n   * @memberOf Line\n   * @param {Object} object Object to create an instance from\n   * @returns {Promise<Line>}\n   */\n  static fromObject<T extends TOptions<SerializedLineProps>>({\n    x1,\n    y1,\n    x2,\n    y2,\n    ...object\n  }: T) {\n    return this._fromObject<Line>(\n      {\n        ...object,\n        points: [x1, y1, x2, y2],\n      },\n      {\n        extraParam: 'points',\n      },\n    );\n  }\n}\n\nclassRegistry.setClass(Line);\nclassRegistry.setSVGClass(Line);\n","import { classRegistry } from '../ClassRegistry';\nimport { FabricObject } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { TClassProperties, TOptions } from '../typedefs';\nimport type { ObjectEvents } from '../EventTypeDefs';\n\nexport const triangleDefaultValues: Partial<TClassProperties<Triangle>> = {\n  width: 100,\n  height: 100,\n};\n\nexport class Triangle<\n    Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements FabricObjectProps\n{\n  static type = 'Triangle';\n\n  static ownDefaults = triangleDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...Triangle.ownDefaults };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Triangle.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const widthBy2 = this.width / 2,\n      heightBy2 = this.height / 2;\n\n    ctx.beginPath();\n    ctx.moveTo(-widthBy2, heightBy2);\n    ctx.lineTo(0, -heightBy2);\n    ctx.lineTo(widthBy2, heightBy2);\n    ctx.closePath();\n\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const widthBy2 = this.width / 2,\n      heightBy2 = this.height / 2,\n      points = `${-widthBy2} ${heightBy2},0 ${-heightBy2},${widthBy2} ${heightBy2}`;\n    return ['<polygon ', 'COMMON_PARTS', 'points=\"', points, '\" />'];\n  }\n}\n\nclassRegistry.setClass(Triangle);\nclassRegistry.setSVGClass(Triangle);\n","import { SCALE_X, SCALE_Y, twoMathPi } from '../constants';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const ellipseDefaultValues: Partial<TClassProperties<Ellipse>> = {\n  rx: 0,\n  ry: 0,\n};\n\ninterface UniqueEllipseProps {\n  rx: number;\n  ry: number;\n}\n\nexport interface SerializedEllipseProps\n  extends SerializedObjectProps,\n    UniqueEllipseProps {}\n\nexport interface EllipseProps extends FabricObjectProps, UniqueEllipseProps {}\n\nconst ELLIPSE_PROPS = ['rx', 'ry'] as const;\n\nexport class Ellipse<\n    Props extends TOptions<EllipseProps> = Partial<EllipseProps>,\n    SProps extends SerializedEllipseProps = SerializedEllipseProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements EllipseProps\n{\n  /**\n   * Horizontal radius\n   * @type Number\n   * @default\n   */\n  declare rx: number;\n\n  /**\n   * Vertical radius\n   * @type Number\n   * @default\n   */\n  declare ry: number;\n\n  static type = 'Ellipse';\n\n  static cacheProperties = [...cacheProperties, ...ELLIPSE_PROPS];\n\n  static ownDefaults = ellipseDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Ellipse.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Ellipse.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   * @param {String} key\n   * @param {*} value\n   * @return {Ellipse} thisArg\n   */\n  _set(key: string, value: any) {\n    super._set(key, value);\n    switch (key) {\n      case 'rx':\n        this.rx = value;\n        this.set('width', value * 2);\n        break;\n\n      case 'ry':\n        this.ry = value;\n        this.set('height', value * 2);\n        break;\n    }\n    return this;\n  }\n\n  /**\n   * Returns horizontal radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRx() {\n    return this.get('rx') * this.get(SCALE_X);\n  }\n\n  /**\n   * Returns Vertical radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRy() {\n    return this.get('ry') * this.get(SCALE_Y);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...ELLIPSE_PROPS, ...propertiesToInclude]);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG(): string[] {\n    return [\n      '<ellipse ',\n      'COMMON_PARTS',\n      `cx=\"0\" cy=\"0\" rx=\"${this.rx}\" ry=\"${this.ry}\" />\\n`,\n    ];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.save();\n    ctx.transform(1, 0, 0, this.ry / this.rx, 0, 0);\n    ctx.arc(0, 0, this.rx, 0, twoMathPi, false);\n    ctx.restore();\n    this._renderPaintInOrder(ctx);\n  }\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Ellipse.fromElement})\n   * @static\n   * @memberOf Ellipse\n   * @see http://www.w3.org/TR/SVG/shapes.html#EllipseElement\n   */\n  static ATTRIBUTE_NAMES = [...SHARED_ATTRIBUTES, 'cx', 'cy', 'rx', 'ry'];\n\n  /**\n   * Returns {@link Ellipse} instance from an SVG element\n   * @static\n   * @memberOf Ellipse\n   * @param {HTMLElement} element Element to parse\n   * @return {Ellipse}\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n\n    parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.rx;\n    parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.ry;\n    return new this(parsedAttributes);\n  }\n\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Ellipse);\nclassRegistry.setSVGClass(Ellipse);\n","import type { XY } from '../Point';\n\n/**\n * Parses \"points\" attribute, returning an array of values\n * @static\n * @memberOf fabric\n * @param {String} points points attribute string\n * @return {Array} array of points\n */\nexport function parsePointsAttribute(points: string | null): XY[] {\n  // points attribute is required and must not be empty\n  if (!points) {\n    return [];\n  }\n\n  // replace commas with whitespace and remove bookending whitespace\n  const pointsSplit: string[] = points.replace(/,/g, ' ').trim().split(/\\s+/);\n\n  const parsedPoints = [];\n\n  for (let i = 0; i < pointsSplit.length; i += 2) {\n    parsedPoints.push({\n      x: parseFloat(pointsSplit[i]),\n      y: parseFloat(pointsSplit[i + 1]),\n    });\n  }\n\n  // odd number of points is an error\n  // if (parsedPoints.length % 2 !== 0) {\n  //   return null;\n  // }\n  return parsedPoints;\n}\n","import { config } from '../config';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport { parsePointsAttribute } from '../parser/parsePointsAttribute';\nimport type { XY } from '../Point';\nimport { Point } from '../Point';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { makeBoundingBoxFromPoints } from '../util/misc/boundingBoxFromPoints';\nimport { calcDimensionsMatrix, transformPoint } from '../util/misc/matrix';\nimport { projectStrokeOnPoints } from '../util/misc/projectStroke';\nimport type { TProjectStrokeOnPointsOptions } from '../util/misc/projectStroke/types';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport { toFixed } from '../util/misc/toFixed';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport {\n  CENTER,\n  LEFT,\n  SCALE_X,\n  SCALE_Y,\n  SKEW_X,\n  SKEW_Y,\n  TOP,\n} from '../constants';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const polylineDefaultValues: Partial<TClassProperties<Polyline>> = {\n  /**\n   * @deprecated transient option soon to be removed in favor of a different design\n   */\n  exactBoundingBox: false,\n};\n\nexport interface SerializedPolylineProps extends SerializedObjectProps {\n  points: XY[];\n}\n\nexport class Polyline<\n  Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n  SProps extends SerializedPolylineProps = SerializedPolylineProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObject<Props, SProps, EventSpec> {\n  /**\n   * Points array\n   * @type Array\n   * @default\n   */\n  declare points: XY[];\n\n  /**\n   * WARNING: Feature in progress\n   * Calculate the exact bounding box taking in account strokeWidth on acute angles\n   * this will be turned to true by default on fabric 6.0\n   * maybe will be left in as an optimization since calculations may be slow\n   * @deprecated transient option soon to be removed in favor of a different design\n   * @type Boolean\n   * @default false\n   */\n  declare exactBoundingBox: boolean;\n\n  private declare initialized: true | undefined;\n\n  static ownDefaults = polylineDefaultValues;\n\n  static type = 'Polyline';\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Polyline.ownDefaults,\n    };\n  }\n\n  /**\n   * A list of properties that if changed trigger a recalculation of dimensions\n   * @todo check if you really need to recalculate for all cases\n   */\n  static layoutProperties: (keyof Polyline)[] = [\n    SKEW_X,\n    SKEW_Y,\n    'strokeLineCap',\n    'strokeLineJoin',\n    'strokeMiterLimit',\n    'strokeWidth',\n    'strokeUniform',\n    'points',\n  ];\n\n  declare pathOffset: Point;\n\n  declare strokeOffset: Point;\n\n  static cacheProperties = [...cacheProperties, 'points'];\n\n  strokeDiff: Point;\n\n  /**\n   * Constructor\n   * @param {Array} points Array of points (where each point is an object with x and y)\n   * @param {Object} [options] Options object\n   * @return {Polyline} thisArg\n   * @example\n   * var poly = new Polyline([\n   *     { x: 10, y: 10 },\n   *     { x: 50, y: 30 },\n   *     { x: 40, y: 70 },\n   *     { x: 60, y: 50 },\n   *     { x: 100, y: 150 },\n   *     { x: 40, y: 100 }\n   *   ], {\n   *   stroke: 'red',\n   *   left: 100,\n   *   top: 100\n   * });\n   */\n  constructor(points: XY[] = [], options: Props = {} as Props) {\n    super();\n    Object.assign(this, Polyline.ownDefaults);\n    this.setOptions(options);\n    this.points = points;\n    const { left, top } = options;\n    this.initialized = true;\n    this.setBoundingBox(true);\n    typeof left === 'number' && this.set(LEFT, left);\n    typeof top === 'number' && this.set(TOP, top);\n  }\n\n  protected isOpen() {\n    return true;\n  }\n\n  private _projectStrokeOnPoints(options: TProjectStrokeOnPointsOptions) {\n    return projectStrokeOnPoints(this.points, options, this.isOpen());\n  }\n\n  /**\n   * Calculate the polygon bounding box\n   * @private\n   */\n  _calcDimensions(options?: Partial<TProjectStrokeOnPointsOptions>) {\n    options = {\n      scaleX: this.scaleX,\n      scaleY: this.scaleY,\n      skewX: this.skewX,\n      skewY: this.skewY,\n      strokeLineCap: this.strokeLineCap,\n      strokeLineJoin: this.strokeLineJoin,\n      strokeMiterLimit: this.strokeMiterLimit,\n      strokeUniform: this.strokeUniform,\n      strokeWidth: this.strokeWidth,\n      ...(options || {}),\n    };\n    const points = this.exactBoundingBox\n      ? this._projectStrokeOnPoints(\n          options as TProjectStrokeOnPointsOptions,\n        ).map((projection) => projection.projectedPoint)\n      : this.points;\n    if (points.length === 0) {\n      return {\n        left: 0,\n        top: 0,\n        width: 0,\n        height: 0,\n        pathOffset: new Point(),\n        strokeOffset: new Point(),\n        strokeDiff: new Point(),\n      };\n    }\n    const bbox = makeBoundingBoxFromPoints(points),\n      // Remove scale effect, since it's applied after\n      matrix = calcDimensionsMatrix({ ...options, scaleX: 1, scaleY: 1 }),\n      bboxNoStroke = makeBoundingBoxFromPoints(\n        this.points.map((p) => transformPoint(p, matrix, true)),\n      ),\n      scale = new Point(this.scaleX, this.scaleY);\n    let offsetX = bbox.left + bbox.width / 2,\n      offsetY = bbox.top + bbox.height / 2;\n    if (this.exactBoundingBox) {\n      offsetX = offsetX - offsetY * Math.tan(degreesToRadians(this.skewX));\n      // Order of those assignments is important.\n      // offsetY relies on offsetX being already changed by the line above\n      offsetY = offsetY - offsetX * Math.tan(degreesToRadians(this.skewY));\n    }\n\n    return {\n      ...bbox,\n      pathOffset: new Point(offsetX, offsetY),\n      strokeOffset: new Point(bboxNoStroke.left, bboxNoStroke.top)\n        .subtract(new Point(bbox.left, bbox.top))\n        .multiply(scale),\n      strokeDiff: new Point(bbox.width, bbox.height)\n        .subtract(new Point(bboxNoStroke.width, bboxNoStroke.height))\n        .multiply(scale),\n    };\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates, by look at the polyline/polygon points.\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement(): Point {\n    const bbox = makeBoundingBoxFromPoints(this.points);\n    return new Point(bbox.left + bbox.width / 2, bbox.top + bbox.height / 2);\n  }\n\n  setDimensions() {\n    this.setBoundingBox();\n  }\n\n  setBoundingBox(adjustPosition?: boolean) {\n    const { left, top, width, height, pathOffset, strokeOffset, strokeDiff } =\n      this._calcDimensions();\n    this.set({ width, height, pathOffset, strokeOffset, strokeDiff });\n    adjustPosition &&\n      this.setPositionByOrigin(\n        new Point(left + width / 2, top + height / 2),\n        CENTER,\n        CENTER,\n      );\n  }\n\n  /**\n   * @deprecated intermidiate method to be removed, do not use\n   */\n  protected isStrokeAccountedForInDimensions() {\n    return this.exactBoundingBox;\n  }\n\n  /**\n   * @override stroke is taken in account in size\n   */\n  _getNonTransformedDimensions() {\n    return this.exactBoundingBox\n      ? // TODO: fix this\n        new Point(this.width, this.height)\n      : super._getNonTransformedDimensions();\n  }\n\n  /**\n   * @override stroke and skewing are taken into account when projecting stroke on points,\n   * therefore we don't want the default calculation to account for skewing as well.\n   * Though it is possible to pass `width` and `height` in `options`, doing so is very strange, use with discretion.\n   *\n   * @private\n   */\n  _getTransformedDimensions(options: any = {}) {\n    if (this.exactBoundingBox) {\n      let size: Point;\n      /* When `strokeUniform = true`, any changes to the properties require recalculating the `width` and `height` because\n        the stroke projections are affected.\n        When `strokeUniform = false`, we don't need to recalculate for scale transformations, as the effect of scale on\n        projections follows a linear function (e.g. scaleX of 2 just multiply width by 2)*/\n      if (\n        Object.keys(options).some(\n          (key) =>\n            this.strokeUniform ||\n            (this.constructor as typeof Polyline).layoutProperties.includes(\n              key as keyof TProjectStrokeOnPointsOptions,\n            ),\n        )\n      ) {\n        const { width, height } = this._calcDimensions(options);\n        size = new Point(options.width ?? width, options.height ?? height);\n      } else {\n        size = new Point(\n          options.width ?? this.width,\n          options.height ?? this.height,\n        );\n      }\n      return size.multiply(\n        new Point(options.scaleX || this.scaleX, options.scaleY || this.scaleY),\n      );\n    } else {\n      return super._getTransformedDimensions(options);\n    }\n  }\n\n  /**\n   * Recalculates dimensions when changing skew and scale\n   * @private\n   */\n  _set(key: string, value: any) {\n    const changed = this.initialized && this[key as keyof this] !== value;\n    const output = super._set(key, value);\n    if (\n      this.exactBoundingBox &&\n      changed &&\n      (((key === SCALE_X || key === SCALE_Y) &&\n        this.strokeUniform &&\n        (this.constructor as typeof Polyline).layoutProperties.includes(\n          'strokeUniform',\n        )) ||\n        (this.constructor as typeof Polyline).layoutProperties.includes(\n          key as keyof Polyline,\n        ))\n    ) {\n      this.setDimensions();\n    }\n    return output;\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject(propertiesToInclude),\n      points: this.points.map(({ x, y }) => ({ x, y })),\n    };\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const points = [],\n      diffX = this.pathOffset.x,\n      diffY = this.pathOffset.y,\n      NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS;\n\n    for (let i = 0, len = this.points.length; i < len; i++) {\n      points.push(\n        toFixed(this.points[i].x - diffX, NUM_FRACTION_DIGITS),\n        ',',\n        toFixed(this.points[i].y - diffY, NUM_FRACTION_DIGITS),\n        ' ',\n      );\n    }\n    return [\n      `<${\n        (this.constructor as typeof Polyline).type.toLowerCase() as\n          | 'polyline'\n          | 'polygon'\n      } `,\n      'COMMON_PARTS',\n      `points=\"${points.join('')}\" />\\n`,\n    ];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const len = this.points.length,\n      x = this.pathOffset.x,\n      y = this.pathOffset.y;\n\n    if (!len || isNaN(this.points[len - 1].y)) {\n      // do not draw if no points or odd points\n      // NaN comes from parseFloat of a empty string in parser\n      return;\n    }\n    ctx.beginPath();\n    ctx.moveTo(this.points[0].x - x, this.points[0].y - y);\n    for (let i = 0; i < len; i++) {\n      const point = this.points[i];\n      ctx.lineTo(point.x - x, point.y - y);\n    }\n    !this.isOpen() && ctx.closePath();\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity of this instance\n   */\n  complexity(): number {\n    return this.points.length;\n  }\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Polyline.fromElement})\n   * @static\n   * @memberOf Polyline\n   * @see: http://www.w3.org/TR/SVG/shapes.html#PolylineElement\n   */\n  static ATTRIBUTE_NAMES = [...SHARED_ATTRIBUTES];\n\n  /**\n   * Returns Polyline instance from an SVG element\n   * @static\n   * @memberOf Polyline\n   * @param {HTMLElement} element Element to parser\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const points = parsePointsAttribute(element.getAttribute('points')),\n      // we omit left and top to instruct the constructor to position the object using the bbox\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      { left, top, ...parsedAttributes } = parseAttributes(\n        element,\n        this.ATTRIBUTE_NAMES,\n        cssRules,\n      );\n    return new this(points, {\n      ...parsedAttributes,\n      ...options,\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns Polyline instance from an object representation\n   * @static\n   * @memberOf Polyline\n   * @param {Object} object Object to create an instance from\n   * @returns {Promise<Polyline>}\n   */\n  static fromObject<T extends TOptions<SerializedPolylineProps>>(object: T) {\n    return this._fromObject<Polyline>(object, {\n      extraParam: 'points',\n    });\n  }\n}\n\nclassRegistry.setClass(Polyline);\nclassRegistry.setSVGClass(Polyline);\n","import { classRegistry } from '../ClassRegistry';\nimport { Polyline, polylineDefaultValues } from './Polyline';\n\nexport class Polygon extends Polyline {\n  static ownDefaults = polylineDefaultValues;\n\n  static type = 'Polygon';\n\n  protected isOpen() {\n    return false;\n  }\n}\n\nclassRegistry.setClass(Polygon);\nclassRegistry.setSVGClass(Polygon);\n","import { FILL, LEFT, STROKE, reNewline } from '../../constants';\nimport type { TClassProperties } from '../../typedefs';\nimport type { FabricText } from './Text';\n\nconst fontProperties = [\n  'fontSize',\n  'fontWeight',\n  'fontFamily',\n  'fontStyle',\n] as const;\n\nexport const textDecorationProperties = [\n  'underline',\n  'overline',\n  'linethrough',\n] as const;\n\nexport const textLayoutProperties: string[] = [\n  ...fontProperties,\n  'lineHeight',\n  'text',\n  'charSpacing',\n  'textAlign',\n  'styles',\n  'path',\n  'pathStartOffset',\n  'pathSide',\n  'pathAlign',\n];\n\nexport const additionalProps = [\n  ...textLayoutProperties,\n  ...textDecorationProperties,\n  'textBackgroundColor',\n  'direction',\n] as const;\n\nexport type StylePropertiesType =\n  | 'fill'\n  | 'stroke'\n  | 'strokeWidth'\n  | 'fontSize'\n  | 'fontFamily'\n  | 'fontWeight'\n  | 'fontStyle'\n  | 'textBackgroundColor'\n  | 'deltaY'\n  | 'overline'\n  | 'underline'\n  | 'linethrough';\n\nexport const styleProperties: Readonly<StylePropertiesType[]> = [\n  ...fontProperties,\n  ...textDecorationProperties,\n  STROKE,\n  'strokeWidth',\n  FILL,\n  'deltaY',\n  'textBackgroundColor',\n] as const;\n\n// @TODO: Many things here are configuration related and shouldn't be on the class nor prototype\n// regexes, list of properties that are not suppose to change by instances, magic consts.\n// this will be a separated effort\nexport const textDefaultValues: Partial<TClassProperties<FabricText>> = {\n  _reNewline: reNewline,\n  _reSpacesAndTabs: /[ \\t\\r]/g,\n  _reSpaceAndTab: /[ \\t\\r]/,\n  _reWords: /\\S+/g,\n  fontSize: 40,\n  fontWeight: 'normal',\n  fontFamily: 'Times New Roman',\n  underline: false,\n  overline: false,\n  linethrough: false,\n  textAlign: LEFT,\n  fontStyle: 'normal',\n  lineHeight: 1.16,\n  superscript: {\n    size: 0.6, // fontSize factor\n    baseline: -0.35, // baseline-shift factor (upwards)\n  },\n  subscript: {\n    size: 0.6, // fontSize factor\n    baseline: 0.11, // baseline-shift factor (downwards)\n  },\n  textBackgroundColor: '',\n  stroke: null,\n  shadow: null,\n  path: undefined,\n  pathStartOffset: 0,\n  pathSide: LEFT,\n  pathAlign: 'baseline',\n  _fontSizeFraction: 0.222,\n  offsets: {\n    underline: 0.1,\n    linethrough: -0.315,\n    overline: -0.88,\n  },\n  _fontSizeMult: 1.13,\n  charSpacing: 0,\n  deltaY: 0,\n  direction: 'ltr',\n  CACHE_FONT_SIZE: 400,\n  MIN_TEXT_WIDTH: 2,\n};\n\nexport const JUSTIFY = 'justify';\nexport const JUSTIFY_LEFT = 'justify-left';\nexport const JUSTIFY_RIGHT = 'justify-right';\nexport const JUSTIFY_CENTER = 'justify-center';\n","import type { ObjectEvents } from '../../EventTypeDefs';\nimport type { FabricObjectProps, SerializedObjectProps } from '../Object/types';\nimport type { TOptions } from '../../typedefs';\nimport { FabricObject } from '../Object/FabricObject';\nimport { styleProperties } from './constants';\nimport type { StylePropertiesType } from './constants';\nimport type { FabricText } from './Text';\nimport { pick } from '../../util';\nimport { pickBy } from '../../util/misc/pick';\n\nexport type CompleteTextStyleDeclaration = Pick<\n  FabricText,\n  StylePropertiesType\n>;\n\nexport type TextStyleDeclaration = Partial<CompleteTextStyleDeclaration>;\n\nexport type TextStyle = {\n  [line: number | string]: { [char: number | string]: TextStyleDeclaration };\n};\n\nexport abstract class StyledText<\n  Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n  SProps extends SerializedObjectProps = SerializedObjectProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObject<Props, SProps, EventSpec> {\n  declare abstract styles: TextStyle;\n  protected declare abstract _textLines: string[][];\n  protected declare _forceClearCache: boolean;\n  static _styleProperties: Readonly<StylePropertiesType[]> = styleProperties;\n  abstract get2DCursorLocation(\n    selectionStart: number,\n    skipWrapping?: boolean,\n  ): { charIndex: number; lineIndex: number };\n\n  /**\n   * Returns true if object has no styling or no styling in a line\n   * @param {Number} lineIndex , lineIndex is on wrapped lines.\n   * @return {Boolean}\n   */\n  isEmptyStyles(lineIndex?: number): boolean {\n    if (!this.styles) {\n      return true;\n    }\n    if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\n      return true;\n    }\n    const obj =\n      typeof lineIndex === 'undefined'\n        ? this.styles\n        : { line: this.styles[lineIndex] };\n    for (const p1 in obj) {\n      for (const p2 in obj[p1]) {\n        // eslint-disable-next-line no-unused-vars\n        for (const p3 in obj[p1][p2]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns true if object has a style property or has it ina specified line\n   * This function is used to detect if a text will use a particular property or not.\n   * @param {String} property to check for\n   * @param {Number} lineIndex to check the style on\n   * @return {Boolean}\n   */\n  styleHas(property: keyof TextStyleDeclaration, lineIndex?: number): boolean {\n    if (!this.styles) {\n      return false;\n    }\n    if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\n      return false;\n    }\n    const obj =\n      typeof lineIndex === 'undefined'\n        ? this.styles\n        : { 0: this.styles[lineIndex] };\n    // eslint-disable-next-line\n    for (const p1 in obj) {\n      // eslint-disable-next-line\n      for (const p2 in obj[p1]) {\n        if (typeof obj[p1][p2][property] !== 'undefined') {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if characters in a text have a value for a property\n   * whose value matches the textbox's value for that property.  If so,\n   * the character-level property is deleted.  If the character\n   * has no other properties, then it is also deleted.  Finally,\n   * if the line containing that character has no other characters\n   * then it also is deleted.\n   */\n  cleanStyle(property: keyof TextStyleDeclaration) {\n    if (!this.styles) {\n      return false;\n    }\n    const obj = this.styles;\n    let stylesCount = 0,\n      letterCount,\n      stylePropertyValue,\n      allStyleObjectPropertiesMatch = true,\n      graphemeCount = 0;\n    for (const p1 in obj) {\n      letterCount = 0;\n      for (const p2 in obj[p1]) {\n        const styleObject = obj[p1][p2] || {},\n          stylePropertyHasBeenSet = styleObject[property] !== undefined;\n\n        stylesCount++;\n\n        if (stylePropertyHasBeenSet) {\n          if (!stylePropertyValue) {\n            stylePropertyValue = styleObject[property];\n          } else if (styleObject[property] !== stylePropertyValue) {\n            allStyleObjectPropertiesMatch = false;\n          }\n\n          if (styleObject[property] === this[property as keyof this]) {\n            delete styleObject[property];\n          }\n        } else {\n          allStyleObjectPropertiesMatch = false;\n        }\n\n        if (Object.keys(styleObject).length !== 0) {\n          letterCount++;\n        } else {\n          delete obj[p1][p2];\n        }\n      }\n\n      if (letterCount === 0) {\n        delete obj[p1];\n      }\n    }\n    // if every grapheme has the same style set then\n    // delete those styles and set it on the parent\n    for (let i = 0; i < this._textLines.length; i++) {\n      graphemeCount += this._textLines[i].length;\n    }\n    if (allStyleObjectPropertiesMatch && stylesCount === graphemeCount) {\n      this[property as keyof this] = stylePropertyValue as any;\n      this.removeStyle(property);\n    }\n  }\n\n  /**\n   * Remove a style property or properties from all individual character styles\n   * in a text object.  Deletes the character style object if it contains no other style\n   * props.  Deletes a line style object if it contains no other character styles.\n   *\n   * @param {String} props The property to remove from character styles.\n   */\n  removeStyle(property: keyof TextStyleDeclaration) {\n    if (!this.styles) {\n      return;\n    }\n    const obj = this.styles;\n    let line, lineNum, charNum;\n    for (lineNum in obj) {\n      line = obj[lineNum];\n      for (charNum in line) {\n        delete line[charNum][property];\n        if (Object.keys(line[charNum]).length === 0) {\n          delete line[charNum];\n        }\n      }\n      if (Object.keys(line).length === 0) {\n        delete obj[lineNum];\n      }\n    }\n  }\n\n  private _extendStyles(index: number, style: TextStyleDeclaration): void {\n    const { lineIndex, charIndex } = this.get2DCursorLocation(index);\n\n    if (!this._getLineStyle(lineIndex)) {\n      this._setLineStyle(lineIndex);\n    }\n\n    const newStyle = pickBy(\n      {\n        // first create a new object that is a merge of existing and new\n        ...this._getStyleDeclaration(lineIndex, charIndex),\n        ...style,\n        // use the predicate to discard undefined values\n      },\n      (value) => value !== undefined,\n    );\n\n    // finally assign to the old position the new style\n    this._setStyleDeclaration(lineIndex, charIndex, newStyle);\n  }\n\n  /**\n   * Gets style of a current selection/cursor (at the start position)\n   * @param {Number} startIndex Start index to get styles at\n   * @param {Number} endIndex End index to get styles at, if not specified startIndex + 1\n   * @param {Boolean} [complete] get full style or not\n   * @return {Array} styles an array with one, zero or more Style objects\n   */\n  getSelectionStyles(\n    startIndex: number,\n    endIndex?: number,\n    complete?: boolean,\n  ): TextStyleDeclaration[] {\n    const styles: TextStyleDeclaration[] = [];\n    for (let i = startIndex; i < (endIndex || startIndex); i++) {\n      styles.push(this.getStyleAtPosition(i, complete));\n    }\n    return styles;\n  }\n\n  /**\n   * Gets style of a current selection/cursor position\n   * @param {Number} position  to get styles at\n   * @param {Boolean} [complete] full style if true\n   * @return {Object} style Style object at a specified index\n   * @private\n   */\n  getStyleAtPosition(position: number, complete?: boolean) {\n    const { lineIndex, charIndex } = this.get2DCursorLocation(position);\n    return complete\n      ? this.getCompleteStyleDeclaration(lineIndex, charIndex)\n      : this._getStyleDeclaration(lineIndex, charIndex);\n  }\n\n  /**\n   * Sets style of a current selection, if no selection exist, do not set anything.\n   * @param {Object} styles Styles object\n   * @param {Number} startIndex Start index to get styles at\n   * @param {Number} [endIndex] End index to get styles at, if not specified startIndex + 1\n   */\n  setSelectionStyles(styles: object, startIndex: number, endIndex?: number) {\n    for (let i = startIndex; i < (endIndex || startIndex); i++) {\n      this._extendStyles(i, styles);\n    }\n    /* not included in _extendStyles to avoid clearing cache more than once */\n    this._forceClearCache = true;\n  }\n\n  /**\n   * Get a reference, not a clone, to the style object for a given character,\n   * if no style is set for a line or char, return a new empty object.\n   * This is tricky and confusing because when you get an empty object you can't\n   * determine if it is a reference or a new one.\n   * @TODO this should always return a reference or always a clone or undefined when necessary.\n   * @protected\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {TextStyleDeclaration} a style object reference to the existing one or a new empty object when undefined\n   */\n  _getStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n  ): TextStyleDeclaration {\n    const lineStyle = this.styles && this.styles[lineIndex];\n    return lineStyle ? lineStyle[charIndex] ?? {} : {};\n  }\n\n  /**\n   * return a new object that contains all the style property for a character\n   * the object returned is newly created\n   * @param {Number} lineIndex of the line where the character is\n   * @param {Number} charIndex position of the character on the line\n   * @return {Object} style object\n   */\n  getCompleteStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n  ): CompleteTextStyleDeclaration {\n    return {\n      ...pick(\n        this,\n        (this.constructor as typeof StyledText)\n          ._styleProperties as (keyof this)[],\n      ),\n      ...this._getStyleDeclaration(lineIndex, charIndex),\n    } as CompleteTextStyleDeclaration;\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {Object} style\n   * @private\n   */\n  protected _setStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n    style: object,\n  ) {\n    this.styles[lineIndex][charIndex] = style;\n  }\n\n  /**\n   *\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @private\n   */\n  protected _deleteStyleDeclaration(lineIndex: number, charIndex: number) {\n    delete this.styles[lineIndex][charIndex];\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @return {Boolean} if the line exists or not\n   * @private\n   */\n  protected _getLineStyle(lineIndex: number): boolean {\n    return !!this.styles[lineIndex];\n  }\n\n  /**\n   * Set the line style to an empty object so that is initialized\n   * @param {Number} lineIndex\n   * @private\n   */\n  protected _setLineStyle(lineIndex: number) {\n    this.styles[lineIndex] = {};\n  }\n\n  protected _deleteLineStyle(lineIndex: number) {\n    delete this.styles[lineIndex];\n  }\n}\n","import { config } from '../../config';\nimport type { TSVGReviver } from '../../typedefs';\nimport { escapeXml } from '../../util/lang_string';\nimport { colorPropToSVG, createSVGRect } from '../../util/misc/svgParsing';\nimport { hasStyleChanged } from '../../util/misc/textStyles';\nimport { toFixed } from '../../util/misc/toFixed';\nimport { FabricObjectSVGExportMixin } from '../Object/FabricObjectSVGExportMixin';\nimport { type TextStyleDeclaration } from './StyledText';\nimport { JUSTIFY } from '../Text/constants';\nimport type { FabricText } from './Text';\nimport { STROKE, FILL } from '../../constants';\n\nconst multipleSpacesRegex = /  +/g;\nconst dblQuoteRegex = /\"/g;\n\nfunction createSVGInlineRect(\n  color: string,\n  left: number,\n  top: number,\n  width: number,\n  height: number,\n) {\n  return `\\t\\t${createSVGRect(color, { left, top, width, height })}\\n`;\n}\n\nexport class TextSVGExportMixin extends FabricObjectSVGExportMixin {\n  _toSVG(this: TextSVGExportMixin & FabricText): string[] {\n    const offsets = this._getSVGLeftTopOffsets(),\n      textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft);\n    return this._wrapSVGTextAndBg(textAndBg);\n  }\n\n  toSVG(this: TextSVGExportMixin & FabricText, reviver?: TSVGReviver): string {\n    return this._createBaseSVGMarkup(this._toSVG(), {\n      reviver,\n      noStyle: true,\n      withShadow: true,\n    });\n  }\n\n  private _getSVGLeftTopOffsets(this: TextSVGExportMixin & FabricText) {\n    return {\n      textLeft: -this.width / 2,\n      textTop: -this.height / 2,\n      lineTop: this.getHeightOfLine(0),\n    };\n  }\n\n  private _wrapSVGTextAndBg(\n    this: TextSVGExportMixin & FabricText,\n    {\n      textBgRects,\n      textSpans,\n    }: {\n      textSpans: string[];\n      textBgRects: string[];\n    },\n  ) {\n    const noShadow = true,\n      textDecoration = this.getSvgTextDecoration(this);\n    return [\n      textBgRects.join(''),\n      '\\t\\t<text xml:space=\"preserve\" ',\n      this.fontFamily\n        ? `font-family=\"${this.fontFamily.replace(dblQuoteRegex, \"'\")}\" `\n        : '',\n      this.fontSize ? `font-size=\"${this.fontSize}\" ` : '',\n      this.fontStyle ? `font-style=\"${this.fontStyle}\" ` : '',\n      this.fontWeight ? `font-weight=\"${this.fontWeight}\" ` : '',\n      textDecoration ? `text-decoration=\"${textDecoration}\" ` : '',\n      this.direction === 'rtl' ? `direction=\"${this.direction}\" ` : '',\n      'style=\"',\n      this.getSvgStyles(noShadow),\n      '\"',\n      this.addPaintOrder(),\n      ' >',\n      textSpans.join(''),\n      '</text>\\n',\n    ];\n  }\n\n  /**\n   * @private\n   * @param {Number} textTopOffset Text top offset\n   * @param {Number} textLeftOffset Text left offset\n   * @return {Object}\n   */\n  private _getSVGTextAndBg(\n    this: TextSVGExportMixin & FabricText,\n    textTopOffset: number,\n    textLeftOffset: number,\n  ) {\n    const textSpans: string[] = [],\n      textBgRects: string[] = [];\n    let height = textTopOffset,\n      lineOffset;\n\n    // bounding-box background\n    this.backgroundColor &&\n      textBgRects.push(\n        ...createSVGInlineRect(\n          this.backgroundColor,\n          -this.width / 2,\n          -this.height / 2,\n          this.width,\n          this.height,\n        ),\n      );\n\n    // text and text-background\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      lineOffset = this._getLineLeftOffset(i);\n      if (this.direction === 'rtl') {\n        lineOffset += this.width;\n      }\n      if (this.textBackgroundColor || this.styleHas('textBackgroundColor', i)) {\n        this._setSVGTextLineBg(\n          textBgRects,\n          i,\n          textLeftOffset + lineOffset,\n          height,\n        );\n      }\n      this._setSVGTextLineText(\n        textSpans,\n        i,\n        textLeftOffset + lineOffset,\n        height,\n      );\n      height += this.getHeightOfLine(i);\n    }\n\n    return {\n      textSpans,\n      textBgRects,\n    };\n  }\n\n  private _createTextCharSpan(\n    this: TextSVGExportMixin & FabricText,\n    char: string,\n    styleDecl: TextStyleDeclaration,\n    left: number,\n    top: number,\n  ) {\n    const styleProps = this.getSvgSpanStyles(\n        styleDecl,\n        char !== char.trim() || !!char.match(multipleSpacesRegex),\n      ),\n      fillStyles = styleProps ? `style=\"${styleProps}\"` : '',\n      dy = styleDecl.deltaY,\n      dySpan = dy ? ` dy=\"${toFixed(dy, config.NUM_FRACTION_DIGITS)}\" ` : '';\n\n    return `<tspan x=\"${toFixed(\n      left,\n      config.NUM_FRACTION_DIGITS,\n    )}\" y=\"${toFixed(\n      top,\n      config.NUM_FRACTION_DIGITS,\n    )}\" ${dySpan}${fillStyles}>${escapeXml(char)}</tspan>`;\n  }\n\n  private _setSVGTextLineText(\n    this: TextSVGExportMixin & FabricText,\n    textSpans: string[],\n    lineIndex: number,\n    textLeftOffset: number,\n    textTopOffset: number,\n  ) {\n    const lineHeight = this.getHeightOfLine(lineIndex),\n      isJustify = this.textAlign.includes(JUSTIFY),\n      line = this._textLines[lineIndex];\n    let actualStyle,\n      nextStyle,\n      charsToRender = '',\n      charBox,\n      style,\n      boxWidth = 0,\n      timeToRender;\n\n    textTopOffset +=\n      (lineHeight * (1 - this._fontSizeFraction)) / this.lineHeight;\n    for (let i = 0, len = line.length - 1; i <= len; i++) {\n      timeToRender = i === len || this.charSpacing;\n      charsToRender += line[i];\n      charBox = this.__charBounds[lineIndex][i];\n      if (boxWidth === 0) {\n        textLeftOffset += charBox.kernedWidth - charBox.width;\n        boxWidth += charBox.width;\n      } else {\n        boxWidth += charBox.kernedWidth;\n      }\n      if (isJustify && !timeToRender) {\n        if (this._reSpaceAndTab.test(line[i])) {\n          timeToRender = true;\n        }\n      }\n      if (!timeToRender) {\n        // if we have charSpacing, we render char by char\n        actualStyle =\n          actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n        nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n        timeToRender = hasStyleChanged(actualStyle, nextStyle, true);\n      }\n      if (timeToRender) {\n        style = this._getStyleDeclaration(lineIndex, i);\n        textSpans.push(\n          this._createTextCharSpan(\n            charsToRender,\n            style,\n            textLeftOffset,\n            textTopOffset,\n          ),\n        );\n        charsToRender = '';\n        actualStyle = nextStyle;\n        if (this.direction === 'rtl') {\n          textLeftOffset -= boxWidth;\n        } else {\n          textLeftOffset += boxWidth;\n        }\n        boxWidth = 0;\n      }\n    }\n  }\n\n  private _setSVGTextLineBg(\n    this: TextSVGExportMixin & FabricText,\n    textBgRects: (string | number)[],\n    i: number,\n    leftOffset: number,\n    textTopOffset: number,\n  ) {\n    const line = this._textLines[i],\n      heightOfLine = this.getHeightOfLine(i) / this.lineHeight;\n    let boxWidth = 0,\n      boxStart = 0,\n      currentColor,\n      lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n    for (let j = 0; j < line.length; j++) {\n      const { left, width, kernedWidth } = this.__charBounds[i][j];\n      currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n      if (currentColor !== lastColor) {\n        lastColor &&\n          textBgRects.push(\n            ...createSVGInlineRect(\n              lastColor,\n              leftOffset + boxStart,\n              textTopOffset,\n              boxWidth,\n              heightOfLine,\n            ),\n          );\n        boxStart = left;\n        boxWidth = width;\n        lastColor = currentColor;\n      } else {\n        boxWidth += kernedWidth;\n      }\n    }\n    currentColor &&\n      textBgRects.push(\n        ...createSVGInlineRect(\n          lastColor,\n          leftOffset + boxStart,\n          textTopOffset,\n          boxWidth,\n          heightOfLine,\n        ),\n      );\n  }\n\n  /**\n   * @deprecated unused\n   */\n  _getSVGLineTopOffset(\n    this: TextSVGExportMixin & FabricText,\n    lineIndex: number,\n  ) {\n    let lineTopOffset = 0,\n      j;\n    for (j = 0; j < lineIndex; j++) {\n      lineTopOffset += this.getHeightOfLine(j);\n    }\n    const lastHeight = this.getHeightOfLine(j);\n    return {\n      lineTop: lineTopOffset,\n      offset:\n        ((this._fontSizeMult - this._fontSizeFraction) * lastHeight) /\n        (this.lineHeight * this._fontSizeMult),\n    };\n  }\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Boolean} skipShadow a boolean to skip shadow filter output\n   * @return {String}\n   */\n  getSvgStyles(this: TextSVGExportMixin & FabricText, skipShadow?: boolean) {\n    return `${super.getSvgStyles(skipShadow)} white-space: pre;`;\n  }\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Object} style the object from which to retrieve style properties\n   * @param {Boolean} useWhiteSpace a boolean to include an additional attribute in the style.\n   * @return {String}\n   */\n  getSvgSpanStyles(\n    this: TextSVGExportMixin & FabricText,\n    style: TextStyleDeclaration,\n    useWhiteSpace?: boolean,\n  ) {\n    const {\n      fontFamily,\n      strokeWidth,\n      stroke,\n      fill,\n      fontSize,\n      fontStyle,\n      fontWeight,\n      deltaY,\n    } = style;\n\n    const textDecoration = this.getSvgTextDecoration(style);\n\n    return [\n      stroke ? colorPropToSVG(STROKE, stroke) : '',\n      strokeWidth ? `stroke-width: ${strokeWidth}; ` : '',\n      fontFamily\n        ? `font-family: ${\n            !fontFamily.includes(\"'\") && !fontFamily.includes('\"')\n              ? `'${fontFamily}'`\n              : fontFamily\n          }; `\n        : '',\n      fontSize ? `font-size: ${fontSize}px; ` : '',\n      fontStyle ? `font-style: ${fontStyle}; ` : '',\n      fontWeight ? `font-weight: ${fontWeight}; ` : '',\n      textDecoration ? `text-decoration: ${textDecoration}; ` : textDecoration,\n      fill ? colorPropToSVG(FILL, fill) : '',\n      deltaY ? `baseline-shift: ${-deltaY}; ` : '',\n      useWhiteSpace ? 'white-space: pre; ' : '',\n    ].join('');\n  }\n\n  /**\n   * Returns text-decoration property for svg-export\n   * @param {Object} style the object from which to retrieve style properties\n   * @return {String}\n   */\n  getSvgTextDecoration(\n    this: TextSVGExportMixin & FabricText,\n    style: TextStyleDeclaration,\n  ) {\n    return (['overline', 'underline', 'line-through'] as const)\n      .filter(\n        (decoration) =>\n          style[\n            decoration.replace('-', '') as\n              | 'overline'\n              | 'underline'\n              | 'linethrough'\n          ],\n      )\n      .join(' ');\n  }\n}\n","import { cache } from '../../cache';\nimport { DEFAULT_SVG_FONT_SIZE, FILL, STROKE } from '../../constants';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport type {\n  CompleteTextStyleDeclaration,\n  TextStyle,\n  TextStyleDeclaration,\n} from './StyledText';\nimport { StyledText } from './StyledText';\nimport { SHARED_ATTRIBUTES } from '../../parser/attributes';\nimport { parseAttributes } from '../../parser/parseAttributes';\nimport type {\n  Abortable,\n  TCacheCanvasDimensions,\n  TClassProperties,\n  TFiller,\n  TOptions,\n} from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport { graphemeSplit } from '../../util/lang_string';\nimport { createCanvasElementFor } from '../../util/misc/dom';\nimport type { TextStyleArray } from '../../util/misc/textStyles';\nimport {\n  hasStyleChanged,\n  stylesFromArray,\n  stylesToArray,\n} from '../../util/misc/textStyles';\nimport { getPathSegmentsInfo, getPointOnPath } from '../../util/path';\nimport { cacheProperties } from '../Object/FabricObject';\nimport type { Path } from '../Path';\nimport { TextSVGExportMixin } from './TextSVGExportMixin';\nimport { applyMixins } from '../../util/applyMixins';\nimport type { FabricObjectProps, SerializedObjectProps } from '../Object/types';\nimport type { StylePropertiesType } from './constants';\nimport {\n  additionalProps,\n  textDefaultValues,\n  textLayoutProperties,\n  JUSTIFY,\n  JUSTIFY_CENTER,\n  JUSTIFY_LEFT,\n  JUSTIFY_RIGHT,\n} from './constants';\nimport { CENTER, LEFT, RIGHT, TOP, BOTTOM } from '../../constants';\nimport { isFiller } from '../../util/typeAssertions';\nimport type { Gradient } from '../../gradient/Gradient';\nimport type { Pattern } from '../../Pattern';\nimport type { CSSRules } from '../../parser/typedefs';\n\nlet measuringContext: CanvasRenderingContext2D | null;\n\n/**\n * Return a context for measurement of text string.\n * if created it gets stored for reuse\n */\nfunction getMeasuringContext() {\n  if (!measuringContext) {\n    const canvas = createCanvasElementFor({\n      width: 0,\n      height: 0,\n    });\n    measuringContext = canvas.getContext('2d');\n  }\n  return measuringContext;\n}\n\nexport type TPathSide = 'left' | 'right';\n\nexport type TPathAlign = 'baseline' | 'center' | 'ascender' | 'descender';\n\nexport type TextLinesInfo = {\n  lines: string[];\n  graphemeLines: string[][];\n  graphemeText: string[];\n  _unwrappedLines: string[][];\n};\n\n/**\n * Measure and return the info of a single grapheme.\n * needs the the info of previous graphemes already filled\n * Override to customize measuring\n */\nexport type GraphemeBBox = {\n  width: number;\n  height: number;\n  kernedWidth: number;\n  left: number;\n  deltaY: number;\n  renderLeft?: number;\n  renderTop?: number;\n  angle?: number;\n};\n\n// @TODO this is not complete\ninterface UniqueTextProps {\n  charSpacing: number;\n  lineHeight: number;\n  fontSize: number;\n  fontWeight: string | number;\n  fontFamily: string;\n  fontStyle: string;\n  pathSide: TPathSide;\n  pathAlign: TPathAlign;\n  underline: boolean;\n  overline: boolean;\n  linethrough: boolean;\n  textAlign: string;\n  direction: CanvasDirection;\n  path?: Path;\n}\n\nexport interface SerializedTextProps\n  extends SerializedObjectProps,\n    UniqueTextProps {\n  styles: TextStyleArray | TextStyle;\n}\n\nexport interface TextProps extends FabricObjectProps, UniqueTextProps {\n  styles: TextStyle;\n}\n\n/**\n * Text class\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#text}\n */\nexport class FabricText<\n    Props extends TOptions<TextProps> = Partial<TextProps>,\n    SProps extends SerializedTextProps = SerializedTextProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends StyledText<Props, SProps, EventSpec>\n  implements UniqueTextProps\n{\n  /**\n   * Properties that requires a text layout recalculation when changed\n   * @type string[]\n   * @protected\n   */\n  static textLayoutProperties: string[] = textLayoutProperties;\n\n  /**\n   * @private\n   */\n  declare _reNewline: RegExp;\n\n  /**\n   * Use this regular expression to filter for whitespaces that is not a new line.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reSpacesAndTabs: RegExp;\n\n  /**\n   * Use this regular expression to filter for whitespace that is not a new line.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reSpaceAndTab: RegExp;\n\n  /**\n   * Use this regular expression to filter consecutive groups of non spaces.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reWords: RegExp;\n\n  declare text: string;\n\n  /**\n   * Font size (in pixels)\n   * @type Number\n   * @default\n   */\n  declare fontSize: number;\n\n  /**\n   * Font weight (e.g. bold, normal, 400, 600, 800)\n   * @type {(Number|String)}\n   * @default\n   */\n  declare fontWeight: string | number;\n\n  /**\n   * Font family\n   * @type String\n   * @default\n   */\n  declare fontFamily: string;\n\n  /**\n   * Text decoration underline.\n   * @type Boolean\n   * @default\n   */\n  declare underline: boolean;\n\n  /**\n   * Text decoration overline.\n   * @type Boolean\n   * @default\n   */\n  declare overline: boolean;\n\n  /**\n   * Text decoration linethrough.\n   * @type Boolean\n   * @default\n   */\n  declare linethrough: boolean;\n\n  /**\n   * Text alignment. Possible values: \"left\", \"center\", \"right\", \"justify\",\n   * \"justify-left\", \"justify-center\" or \"justify-right\".\n   * @type String\n   * @default\n   */\n  declare textAlign: string;\n\n  /**\n   * Font style . Possible values: \"\", \"normal\", \"italic\" or \"oblique\".\n   * @type String\n   * @default\n   */\n  declare fontStyle: string;\n\n  /**\n   * Line height\n   * @type Number\n   * @default\n   */\n  declare lineHeight: number;\n\n  /**\n   * Superscript schema object (minimum overlap)\n   */\n  declare superscript: {\n    /**\n     * fontSize factor\n     * @default 0.6\n     */\n    size: number;\n    /**\n     * baseline-shift factor (upwards)\n     * @default -0.35\n     */\n    baseline: number;\n  };\n\n  /**\n   * Subscript schema object (minimum overlap)\n   */\n  declare subscript: {\n    /**\n     * fontSize factor\n     * @default 0.6\n     */\n    size: number;\n    /**\n     * baseline-shift factor (downwards)\n     * @default 0.11\n     */\n    baseline: number;\n  };\n\n  /**\n   * Background color of text lines\n   * @type String\n   * @default\n   */\n  declare textBackgroundColor: string;\n\n  declare styles: TextStyle;\n\n  /**\n   * Path that the text should follow.\n   * since 4.6.0 the path will be drawn automatically.\n   * if you want to make the path visible, give it a stroke and strokeWidth or fill value\n   * if you want it to be hidden, assign visible = false to the path.\n   * This feature is in BETA, and SVG import/export is not yet supported.\n   * @type Path\n   * @example\n   * const textPath = new Text('Text on a path', {\n   *     top: 150,\n   *     left: 150,\n   *     textAlign: 'center',\n   *     charSpacing: -50,\n   *     path: new Path('M 0 0 C 50 -100 150 -100 200 0', {\n   *         strokeWidth: 1,\n   *         visible: false\n   *     }),\n   *     pathSide: 'left',\n   *     pathStartOffset: 0\n   * });\n   * @default\n   */\n  declare path?: Path;\n\n  /**\n   * Offset amount for text path starting position\n   * Only used when text has a path\n   * @type Number\n   * @default\n   */\n  declare pathStartOffset: number;\n\n  /**\n   * Which side of the path the text should be drawn on.\n   * Only used when text has a path\n   * @type {TPathSide} 'left|right'\n   * @default\n   */\n  declare pathSide: TPathSide;\n\n  /**\n   * How text is aligned to the path. This property determines\n   * the perpendicular position of each character relative to the path.\n   * (one of \"baseline\", \"center\", \"ascender\", \"descender\")\n   * This feature is in BETA, and its behavior may change\n   * @type TPathAlign\n   * @default\n   */\n  declare pathAlign: TPathAlign;\n\n  /**\n   * @private\n   */\n  declare _fontSizeFraction: number;\n\n  /**\n   * @private\n   */\n  declare offsets: { underline: number; linethrough: number; overline: number };\n\n  /**\n   * Text Line proportion to font Size (in pixels)\n   * @type Number\n   * @default\n   */\n  declare _fontSizeMult: number;\n\n  /**\n   * additional space between characters\n   * expressed in thousands of em unit\n   * @type Number\n   * @default\n   */\n  declare charSpacing: number;\n\n  /**\n   * Baseline shift, styles only, keep at 0 for the main text object\n   * @type {Number}\n   * @default\n   */\n  declare deltaY: number;\n\n  /**\n   * WARNING: EXPERIMENTAL. NOT SUPPORTED YET\n   * determine the direction of the text.\n   * This has to be set manually together with textAlign and originX for proper\n   * experience.\n   * some interesting link for the future\n   * https://www.w3.org/International/questions/qa-bidi-unicode-controls\n   * @since 4.5.0\n   * @type {CanvasDirection} 'ltr|rtl'\n   * @default\n   */\n  declare direction: CanvasDirection;\n\n  /**\n   * contains characters bounding boxes\n   * This variable is considered to be protected.\n   * But for how mixins are implemented right now, we can't leave it private\n   * @protected\n   */\n  __charBounds: GraphemeBBox[][] = [];\n\n  /**\n   * use this size when measuring text. To avoid IE11 rounding errors\n   * @type {Number}\n   * @default\n   * @readonly\n   * @private\n   */\n  declare CACHE_FONT_SIZE: number;\n\n  /**\n   * contains the min text width to avoid getting 0\n   * @type {Number}\n   * @default\n   */\n  declare MIN_TEXT_WIDTH: number;\n\n  /**\n   * contains the the text of the object, divided in lines as they are displayed\n   * on screen. Wrapping will divide the text independently of line breaks\n   * @type {string[]}\n   * @default\n   */\n  declare textLines: string[];\n\n  /**\n   * same as textlines, but each line is an array of graphemes as split by splitByGrapheme\n   * @type {string[]}\n   * @default\n   */\n  declare _textLines: string[][];\n\n  declare _unwrappedTextLines: string[][];\n  declare _text: string[];\n  declare cursorWidth: number;\n  declare __lineHeights: number[];\n  declare __lineWidths: number[];\n  declare initialized?: true;\n\n  static cacheProperties = [...cacheProperties, ...additionalProps];\n\n  static ownDefaults = textDefaultValues;\n\n  static type = 'Text';\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...FabricText.ownDefaults };\n  }\n\n  constructor(text: string, options?: Props) {\n    super();\n    Object.assign(this, FabricText.ownDefaults);\n    this.setOptions(options);\n    if (!this.styles) {\n      this.styles = {};\n    }\n    this.text = text;\n    this.initialized = true;\n    if (this.path) {\n      this.setPathInfo();\n    }\n    this.initDimensions();\n    this.setCoords();\n  }\n\n  /**\n   * If text has a path, it will add the extra information needed\n   * for path and text calculations\n   */\n  setPathInfo() {\n    const path = this.path;\n    if (path) {\n      path.segmentsInfo = getPathSegmentsInfo(path.path);\n    }\n  }\n\n  /**\n   * @private\n   * Divides text into lines of text and lines of graphemes.\n   */\n  _splitText(): TextLinesInfo {\n    const newLines = this._splitTextIntoLines(this.text);\n    this.textLines = newLines.lines;\n    this._textLines = newLines.graphemeLines;\n    this._unwrappedTextLines = newLines._unwrappedLines;\n    this._text = newLines.graphemeText;\n    return newLines;\n  }\n\n  /**\n   * Initialize or update text dimensions.\n   * Updates this.width and this.height with the proper values.\n   * Does not return dimensions.\n   */\n  initDimensions() {\n    this._splitText();\n    this._clearCache();\n    this.dirty = true;\n    if (this.path) {\n      this.width = this.path.width;\n      this.height = this.path.height;\n    } else {\n      this.width =\n        this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH;\n      this.height = this.calcTextHeight();\n    }\n    if (this.textAlign.includes(JUSTIFY)) {\n      // once text is measured we need to make space fatter to make justified text.\n      this.enlargeSpaces();\n    }\n  }\n\n  /**\n   * Enlarge space boxes and shift the others\n   */\n  enlargeSpaces() {\n    let diffSpace,\n      currentLineWidth,\n      numberOfSpaces,\n      accumulatedSpace,\n      line,\n      charBound,\n      spaces;\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      if (\n        this.textAlign !== JUSTIFY &&\n        (i === len - 1 || this.isEndOfWrapping(i))\n      ) {\n        continue;\n      }\n      accumulatedSpace = 0;\n      line = this._textLines[i];\n      currentLineWidth = this.getLineWidth(i);\n      if (\n        currentLineWidth < this.width &&\n        (spaces = this.textLines[i].match(this._reSpacesAndTabs))\n      ) {\n        numberOfSpaces = spaces.length;\n        diffSpace = (this.width - currentLineWidth) / numberOfSpaces;\n        for (let j = 0; j <= line.length; j++) {\n          charBound = this.__charBounds[i][j];\n          if (this._reSpaceAndTab.test(line[j])) {\n            charBound.width += diffSpace;\n            charBound.kernedWidth += diffSpace;\n            charBound.left += accumulatedSpace;\n            accumulatedSpace += diffSpace;\n          } else {\n            charBound.left += accumulatedSpace;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Detect if the text line is ended with an hard break\n   * text and itext do not have wrapping, return false\n   * @return {Boolean}\n   */\n  isEndOfWrapping(lineIndex: number): boolean {\n    return lineIndex === this._textLines.length - 1;\n  }\n\n  /**\n   * Detect if a line has a linebreak and so we need to account for it when moving\n   * and counting style.\n   * It return always 1 for text and Itext. Textbox has its own implementation\n   * @return Number\n   */\n  missingNewlineOffset(lineIndex: number, skipWrapping?: boolean): 0 | 1;\n  missingNewlineOffset(_lineIndex: number): 1 {\n    return 1;\n  }\n\n  /**\n   * Returns 2d representation (lineIndex and charIndex) of cursor\n   * @param {Number} selectionStart\n   * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. useful to manage styles.\n   */\n  get2DCursorLocation(selectionStart: number, skipWrapping?: boolean) {\n    const lines = skipWrapping ? this._unwrappedTextLines : this._textLines;\n    let i: number;\n    for (i = 0; i < lines.length; i++) {\n      if (selectionStart <= lines[i].length) {\n        return {\n          lineIndex: i,\n          charIndex: selectionStart,\n        };\n      }\n      selectionStart -=\n        lines[i].length + this.missingNewlineOffset(i, skipWrapping);\n    }\n    return {\n      lineIndex: i - 1,\n      charIndex:\n        lines[i - 1].length < selectionStart\n          ? lines[i - 1].length\n          : selectionStart,\n    };\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {String} String representation of text object\n   */\n  toString(): string {\n    return `#<Text (${this.complexity()}): { \"text\": \"${\n      this.text\n    }\", \"fontFamily\": \"${this.fontFamily}\" }>`;\n  }\n\n  /**\n   * Return the dimension and the zoom level needed to create a cache canvas\n   * big enough to host the object to be cached.\n   * @private\n   * @param {Object} dim.x width of object to be cached\n   * @param {Object} dim.y height of object to be cached\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _getCacheCanvasDimensions(): TCacheCanvasDimensions {\n    const dims = super._getCacheCanvasDimensions();\n    const fontSize = this.fontSize;\n    dims.width += fontSize * dims.zoomX;\n    dims.height += fontSize * dims.zoomY;\n    return dims;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const path = this.path;\n    path && !path.isNotVisible() && path._render(ctx);\n    this._setTextStyles(ctx);\n    this._renderTextLinesBackground(ctx);\n    this._renderTextDecoration(ctx, 'underline');\n    this._renderText(ctx);\n    this._renderTextDecoration(ctx, 'overline');\n    this._renderTextDecoration(ctx, 'linethrough');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderText(ctx: CanvasRenderingContext2D) {\n    if (this.paintFirst === STROKE) {\n      this._renderTextStroke(ctx);\n      this._renderTextFill(ctx);\n    } else {\n      this._renderTextFill(ctx);\n      this._renderTextStroke(ctx);\n    }\n  }\n\n  /**\n   * Set the font parameter of the context with the object properties or with charStyle\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Object} [charStyle] object with font style properties\n   * @param {String} [charStyle.fontFamily] Font Family\n   * @param {Number} [charStyle.fontSize] Font size in pixels. ( without px suffix )\n   * @param {String} [charStyle.fontWeight] Font weight\n   * @param {String} [charStyle.fontStyle] Font style (italic|normal)\n   */\n  _setTextStyles(\n    ctx: CanvasRenderingContext2D,\n    charStyle?: any,\n    forMeasuring?: boolean,\n  ) {\n    ctx.textBaseline = 'alphabetic';\n    if (this.path) {\n      switch (this.pathAlign) {\n        case CENTER:\n          ctx.textBaseline = 'middle';\n          break;\n        case 'ascender':\n          ctx.textBaseline = TOP;\n          break;\n        case 'descender':\n          ctx.textBaseline = BOTTOM;\n          break;\n      }\n    }\n    ctx.font = this._getFontDeclaration(charStyle, forMeasuring);\n  }\n\n  /**\n   * calculate and return the text Width measuring each line.\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @return {Number} Maximum width of Text object\n   */\n  calcTextWidth(): number {\n    let maxWidth = this.getLineWidth(0);\n\n    for (let i = 1, len = this._textLines.length; i < len; i++) {\n      const currentLineWidth = this.getLineWidth(i);\n      if (currentLineWidth > maxWidth) {\n        maxWidth = currentLineWidth;\n      }\n    }\n    return maxWidth;\n  }\n\n  /**\n   * @private\n   * @param {String} method Method name (\"fillText\" or \"strokeText\")\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {String} line Text to render\n   * @param {Number} left Left position of text\n   * @param {Number} top Top position of text\n   * @param {Number} lineIndex Index of a line in a text\n   */\n  _renderTextLine(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    line: string[],\n    left: number,\n    top: number,\n    lineIndex: number,\n  ) {\n    this._renderChars(method, ctx, line, left, top, lineIndex);\n  }\n\n  /**\n   * Renders the text background for lines, taking care of style\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextLinesBackground(ctx: CanvasRenderingContext2D) {\n    if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor')) {\n      return;\n    }\n    const originalFill = ctx.fillStyle,\n      leftOffset = this._getLeftOffset();\n    let lineTopOffset = this._getTopOffset();\n\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i);\n      if (\n        !this.textBackgroundColor &&\n        !this.styleHas('textBackgroundColor', i)\n      ) {\n        lineTopOffset += heightOfLine;\n        continue;\n      }\n      const jlen = this._textLines[i].length;\n      const lineLeftOffset = this._getLineLeftOffset(i);\n      let boxWidth = 0;\n      let boxStart = 0;\n      let drawStart;\n      let currentColor;\n      let lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n      for (let j = 0; j < jlen; j++) {\n        // at this point charbox are either standard or full with pathInfo if there is a path.\n        const charBox = this.__charBounds[i][j] as Required<GraphemeBBox>;\n        currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n        if (this.path) {\n          ctx.save();\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          ctx.fillStyle = currentColor;\n          currentColor &&\n            ctx.fillRect(\n              -charBox.width / 2,\n              (-heightOfLine / this.lineHeight) * (1 - this._fontSizeFraction),\n              charBox.width,\n              heightOfLine / this.lineHeight,\n            );\n          ctx.restore();\n        } else if (currentColor !== lastColor) {\n          drawStart = leftOffset + lineLeftOffset + boxStart;\n          if (this.direction === 'rtl') {\n            drawStart = this.width - drawStart - boxWidth;\n          }\n          ctx.fillStyle = lastColor;\n          lastColor &&\n            ctx.fillRect(\n              drawStart,\n              lineTopOffset,\n              boxWidth,\n              heightOfLine / this.lineHeight,\n            );\n          boxStart = charBox.left;\n          boxWidth = charBox.width;\n          lastColor = currentColor;\n        } else {\n          boxWidth += charBox.kernedWidth;\n        }\n      }\n      if (currentColor && !this.path) {\n        drawStart = leftOffset + lineLeftOffset + boxStart;\n        if (this.direction === 'rtl') {\n          drawStart = this.width - drawStart - boxWidth;\n        }\n        ctx.fillStyle = currentColor;\n        ctx.fillRect(\n          drawStart,\n          lineTopOffset,\n          boxWidth,\n          heightOfLine / this.lineHeight,\n        );\n      }\n      lineTopOffset += heightOfLine;\n    }\n    ctx.fillStyle = originalFill;\n    // if there is text background color no\n    // other shadows should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * measure and return the width of a single character.\n   * possibly overridden to accommodate different measure logic or\n   * to hook some external lib for character measurement\n   * @private\n   * @param {String} _char, char to be measured\n   * @param {Object} charStyle style of char to be measured\n   * @param {String} [previousChar] previous char\n   * @param {Object} [prevCharStyle] style of previous char\n   */\n  _measureChar(\n    _char: string,\n    charStyle: CompleteTextStyleDeclaration,\n    previousChar: string | undefined,\n    prevCharStyle: CompleteTextStyleDeclaration | Record<string, never>,\n  ) {\n    const fontCache = cache.getFontCache(charStyle),\n      fontDeclaration = this._getFontDeclaration(charStyle),\n      couple = previousChar + _char,\n      stylesAreEqual =\n        previousChar &&\n        fontDeclaration === this._getFontDeclaration(prevCharStyle),\n      fontMultiplier = charStyle.fontSize / this.CACHE_FONT_SIZE;\n    let width: number | undefined,\n      coupleWidth: number | undefined,\n      previousWidth: number | undefined,\n      kernedWidth: number | undefined;\n\n    if (previousChar && fontCache[previousChar] !== undefined) {\n      previousWidth = fontCache[previousChar];\n    }\n    if (fontCache[_char] !== undefined) {\n      kernedWidth = width = fontCache[_char];\n    }\n    if (stylesAreEqual && fontCache[couple] !== undefined) {\n      coupleWidth = fontCache[couple];\n      kernedWidth = coupleWidth - previousWidth!;\n    }\n    if (\n      width === undefined ||\n      previousWidth === undefined ||\n      coupleWidth === undefined\n    ) {\n      const ctx = getMeasuringContext()!;\n      // send a TRUE to specify measuring font size CACHE_FONT_SIZE\n      this._setTextStyles(ctx, charStyle, true);\n      if (width === undefined) {\n        kernedWidth = width = ctx.measureText(_char).width;\n        fontCache[_char] = width;\n      }\n      if (previousWidth === undefined && stylesAreEqual && previousChar) {\n        previousWidth = ctx.measureText(previousChar).width;\n        fontCache[previousChar] = previousWidth;\n      }\n      if (stylesAreEqual && coupleWidth === undefined) {\n        // we can measure the kerning couple and subtract the width of the previous character\n        coupleWidth = ctx.measureText(couple).width;\n        fontCache[couple] = coupleWidth;\n        // safe to use the non-null since if undefined we defined it before.\n        kernedWidth = coupleWidth - previousWidth!;\n      }\n    }\n    return {\n      width: width * fontMultiplier,\n      kernedWidth: kernedWidth! * fontMultiplier,\n    };\n  }\n\n  /**\n   * Computes height of character at given position\n   * @param {Number} line the line index number\n   * @param {Number} _char the character index number\n   * @return {Number} fontSize of the character\n   */\n  getHeightOfChar(line: number, _char: number): number {\n    return this.getValueOfPropertyAt(line, _char, 'fontSize');\n  }\n\n  /**\n   * measure a text line measuring all characters.\n   * @param {Number} lineIndex line number\n   */\n  measureLine(lineIndex: number) {\n    const lineInfo = this._measureLine(lineIndex);\n    if (this.charSpacing !== 0) {\n      lineInfo.width -= this._getWidthOfCharSpacing();\n    }\n    if (lineInfo.width < 0) {\n      lineInfo.width = 0;\n    }\n    return lineInfo;\n  }\n\n  /**\n   * measure every grapheme of a line, populating __charBounds\n   * @param {Number} lineIndex\n   * @return {Object} object.width total width of characters\n   * @return {Object} object.numOfSpaces length of chars that match this._reSpacesAndTabs\n   */\n  _measureLine(lineIndex: number) {\n    let width = 0,\n      prevGrapheme: string | undefined,\n      graphemeInfo: GraphemeBBox | undefined;\n\n    const reverse = this.pathSide === RIGHT,\n      path = this.path,\n      line = this._textLines[lineIndex],\n      llength = line.length,\n      lineBounds = new Array<GraphemeBBox>(llength);\n\n    this.__charBounds[lineIndex] = lineBounds;\n    for (let i = 0; i < llength; i++) {\n      const grapheme = line[i];\n      graphemeInfo = this._getGraphemeBox(grapheme, lineIndex, i, prevGrapheme);\n      lineBounds[i] = graphemeInfo;\n      width += graphemeInfo.kernedWidth;\n      prevGrapheme = grapheme;\n    }\n    // this latest bound box represent the last character of the line\n    // to simplify cursor handling in interactive mode.\n    lineBounds[llength] = {\n      left: graphemeInfo ? graphemeInfo.left + graphemeInfo.width : 0,\n      width: 0,\n      kernedWidth: 0,\n      height: this.fontSize,\n      deltaY: 0,\n    } as GraphemeBBox;\n    if (path && path.segmentsInfo) {\n      let positionInPath = 0;\n      const totalPathLength =\n        path.segmentsInfo[path.segmentsInfo.length - 1].length;\n      switch (this.textAlign) {\n        case LEFT:\n          positionInPath = reverse ? totalPathLength - width : 0;\n          break;\n        case CENTER:\n          positionInPath = (totalPathLength - width) / 2;\n          break;\n        case RIGHT:\n          positionInPath = reverse ? 0 : totalPathLength - width;\n          break;\n        //todo - add support for justify\n      }\n      positionInPath += this.pathStartOffset * (reverse ? -1 : 1);\n      for (\n        let i = reverse ? llength - 1 : 0;\n        reverse ? i >= 0 : i < llength;\n        reverse ? i-- : i++\n      ) {\n        graphemeInfo = lineBounds[i];\n        if (positionInPath > totalPathLength) {\n          positionInPath %= totalPathLength;\n        } else if (positionInPath < 0) {\n          positionInPath += totalPathLength;\n        }\n        // it would probably much faster to send all the grapheme position for a line\n        // and calculate path position/angle at once.\n        this._setGraphemeOnPath(positionInPath, graphemeInfo);\n        positionInPath += graphemeInfo.kernedWidth;\n      }\n    }\n    return { width: width, numOfSpaces: 0 };\n  }\n\n  /**\n   * Calculate the angle  and the left,top position of the char that follow a path.\n   * It appends it to graphemeInfo to be reused later at rendering\n   * @private\n   * @param {Number} positionInPath to be measured\n   * @param {GraphemeBBox} graphemeInfo current grapheme box information\n   * @param {Object} startingPoint position of the point\n   */\n  _setGraphemeOnPath(positionInPath: number, graphemeInfo: GraphemeBBox) {\n    const centerPosition = positionInPath + graphemeInfo.kernedWidth / 2,\n      path = this.path!;\n\n    // we are at currentPositionOnPath. we want to know what point on the path is.\n    const info = getPointOnPath(path.path, centerPosition, path.segmentsInfo)!;\n    graphemeInfo.renderLeft = info.x - path.pathOffset.x;\n    graphemeInfo.renderTop = info.y - path.pathOffset.y;\n    graphemeInfo.angle = info.angle + (this.pathSide === RIGHT ? Math.PI : 0);\n  }\n\n  /**\n   *\n   * @param {String} grapheme to be measured\n   * @param {Number} lineIndex index of the line where the char is\n   * @param {Number} charIndex position in the line\n   * @param {String} [prevGrapheme] character preceding the one to be measured\n   * @returns {GraphemeBBox} grapheme bbox\n   */\n  _getGraphemeBox(\n    grapheme: string,\n    lineIndex: number,\n    charIndex: number,\n    prevGrapheme?: string,\n    skipLeft?: boolean,\n  ): GraphemeBBox {\n    const style = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n      prevStyle = prevGrapheme\n        ? this.getCompleteStyleDeclaration(lineIndex, charIndex - 1)\n        : {},\n      info = this._measureChar(grapheme, style, prevGrapheme, prevStyle);\n    let kernedWidth = info.kernedWidth,\n      width = info.width,\n      charSpacing;\n\n    if (this.charSpacing !== 0) {\n      charSpacing = this._getWidthOfCharSpacing();\n      width += charSpacing;\n      kernedWidth += charSpacing;\n    }\n\n    const box: GraphemeBBox = {\n      width,\n      left: 0,\n      height: style.fontSize,\n      kernedWidth,\n      deltaY: style.deltaY,\n    };\n    if (charIndex > 0 && !skipLeft) {\n      const previousBox = this.__charBounds[lineIndex][charIndex - 1];\n      box.left =\n        previousBox.left + previousBox.width + info.kernedWidth - info.width;\n    }\n    return box;\n  }\n\n  /**\n   * Calculate height of line at 'lineIndex'\n   * @param {Number} lineIndex index of line to calculate\n   * @return {Number}\n   */\n  getHeightOfLine(lineIndex: number): number {\n    if (this.__lineHeights[lineIndex]) {\n      return this.__lineHeights[lineIndex];\n    }\n\n    // char 0 is measured before the line cycle because it needs to char\n    // emptylines\n    let maxHeight = this.getHeightOfChar(lineIndex, 0);\n    for (let i = 1, len = this._textLines[lineIndex].length; i < len; i++) {\n      maxHeight = Math.max(this.getHeightOfChar(lineIndex, i), maxHeight);\n    }\n\n    return (this.__lineHeights[lineIndex] =\n      maxHeight * this.lineHeight * this._fontSizeMult);\n  }\n\n  /**\n   * Calculate text box height\n   */\n  calcTextHeight() {\n    let lineHeight,\n      height = 0;\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      lineHeight = this.getHeightOfLine(i);\n      height += i === len - 1 ? lineHeight / this.lineHeight : lineHeight;\n    }\n    return height;\n  }\n\n  /**\n   * @private\n   * @return {Number} Left offset\n   */\n  _getLeftOffset(): number {\n    return this.direction === 'ltr' ? -this.width / 2 : this.width / 2;\n  }\n\n  /**\n   * @private\n   * @return {Number} Top offset\n   */\n  _getTopOffset(): number {\n    return -this.height / 2;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {String} method Method name (\"fillText\" or \"strokeText\")\n   */\n  _renderTextCommon(\n    ctx: CanvasRenderingContext2D,\n    method: 'fillText' | 'strokeText',\n  ) {\n    ctx.save();\n    let lineHeights = 0;\n    const left = this._getLeftOffset(),\n      top = this._getTopOffset();\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i),\n        maxHeight = heightOfLine / this.lineHeight,\n        leftOffset = this._getLineLeftOffset(i);\n      this._renderTextLine(\n        method,\n        ctx,\n        this._textLines[i],\n        left + leftOffset,\n        top + lineHeights + maxHeight,\n        i,\n      );\n      lineHeights += heightOfLine;\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextFill(ctx: CanvasRenderingContext2D) {\n    if (!this.fill && !this.styleHas(FILL)) {\n      return;\n    }\n\n    this._renderTextCommon(ctx, 'fillText');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextStroke(ctx: CanvasRenderingContext2D) {\n    if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {\n      return;\n    }\n\n    if (this.shadow && !this.shadow.affectStroke) {\n      this._removeShadow(ctx);\n    }\n\n    ctx.save();\n    this._setLineDash(ctx, this.strokeDashArray);\n    ctx.beginPath();\n    this._renderTextCommon(ctx, 'strokeText');\n    ctx.closePath();\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {String} method fillText or strokeText.\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Array} line Content of the line, splitted in an array by grapheme\n   * @param {Number} left\n   * @param {Number} top\n   * @param {Number} lineIndex\n   */\n  _renderChars(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    line: Array<any>,\n    left: number,\n    top: number,\n    lineIndex: number,\n  ) {\n    const lineHeight = this.getHeightOfLine(lineIndex),\n      isJustify = this.textAlign.includes(JUSTIFY),\n      path = this.path,\n      shortCut =\n        !isJustify &&\n        this.charSpacing === 0 &&\n        this.isEmptyStyles(lineIndex) &&\n        !path,\n      isLtr = this.direction === 'ltr',\n      sign = this.direction === 'ltr' ? 1 : -1,\n      // this was changed in the PR #7674\n      // currentDirection = ctx.canvas.getAttribute('dir');\n      currentDirection = ctx.direction;\n\n    let actualStyle,\n      nextStyle,\n      charsToRender = '',\n      charBox,\n      boxWidth = 0,\n      timeToRender,\n      drawingLeft;\n\n    ctx.save();\n    if (currentDirection !== this.direction) {\n      ctx.canvas.setAttribute('dir', isLtr ? 'ltr' : 'rtl');\n      ctx.direction = isLtr ? 'ltr' : 'rtl';\n      ctx.textAlign = isLtr ? LEFT : RIGHT;\n    }\n    top -= (lineHeight * this._fontSizeFraction) / this.lineHeight;\n    if (shortCut) {\n      // render all the line in one pass without checking\n      // drawingLeft = isLtr ? left : left - this.getLineWidth(lineIndex);\n      this._renderChar(method, ctx, lineIndex, 0, line.join(''), left, top);\n      ctx.restore();\n      return;\n    }\n    for (let i = 0, len = line.length - 1; i <= len; i++) {\n      timeToRender = i === len || this.charSpacing || path;\n      charsToRender += line[i];\n      charBox = this.__charBounds[lineIndex][i] as Required<GraphemeBBox>;\n      if (boxWidth === 0) {\n        left += sign * (charBox.kernedWidth - charBox.width);\n        boxWidth += charBox.width;\n      } else {\n        boxWidth += charBox.kernedWidth;\n      }\n      if (isJustify && !timeToRender) {\n        if (this._reSpaceAndTab.test(line[i])) {\n          timeToRender = true;\n        }\n      }\n      if (!timeToRender) {\n        // if we have charSpacing, we render char by char\n        actualStyle =\n          actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n        nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n        timeToRender = hasStyleChanged(actualStyle, nextStyle, false);\n      }\n      if (timeToRender) {\n        if (path) {\n          ctx.save();\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          this._renderChar(\n            method,\n            ctx,\n            lineIndex,\n            i,\n            charsToRender,\n            -boxWidth / 2,\n            0,\n          );\n          ctx.restore();\n        } else {\n          drawingLeft = left;\n          this._renderChar(\n            method,\n            ctx,\n            lineIndex,\n            i,\n            charsToRender,\n            drawingLeft,\n            top,\n          );\n        }\n        charsToRender = '';\n        actualStyle = nextStyle;\n        left += sign * boxWidth;\n        boxWidth = 0;\n      }\n    }\n    ctx.restore();\n  }\n\n  /**\n   * This function try to patch the missing gradientTransform on canvas gradients.\n   * transforming a context to transform the gradient, is going to transform the stroke too.\n   * we want to transform the gradient but not the stroke operation, so we create\n   * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\n   * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size\n   * is limited.\n   * @private\n   * @param {TFiller} filler a fabric gradient instance\n   * @return {CanvasPattern} a pattern to use as fill/stroke style\n   */\n  _applyPatternGradientTransformText(filler: TFiller) {\n    // TODO: verify compatibility with strokeUniform\n    const width = this.width + this.strokeWidth,\n      height = this.height + this.strokeWidth,\n      pCanvas = createCanvasElementFor({\n        width,\n        height,\n      }),\n      pCtx = pCanvas.getContext('2d')!;\n    pCanvas.width = width;\n    pCanvas.height = height;\n    pCtx.beginPath();\n    pCtx.moveTo(0, 0);\n    pCtx.lineTo(width, 0);\n    pCtx.lineTo(width, height);\n    pCtx.lineTo(0, height);\n    pCtx.closePath();\n    pCtx.translate(width / 2, height / 2);\n    pCtx.fillStyle = filler.toLive(pCtx)!;\n    this._applyPatternGradientTransform(pCtx, filler);\n    pCtx.fill();\n    return pCtx.createPattern(pCanvas, 'no-repeat')!;\n  }\n\n  handleFiller<T extends 'fill' | 'stroke'>(\n    ctx: CanvasRenderingContext2D,\n    property: `${T}Style`,\n    filler: TFiller | string,\n  ): { offsetX: number; offsetY: number } {\n    let offsetX: number, offsetY: number;\n    if (isFiller(filler)) {\n      if (\n        (filler as Gradient<'linear'>).gradientUnits === 'percentage' ||\n        (filler as Gradient<'linear'>).gradientTransform ||\n        (filler as Pattern).patternTransform\n      ) {\n        // need to transform gradient in a pattern.\n        // this is a slow process. If you are hitting this codepath, and the object\n        // is not using caching, you should consider switching it on.\n        // we need a canvas as big as the current object caching canvas.\n        offsetX = -this.width / 2;\n        offsetY = -this.height / 2;\n        ctx.translate(offsetX, offsetY);\n        ctx[property] = this._applyPatternGradientTransformText(filler);\n        return { offsetX, offsetY };\n      } else {\n        // is a simple gradient or pattern\n        ctx[property] = filler.toLive(ctx)!;\n        return this._applyPatternGradientTransform(ctx, filler);\n      }\n    } else {\n      // is a color\n      ctx[property] = filler;\n    }\n    return { offsetX: 0, offsetY: 0 };\n  }\n\n  /**\n   * This function prepare the canvas for a stroke style, and stroke and strokeWidth\n   * need to be sent in as defined\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {CompleteTextStyleDeclaration} style with stroke and strokeWidth defined\n   * @returns\n   */\n  _setStrokeStyles(\n    ctx: CanvasRenderingContext2D,\n    {\n      stroke,\n      strokeWidth,\n    }: Pick<CompleteTextStyleDeclaration, 'stroke' | 'strokeWidth'>,\n  ) {\n    ctx.lineWidth = strokeWidth;\n    ctx.lineCap = this.strokeLineCap;\n    ctx.lineDashOffset = this.strokeDashOffset;\n    ctx.lineJoin = this.strokeLineJoin;\n    ctx.miterLimit = this.strokeMiterLimit;\n    return this.handleFiller(ctx, 'strokeStyle', stroke!);\n  }\n\n  /**\n   * This function prepare the canvas for a ill style, and fill\n   * need to be sent in as defined\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {CompleteTextStyleDeclaration} style with ill defined\n   * @returns\n   */\n  _setFillStyles(ctx: CanvasRenderingContext2D, { fill }: Pick<this, 'fill'>) {\n    return this.handleFiller(ctx, 'fillStyle', fill!);\n  }\n\n  /**\n   * @private\n   * @param {String} method\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {String} _char\n   * @param {Number} left Left coordinate\n   * @param {Number} top Top coordinate\n   * @param {Number} lineHeight Height of the line\n   */\n  _renderChar(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    lineIndex: number,\n    charIndex: number,\n    _char: string,\n    left: number,\n    top: number,\n  ) {\n    const decl = this._getStyleDeclaration(lineIndex, charIndex),\n      fullDecl = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n      shouldFill = method === 'fillText' && fullDecl.fill,\n      shouldStroke =\n        method === 'strokeText' && fullDecl.stroke && fullDecl.strokeWidth;\n\n    if (!shouldStroke && !shouldFill) {\n      return;\n    }\n    ctx.save();\n\n    ctx.font = this._getFontDeclaration(fullDecl);\n\n    if (decl.textBackgroundColor) {\n      this._removeShadow(ctx);\n    }\n    if (decl.deltaY) {\n      top += decl.deltaY;\n    }\n\n    if (shouldFill) {\n      const fillOffsets = this._setFillStyles(ctx, fullDecl);\n      ctx.fillText(\n        _char,\n        left - fillOffsets.offsetX,\n        top - fillOffsets.offsetY,\n      );\n    }\n\n    if (shouldStroke) {\n      const strokeOffsets = this._setStrokeStyles(ctx, fullDecl);\n      ctx.strokeText(\n        _char,\n        left - strokeOffsets.offsetX,\n        top - strokeOffsets.offsetY,\n      );\n    }\n\n    ctx.restore();\n  }\n\n  /**\n   * Turns the character into a 'superior figure' (i.e. 'superscript')\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   */\n  setSuperscript(start: number, end: number) {\n    this._setScript(start, end, this.superscript);\n  }\n\n  /**\n   * Turns the character into an 'inferior figure' (i.e. 'subscript')\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   */\n  setSubscript(start: number, end: number) {\n    this._setScript(start, end, this.subscript);\n  }\n\n  /**\n   * Applies 'schema' at given position\n   * @private\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   * @param {Number} schema\n   */\n  protected _setScript(\n    start: number,\n    end: number,\n    schema: {\n      size: number;\n      baseline: number;\n    },\n  ) {\n    const loc = this.get2DCursorLocation(start, true),\n      fontSize = this.getValueOfPropertyAt(\n        loc.lineIndex,\n        loc.charIndex,\n        'fontSize',\n      ),\n      dy = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'deltaY'),\n      style = {\n        fontSize: fontSize * schema.size,\n        deltaY: dy + fontSize * schema.baseline,\n      };\n    this.setSelectionStyles(style, start, end);\n  }\n\n  /**\n   * @private\n   * @param {Number} lineIndex index text line\n   * @return {Number} Line left offset\n   */\n  _getLineLeftOffset(lineIndex: number): number {\n    const lineWidth = this.getLineWidth(lineIndex),\n      lineDiff = this.width - lineWidth,\n      textAlign = this.textAlign,\n      direction = this.direction,\n      isEndOfWrapping = this.isEndOfWrapping(lineIndex);\n    let leftOffset = 0;\n    if (\n      textAlign === JUSTIFY ||\n      (textAlign === JUSTIFY_CENTER && !isEndOfWrapping) ||\n      (textAlign === JUSTIFY_RIGHT && !isEndOfWrapping) ||\n      (textAlign === JUSTIFY_LEFT && !isEndOfWrapping)\n    ) {\n      return 0;\n    }\n    if (textAlign === CENTER) {\n      leftOffset = lineDiff / 2;\n    }\n    if (textAlign === RIGHT) {\n      leftOffset = lineDiff;\n    }\n    if (textAlign === JUSTIFY_CENTER) {\n      leftOffset = lineDiff / 2;\n    }\n    if (textAlign === JUSTIFY_RIGHT) {\n      leftOffset = lineDiff;\n    }\n    if (direction === 'rtl') {\n      if (\n        textAlign === RIGHT ||\n        textAlign === JUSTIFY ||\n        textAlign === JUSTIFY_RIGHT\n      ) {\n        leftOffset = 0;\n      } else if (textAlign === LEFT || textAlign === JUSTIFY_LEFT) {\n        leftOffset = -lineDiff;\n      } else if (textAlign === CENTER || textAlign === JUSTIFY_CENTER) {\n        leftOffset = -lineDiff / 2;\n      }\n    }\n    return leftOffset;\n  }\n\n  /**\n   * @private\n   */\n  _clearCache() {\n    this._forceClearCache = false;\n    this.__lineWidths = [];\n    this.__lineHeights = [];\n    this.__charBounds = [];\n  }\n\n  /**\n   * Measure a single line given its index. Used to calculate the initial\n   * text bounding box. The values are calculated and stored in __lineWidths cache.\n   * @private\n   * @param {Number} lineIndex line number\n   * @return {Number} Line width\n   */\n  getLineWidth(lineIndex: number): number {\n    if (this.__lineWidths[lineIndex] !== undefined) {\n      return this.__lineWidths[lineIndex];\n    }\n\n    const { width } = this.measureLine(lineIndex);\n    this.__lineWidths[lineIndex] = width;\n    return width;\n  }\n\n  _getWidthOfCharSpacing() {\n    if (this.charSpacing !== 0) {\n      return (this.fontSize * this.charSpacing) / 1000;\n    }\n    return 0;\n  }\n\n  /**\n   * Retrieves the value of property at given character position\n   * @param {Number} lineIndex the line number\n   * @param {Number} charIndex the character number\n   * @param {String} property the property name\n   * @returns the value of 'property'\n   */\n  getValueOfPropertyAt<T extends StylePropertiesType>(\n    lineIndex: number,\n    charIndex: number,\n    property: T,\n  ): this[T] {\n    const charStyle = this._getStyleDeclaration(lineIndex, charIndex);\n    return (charStyle[property] ?? this[property]) as this[T];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextDecoration(\n    ctx: CanvasRenderingContext2D,\n    type: 'underline' | 'linethrough' | 'overline',\n  ) {\n    if (!this[type] && !this.styleHas(type)) {\n      return;\n    }\n    let topOffset = this._getTopOffset();\n    const leftOffset = this._getLeftOffset(),\n      path = this.path,\n      charSpacing = this._getWidthOfCharSpacing(),\n      offsetY = this.offsets[type];\n\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i);\n      if (!this[type] && !this.styleHas(type, i)) {\n        topOffset += heightOfLine;\n        continue;\n      }\n      const line = this._textLines[i];\n      const maxHeight = heightOfLine / this.lineHeight;\n      const lineLeftOffset = this._getLineLeftOffset(i);\n      let boxStart = 0;\n      let boxWidth = 0;\n      let lastDecoration = this.getValueOfPropertyAt(i, 0, type);\n      let lastFill = this.getValueOfPropertyAt(i, 0, FILL);\n      let currentDecoration;\n      let currentFill;\n      const top = topOffset + maxHeight * (1 - this._fontSizeFraction);\n      let size = this.getHeightOfChar(i, 0);\n      let dy = this.getValueOfPropertyAt(i, 0, 'deltaY');\n      for (let j = 0, jlen = line.length; j < jlen; j++) {\n        const charBox = this.__charBounds[i][j] as Required<GraphemeBBox>;\n        currentDecoration = this.getValueOfPropertyAt(i, j, type);\n        currentFill = this.getValueOfPropertyAt(i, j, FILL);\n        const currentSize = this.getHeightOfChar(i, j);\n        const currentDy = this.getValueOfPropertyAt(i, j, 'deltaY');\n        if (path && currentDecoration && currentFill) {\n          ctx.save();\n          // bug? verify lastFill is a valid fill here.\n          ctx.fillStyle = lastFill as string;\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          ctx.fillRect(\n            -charBox.kernedWidth / 2,\n            offsetY * currentSize + currentDy,\n            charBox.kernedWidth,\n            this.fontSize / 15,\n          );\n          ctx.restore();\n        } else if (\n          (currentDecoration !== lastDecoration ||\n            currentFill !== lastFill ||\n            currentSize !== size ||\n            currentDy !== dy) &&\n          boxWidth > 0\n        ) {\n          let drawStart = leftOffset + lineLeftOffset + boxStart;\n          if (this.direction === 'rtl') {\n            drawStart = this.width - drawStart - boxWidth;\n          }\n          if (lastDecoration && lastFill) {\n            // bug? verify lastFill is a valid fill here.\n            ctx.fillStyle = lastFill as string;\n            ctx.fillRect(\n              drawStart,\n              top + offsetY * size + dy,\n              boxWidth,\n              this.fontSize / 15,\n            );\n          }\n          boxStart = charBox.left;\n          boxWidth = charBox.width;\n          lastDecoration = currentDecoration;\n          lastFill = currentFill;\n          size = currentSize;\n          dy = currentDy;\n        } else {\n          boxWidth += charBox.kernedWidth;\n        }\n      }\n      let drawStart = leftOffset + lineLeftOffset + boxStart;\n      if (this.direction === 'rtl') {\n        drawStart = this.width - drawStart - boxWidth;\n      }\n      ctx.fillStyle = currentFill as string;\n      currentDecoration &&\n        currentFill &&\n        ctx.fillRect(\n          drawStart,\n          top + offsetY * size + dy,\n          boxWidth - charSpacing,\n          this.fontSize / 15,\n        );\n      topOffset += heightOfLine;\n    }\n    // if there is text background color no\n    // other shadows should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * return font declaration string for canvas context\n   * @param {Object} [styleObject] object\n   * @returns {String} font declaration formatted for canvas context.\n   */\n  _getFontDeclaration(\n    {\n      fontFamily = this.fontFamily,\n      fontStyle = this.fontStyle,\n      fontWeight = this.fontWeight,\n      fontSize = this.fontSize,\n    }: Partial<\n      Pick<\n        TextStyleDeclaration,\n        'fontFamily' | 'fontStyle' | 'fontWeight' | 'fontSize'\n      >\n    > = {},\n    forMeasuring?: boolean,\n  ): string {\n    const parsedFontFamily =\n      fontFamily.includes(\"'\") ||\n      fontFamily.includes('\"') ||\n      fontFamily.includes(',') ||\n      FabricText.genericFonts.includes(fontFamily.toLowerCase())\n        ? fontFamily\n        : `\"${fontFamily}\"`;\n    return [\n      fontStyle,\n      fontWeight,\n      `${forMeasuring ? this.CACHE_FONT_SIZE : fontSize}px`,\n      parsedFontFamily,\n    ].join(' ');\n  }\n\n  /**\n   * Renders text instance on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    if (!this.visible) {\n      return;\n    }\n    if (\n      this.canvas &&\n      this.canvas.skipOffscreen &&\n      !this.group &&\n      !this.isOnScreen()\n    ) {\n      return;\n    }\n    if (this._forceClearCache) {\n      this.initDimensions();\n    }\n    super.render(ctx);\n  }\n\n  /**\n   * Override this method to customize grapheme splitting\n   * @todo the util `graphemeSplit` needs to be injectable in some way.\n   * is more comfortable to inject the correct util rather than having to override text\n   * in the middle of the prototype chain\n   * @param {string} value\n   * @returns {string[]} array of graphemes\n   */\n  graphemeSplit(value: string): string[] {\n    return graphemeSplit(value);\n  }\n\n  /**\n   * Returns the text as an array of lines.\n   * @param {String} text text to split\n   * @returns  Lines in the text\n   */\n  _splitTextIntoLines(text: string): TextLinesInfo {\n    const lines = text.split(this._reNewline),\n      newLines = new Array<string[]>(lines.length),\n      newLine = ['\\n'];\n    let newText: string[] = [];\n    for (let i = 0; i < lines.length; i++) {\n      newLines[i] = this.graphemeSplit(lines[i]);\n      newText = newText.concat(newLines[i], newLine);\n    }\n    newText.pop();\n    return {\n      _unwrappedLines: newLines,\n      lines: lines,\n      graphemeText: newText,\n      graphemeLines: newLines,\n    };\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject([...additionalProps, ...propertiesToInclude] as K[]),\n      styles: stylesToArray(this.styles, this.text),\n      ...(this.path ? { path: this.path.toObject() } : {}),\n    };\n  }\n\n  set(key: string | any, value?: any) {\n    const { textLayoutProperties } = this.constructor as typeof FabricText;\n    super.set(key, value);\n    let needsDims = false;\n    let isAddingPath = false;\n    if (typeof key === 'object') {\n      for (const _key in key) {\n        if (_key === 'path') {\n          this.setPathInfo();\n        }\n        needsDims = needsDims || textLayoutProperties.includes(_key);\n        isAddingPath = isAddingPath || _key === 'path';\n      }\n    } else {\n      needsDims = textLayoutProperties.includes(key);\n      isAddingPath = key === 'path';\n    }\n    if (isAddingPath) {\n      this.setPathInfo();\n    }\n    if (needsDims && this.initialized) {\n      this.initDimensions();\n      this.setCoords();\n    }\n    return this;\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity\n   */\n  complexity(): number {\n    return 1;\n  }\n\n  /**\n   * List of generic font families\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-family#generic-name\n   */\n  static genericFonts = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n    'ui-serif',\n    'ui-sans-serif',\n    'ui-monospace',\n    'ui-rounded',\n    'math',\n    'emoji',\n    'fangsong',\n  ];\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link FabricText.fromElement})\n   * @static\n   * @memberOf Text\n   * @see: http://www.w3.org/TR/SVG/text.html#TextElement\n   */\n  static ATTRIBUTE_NAMES = SHARED_ATTRIBUTES.concat(\n    'x',\n    'y',\n    'dx',\n    'dy',\n    'font-family',\n    'font-style',\n    'font-weight',\n    'font-size',\n    'letter-spacing',\n    'text-decoration',\n    'text-anchor',\n  );\n\n  /**\n   * Returns FabricText instance from an SVG element (<b>not yet implemented</b>)\n   * @static\n   * @memberOf Text\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      FabricText.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n\n    const {\n      textAnchor = LEFT as typeof LEFT | typeof CENTER | typeof RIGHT,\n      textDecoration = '',\n      dx = 0,\n      dy = 0,\n      top = 0,\n      left = 0,\n      fontSize = DEFAULT_SVG_FONT_SIZE,\n      strokeWidth = 1,\n      ...restOfOptions\n    } = { ...options, ...parsedAttributes };\n\n    const textContent = (element.textContent || '')\n      .replace(/^\\s+|\\s+$|\\n+/g, '')\n      .replace(/\\s+/g, ' ');\n\n    // this code here is probably the usual issue for SVG center find\n    // this can later looked at again and probably removed.\n\n    const text = new this(textContent, {\n        left: left + dx,\n        top: top + dy,\n        underline: textDecoration.includes('underline'),\n        overline: textDecoration.includes('overline'),\n        linethrough: textDecoration.includes('line-through'),\n        // we initialize this as 0\n        strokeWidth: 0,\n        fontSize,\n        ...restOfOptions,\n      }),\n      textHeightScaleFactor = text.getScaledHeight() / text.height,\n      lineHeightDiff =\n        (text.height + text.strokeWidth) * text.lineHeight - text.height,\n      scaledDiff = lineHeightDiff * textHeightScaleFactor,\n      textHeight = text.getScaledHeight() + scaledDiff;\n\n    let offX = 0;\n    /*\n      Adjust positioning:\n        x/y attributes in SVG correspond to the bottom-left corner of text bounding box\n        fabric output by default at top, left.\n    */\n    if (textAnchor === CENTER) {\n      offX = text.getScaledWidth() / 2;\n    }\n    if (textAnchor === RIGHT) {\n      offX = text.getScaledWidth();\n    }\n    text.set({\n      left: text.left - offX,\n      top:\n        text.top -\n        (textHeight - text.fontSize * (0.07 + text._fontSizeFraction)) /\n          text.lineHeight,\n      strokeWidth,\n    });\n    return text;\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns FabricText instance from an object representation\n   * @param {Object} object plain js Object to create an instance from\n   * @returns {Promise<FabricText>}\n   */\n  static fromObject<\n    T extends TOptions<SerializedTextProps>,\n    S extends FabricText,\n  >(object: T) {\n    return this._fromObject<S>(\n      {\n        ...object,\n        styles: stylesFromArray(object.styles || {}, object.text),\n      },\n      {\n        extraParam: 'text',\n      },\n    );\n  }\n}\n\napplyMixins(FabricText, [TextSVGExportMixin]);\nclassRegistry.setClass(FabricText);\nclassRegistry.setSVGClass(FabricText);\n","import type {\n  DragEventData,\n  DropEventData,\n  TPointerEvent,\n} from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport type { IText } from './IText';\nimport { setStyle } from '../../util/dom_style';\nimport { cloneStyles } from '../../util/internals/cloneStyles';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { CHANGED, NONE } from '../../constants';\n\n/**\n * #### Dragging IText/Textbox Lifecycle\n * - {@link start} is called from `mousedown` {@link IText#_mouseDownHandler} and determines if dragging should start by testing {@link isPointerOverSelection}\n * - if true `mousedown` {@link IText#_mouseDownHandler} is blocked to keep selection\n * - if the pointer moves, canvas fires numerous mousemove {@link Canvas#_onMouseMove} that we make sure **aren't** prevented ({@link IText#shouldStartDragging}) in order for the window to start a drag session\n * - once/if the session starts canvas calls {@link onDragStart} on the active object to determine if dragging should occur\n * - canvas fires relevant drag events that are handled by the handlers defined in this scope\n * - {@link end} is called from `mouseup` {@link IText#mouseUpHandler}, blocking IText default click behavior\n * - in case the drag session didn't occur, {@link end} handles a click, since logic to do so was blocked during `mousedown`\n */\nexport class DraggableTextDelegate {\n  readonly target: IText;\n  private __mouseDownInPlace = false;\n  private __dragStartFired = false;\n  private __isDraggingOver = false;\n  private __dragStartSelection?: {\n    selectionStart: number;\n    selectionEnd: number;\n  };\n  private __dragImageDisposer?: VoidFunction;\n  private _dispose?: () => void;\n\n  constructor(target: IText) {\n    this.target = target;\n    const disposers = [\n      this.target.on('dragenter', this.dragEnterHandler.bind(this)),\n      this.target.on('dragover', this.dragOverHandler.bind(this)),\n      this.target.on('dragleave', this.dragLeaveHandler.bind(this)),\n      this.target.on('dragend', this.dragEndHandler.bind(this)),\n      this.target.on('drop', this.dropHandler.bind(this)),\n    ];\n    this._dispose = () => {\n      disposers.forEach((d) => d());\n      this._dispose = undefined;\n    };\n  }\n\n  isPointerOverSelection(e: TPointerEvent) {\n    const target = this.target;\n    const newSelection = target.getSelectionStartFromPointer(e);\n    return (\n      target.isEditing &&\n      newSelection >= target.selectionStart &&\n      newSelection <= target.selectionEnd &&\n      target.selectionStart < target.selectionEnd\n    );\n  }\n\n  /**\n   * @public override this method to disable dragging and default to mousedown logic\n   */\n  start(e: TPointerEvent) {\n    return (this.__mouseDownInPlace = this.isPointerOverSelection(e));\n  }\n\n  /**\n   * @public override this method to disable dragging without discarding selection\n   */\n  isActive() {\n    return this.__mouseDownInPlace;\n  }\n\n  /**\n   * Ends interaction and sets cursor in case of a click\n   * @returns true if was active\n   */\n  end(e: TPointerEvent) {\n    const active = this.isActive();\n    if (active && !this.__dragStartFired) {\n      // mousedown has been blocked since `active` is true => cursor has not been set.\n      // `__dragStartFired` is false => dragging didn't occur, pointer didn't move and is over selection.\n      // meaning this is actually a click, `active` is a false positive.\n      this.target.setCursorByClick(e);\n      this.target.initDelayedCursor(true);\n    }\n    this.__mouseDownInPlace = false;\n    this.__dragStartFired = false;\n    this.__isDraggingOver = false;\n    return active;\n  }\n\n  getDragStartSelection() {\n    return this.__dragStartSelection;\n  }\n\n  /**\n   * Override to customize the drag image\n   * https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage\n   */\n  setDragImage(\n    e: DragEvent,\n    {\n      selectionStart,\n      selectionEnd,\n    }: {\n      selectionStart: number;\n      selectionEnd: number;\n    },\n  ) {\n    const target = this.target;\n    const canvas = target.canvas!;\n    const flipFactor = new Point(target.flipX ? -1 : 1, target.flipY ? -1 : 1);\n    const boundaries = target._getCursorBoundaries(selectionStart);\n    const selectionPosition = new Point(\n      boundaries.left + boundaries.leftOffset,\n      boundaries.top + boundaries.topOffset,\n    ).multiply(flipFactor);\n    const pos = selectionPosition.transform(target.calcTransformMatrix());\n    const pointer = canvas.getScenePoint(e);\n    const diff = pointer.subtract(pos);\n    const retinaScaling = target.getCanvasRetinaScaling();\n    const bbox = target.getBoundingRect();\n    const correction = pos.subtract(new Point(bbox.left, bbox.top));\n    const vpt = canvas.viewportTransform;\n    const offset = correction.add(diff).transform(vpt, true);\n    //  prepare instance for drag image snapshot by making all non selected text invisible\n    const bgc = target.backgroundColor;\n    const styles = cloneStyles(target.styles);\n    target.backgroundColor = '';\n    const styleOverride = {\n      stroke: 'transparent',\n      fill: 'transparent',\n      textBackgroundColor: 'transparent',\n    };\n    target.setSelectionStyles(styleOverride, 0, selectionStart);\n    target.setSelectionStyles(styleOverride, selectionEnd, target.text.length);\n    target.dirty = true;\n    const dragImage = target.toCanvasElement({\n      enableRetinaScaling: canvas.enableRetinaScaling,\n      viewportTransform: true,\n    });\n    // restore values\n    target.backgroundColor = bgc;\n    target.styles = styles;\n    target.dirty = true;\n    //  position drag image offscreen\n    setStyle(dragImage, {\n      position: 'fixed',\n      left: `${-dragImage.width}px`,\n      border: NONE,\n      width: `${dragImage.width / retinaScaling}px`,\n      height: `${dragImage.height / retinaScaling}px`,\n    });\n    this.__dragImageDisposer && this.__dragImageDisposer();\n    this.__dragImageDisposer = () => {\n      dragImage.remove();\n    };\n    getDocumentFromElement(\n      (e.target || this.target.hiddenTextarea)! as HTMLElement,\n    ).body.appendChild(dragImage);\n    e.dataTransfer?.setDragImage(dragImage, offset.x, offset.y);\n  }\n\n  /**\n   * @returns {boolean} determines whether {@link target} should/shouldn't become a drag source\n   */\n  onDragStart(e: DragEvent): boolean {\n    this.__dragStartFired = true;\n    const target = this.target;\n    const active = this.isActive();\n    if (active && e.dataTransfer) {\n      const selection = (this.__dragStartSelection = {\n        selectionStart: target.selectionStart,\n        selectionEnd: target.selectionEnd,\n      });\n      const value = target._text\n        .slice(selection.selectionStart, selection.selectionEnd)\n        .join('');\n      const data = { text: target.text, value, ...selection };\n      e.dataTransfer.setData('text/plain', value);\n      e.dataTransfer.setData(\n        'application/fabric',\n        JSON.stringify({\n          value: value,\n          styles: target.getSelectionStyles(\n            selection.selectionStart,\n            selection.selectionEnd,\n            true,\n          ),\n        }),\n      );\n      e.dataTransfer.effectAllowed = 'copyMove';\n      this.setDragImage(e, data);\n    }\n    target.abortCursorAnimation();\n    return active;\n  }\n\n  /**\n   * use {@link targetCanDrop} to respect overriding\n   * @returns {boolean} determines whether {@link target} should/shouldn't become a drop target\n   */\n  canDrop(e: DragEvent): boolean {\n    if (\n      this.target.editable &&\n      !this.target.getActiveControl() &&\n      !e.defaultPrevented\n    ) {\n      if (this.isActive() && this.__dragStartSelection) {\n        //  drag source trying to drop over itself\n        //  allow dropping only outside of drag start selection\n        const index = this.target.getSelectionStartFromPointer(e);\n        const dragStartSelection = this.__dragStartSelection;\n        return (\n          index < dragStartSelection.selectionStart ||\n          index > dragStartSelection.selectionEnd\n        );\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * in order to respect overriding {@link IText#canDrop} we call that instead of calling {@link canDrop} directly\n   */\n  protected targetCanDrop(e: DragEvent) {\n    return this.target.canDrop(e);\n  }\n\n  dragEnterHandler({ e }: DragEventData) {\n    const canDrop = this.targetCanDrop(e);\n    if (!this.__isDraggingOver && canDrop) {\n      this.__isDraggingOver = true;\n    }\n  }\n\n  dragOverHandler(ev: DragEventData) {\n    const { e } = ev;\n    const canDrop = this.targetCanDrop(e);\n    if (!this.__isDraggingOver && canDrop) {\n      this.__isDraggingOver = true;\n    } else if (this.__isDraggingOver && !canDrop) {\n      //  drop state has changed\n      this.__isDraggingOver = false;\n    }\n    if (this.__isDraggingOver) {\n      //  can be dropped, inform browser\n      e.preventDefault();\n      //  inform event subscribers\n      ev.canDrop = true;\n      ev.dropTarget = this.target;\n    }\n  }\n\n  dragLeaveHandler() {\n    if (this.__isDraggingOver || this.isActive()) {\n      this.__isDraggingOver = false;\n    }\n  }\n\n  /**\n   * Override the `text/plain | application/fabric` types of {@link DragEvent#dataTransfer}\n   * in order to change the drop value or to customize styling respectively, by listening to the `drop:before` event\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#performing_a_drop\n   */\n  dropHandler(ev: DropEventData) {\n    const { e } = ev;\n    const didDrop = e.defaultPrevented;\n    this.__isDraggingOver = false;\n    // inform browser that the drop has been accepted\n    e.preventDefault();\n    let insert = e.dataTransfer?.getData('text/plain');\n    if (insert && !didDrop) {\n      const target = this.target;\n      const canvas = target.canvas!;\n      let insertAt = target.getSelectionStartFromPointer(e);\n      const { styles } = (\n        e.dataTransfer!.types.includes('application/fabric')\n          ? JSON.parse(e.dataTransfer!.getData('application/fabric'))\n          : {}\n      ) as { styles: TextStyleDeclaration[] };\n      const trailing = insert[Math.max(0, insert.length - 1)];\n      const selectionStartOffset = 0;\n      //  drag and drop in same instance\n      if (this.__dragStartSelection) {\n        const selectionStart = this.__dragStartSelection.selectionStart;\n        const selectionEnd = this.__dragStartSelection.selectionEnd;\n        if (insertAt > selectionStart && insertAt <= selectionEnd) {\n          insertAt = selectionStart;\n        } else if (insertAt > selectionEnd) {\n          insertAt -= selectionEnd - selectionStart;\n        }\n        target.removeChars(selectionStart, selectionEnd);\n        // prevent `dragend` from handling event\n        delete this.__dragStartSelection;\n      }\n      //  remove redundant line break\n      if (\n        target._reNewline.test(trailing) &&\n        (target._reNewline.test(target._text[insertAt]) ||\n          insertAt === target._text.length)\n      ) {\n        insert = insert.trimEnd();\n      }\n      //  inform subscribers\n      ev.didDrop = true;\n      ev.dropTarget = target;\n      //  finalize\n      target.insertChars(insert, styles, insertAt);\n      // can this part be moved in an outside event? andrea to check.\n      canvas.setActiveObject(target);\n      target.enterEditing(e);\n      target.selectionStart = Math.min(\n        insertAt + selectionStartOffset,\n        target._text.length,\n      );\n      target.selectionEnd = Math.min(\n        target.selectionStart + insert.length,\n        target._text.length,\n      );\n      target.hiddenTextarea!.value = target.text;\n      target._updateTextarea();\n      target.hiddenTextarea!.focus();\n      target.fire(CHANGED, {\n        index: insertAt + selectionStartOffset,\n        action: 'drop',\n      });\n      canvas.fire('text:changed', { target });\n      canvas.contextTopDirty = true;\n      canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * fired only on the drag source after drop (if occurred)\n   * handle changes to the drag source in case of a drop on another object or a cancellation\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#finishing_a_drag\n   */\n  dragEndHandler({ e }: DragEventData) {\n    if (this.isActive() && this.__dragStartFired) {\n      //  once the drop event finishes we check if we need to change the drag source\n      //  if the drag source received the drop we bail out since the drop handler has already handled logic\n      if (this.__dragStartSelection) {\n        const target = this.target;\n        const canvas = this.target.canvas!;\n        const { selectionStart, selectionEnd } = this.__dragStartSelection;\n        const dropEffect = e.dataTransfer?.dropEffect || NONE;\n        if (dropEffect === NONE) {\n          // pointer is back over selection\n          target.selectionStart = selectionStart;\n          target.selectionEnd = selectionEnd;\n          target._updateTextarea();\n          target.hiddenTextarea!.focus();\n        } else {\n          target.clearContextTop();\n          if (dropEffect === 'move') {\n            target.removeChars(selectionStart, selectionEnd);\n            target.selectionStart = target.selectionEnd = selectionStart;\n            target.hiddenTextarea &&\n              (target.hiddenTextarea.value = target.text);\n            target._updateTextarea();\n            target.fire(CHANGED, {\n              index: selectionStart,\n              action: 'dragend',\n            });\n            canvas.fire('text:changed', { target });\n            canvas.requestRenderAll();\n          }\n          target.exitEditing();\n        }\n      }\n    }\n\n    this.__dragImageDisposer && this.__dragImageDisposer();\n    delete this.__dragImageDisposer;\n    delete this.__dragStartSelection;\n    this.__isDraggingOver = false;\n  }\n\n  dispose() {\n    this._dispose && this._dispose();\n  }\n}\n","import type {\n  ObjectEvents,\n  TPointerEvent,\n  TPointerEventInfo,\n} from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport type { FabricObject } from '../Object/FabricObject';\nimport { FabricText } from '../Text/Text';\nimport { animate } from '../../util/animation/animate';\nimport type { TOnAnimationChangeCallback } from '../../util/animation/types';\nimport type { ValueAnimation } from '../../util/animation/ValueAnimation';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\nimport type { SerializedTextProps, TextProps } from '../Text/Text';\nimport type { TOptions } from '../../typedefs';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { LEFT, MODIFIED, RIGHT, reNewline } from '../../constants';\nimport type { IText } from './IText';\n\n/**\n *  extend this regex to support non english languages\n *\n *  - ` `      Matches a SPACE character (char code 32).\n *  - `\\n`     Matches a LINE FEED character (char code 10).\n *  - `\\.`     Matches a \".\" character (char code 46).\n *  - `,`      Matches a \",\" character (char code 44).\n *  - `;`      Matches a \";\" character (char code 59).\n *  - `!`      Matches a \"!\" character (char code 33).\n *  - `\\?`     Matches a \"?\" character (char code 63).\n *  - `\\-`     Matches a \"-\" character (char code 45).\n */\n// eslint-disable-next-line no-useless-escape\nconst reNonWord = /[ \\n\\.,;!\\?\\-]/;\n\nexport type ITextEvents = ObjectEvents & {\n  'selection:changed': never;\n  changed: never | { index: number; action: string };\n  tripleclick: TPointerEventInfo;\n  'editing:entered': never | { e: TPointerEvent };\n  'editing:exited': never;\n};\n\nexport abstract class ITextBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents,\n> extends FabricText<Props, SProps, EventSpec> {\n  declare abstract isEditing: boolean;\n  declare abstract cursorDelay: number;\n  declare abstract selectionStart: number;\n  declare abstract selectionEnd: number;\n  declare abstract cursorDuration: number;\n  declare abstract editable: boolean;\n  declare abstract editingBorderColor: string;\n\n  declare abstract compositionStart: number;\n  declare abstract compositionEnd: number;\n\n  declare abstract hiddenTextarea: HTMLTextAreaElement | null;\n\n  /**\n   * Helps determining when the text is in composition, so that the cursor\n   * rendering is altered.\n   */\n  protected declare inCompositionMode: boolean;\n\n  protected declare _reSpace: RegExp;\n  private declare _currentTickState?: ValueAnimation;\n  private declare _currentTickCompleteState?: ValueAnimation;\n  protected _currentCursorOpacity = 1;\n  private declare _textBeforeEdit: string;\n  protected declare __selectionStartOnMouseDown: number;\n\n  protected declare selected: boolean;\n  protected declare cursorOffsetCache: { left?: number; top?: number };\n  protected declare _savedProps?: {\n    hasControls: boolean;\n    borderColor: string;\n    lockMovementX: boolean;\n    lockMovementY: boolean;\n    selectable: boolean;\n    hoverCursor: CSSStyleDeclaration['cursor'] | null;\n    defaultCursor?: CSSStyleDeclaration['cursor'];\n    moveCursor?: CSSStyleDeclaration['cursor'];\n  };\n  protected declare _selectionDirection: 'left' | 'right' | null;\n\n  abstract initHiddenTextarea(): void;\n  abstract _fireSelectionChanged(): void;\n  abstract renderCursorOrSelection(): void;\n  abstract getSelectionStartFromPointer(e: TPointerEvent): number;\n  abstract _getCursorBoundaries(\n    index: number,\n    skipCaching?: boolean,\n  ): {\n    left: number;\n    top: number;\n    leftOffset: number;\n    topOffset: number;\n  };\n\n  /**\n   * Initializes all the interactive behavior of IText\n   */\n  initBehavior() {\n    this._tick = this._tick.bind(this);\n    this._onTickComplete = this._onTickComplete.bind(this);\n    this.updateSelectionOnMouseMove =\n      this.updateSelectionOnMouseMove.bind(this);\n  }\n\n  onDeselect(options?: { e?: TPointerEvent; object?: FabricObject }) {\n    this.isEditing && this.exitEditing();\n    this.selected = false;\n    return super.onDeselect(options);\n  }\n\n  /**\n   * @private\n   */\n  _animateCursor({\n    toValue,\n    duration,\n    delay,\n    onComplete,\n  }: {\n    toValue: number;\n    duration: number;\n    delay?: number;\n    onComplete?: TOnAnimationChangeCallback<number, void>;\n  }) {\n    return animate({\n      startValue: this._currentCursorOpacity,\n      endValue: toValue,\n      duration,\n      delay,\n      onComplete,\n      abort: () =>\n        !this.canvas ||\n        // we do not want to animate a selection, only cursor\n        this.selectionStart !== this.selectionEnd,\n      onChange: (value) => {\n        this._currentCursorOpacity = value;\n        this.renderCursorOrSelection();\n      },\n    });\n  }\n\n  /**\n   * changes the cursor from visible to invisible\n   */\n  private _tick(delay?: number) {\n    this._currentTickState = this._animateCursor({\n      toValue: 0,\n      duration: this.cursorDuration / 2,\n      delay: Math.max(delay || 0, 100),\n      onComplete: this._onTickComplete,\n    });\n  }\n\n  /**\n   * Changes the cursor from invisible to visible\n   */\n  private _onTickComplete() {\n    this._currentTickCompleteState?.abort();\n    this._currentTickCompleteState = this._animateCursor({\n      toValue: 1,\n      duration: this.cursorDuration,\n      onComplete: this._tick,\n    });\n  }\n\n  /**\n   * Initializes delayed cursor\n   */\n  initDelayedCursor(restart?: boolean) {\n    this.abortCursorAnimation();\n    this._tick(restart ? 0 : this.cursorDelay);\n  }\n\n  /**\n   * Aborts cursor animation, clears all timeouts and clear textarea context if necessary\n   */\n  abortCursorAnimation() {\n    let shouldClear = false;\n    [this._currentTickState, this._currentTickCompleteState].forEach(\n      (cursorAnimation) => {\n        if (cursorAnimation && !cursorAnimation.isDone()) {\n          shouldClear = true;\n          cursorAnimation.abort();\n        }\n      },\n    );\n\n    this._currentCursorOpacity = 1;\n\n    //  make sure we clear context even if instance is not editing\n    if (shouldClear) {\n      this.clearContextTop();\n    }\n  }\n\n  /**\n   * Restart tue cursor animation if either is in complete state ( between animations )\n   * or if it never started before\n   */\n  restartCursorIfNeeded() {\n    if (\n      [this._currentTickState, this._currentTickCompleteState].some(\n        (cursorAnimation) => !cursorAnimation || cursorAnimation.isDone(),\n      )\n    ) {\n      this.initDelayedCursor();\n    }\n  }\n\n  /**\n   * Selects entire text\n   */\n  selectAll() {\n    this.selectionStart = 0;\n    this.selectionEnd = this._text.length;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n    return this;\n  }\n\n  /**\n   * Returns selected text\n   * @return {String}\n   */\n  getSelectedText(): string {\n    return this._text.slice(this.selectionStart, this.selectionEnd).join('');\n  }\n\n  /**\n   * Find new selection index representing start of current word according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findWordBoundaryLeft(startFrom: number): number {\n    let offset = 0,\n      index = startFrom - 1;\n\n    // remove space before cursor first\n    if (this._reSpace.test(this._text[index])) {\n      while (this._reSpace.test(this._text[index])) {\n        offset++;\n        index--;\n      }\n    }\n    while (/\\S/.test(this._text[index]) && index > -1) {\n      offset++;\n      index--;\n    }\n\n    return startFrom - offset;\n  }\n\n  /**\n   * Find new selection index representing end of current word according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findWordBoundaryRight(startFrom: number): number {\n    let offset = 0,\n      index = startFrom;\n\n    // remove space after cursor first\n    if (this._reSpace.test(this._text[index])) {\n      while (this._reSpace.test(this._text[index])) {\n        offset++;\n        index++;\n      }\n    }\n    while (/\\S/.test(this._text[index]) && index < this._text.length) {\n      offset++;\n      index++;\n    }\n\n    return startFrom + offset;\n  }\n\n  /**\n   * Find new selection index representing start of current line according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findLineBoundaryLeft(startFrom: number): number {\n    let offset = 0,\n      index = startFrom - 1;\n\n    while (!/\\n/.test(this._text[index]) && index > -1) {\n      offset++;\n      index--;\n    }\n\n    return startFrom - offset;\n  }\n\n  /**\n   * Find new selection index representing end of current line according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findLineBoundaryRight(startFrom: number): number {\n    let offset = 0,\n      index = startFrom;\n\n    while (!/\\n/.test(this._text[index]) && index < this._text.length) {\n      offset++;\n      index++;\n    }\n\n    return startFrom + offset;\n  }\n\n  /**\n   * Finds index corresponding to beginning or end of a word\n   * @param {Number} selectionStart Index of a character\n   * @param {Number} direction 1 or -1\n   * @return {Number} Index of the beginning or end of a word\n   */\n  searchWordBoundary(selectionStart: number, direction: 1 | -1): number {\n    const text = this._text;\n    // if we land on a space we move the cursor backwards\n    // if we are searching boundary end we move the cursor backwards ONLY if we don't land on a line break\n    let index =\n        selectionStart > 0 &&\n        this._reSpace.test(text[selectionStart]) &&\n        (direction === -1 || !reNewline.test(text[selectionStart - 1]))\n          ? selectionStart - 1\n          : selectionStart,\n      _char = text[index];\n    while (index > 0 && index < text.length && !reNonWord.test(_char)) {\n      index += direction;\n      _char = text[index];\n    }\n    if (direction === -1 && reNonWord.test(_char)) {\n      index++;\n    }\n    return index;\n  }\n\n  /**\n   * TODO fix: selectionStart set as 0 will be ignored?\n   * Selects a word based on the index\n   * @param {Number} selectionStart Index of a character\n   */\n  selectWord(selectionStart?: number) {\n    selectionStart = selectionStart || this.selectionStart;\n    // search backwards\n    const newSelectionStart = this.searchWordBoundary(selectionStart, -1),\n      // search forward\n      newSelectionEnd = Math.max(\n        newSelectionStart,\n        this.searchWordBoundary(selectionStart, 1),\n      );\n\n    this.selectionStart = newSelectionStart;\n    this.selectionEnd = newSelectionEnd;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * TODO fix: selectionStart set as 0 will be ignored?\n   * Selects a line based on the index\n   * @param {Number} selectionStart Index of a character\n   */\n  selectLine(selectionStart?: number) {\n    selectionStart = selectionStart || this.selectionStart;\n    const newSelectionStart = this.findLineBoundaryLeft(selectionStart),\n      newSelectionEnd = this.findLineBoundaryRight(selectionStart);\n\n    this.selectionStart = newSelectionStart;\n    this.selectionEnd = newSelectionEnd;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n    return this;\n  }\n\n  /**\n   * Enters editing state\n   */\n  enterEditing(e?: TPointerEvent) {\n    if (this.isEditing || !this.editable) {\n      return;\n    }\n    this.enterEditingImpl();\n    this.fire('editing:entered', e ? { e } : undefined);\n    this._fireSelectionChanged();\n    if (this.canvas) {\n      this.canvas.fire('text:editing:entered', {\n        target: this as unknown as IText,\n        e,\n      });\n      this.canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * runs the actual logic that enter from editing state, see {@link enterEditing}\n   */\n  enterEditingImpl() {\n    if (this.canvas) {\n      this.canvas.calcOffset();\n      this.canvas.textEditingManager.exitTextEditing();\n    }\n\n    this.isEditing = true;\n\n    this.initHiddenTextarea();\n    this.hiddenTextarea!.focus();\n    this.hiddenTextarea!.value = this.text;\n    this._updateTextarea();\n    this._saveEditingProps();\n    this._setEditingProps();\n    this._textBeforeEdit = this.text;\n\n    this._tick();\n  }\n\n  /**\n   * called by {@link Canvas#textEditingManager}\n   */\n  updateSelectionOnMouseMove(e: TPointerEvent) {\n    if (this.getActiveControl()) {\n      return;\n    }\n\n    const el = this.hiddenTextarea!;\n    // regain focus\n    getDocumentFromElement(el).activeElement !== el && el.focus();\n\n    const newSelectionStart = this.getSelectionStartFromPointer(e),\n      currentStart = this.selectionStart,\n      currentEnd = this.selectionEnd;\n    if (\n      (newSelectionStart !== this.__selectionStartOnMouseDown ||\n        currentStart === currentEnd) &&\n      (currentStart === newSelectionStart || currentEnd === newSelectionStart)\n    ) {\n      return;\n    }\n    if (newSelectionStart > this.__selectionStartOnMouseDown) {\n      this.selectionStart = this.__selectionStartOnMouseDown;\n      this.selectionEnd = newSelectionStart;\n    } else {\n      this.selectionStart = newSelectionStart;\n      this.selectionEnd = this.__selectionStartOnMouseDown;\n    }\n    if (\n      this.selectionStart !== currentStart ||\n      this.selectionEnd !== currentEnd\n    ) {\n      this._fireSelectionChanged();\n      this._updateTextarea();\n      this.renderCursorOrSelection();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setEditingProps() {\n    this.hoverCursor = 'text';\n\n    if (this.canvas) {\n      this.canvas.defaultCursor = this.canvas.moveCursor = 'text';\n    }\n\n    this.borderColor = this.editingBorderColor;\n    this.hasControls = this.selectable = false;\n    this.lockMovementX = this.lockMovementY = true;\n  }\n\n  /**\n   * convert from textarea to grapheme indexes\n   */\n  fromStringToGraphemeSelection(start: number, end: number, text: string) {\n    const smallerTextStart = text.slice(0, start),\n      graphemeStart = this.graphemeSplit(smallerTextStart).length;\n    if (start === end) {\n      return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\n    }\n    const smallerTextEnd = text.slice(start, end),\n      graphemeEnd = this.graphemeSplit(smallerTextEnd).length;\n    return {\n      selectionStart: graphemeStart,\n      selectionEnd: graphemeStart + graphemeEnd,\n    };\n  }\n\n  /**\n   * convert from fabric to textarea values\n   */\n  fromGraphemeToStringSelection(\n    start: number,\n    end: number,\n    graphemes: string[],\n  ) {\n    const smallerTextStart = graphemes.slice(0, start),\n      graphemeStart = smallerTextStart.join('').length;\n    if (start === end) {\n      return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\n    }\n    const smallerTextEnd = graphemes.slice(start, end),\n      graphemeEnd = smallerTextEnd.join('').length;\n    return {\n      selectionStart: graphemeStart,\n      selectionEnd: graphemeStart + graphemeEnd,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _updateTextarea() {\n    this.cursorOffsetCache = {};\n    if (!this.hiddenTextarea) {\n      return;\n    }\n    if (!this.inCompositionMode) {\n      const newSelection = this.fromGraphemeToStringSelection(\n        this.selectionStart,\n        this.selectionEnd,\n        this._text,\n      );\n      this.hiddenTextarea.selectionStart = newSelection.selectionStart;\n      this.hiddenTextarea.selectionEnd = newSelection.selectionEnd;\n    }\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * @private\n   */\n  updateFromTextArea() {\n    if (!this.hiddenTextarea) {\n      return;\n    }\n    this.cursorOffsetCache = {};\n    const textarea = this.hiddenTextarea;\n    this.text = textarea.value;\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    const newSelection = this.fromStringToGraphemeSelection(\n      textarea.selectionStart,\n      textarea.selectionEnd,\n      textarea.value,\n    );\n    this.selectionEnd = this.selectionStart = newSelection.selectionEnd;\n    if (!this.inCompositionMode) {\n      this.selectionStart = newSelection.selectionStart;\n    }\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * @private\n   */\n  updateTextareaPosition() {\n    if (this.selectionStart === this.selectionEnd) {\n      const style = this._calcTextareaPosition();\n      this.hiddenTextarea!.style.left = style.left;\n      this.hiddenTextarea!.style.top = style.top;\n    }\n  }\n\n  /**\n   * @private\n   * @return {Object} style contains style for hiddenTextarea\n   */\n  _calcTextareaPosition() {\n    if (!this.canvas) {\n      return { left: '1px', top: '1px' };\n    }\n    const desiredPosition = this.inCompositionMode\n        ? this.compositionStart\n        : this.selectionStart,\n      boundaries = this._getCursorBoundaries(desiredPosition),\n      cursorLocation = this.get2DCursorLocation(desiredPosition),\n      lineIndex = cursorLocation.lineIndex,\n      charIndex = cursorLocation.charIndex,\n      charHeight =\n        this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize') *\n        this.lineHeight,\n      leftOffset = boundaries.leftOffset,\n      retinaScaling = this.getCanvasRetinaScaling(),\n      upperCanvas = this.canvas.upperCanvasEl,\n      upperCanvasWidth = upperCanvas.width / retinaScaling,\n      upperCanvasHeight = upperCanvas.height / retinaScaling,\n      maxWidth = upperCanvasWidth - charHeight,\n      maxHeight = upperCanvasHeight - charHeight;\n\n    const p = new Point(\n      boundaries.left + leftOffset,\n      boundaries.top + boundaries.topOffset + charHeight,\n    )\n      .transform(this.calcTransformMatrix())\n      .transform(this.canvas.viewportTransform)\n      .multiply(\n        new Point(\n          upperCanvas.clientWidth / upperCanvasWidth,\n          upperCanvas.clientHeight / upperCanvasHeight,\n        ),\n      );\n\n    if (p.x < 0) {\n      p.x = 0;\n    }\n    if (p.x > maxWidth) {\n      p.x = maxWidth;\n    }\n    if (p.y < 0) {\n      p.y = 0;\n    }\n    if (p.y > maxHeight) {\n      p.y = maxHeight;\n    }\n\n    // add canvas offset on document\n    p.x += this.canvas._offset.left;\n    p.y += this.canvas._offset.top;\n\n    return {\n      left: `${p.x}px`,\n      top: `${p.y}px`,\n      fontSize: `${charHeight}px`,\n      charHeight: charHeight,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _saveEditingProps() {\n    this._savedProps = {\n      hasControls: this.hasControls,\n      borderColor: this.borderColor,\n      lockMovementX: this.lockMovementX,\n      lockMovementY: this.lockMovementY,\n      hoverCursor: this.hoverCursor,\n      selectable: this.selectable,\n      defaultCursor: this.canvas && this.canvas.defaultCursor,\n      moveCursor: this.canvas && this.canvas.moveCursor,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _restoreEditingProps() {\n    if (!this._savedProps) {\n      return;\n    }\n\n    this.hoverCursor = this._savedProps.hoverCursor;\n    this.hasControls = this._savedProps.hasControls;\n    this.borderColor = this._savedProps.borderColor;\n    this.selectable = this._savedProps.selectable;\n    this.lockMovementX = this._savedProps.lockMovementX;\n    this.lockMovementY = this._savedProps.lockMovementY;\n\n    if (this.canvas) {\n      this.canvas.defaultCursor =\n        this._savedProps.defaultCursor || this.canvas.defaultCursor;\n      this.canvas.moveCursor =\n        this._savedProps.moveCursor || this.canvas.moveCursor;\n    }\n\n    delete this._savedProps;\n  }\n\n  /**\n   * runs the actual logic that exits from editing state, see {@link exitEditing}\n   * Please use exitEditingImpl, this function was kept to avoid breaking changes.\n   * Will be removed in fabric 7.0\n   * @deprecated use \"exitEditingImpl\"\n   */\n  protected _exitEditing() {\n    const hiddenTextarea = this.hiddenTextarea;\n    this.selected = false;\n    this.isEditing = false;\n\n    if (hiddenTextarea) {\n      hiddenTextarea.blur && hiddenTextarea.blur();\n      hiddenTextarea.parentNode &&\n        hiddenTextarea.parentNode.removeChild(hiddenTextarea);\n    }\n    this.hiddenTextarea = null;\n    this.abortCursorAnimation();\n    this.selectionStart !== this.selectionEnd && this.clearContextTop();\n  }\n\n  /**\n   * runs the actual logic that exits from editing state, see {@link exitEditing}\n   * But it does not fire events\n   */\n  exitEditingImpl() {\n    this._exitEditing();\n    this.selectionEnd = this.selectionStart;\n    this._restoreEditingProps();\n    if (this._forceClearCache) {\n      this.initDimensions();\n      this.setCoords();\n    }\n  }\n\n  /**\n   * Exits from editing state and fires relevant events\n   */\n  exitEditing() {\n    const isTextChanged = this._textBeforeEdit !== this.text;\n    this.exitEditingImpl();\n\n    this.fire('editing:exited');\n    isTextChanged && this.fire(MODIFIED);\n    if (this.canvas) {\n      this.canvas.fire('text:editing:exited', {\n        target: this as unknown as IText,\n      });\n      // todo: evaluate add an action to this event\n      isTextChanged && this.canvas.fire('object:modified', { target: this });\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _removeExtraneousStyles() {\n    for (const prop in this.styles) {\n      if (!this._textLines[prop as unknown as number]) {\n        delete this.styles[prop];\n      }\n    }\n  }\n\n  /**\n   * remove and reflow a style block from start to end.\n   * @param {Number} start linear start position for removal (included in removal)\n   * @param {Number} end linear end position for removal ( excluded from removal )\n   */\n  removeStyleFromTo(start: number, end: number) {\n    const { lineIndex: lineStart, charIndex: charStart } =\n        this.get2DCursorLocation(start, true),\n      { lineIndex: lineEnd, charIndex: charEnd } = this.get2DCursorLocation(\n        end,\n        true,\n      );\n    if (lineStart !== lineEnd) {\n      // step1 remove the trailing of lineStart\n      if (this.styles[lineStart]) {\n        for (\n          let i = charStart;\n          i < this._unwrappedTextLines[lineStart].length;\n          i++\n        ) {\n          delete this.styles[lineStart][i];\n        }\n      }\n      // step2 move the trailing of lineEnd to lineStart if needed\n      if (this.styles[lineEnd]) {\n        for (\n          let i = charEnd;\n          i < this._unwrappedTextLines[lineEnd].length;\n          i++\n        ) {\n          const styleObj = this.styles[lineEnd][i];\n          if (styleObj) {\n            this.styles[lineStart] || (this.styles[lineStart] = {});\n            this.styles[lineStart][charStart + i - charEnd] = styleObj;\n          }\n        }\n      }\n      // step3 detects lines will be completely removed.\n      for (let i = lineStart + 1; i <= lineEnd; i++) {\n        delete this.styles[i];\n      }\n      // step4 shift remaining lines.\n      this.shiftLineStyles(lineEnd, lineStart - lineEnd);\n    } else {\n      // remove and shift left on the same line\n      if (this.styles[lineStart]) {\n        const styleObj = this.styles[lineStart];\n        const diff = charEnd - charStart;\n        for (let i = charStart; i < charEnd; i++) {\n          delete styleObj[i];\n        }\n        for (const char in this.styles[lineStart]) {\n          const numericChar = parseInt(char, 10);\n          if (numericChar >= charEnd) {\n            styleObj[numericChar - diff] = styleObj[char];\n            delete styleObj[char];\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Shifts line styles up or down\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} offset Can any number?\n   */\n  shiftLineStyles(lineIndex: number, offset: number) {\n    const clonedStyles = Object.assign({}, this.styles);\n    for (const line in this.styles) {\n      const numericLine = parseInt(line, 10);\n      if (numericLine > lineIndex) {\n        this.styles[numericLine + offset] = clonedStyles[numericLine];\n        if (!clonedStyles[numericLine - offset]) {\n          delete this.styles[numericLine];\n        }\n      }\n    }\n  }\n\n  /**\n   * Handle insertion of more consecutive style lines for when one or more\n   * newlines gets added to the text. Since current style needs to be shifted\n   * first we shift the current style of the number lines needed, then we add\n   * new lines from the last to the first.\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} charIndex Index of a char\n   * @param {Number} qty number of lines to add\n   * @param {Array} copiedStyle Array of objects styles\n   */\n  insertNewlineStyleObject(\n    lineIndex: number,\n    charIndex: number,\n    qty: number,\n    copiedStyle?: { [index: number]: TextStyleDeclaration },\n  ) {\n    const newLineStyles: { [index: number]: TextStyleDeclaration } = {};\n    const originalLineLength = this._unwrappedTextLines[lineIndex].length;\n    const isEndOfLine = originalLineLength === charIndex;\n\n    let someStyleIsCarryingOver = false;\n    qty || (qty = 1);\n    this.shiftLineStyles(lineIndex, qty);\n    const currentCharStyle = this.styles[lineIndex]\n      ? this.styles[lineIndex][charIndex === 0 ? charIndex : charIndex - 1]\n      : undefined;\n\n    // we clone styles of all chars\n    // after cursor onto the current line\n    for (const index in this.styles[lineIndex]) {\n      const numIndex = parseInt(index, 10);\n      if (numIndex >= charIndex) {\n        someStyleIsCarryingOver = true;\n        newLineStyles[numIndex - charIndex] = this.styles[lineIndex][index];\n        // remove lines from the previous line since they're on a new line now\n        if (!(isEndOfLine && charIndex === 0)) {\n          delete this.styles[lineIndex][index];\n        }\n      }\n    }\n    let styleCarriedOver = false;\n    if (someStyleIsCarryingOver && !isEndOfLine) {\n      // if is end of line, the extra style we copied\n      // is probably not something we want\n      this.styles[lineIndex + qty] = newLineStyles;\n      styleCarriedOver = true;\n    }\n    if (styleCarriedOver || originalLineLength > charIndex) {\n      // skip the last line of since we already prepared it.\n      // or contains text without style that we don't want to style\n      // just because it changed lines\n      qty--;\n    }\n    // for the all the lines or all the other lines\n    // we clone current char style onto the next (otherwise empty) line\n    while (qty > 0) {\n      if (copiedStyle && copiedStyle[qty - 1]) {\n        this.styles[lineIndex + qty] = {\n          0: { ...copiedStyle[qty - 1] },\n        };\n      } else if (currentCharStyle) {\n        this.styles[lineIndex + qty] = {\n          0: { ...currentCharStyle },\n        };\n      } else {\n        delete this.styles[lineIndex + qty];\n      }\n      qty--;\n    }\n    this._forceClearCache = true;\n  }\n\n  /**\n   * Inserts style object for a given line/char index\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} charIndex Index of a char\n   * @param {Number} quantity number Style object to insert, if given\n   * @param {Array} copiedStyle array of style objects\n   */\n  insertCharStyleObject(\n    lineIndex: number,\n    charIndex: number,\n    quantity: number,\n    copiedStyle?: TextStyleDeclaration[],\n  ) {\n    if (!this.styles) {\n      this.styles = {};\n    }\n    const currentLineStyles = this.styles[lineIndex],\n      currentLineStylesCloned = currentLineStyles\n        ? { ...currentLineStyles }\n        : {};\n\n    quantity || (quantity = 1);\n    // shift all char styles by quantity forward\n    // 0,1,2,3 -> (charIndex=2) -> 0,1,3,4 -> (insert 2) -> 0,1,2,3,4\n    for (const index in currentLineStylesCloned) {\n      const numericIndex = parseInt(index, 10);\n      if (numericIndex >= charIndex) {\n        currentLineStyles[numericIndex + quantity] =\n          currentLineStylesCloned[numericIndex];\n        // only delete the style if there was nothing moved there\n        if (!currentLineStylesCloned[numericIndex - quantity]) {\n          delete currentLineStyles[numericIndex];\n        }\n      }\n    }\n    this._forceClearCache = true;\n    if (copiedStyle) {\n      while (quantity--) {\n        if (!Object.keys(copiedStyle[quantity]).length) {\n          continue;\n        }\n        if (!this.styles[lineIndex]) {\n          this.styles[lineIndex] = {};\n        }\n        this.styles[lineIndex][charIndex + quantity] = {\n          ...copiedStyle[quantity],\n        };\n      }\n      return;\n    }\n    if (!currentLineStyles) {\n      return;\n    }\n    const newStyle = currentLineStyles[charIndex ? charIndex - 1 : 1];\n    while (newStyle && quantity--) {\n      this.styles[lineIndex][charIndex + quantity] = { ...newStyle };\n    }\n  }\n\n  /**\n   * Inserts style object(s)\n   * @param {Array} insertedText Characters at the location where style is inserted\n   * @param {Number} start cursor index for inserting style\n   * @param {Array} [copiedStyle] array of style objects to insert.\n   */\n  insertNewStyleBlock(\n    insertedText: string[],\n    start: number,\n    copiedStyle?: TextStyleDeclaration[],\n  ) {\n    const cursorLoc = this.get2DCursorLocation(start, true),\n      addedLines = [0];\n    let linesLength = 0;\n    // get an array of how many char per lines are being added.\n    for (let i = 0; i < insertedText.length; i++) {\n      if (insertedText[i] === '\\n') {\n        linesLength++;\n        addedLines[linesLength] = 0;\n      } else {\n        addedLines[linesLength]++;\n      }\n    }\n    // for the first line copy the style from the current char position.\n    if (addedLines[0] > 0) {\n      this.insertCharStyleObject(\n        cursorLoc.lineIndex,\n        cursorLoc.charIndex,\n        addedLines[0],\n        copiedStyle,\n      );\n      copiedStyle = copiedStyle && copiedStyle.slice(addedLines[0] + 1);\n    }\n    linesLength &&\n      this.insertNewlineStyleObject(\n        cursorLoc.lineIndex,\n        cursorLoc.charIndex + addedLines[0],\n        linesLength,\n      );\n    let i;\n    for (i = 1; i < linesLength; i++) {\n      if (addedLines[i] > 0) {\n        this.insertCharStyleObject(\n          cursorLoc.lineIndex + i,\n          0,\n          addedLines[i],\n          copiedStyle,\n        );\n      } else if (copiedStyle) {\n        // this test is required in order to close #6841\n        // when a pasted buffer begins with a newline then\n        // this.styles[cursorLoc.lineIndex + i] and copiedStyle[0]\n        // may be undefined for some reason\n        if (this.styles[cursorLoc.lineIndex + i] && copiedStyle[0]) {\n          this.styles[cursorLoc.lineIndex + i][0] = copiedStyle[0];\n        }\n      }\n      copiedStyle = copiedStyle && copiedStyle.slice(addedLines[i] + 1);\n    }\n    if (addedLines[i] > 0) {\n      this.insertCharStyleObject(\n        cursorLoc.lineIndex + i,\n        0,\n        addedLines[i],\n        copiedStyle,\n      );\n    }\n  }\n\n  /**\n   * Removes characters from start/end\n   * start/end ar per grapheme position in _text array.\n   *\n   * @param {Number} start\n   * @param {Number} end default to start + 1\n   */\n  removeChars(start: number, end: number = start + 1) {\n    this.removeStyleFromTo(start, end);\n    this._text.splice(start, end - start);\n    this.text = this._text.join('');\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    this._removeExtraneousStyles();\n  }\n\n  /**\n   * insert characters at start position, before start position.\n   * start  equal 1 it means the text get inserted between actual grapheme 0 and 1\n   * if style array is provided, it must be as the same length of text in graphemes\n   * if end is provided and is bigger than start, old text is replaced.\n   * start/end ar per grapheme position in _text array.\n   *\n   * @param {String} text text to insert\n   * @param {Array} style array of style objects\n   * @param {Number} start\n   * @param {Number} end default to start + 1\n   */\n  insertChars(\n    text: string,\n    style: TextStyleDeclaration[] | undefined,\n    start: number,\n    end: number = start,\n  ) {\n    if (end > start) {\n      this.removeStyleFromTo(start, end);\n    }\n    const graphemes = this.graphemeSplit(text);\n    this.insertNewStyleBlock(graphemes, start, style);\n    this._text = [\n      ...this._text.slice(0, start),\n      ...graphemes,\n      ...this._text.slice(end),\n    ];\n    this.text = this._text.join('');\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    this._removeExtraneousStyles();\n  }\n\n  /**\n   * Set the selectionStart and selectionEnd according to the new position of cursor\n   * mimic the key - mouse navigation when shift is pressed.\n   */\n  setSelectionStartEndWithShift(\n    start: number,\n    end: number,\n    newSelection: number,\n  ) {\n    if (newSelection <= start) {\n      if (end === start) {\n        this._selectionDirection = LEFT;\n      } else if (this._selectionDirection === RIGHT) {\n        this._selectionDirection = LEFT;\n        this.selectionEnd = start;\n      }\n      this.selectionStart = newSelection;\n    } else if (newSelection > start && newSelection < end) {\n      if (this._selectionDirection === RIGHT) {\n        this.selectionEnd = newSelection;\n      } else {\n        this.selectionStart = newSelection;\n      }\n    } else {\n      // newSelection is > selection start and end\n      if (end === start) {\n        this._selectionDirection = RIGHT;\n      } else if (this._selectionDirection === LEFT) {\n        this._selectionDirection = RIGHT;\n        this.selectionStart = end;\n      }\n      this.selectionEnd = newSelection;\n    }\n  }\n}\n","import { config } from '../../config';\nimport { getFabricDocument, getEnv } from '../../env';\nimport { capValue } from '../../util/misc/capValue';\nimport type { ITextEvents } from './ITextBehavior';\nimport { ITextBehavior } from './ITextBehavior';\nimport type { TKeyMapIText } from './constants';\nimport type { TOptions } from '../../typedefs';\nimport type { TextProps, SerializedTextProps } from '../Text/Text';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { CHANGED, LEFT, RIGHT } from '../../constants';\nimport type { IText } from './IText';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\n\nexport abstract class ITextKeyBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents,\n> extends ITextBehavior<Props, SProps, EventSpec> {\n  /**\n   * For functionalities on keyDown\n   * Map a special key to a function of the instance/prototype\n   * If you need different behavior for ESC or TAB or arrows, you have to change\n   * this map setting the name of a function that you build on the IText or\n   * your prototype.\n   * the map change will affect all Instances unless you need for only some text Instances\n   * in that case you have to clone this object and assign your Instance.\n   * this.keysMap = Object.assign({}, this.keysMap);\n   * The function must be in IText.prototype.myFunction And will receive event as args[0]\n   */\n  declare keysMap: TKeyMapIText;\n\n  declare keysMapRtl: TKeyMapIText;\n\n  /**\n   * For functionalities on keyUp + ctrl || cmd\n   */\n  declare ctrlKeysMapUp: TKeyMapIText;\n\n  /**\n   * For functionalities on keyDown + ctrl || cmd\n   */\n  declare ctrlKeysMapDown: TKeyMapIText;\n\n  declare hiddenTextarea: HTMLTextAreaElement | null;\n\n  /**\n   * DOM container to append the hiddenTextarea.\n   * An alternative to attaching to the document.body.\n   * Useful to reduce laggish redraw of the full document.body tree and\n   * also with modals event capturing that won't let the textarea take focus.\n   * @type HTMLElement\n   * @default\n   */\n  declare hiddenTextareaContainer?: HTMLElement | null;\n\n  private declare _clickHandlerInitialized: boolean;\n  private declare _copyDone: boolean;\n  private declare fromPaste: boolean;\n\n  /**\n   * Initializes hidden textarea (needed to bring up keyboard in iOS)\n   */\n  initHiddenTextarea() {\n    const doc =\n      (this.canvas && getDocumentFromElement(this.canvas.getElement())) ||\n      getFabricDocument();\n    const textarea = doc.createElement('textarea');\n    Object.entries({\n      autocapitalize: 'off',\n      autocorrect: 'off',\n      autocomplete: 'off',\n      spellcheck: 'false',\n      'data-fabric': 'textarea',\n      wrap: 'off',\n    }).map(([attribute, value]) => textarea.setAttribute(attribute, value));\n    const { top, left, fontSize } = this._calcTextareaPosition();\n    // line-height: 1px; was removed from the style to fix this:\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=870966\n    textarea.style.cssText = `position: absolute; top: ${top}; left: ${left}; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px; padding-top: ${fontSize};`;\n\n    (this.hiddenTextareaContainer || doc.body).appendChild(textarea);\n\n    Object.entries({\n      blur: 'blur',\n      keydown: 'onKeyDown',\n      keyup: 'onKeyUp',\n      input: 'onInput',\n      copy: 'copy',\n      cut: 'copy',\n      paste: 'paste',\n      compositionstart: 'onCompositionStart',\n      compositionupdate: 'onCompositionUpdate',\n      compositionend: 'onCompositionEnd',\n    } as Record<string, keyof this>).map(([eventName, handler]) =>\n      textarea.addEventListener(\n        eventName,\n        (this[handler] as EventListener).bind(this),\n      ),\n    );\n    this.hiddenTextarea = textarea;\n  }\n\n  /**\n   * Override this method to customize cursor behavior on textbox blur\n   */\n  blur() {\n    this.abortCursorAnimation();\n  }\n\n  /**\n   * Handles keydown event\n   * only used for arrows and combination of modifier keys.\n   * @param {KeyboardEvent} e Event object\n   */\n  onKeyDown(e: KeyboardEvent) {\n    if (!this.isEditing) {\n      return;\n    }\n    const keyMap = this.direction === 'rtl' ? this.keysMapRtl : this.keysMap;\n    if (e.keyCode in keyMap) {\n      (this[keyMap[e.keyCode] as keyof this] as (arg: KeyboardEvent) => void)(\n        e,\n      );\n    } else if (e.keyCode in this.ctrlKeysMapDown && (e.ctrlKey || e.metaKey)) {\n      (\n        this[this.ctrlKeysMapDown[e.keyCode] as keyof this] as (\n          arg: KeyboardEvent,\n        ) => void\n      )(e);\n    } else {\n      return;\n    }\n    e.stopImmediatePropagation();\n    e.preventDefault();\n    if (e.keyCode >= 33 && e.keyCode <= 40) {\n      // if i press an arrow key just update selection\n      this.inCompositionMode = false;\n      this.clearContextTop();\n      this.renderCursorOrSelection();\n    } else {\n      this.canvas && this.canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * Handles keyup event\n   * We handle KeyUp because ie11 and edge have difficulties copy/pasting\n   * if a copy/cut event fired, keyup is dismissed\n   * @param {KeyboardEvent} e Event object\n   */\n  onKeyUp(e: KeyboardEvent) {\n    if (!this.isEditing || this._copyDone || this.inCompositionMode) {\n      this._copyDone = false;\n      return;\n    }\n    if (e.keyCode in this.ctrlKeysMapUp && (e.ctrlKey || e.metaKey)) {\n      (\n        this[this.ctrlKeysMapUp[e.keyCode] as keyof this] as (\n          arg: KeyboardEvent,\n        ) => void\n      )(e);\n    } else {\n      return;\n    }\n    e.stopImmediatePropagation();\n    e.preventDefault();\n    this.canvas && this.canvas.requestRenderAll();\n  }\n\n  /**\n   * Handles onInput event\n   * @param {Event} e Event object\n   */\n  onInput(this: this & { hiddenTextarea: HTMLTextAreaElement }, e: Event) {\n    const fromPaste = this.fromPaste;\n    this.fromPaste = false;\n    e && e.stopPropagation();\n    if (!this.isEditing) {\n      return;\n    }\n    const updateAndFire = () => {\n      this.updateFromTextArea();\n      this.fire(CHANGED);\n      if (this.canvas) {\n        this.canvas.fire('text:changed', { target: this as unknown as IText });\n        this.canvas.requestRenderAll();\n      }\n    };\n    if (this.hiddenTextarea.value === '') {\n      this.styles = {};\n      updateAndFire();\n      return;\n    }\n    // decisions about style changes.\n    const nextText = this._splitTextIntoLines(\n        this.hiddenTextarea.value,\n      ).graphemeText,\n      charCount = this._text.length,\n      nextCharCount = nextText.length,\n      selectionStart = this.selectionStart,\n      selectionEnd = this.selectionEnd,\n      selection = selectionStart !== selectionEnd;\n    let copiedStyle: TextStyleDeclaration[] | undefined,\n      removedText,\n      charDiff = nextCharCount - charCount,\n      removeFrom,\n      removeTo;\n\n    const textareaSelection = this.fromStringToGraphemeSelection(\n      this.hiddenTextarea.selectionStart,\n      this.hiddenTextarea.selectionEnd,\n      this.hiddenTextarea.value,\n    );\n    const backDelete = selectionStart > textareaSelection.selectionStart;\n\n    if (selection) {\n      removedText = this._text.slice(selectionStart, selectionEnd);\n      charDiff += selectionEnd - selectionStart;\n    } else if (nextCharCount < charCount) {\n      if (backDelete) {\n        removedText = this._text.slice(selectionEnd + charDiff, selectionEnd);\n      } else {\n        removedText = this._text.slice(\n          selectionStart,\n          selectionStart - charDiff,\n        );\n      }\n    }\n    const insertedText = nextText.slice(\n      textareaSelection.selectionEnd - charDiff,\n      textareaSelection.selectionEnd,\n    );\n    if (removedText && removedText.length) {\n      if (insertedText.length) {\n        // let's copy some style before deleting.\n        // we want to copy the style before the cursor OR the style at the cursor if selection\n        // is bigger than 0.\n        copiedStyle = this.getSelectionStyles(\n          selectionStart,\n          selectionStart + 1,\n          false,\n        );\n        // now duplicate the style one for each inserted text.\n        copiedStyle = insertedText.map(\n          () =>\n            // this return an array of references, but that is fine since we are\n            // copying the style later.\n            copiedStyle![0],\n        );\n      }\n      if (selection) {\n        removeFrom = selectionStart;\n        removeTo = selectionEnd;\n      } else if (backDelete) {\n        // detect differences between forwardDelete and backDelete\n        removeFrom = selectionEnd - removedText.length;\n        removeTo = selectionEnd;\n      } else {\n        removeFrom = selectionEnd;\n        removeTo = selectionEnd + removedText.length;\n      }\n      this.removeStyleFromTo(removeFrom, removeTo);\n    }\n    if (insertedText.length) {\n      const { copyPasteData } = getEnv();\n      if (\n        fromPaste &&\n        insertedText.join('') === copyPasteData.copiedText &&\n        !config.disableStyleCopyPaste\n      ) {\n        copiedStyle = copyPasteData.copiedTextStyle;\n      }\n      this.insertNewStyleBlock(insertedText, selectionStart, copiedStyle);\n    }\n    updateAndFire();\n  }\n\n  /**\n   * Composition start\n   */\n  onCompositionStart() {\n    this.inCompositionMode = true;\n  }\n\n  /**\n   * Composition end\n   */\n  onCompositionEnd() {\n    this.inCompositionMode = false;\n  }\n\n  onCompositionUpdate({ target }: CompositionEvent) {\n    const { selectionStart, selectionEnd } = target as HTMLTextAreaElement;\n    this.compositionStart = selectionStart;\n    this.compositionEnd = selectionEnd;\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * Copies selected text\n   */\n  copy() {\n    if (this.selectionStart === this.selectionEnd) {\n      //do not cut-copy if no selection\n      return;\n    }\n    const { copyPasteData } = getEnv();\n    copyPasteData.copiedText = this.getSelectedText();\n    if (!config.disableStyleCopyPaste) {\n      copyPasteData.copiedTextStyle = this.getSelectionStyles(\n        this.selectionStart,\n        this.selectionEnd,\n        true,\n      );\n    } else {\n      copyPasteData.copiedTextStyle = undefined;\n    }\n    this._copyDone = true;\n  }\n\n  /**\n   * Pastes text\n   */\n  paste() {\n    this.fromPaste = true;\n  }\n\n  /**\n   * Finds the width in pixels before the cursor on the same line\n   * @private\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {Number} widthBeforeCursor width before cursor\n   */\n  _getWidthBeforeCursor(lineIndex: number, charIndex: number): number {\n    let widthBeforeCursor = this._getLineLeftOffset(lineIndex),\n      bound;\n\n    if (charIndex > 0) {\n      bound = this.__charBounds[lineIndex][charIndex - 1];\n      widthBeforeCursor += bound.left + bound.width;\n    }\n    return widthBeforeCursor;\n  }\n\n  /**\n   * Gets start offset of a selection\n   * @param {KeyboardEvent} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  getDownCursorOffset(e: KeyboardEvent, isRight: boolean): number {\n    const selectionProp = this._getSelectionForOffset(e, isRight),\n      cursorLocation = this.get2DCursorLocation(selectionProp),\n      lineIndex = cursorLocation.lineIndex;\n    // if on last line, down cursor goes to end of line\n    if (\n      lineIndex === this._textLines.length - 1 ||\n      e.metaKey ||\n      e.keyCode === 34\n    ) {\n      // move to the end of a text\n      return this._text.length - selectionProp;\n    }\n    const charIndex = cursorLocation.charIndex,\n      widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\n      indexOnOtherLine = this._getIndexOnLine(lineIndex + 1, widthBeforeCursor),\n      textAfterCursor = this._textLines[lineIndex].slice(charIndex);\n    return (\n      textAfterCursor.length +\n      indexOnOtherLine +\n      1 +\n      this.missingNewlineOffset(lineIndex)\n    );\n  }\n\n  /**\n   * private\n   * Helps finding if the offset should be counted from Start or End\n   * @param {KeyboardEvent} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  _getSelectionForOffset(e: KeyboardEvent, isRight: boolean): number {\n    if (e.shiftKey && this.selectionStart !== this.selectionEnd && isRight) {\n      return this.selectionEnd;\n    } else {\n      return this.selectionStart;\n    }\n  }\n\n  /**\n   * @param {KeyboardEvent} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  getUpCursorOffset(e: KeyboardEvent, isRight: boolean): number {\n    const selectionProp = this._getSelectionForOffset(e, isRight),\n      cursorLocation = this.get2DCursorLocation(selectionProp),\n      lineIndex = cursorLocation.lineIndex;\n    if (lineIndex === 0 || e.metaKey || e.keyCode === 33) {\n      // if on first line, up cursor goes to start of line\n      return -selectionProp;\n    }\n    const charIndex = cursorLocation.charIndex,\n      widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\n      indexOnOtherLine = this._getIndexOnLine(lineIndex - 1, widthBeforeCursor),\n      textBeforeCursor = this._textLines[lineIndex].slice(0, charIndex),\n      missingNewlineOffset = this.missingNewlineOffset(lineIndex - 1);\n    // return a negative offset\n    return (\n      -this._textLines[lineIndex - 1].length +\n      indexOnOtherLine -\n      textBeforeCursor.length +\n      (1 - missingNewlineOffset)\n    );\n  }\n\n  /**\n   * for a given width it founds the matching character.\n   * @private\n   */\n  _getIndexOnLine(lineIndex: number, width: number) {\n    const line = this._textLines[lineIndex],\n      lineLeftOffset = this._getLineLeftOffset(lineIndex);\n    let widthOfCharsOnLine = lineLeftOffset,\n      indexOnLine = 0,\n      charWidth,\n      foundMatch;\n\n    for (let j = 0, jlen = line.length; j < jlen; j++) {\n      charWidth = this.__charBounds[lineIndex][j].width;\n      widthOfCharsOnLine += charWidth;\n      if (widthOfCharsOnLine > width) {\n        foundMatch = true;\n        const leftEdge = widthOfCharsOnLine - charWidth,\n          rightEdge = widthOfCharsOnLine,\n          offsetFromLeftEdge = Math.abs(leftEdge - width),\n          offsetFromRightEdge = Math.abs(rightEdge - width);\n\n        indexOnLine = offsetFromRightEdge < offsetFromLeftEdge ? j : j - 1;\n        break;\n      }\n    }\n\n    // reached end\n    if (!foundMatch) {\n      indexOnLine = line.length - 1;\n    }\n\n    return indexOnLine;\n  }\n\n  /**\n   * Moves cursor down\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorDown(e: KeyboardEvent) {\n    if (\n      this.selectionStart >= this._text.length &&\n      this.selectionEnd >= this._text.length\n    ) {\n      return;\n    }\n    this._moveCursorUpOrDown('Down', e);\n  }\n\n  /**\n   * Moves cursor up\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorUp(e: KeyboardEvent) {\n    if (this.selectionStart === 0 && this.selectionEnd === 0) {\n      return;\n    }\n    this._moveCursorUpOrDown('Up', e);\n  }\n\n  /**\n   * Moves cursor up or down, fires the events\n   * @param {String} direction 'Up' or 'Down'\n   * @param {KeyboardEvent} e Event object\n   */\n  _moveCursorUpOrDown(direction: 'Up' | 'Down', e: KeyboardEvent) {\n    const offset = this[`get${direction}CursorOffset`](\n      e,\n      this._selectionDirection === RIGHT,\n    );\n    if (e.shiftKey) {\n      this.moveCursorWithShift(offset);\n    } else {\n      this.moveCursorWithoutShift(offset);\n    }\n    if (offset !== 0) {\n      const max = this.text.length;\n      this.selectionStart = capValue(0, this.selectionStart, max);\n      this.selectionEnd = capValue(0, this.selectionEnd, max);\n      // TODO fix: abort and init should be an alternative depending\n      // on selectionStart/End being equal or different\n      this.abortCursorAnimation();\n      this.initDelayedCursor();\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  }\n\n  /**\n   * Moves cursor with shift\n   * @param {Number} offset\n   */\n  moveCursorWithShift(offset: number) {\n    const newSelection =\n      this._selectionDirection === LEFT\n        ? this.selectionStart + offset\n        : this.selectionEnd + offset;\n    this.setSelectionStartEndWithShift(\n      this.selectionStart,\n      this.selectionEnd,\n      newSelection,\n    );\n    return offset !== 0;\n  }\n\n  /**\n   * Moves cursor up without shift\n   * @param {Number} offset\n   */\n  moveCursorWithoutShift(offset: number) {\n    if (offset < 0) {\n      this.selectionStart += offset;\n      this.selectionEnd = this.selectionStart;\n    } else {\n      this.selectionEnd += offset;\n      this.selectionStart = this.selectionEnd;\n    }\n    return offset !== 0;\n  }\n\n  /**\n   * Moves cursor left\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorLeft(e: KeyboardEvent) {\n    if (this.selectionStart === 0 && this.selectionEnd === 0) {\n      return;\n    }\n    this._moveCursorLeftOrRight('Left', e);\n  }\n\n  /**\n   * @private\n   * @return {Boolean} true if a change happened\n   *\n   * @todo refactor not to use method name composition\n   */\n  _move(\n    e: KeyboardEvent,\n    prop: 'selectionStart' | 'selectionEnd',\n    direction: 'Left' | 'Right',\n  ): boolean {\n    let newValue: number | undefined;\n    if (e.altKey) {\n      newValue = this[`findWordBoundary${direction}`](this[prop]);\n    } else if (e.metaKey || e.keyCode === 35 || e.keyCode === 36) {\n      newValue = this[`findLineBoundary${direction}`](this[prop]);\n    } else {\n      this[prop] += direction === 'Left' ? -1 : 1;\n      return true;\n    }\n    if (typeof newValue !== 'undefined' && this[prop] !== newValue) {\n      this[prop] = newValue;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @private\n   */\n  _moveLeft(e: KeyboardEvent, prop: 'selectionStart' | 'selectionEnd') {\n    return this._move(e, prop, 'Left');\n  }\n\n  /**\n   * @private\n   */\n  _moveRight(e: KeyboardEvent, prop: 'selectionStart' | 'selectionEnd') {\n    return this._move(e, prop, 'Right');\n  }\n\n  /**\n   * Moves cursor left without keeping selection\n   * @param {KeyboardEvent} e\n   */\n  moveCursorLeftWithoutShift(e: KeyboardEvent) {\n    let change = true;\n    this._selectionDirection = LEFT;\n\n    // only move cursor when there is no selection,\n    // otherwise we discard it, and leave cursor on same place\n    if (\n      this.selectionEnd === this.selectionStart &&\n      this.selectionStart !== 0\n    ) {\n      change = this._moveLeft(e, 'selectionStart');\n    }\n    this.selectionEnd = this.selectionStart;\n    return change;\n  }\n\n  /**\n   * Moves cursor left while keeping selection\n   * @param {KeyboardEvent} e\n   */\n  moveCursorLeftWithShift(e: KeyboardEvent) {\n    if (\n      this._selectionDirection === RIGHT &&\n      this.selectionStart !== this.selectionEnd\n    ) {\n      return this._moveLeft(e, 'selectionEnd');\n    } else if (this.selectionStart !== 0) {\n      this._selectionDirection = LEFT;\n      return this._moveLeft(e, 'selectionStart');\n    }\n  }\n\n  /**\n   * Moves cursor right\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorRight(e: KeyboardEvent) {\n    if (\n      this.selectionStart >= this._text.length &&\n      this.selectionEnd >= this._text.length\n    ) {\n      return;\n    }\n    this._moveCursorLeftOrRight('Right', e);\n  }\n\n  /**\n   * Moves cursor right or Left, fires event\n   * @param {String} direction 'Left', 'Right'\n   * @param {KeyboardEvent} e Event object\n   */\n  _moveCursorLeftOrRight(direction: 'Left' | 'Right', e: KeyboardEvent) {\n    const actionName = `moveCursor${direction}${\n      e.shiftKey ? 'WithShift' : 'WithoutShift'\n    }` as const;\n    this._currentCursorOpacity = 1;\n    if (this[actionName](e)) {\n      // TODO fix: abort and init should be an alternative depending\n      // on selectionStart/End being equal or different\n      this.abortCursorAnimation();\n      this.initDelayedCursor();\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  }\n\n  /**\n   * Moves cursor right while keeping selection\n   * @param {KeyboardEvent} e\n   */\n  moveCursorRightWithShift(e: KeyboardEvent) {\n    if (\n      this._selectionDirection === LEFT &&\n      this.selectionStart !== this.selectionEnd\n    ) {\n      return this._moveRight(e, 'selectionStart');\n    } else if (this.selectionEnd !== this._text.length) {\n      this._selectionDirection = RIGHT;\n      return this._moveRight(e, 'selectionEnd');\n    }\n  }\n\n  /**\n   * Moves cursor right without keeping selection\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorRightWithoutShift(e: KeyboardEvent) {\n    let changed = true;\n    this._selectionDirection = RIGHT;\n\n    if (this.selectionStart === this.selectionEnd) {\n      changed = this._moveRight(e, 'selectionStart');\n      this.selectionEnd = this.selectionStart;\n    } else {\n      this.selectionStart = this.selectionEnd;\n    }\n    return changed;\n  }\n}\n","import type { TPointerEvent, TPointerEventInfo } from '../../EventTypeDefs';\nimport type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport { stopEvent } from '../../util/dom_event';\nimport { invertTransform } from '../../util/misc/matrix';\nimport { DraggableTextDelegate } from './DraggableTextDelegate';\nimport type { ITextEvents } from './ITextBehavior';\nimport { ITextKeyBehavior } from './ITextKeyBehavior';\nimport type { TOptions } from '../../typedefs';\nimport type { TextProps, SerializedTextProps } from '../Text/Text';\nimport type { IText } from './IText';\n/**\n * `LEFT_CLICK === 0`\n */\nconst notALeftClick = (e: Event) => !!(e as MouseEvent).button;\n\nexport abstract class ITextClickBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents,\n> extends ITextKeyBehavior<Props, SProps, EventSpec> {\n  private declare __lastSelected: boolean;\n  private declare __lastClickTime: number;\n  private declare __lastLastClickTime: number;\n  private declare __lastPointer: XY | Record<string, never>;\n  private declare __newClickTime: number;\n\n  protected draggableTextDelegate: DraggableTextDelegate;\n\n  initBehavior() {\n    // Initializes event handlers related to cursor or selection\n    this.on('mousedown', this._mouseDownHandler);\n    this.on('mousedown:before', this._mouseDownHandlerBefore);\n    this.on('mouseup', this.mouseUpHandler);\n    this.on('mousedblclick', this.doubleClickHandler);\n    this.on('tripleclick', this.tripleClickHandler);\n\n    // Initializes \"dbclick\" event handler\n    this.__lastClickTime = +new Date();\n    // for triple click\n    this.__lastLastClickTime = +new Date();\n    this.__lastPointer = {};\n    this.on('mousedown', this.onMouseDown);\n\n    this.draggableTextDelegate = new DraggableTextDelegate(\n      this as unknown as IText,\n    );\n\n    super.initBehavior();\n  }\n\n  /**\n   * If this method returns true a mouse move operation over a text selection\n   * will not prevent the native mouse event allowing the browser to start a drag operation.\n   * shouldStartDragging can be read 'do not prevent default for mouse move event'\n   * To prevent drag and drop between objects both shouldStartDragging and onDragStart should return false\n   * @returns\n   */\n  shouldStartDragging() {\n    return this.draggableTextDelegate.isActive();\n  }\n\n  /**\n   * @public override this method to control whether instance should/shouldn't become a drag source,\n   * @see also {@link DraggableTextDelegate#isActive}\n   * To prevent drag and drop between objects both shouldStartDragging and onDragStart should return false\n   * @returns {boolean} should handle event\n   */\n  onDragStart(e: DragEvent) {\n    return this.draggableTextDelegate.onDragStart(e);\n  }\n\n  /**\n   * @public override this method to control whether instance should/shouldn't become a drop target\n   */\n  canDrop(e: DragEvent) {\n    return this.draggableTextDelegate.canDrop(e);\n  }\n\n  /**\n   * Default event handler to simulate triple click\n   * @private\n   */\n  onMouseDown(options: TPointerEventInfo) {\n    if (!this.canvas) {\n      return;\n    }\n    this.__newClickTime = +new Date();\n    const newPointer = options.pointer;\n    if (this.isTripleClick(newPointer)) {\n      this.fire('tripleclick', options);\n      stopEvent(options.e);\n    }\n    this.__lastLastClickTime = this.__lastClickTime;\n    this.__lastClickTime = this.__newClickTime;\n    this.__lastPointer = newPointer;\n    this.__lastSelected = this.selected && !this.getActiveControl();\n  }\n\n  isTripleClick(newPointer: XY) {\n    return (\n      this.__newClickTime - this.__lastClickTime < 500 &&\n      this.__lastClickTime - this.__lastLastClickTime < 500 &&\n      this.__lastPointer.x === newPointer.x &&\n      this.__lastPointer.y === newPointer.y\n    );\n  }\n\n  /**\n   * Default handler for double click, select a word\n   */\n  doubleClickHandler(options: TPointerEventInfo) {\n    if (!this.isEditing) {\n      return;\n    }\n    this.selectWord(this.getSelectionStartFromPointer(options.e));\n  }\n\n  /**\n   * Default handler for triple click, select a line\n   */\n  tripleClickHandler(options: TPointerEventInfo) {\n    if (!this.isEditing) {\n      return;\n    }\n    this.selectLine(this.getSelectionStartFromPointer(options.e));\n  }\n\n  /**\n   * Default event handler for the basic functionalities needed on _mouseDown\n   * can be overridden to do something different.\n   * Scope of this implementation is: find the click position, set selectionStart\n   * find selectionEnd, initialize the drawing of either cursor or selection area\n   * initializing a mousedDown on a text area will cancel fabricjs knowledge of\n   * current compositionMode. It will be set to false.\n   */\n  _mouseDownHandler({ e }: TPointerEventInfo) {\n    if (\n      !this.canvas ||\n      !this.editable ||\n      notALeftClick(e) ||\n      this.getActiveControl()\n    ) {\n      return;\n    }\n\n    if (this.draggableTextDelegate.start(e)) {\n      return;\n    }\n\n    this.canvas.textEditingManager.register(this);\n\n    if (this.selected) {\n      this.inCompositionMode = false;\n      this.setCursorByClick(e);\n    }\n\n    if (this.isEditing) {\n      this.__selectionStartOnMouseDown = this.selectionStart;\n      if (this.selectionStart === this.selectionEnd) {\n        this.abortCursorAnimation();\n      }\n      this.renderCursorOrSelection();\n    }\n  }\n\n  /**\n   * Default event handler for the basic functionalities needed on mousedown:before\n   * can be overridden to do something different.\n   * Scope of this implementation is: verify the object is already selected when mousing down\n   */\n  _mouseDownHandlerBefore({ e }: TPointerEventInfo) {\n    if (!this.canvas || !this.editable || notALeftClick(e)) {\n      return;\n    }\n    // we want to avoid that an object that was selected and then becomes unselectable,\n    // may trigger editing mode in some way.\n    this.selected = this === this.canvas._activeObject;\n  }\n\n  /**\n   * standard handler for mouse up, overridable\n   * @private\n   */\n  mouseUpHandler({ e, transform }: TPointerEventInfo) {\n    const didDrag = this.draggableTextDelegate.end(e);\n    if (this.canvas) {\n      this.canvas.textEditingManager.unregister(this);\n\n      const activeObject = this.canvas._activeObject;\n      if (activeObject && activeObject !== this) {\n        // avoid running this logic when there is an active object\n        // this because is possible with shift click and fast clicks,\n        // to rapidly deselect and reselect this object and trigger an enterEdit\n        return;\n      }\n    }\n    if (\n      !this.editable ||\n      (this.group && !this.group.interactive) ||\n      (transform && transform.actionPerformed) ||\n      notALeftClick(e) ||\n      didDrag\n    ) {\n      return;\n    }\n\n    if (this.__lastSelected && !this.getActiveControl()) {\n      this.selected = false;\n      this.__lastSelected = false;\n      this.enterEditing(e);\n      if (this.selectionStart === this.selectionEnd) {\n        this.initDelayedCursor(true);\n      } else {\n        this.renderCursorOrSelection();\n      }\n    } else {\n      this.selected = true;\n    }\n  }\n\n  /**\n   * Changes cursor location in a text depending on passed pointer (x/y) object\n   * @param {TPointerEvent} e Event object\n   */\n  setCursorByClick(e: TPointerEvent) {\n    const newSelection = this.getSelectionStartFromPointer(e),\n      start = this.selectionStart,\n      end = this.selectionEnd;\n    if (e.shiftKey) {\n      this.setSelectionStartEndWithShift(start, end, newSelection);\n    } else {\n      this.selectionStart = newSelection;\n      this.selectionEnd = newSelection;\n    }\n    if (this.isEditing) {\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  }\n\n  /**\n   * Returns index of a character corresponding to where an object was clicked\n   * @param {TPointerEvent} e Event object\n   * @return {Number} Index of a character\n   */\n  getSelectionStartFromPointer(e: TPointerEvent): number {\n    const mouseOffset = this.canvas!.getScenePoint(e)\n      .transform(invertTransform(this.calcTransformMatrix()))\n      .add(new Point(-this._getLeftOffset(), -this._getTopOffset()));\n    let height = 0,\n      charIndex = 0,\n      lineIndex = 0;\n\n    for (let i = 0; i < this._textLines.length; i++) {\n      if (height <= mouseOffset.y) {\n        height += this.getHeightOfLine(i);\n        lineIndex = i;\n        if (i > 0) {\n          charIndex +=\n            this._textLines[i - 1].length + this.missingNewlineOffset(i - 1);\n        }\n      } else {\n        break;\n      }\n    }\n    const lineLeftOffset = Math.abs(this._getLineLeftOffset(lineIndex));\n    let width = lineLeftOffset;\n    const charLength = this._textLines[lineIndex].length;\n    const chars = this.__charBounds[lineIndex];\n    for (let j = 0; j < charLength; j++) {\n      // i removed something about flipX here, check.\n      const charWidth = chars[j].kernedWidth;\n      const widthAfter = width + charWidth;\n      if (mouseOffset.x <= widthAfter) {\n        // if the pointer is closer to the end of the char we increment charIndex\n        // in order to position the cursor after the char\n        if (\n          Math.abs(mouseOffset.x - widthAfter) <=\n          Math.abs(mouseOffset.x - width)\n        ) {\n          charIndex++;\n        }\n        break;\n      }\n      width = widthAfter;\n      charIndex++;\n    }\n\n    return Math.min(\n      // if object is horizontally flipped, mirror cursor location from the end\n      this.flipX ? charLength - charIndex : charIndex,\n      this._text.length,\n    );\n  }\n}\n","export type TKeyMapIText = Record<\n  KeyboardEvent['keyCode'],\n  CursorHandlingMethods\n>;\n\nexport type CursorHandlingMethods =\n  | 'moveCursorUp'\n  | 'moveCursorDown'\n  | 'moveCursorLeft'\n  | 'moveCursorRight'\n  | 'exitEditing'\n  | 'copy'\n  | 'cut'\n  | 'selectAll';\n\nconst MOVE_CURSOR_UP: CursorHandlingMethods = 'moveCursorUp';\nconst MOVE_CURSOR_DOWN: CursorHandlingMethods = 'moveCursorDown';\nconst MOVE_CURSOR_LEFT: CursorHandlingMethods = 'moveCursorLeft';\nconst MOVE_CURSOR_RIGHT: CursorHandlingMethods = 'moveCursorRight';\nconst EXIT_EDITING: CursorHandlingMethods = 'exitEditing';\n\n// @TODO look into import { Key } from 'ts-key-enum';\n// and transition from keyCode to Key\n// also reduce string duplication\nexport const keysMap: TKeyMapIText = {\n  9: EXIT_EDITING,\n  27: EXIT_EDITING,\n  33: MOVE_CURSOR_UP,\n  34: MOVE_CURSOR_DOWN,\n  35: MOVE_CURSOR_RIGHT,\n  36: MOVE_CURSOR_LEFT,\n  37: MOVE_CURSOR_LEFT,\n  38: MOVE_CURSOR_UP,\n  39: MOVE_CURSOR_RIGHT,\n  40: MOVE_CURSOR_DOWN,\n};\n\nexport const keysMapRtl: TKeyMapIText = {\n  9: EXIT_EDITING,\n  27: EXIT_EDITING,\n  33: MOVE_CURSOR_UP,\n  34: MOVE_CURSOR_DOWN,\n  35: MOVE_CURSOR_LEFT,\n  36: MOVE_CURSOR_RIGHT,\n  37: MOVE_CURSOR_RIGHT,\n  38: MOVE_CURSOR_UP,\n  39: MOVE_CURSOR_LEFT,\n  40: MOVE_CURSOR_DOWN,\n};\n\n/**\n * For functionalities on keyUp + ctrl || cmd\n */\nexport const ctrlKeysMapUp: TKeyMapIText = {\n  67: 'copy',\n  // there was a reason this wasn't deleted. for now leave it here\n  88: 'cut',\n};\n\n/**\n * For functionalities on keyDown + ctrl || cmd\n */\nexport const ctrlKeysMapDown: TKeyMapIText = {\n  65: 'selectAll',\n};\n","import { Canvas } from '../../canvas/Canvas';\nimport type { ITextEvents } from './ITextBehavior';\nimport { ITextClickBehavior } from './ITextClickBehavior';\nimport {\n  ctrlKeysMapDown,\n  ctrlKeysMapUp,\n  keysMap,\n  keysMapRtl,\n} from './constants';\nimport type { TClassProperties, TFiller, TOptions } from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport type { SerializedTextProps, TextProps } from '../Text/Text';\nimport {\n  JUSTIFY,\n  JUSTIFY_CENTER,\n  JUSTIFY_LEFT,\n  JUSTIFY_RIGHT,\n} from '../Text/constants';\nimport { CENTER, FILL, LEFT, RIGHT } from '../../constants';\nimport type { ObjectToCanvasElementOptions } from '../Object/Object';\n\nexport type CursorBoundaries = {\n  left: number;\n  top: number;\n  leftOffset: number;\n  topOffset: number;\n};\n\nexport type CursorRenderingData = {\n  color: string;\n  opacity: number;\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n};\n\n// Declare IText protected properties to workaround TS\nconst protectedDefaultValues = {\n  _selectionDirection: null,\n  _reSpace: /\\s|\\r?\\n/,\n  inCompositionMode: false,\n};\n\nexport const iTextDefaultValues: Partial<TClassProperties<IText>> = {\n  selectionStart: 0,\n  selectionEnd: 0,\n  selectionColor: 'rgba(17,119,255,0.3)',\n  isEditing: false,\n  editable: true,\n  editingBorderColor: 'rgba(102,153,255,0.25)',\n  cursorWidth: 2,\n  cursorColor: '',\n  cursorDelay: 1000,\n  cursorDuration: 600,\n  caching: true,\n  hiddenTextareaContainer: null,\n  keysMap,\n  keysMapRtl,\n  ctrlKeysMapDown,\n  ctrlKeysMapUp,\n  ...protectedDefaultValues,\n};\n\n// @TODO this is not complete\ninterface UniqueITextProps {\n  selectionStart: number;\n  selectionEnd: number;\n}\n\nexport interface SerializedITextProps\n  extends SerializedTextProps,\n    UniqueITextProps {}\n\nexport interface ITextProps extends TextProps, UniqueITextProps {}\n\n/**\n * @fires changed\n * @fires selection:changed\n * @fires editing:entered\n * @fires editing:exited\n * @fires dragstart\n * @fires drag drag event firing on the drag source\n * @fires dragend\n * @fires copy\n * @fires cut\n * @fires paste\n *\n * #### Supported key combinations\n * ```\n *   Move cursor:                    left, right, up, down\n *   Select character:               shift + left, shift + right\n *   Select text vertically:         shift + up, shift + down\n *   Move cursor by word:            alt + left, alt + right\n *   Select words:                   shift + alt + left, shift + alt + right\n *   Move cursor to line start/end:  cmd + left, cmd + right or home, end\n *   Select till start/end of line:  cmd + shift + left, cmd + shift + right or shift + home, shift + end\n *   Jump to start/end of text:      cmd + up, cmd + down\n *   Select till start/end of text:  cmd + shift + up, cmd + shift + down or shift + pgUp, shift + pgDown\n *   Delete character:               backspace\n *   Delete word:                    alt + backspace\n *   Delete line:                    cmd + backspace\n *   Forward delete:                 delete\n *   Copy text:                      ctrl/cmd + c\n *   Paste text:                     ctrl/cmd + v\n *   Cut text:                       ctrl/cmd + x\n *   Select entire text:             ctrl/cmd + a\n *   Quit editing                    tab or esc\n * ```\n *\n * #### Supported mouse/touch combination\n * ```\n *   Position cursor:                click/touch\n *   Create selection:               click/touch & drag\n *   Create selection:               click & shift + click\n *   Select word:                    double click\n *   Select line:                    triple click\n * ```\n */\nexport class IText<\n    Props extends TOptions<ITextProps> = Partial<ITextProps>,\n    SProps extends SerializedITextProps = SerializedITextProps,\n    EventSpec extends ITextEvents = ITextEvents,\n  >\n  extends ITextClickBehavior<Props, SProps, EventSpec>\n  implements UniqueITextProps\n{\n  /**\n   * Index where text selection starts (or where cursor is when there is no selection)\n   * @type Number\n   * @default\n   */\n  declare selectionStart: number;\n\n  /**\n   * Index where text selection ends\n   * @type Number\n   * @default\n   */\n  declare selectionEnd: number;\n\n  declare compositionStart: number;\n\n  declare compositionEnd: number;\n\n  /**\n   * Color of text selection\n   * @type String\n   * @default\n   */\n  declare selectionColor: string;\n\n  /**\n   * Indicates whether text is in editing mode\n   * @type Boolean\n   * @default\n   */\n  declare isEditing: boolean;\n\n  /**\n   * Indicates whether a text can be edited\n   * @type Boolean\n   * @default\n   */\n  declare editable: boolean;\n\n  /**\n   * Border color of text object while it's in editing mode\n   * @type String\n   * @default\n   */\n  declare editingBorderColor: string;\n\n  /**\n   * Width of cursor (in px)\n   * @type Number\n   * @default\n   */\n  declare cursorWidth: number;\n\n  /**\n   * Color of text cursor color in editing mode.\n   * if not set (default) will take color from the text.\n   * if set to a color value that fabric can understand, it will\n   * be used instead of the color of the text at the current position.\n   * @type String\n   * @default\n   */\n  declare cursorColor: string;\n\n  /**\n   * Delay between cursor blink (in ms)\n   * @type Number\n   * @default\n   */\n  declare cursorDelay: number;\n\n  /**\n   * Duration of cursor fade in (in ms)\n   * @type Number\n   * @default\n   */\n  declare cursorDuration: number;\n\n  declare compositionColor: string;\n\n  /**\n   * Indicates whether internal text char widths can be cached\n   * @type Boolean\n   * @default\n   */\n  declare caching: boolean;\n\n  static ownDefaults = iTextDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...IText.ownDefaults };\n  }\n\n  static type = 'IText';\n\n  get type() {\n    const type = super.type;\n    // backward compatibility\n    return type === 'itext' ? 'i-text' : type;\n  }\n\n  /**\n   * Constructor\n   * @param {String} text Text string\n   * @param {Object} [options] Options object\n   */\n  constructor(text: string, options?: Props) {\n    super(text, { ...IText.ownDefaults, ...options } as Props);\n    this.initBehavior();\n  }\n\n  /**\n   * While editing handle differently\n   * @private\n   * @param {string} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    if (this.isEditing && this._savedProps && key in this._savedProps) {\n      // @ts-expect-error irritating TS\n      this._savedProps[key] = value;\n      return this;\n    }\n    if (key === 'canvas') {\n      this.canvas instanceof Canvas &&\n        this.canvas.textEditingManager.remove(this);\n      value instanceof Canvas && value.textEditingManager.add(this);\n    }\n    return super._set(key, value);\n  }\n\n  /**\n   * Sets selection start (left boundary of a selection)\n   * @param {Number} index Index to set selection start to\n   */\n  setSelectionStart(index: number) {\n    index = Math.max(index, 0);\n    this._updateAndFire('selectionStart', index);\n  }\n\n  /**\n   * Sets selection end (right boundary of a selection)\n   * @param {Number} index Index to set selection end to\n   */\n  setSelectionEnd(index: number) {\n    index = Math.min(index, this.text.length);\n    this._updateAndFire('selectionEnd', index);\n  }\n\n  /**\n   * @private\n   * @param {String} property 'selectionStart' or 'selectionEnd'\n   * @param {Number} index new position of property\n   */\n  protected _updateAndFire(\n    property: 'selectionStart' | 'selectionEnd',\n    index: number,\n  ) {\n    if (this[property] !== index) {\n      this._fireSelectionChanged();\n      this[property] = index;\n    }\n    this._updateTextarea();\n  }\n\n  /**\n   * Fires the even of selection changed\n   * @private\n   */\n  _fireSelectionChanged() {\n    this.fire('selection:changed');\n    this.canvas && this.canvas.fire('text:selection:changed', { target: this });\n  }\n\n  /**\n   * Initialize text dimensions. Render all text on given context\n   * or on a offscreen canvas to get the text width with measureText.\n   * Updates this.width and this.height with the proper values.\n   * Does not return dimensions.\n   * @private\n   */\n  initDimensions() {\n    this.isEditing && this.initDelayedCursor();\n    super.initDimensions();\n  }\n\n  /**\n   * Gets style of a current selection/cursor (at the start position)\n   * if startIndex or endIndex are not provided, selectionStart or selectionEnd will be used.\n   * @param {Number} startIndex Start index to get styles at\n   * @param {Number} endIndex End index to get styles at, if not specified selectionEnd or startIndex + 1\n   * @param {Boolean} [complete] get full style or not\n   * @return {Array} styles an array with one, zero or more Style objects\n   */\n  getSelectionStyles(\n    startIndex: number = this.selectionStart || 0,\n    endIndex: number = this.selectionEnd,\n    complete?: boolean,\n  ) {\n    return super.getSelectionStyles(startIndex, endIndex, complete);\n  }\n\n  /**\n   * Sets style of a current selection, if no selection exist, do not set anything.\n   * @param {Object} [styles] Styles object\n   * @param {Number} [startIndex] Start index to get styles at\n   * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\n   */\n  setSelectionStyles(\n    styles: object,\n    startIndex: number = this.selectionStart || 0,\n    endIndex: number = this.selectionEnd,\n  ) {\n    return super.setSelectionStyles(styles, startIndex, endIndex);\n  }\n\n  /**\n   * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)\n   * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\n   * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. useful to manage styles.\n   */\n  get2DCursorLocation(\n    selectionStart = this.selectionStart,\n    skipWrapping?: boolean,\n  ) {\n    return super.get2DCursorLocation(selectionStart, skipWrapping);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    super.render(ctx);\n    // clear the cursorOffsetCache, so we ensure to calculate once per renderCursor\n    // the correct position but not at every cursor animation.\n    this.cursorOffsetCache = {};\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * @override block cursor/selection logic while rendering the exported canvas\n   * @todo this workaround should be replaced with a more robust solution\n   */\n  toCanvasElement(options?: ObjectToCanvasElementOptions): HTMLCanvasElement {\n    const isEditing = this.isEditing;\n    this.isEditing = false;\n    const canvas = super.toCanvasElement(options);\n    this.isEditing = isEditing;\n    return canvas;\n  }\n\n  /**\n   * Renders cursor or selection (depending on what exists)\n   * it does on the contextTop. If contextTop is not available, do nothing.\n   */\n  renderCursorOrSelection() {\n    if (!this.isEditing) {\n      return;\n    }\n    const ctx = this.clearContextTop(true);\n    if (!ctx) {\n      return;\n    }\n    const boundaries = this._getCursorBoundaries();\n    if (this.selectionStart === this.selectionEnd && !this.inCompositionMode) {\n      this.renderCursor(ctx, boundaries);\n    } else {\n      this.renderSelection(ctx, boundaries);\n    }\n    this.canvas!.contextTopDirty = true;\n    ctx.restore();\n  }\n\n  /**\n   * Returns cursor boundaries (left, top, leftOffset, topOffset)\n   * left/top are left/top of entire text box\n   * leftOffset/topOffset are offset from that left/top point of a text box\n   * @private\n   * @param {number} [index] index from start\n   * @param {boolean} [skipCaching]\n   */\n  _getCursorBoundaries(\n    index: number = this.selectionStart,\n    skipCaching?: boolean,\n  ): CursorBoundaries {\n    const left = this._getLeftOffset(),\n      top = this._getTopOffset(),\n      offsets = this._getCursorBoundariesOffsets(index, skipCaching);\n    return {\n      left: left,\n      top: top,\n      leftOffset: offsets.left,\n      topOffset: offsets.top,\n    };\n  }\n\n  /**\n   * Caches and returns cursor left/top offset relative to instance's center point\n   * @private\n   * @param {number} index index from start\n   * @param {boolean} [skipCaching]\n   */\n  _getCursorBoundariesOffsets(\n    index: number,\n    skipCaching?: boolean,\n  ): { left: number; top: number } {\n    if (skipCaching) {\n      return this.__getCursorBoundariesOffsets(index);\n    }\n    if (this.cursorOffsetCache && 'top' in this.cursorOffsetCache) {\n      return this.cursorOffsetCache as { left: number; top: number };\n    }\n    return (this.cursorOffsetCache = this.__getCursorBoundariesOffsets(index));\n  }\n\n  /**\n   * Calculates cursor left/top offset relative to instance's center point\n   * @private\n   * @param {number} index index from start\n   */\n  __getCursorBoundariesOffsets(index: number) {\n    let topOffset = 0,\n      leftOffset = 0;\n    const { charIndex, lineIndex } = this.get2DCursorLocation(index);\n\n    for (let i = 0; i < lineIndex; i++) {\n      topOffset += this.getHeightOfLine(i);\n    }\n    const lineLeftOffset = this._getLineLeftOffset(lineIndex);\n    const bound = this.__charBounds[lineIndex][charIndex];\n    bound && (leftOffset = bound.left);\n    if (\n      this.charSpacing !== 0 &&\n      charIndex === this._textLines[lineIndex].length\n    ) {\n      leftOffset -= this._getWidthOfCharSpacing();\n    }\n    const boundaries = {\n      top: topOffset,\n      left: lineLeftOffset + (leftOffset > 0 ? leftOffset : 0),\n    };\n    if (this.direction === 'rtl') {\n      if (\n        this.textAlign === RIGHT ||\n        this.textAlign === JUSTIFY ||\n        this.textAlign === JUSTIFY_RIGHT\n      ) {\n        boundaries.left *= -1;\n      } else if (this.textAlign === LEFT || this.textAlign === JUSTIFY_LEFT) {\n        boundaries.left = lineLeftOffset - (leftOffset > 0 ? leftOffset : 0);\n      } else if (\n        this.textAlign === CENTER ||\n        this.textAlign === JUSTIFY_CENTER\n      ) {\n        boundaries.left = lineLeftOffset - (leftOffset > 0 ? leftOffset : 0);\n      }\n    }\n    return boundaries;\n  }\n\n  /**\n   * Renders cursor on context Top, outside the animation cycle, on request\n   * Used for the drag/drop effect.\n   * If contextTop is not available, do nothing.\n   */\n  renderCursorAt(selectionStart: number) {\n    this._renderCursor(\n      this.canvas!.contextTop,\n      this._getCursorBoundaries(selectionStart, true),\n      selectionStart,\n    );\n  }\n\n  /**\n   * Renders cursor\n   * @param {Object} boundaries\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  renderCursor(ctx: CanvasRenderingContext2D, boundaries: CursorBoundaries) {\n    this._renderCursor(ctx, boundaries, this.selectionStart);\n  }\n\n  /**\n   * Return the data needed to render the cursor for given selection start\n   * The left,top are relative to the object, while width and height are prescaled\n   * to look think with canvas zoom and object scaling,\n   * so they depend on canvas and object scaling\n   */\n  getCursorRenderingData(\n    selectionStart: number = this.selectionStart,\n    boundaries: CursorBoundaries = this._getCursorBoundaries(selectionStart),\n  ): CursorRenderingData {\n    const cursorLocation = this.get2DCursorLocation(selectionStart),\n      lineIndex = cursorLocation.lineIndex,\n      charIndex =\n        cursorLocation.charIndex > 0 ? cursorLocation.charIndex - 1 : 0,\n      charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize'),\n      multiplier = this.getObjectScaling().x * this.canvas!.getZoom(),\n      cursorWidth = this.cursorWidth / multiplier,\n      dy = this.getValueOfPropertyAt(lineIndex, charIndex, 'deltaY'),\n      topOffset =\n        boundaries.topOffset +\n        ((1 - this._fontSizeFraction) * this.getHeightOfLine(lineIndex)) /\n          this.lineHeight -\n        charHeight * (1 - this._fontSizeFraction);\n\n    return {\n      color:\n        this.cursorColor ||\n        (this.getValueOfPropertyAt(lineIndex, charIndex, 'fill') as string),\n      opacity: this._currentCursorOpacity,\n      left: boundaries.left + boundaries.leftOffset - cursorWidth / 2,\n      top: topOffset + boundaries.top + dy,\n      width: cursorWidth,\n      height: charHeight,\n    };\n  }\n\n  /**\n   * Render the cursor at the given selectionStart.\n   *\n   */\n  _renderCursor(\n    ctx: CanvasRenderingContext2D,\n    boundaries: CursorBoundaries,\n    selectionStart: number,\n  ) {\n    const { color, opacity, left, top, width, height } =\n      this.getCursorRenderingData(selectionStart, boundaries);\n    ctx.fillStyle = color;\n    ctx.globalAlpha = opacity;\n    ctx.fillRect(left, top, width, height);\n  }\n\n  /**\n   * Renders text selection\n   * @param {Object} boundaries Object with left/top/leftOffset/topOffset\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  renderSelection(ctx: CanvasRenderingContext2D, boundaries: CursorBoundaries) {\n    const selection = {\n      selectionStart: this.inCompositionMode\n        ? this.hiddenTextarea!.selectionStart\n        : this.selectionStart,\n      selectionEnd: this.inCompositionMode\n        ? this.hiddenTextarea!.selectionEnd\n        : this.selectionEnd,\n    };\n    this._renderSelection(ctx, selection, boundaries);\n  }\n\n  /**\n   * Renders drag start text selection\n   */\n  renderDragSourceEffect() {\n    const dragStartSelection =\n      this.draggableTextDelegate.getDragStartSelection()!;\n    this._renderSelection(\n      this.canvas!.contextTop,\n      dragStartSelection,\n      this._getCursorBoundaries(dragStartSelection.selectionStart, true),\n    );\n  }\n\n  renderDropTargetEffect(e: DragEvent) {\n    const dragSelection = this.getSelectionStartFromPointer(e);\n    this.renderCursorAt(dragSelection);\n  }\n\n  /**\n   * Renders text selection\n   * @private\n   * @param {{ selectionStart: number, selectionEnd: number }} selection\n   * @param {Object} boundaries Object with left/top/leftOffset/topOffset\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  _renderSelection(\n    ctx: CanvasRenderingContext2D,\n    selection: { selectionStart: number; selectionEnd: number },\n    boundaries: CursorBoundaries,\n  ) {\n    const selectionStart = selection.selectionStart,\n      selectionEnd = selection.selectionEnd,\n      isJustify = this.textAlign.includes(JUSTIFY),\n      start = this.get2DCursorLocation(selectionStart),\n      end = this.get2DCursorLocation(selectionEnd),\n      startLine = start.lineIndex,\n      endLine = end.lineIndex,\n      startChar = start.charIndex < 0 ? 0 : start.charIndex,\n      endChar = end.charIndex < 0 ? 0 : end.charIndex;\n\n    for (let i = startLine; i <= endLine; i++) {\n      const lineOffset = this._getLineLeftOffset(i) || 0;\n      let lineHeight = this.getHeightOfLine(i),\n        realLineHeight = 0,\n        boxStart = 0,\n        boxEnd = 0;\n\n      if (i === startLine) {\n        boxStart = this.__charBounds[startLine][startChar].left;\n      }\n      if (i >= startLine && i < endLine) {\n        boxEnd =\n          isJustify && !this.isEndOfWrapping(i)\n            ? this.width\n            : this.getLineWidth(i) || 5; // WTF is this 5?\n      } else if (i === endLine) {\n        if (endChar === 0) {\n          boxEnd = this.__charBounds[endLine][endChar].left;\n        } else {\n          const charSpacing = this._getWidthOfCharSpacing();\n          boxEnd =\n            this.__charBounds[endLine][endChar - 1].left +\n            this.__charBounds[endLine][endChar - 1].width -\n            charSpacing;\n        }\n      }\n      realLineHeight = lineHeight;\n      if (this.lineHeight < 1 || (i === endLine && this.lineHeight > 1)) {\n        lineHeight /= this.lineHeight;\n      }\n      let drawStart = boundaries.left + lineOffset + boxStart,\n        drawHeight = lineHeight,\n        extraTop = 0;\n      const drawWidth = boxEnd - boxStart;\n      if (this.inCompositionMode) {\n        ctx.fillStyle = this.compositionColor || 'black';\n        drawHeight = 1;\n        extraTop = lineHeight;\n      } else {\n        ctx.fillStyle = this.selectionColor;\n      }\n      if (this.direction === 'rtl') {\n        if (\n          this.textAlign === RIGHT ||\n          this.textAlign === JUSTIFY ||\n          this.textAlign === JUSTIFY_RIGHT\n        ) {\n          drawStart = this.width - drawStart - drawWidth;\n        } else if (this.textAlign === LEFT || this.textAlign === JUSTIFY_LEFT) {\n          drawStart = boundaries.left + lineOffset - boxEnd;\n        } else if (\n          this.textAlign === CENTER ||\n          this.textAlign === JUSTIFY_CENTER\n        ) {\n          drawStart = boundaries.left + lineOffset - boxEnd;\n        }\n      }\n      ctx.fillRect(\n        drawStart,\n        boundaries.top + boundaries.topOffset + extraTop,\n        drawWidth,\n        drawHeight,\n      );\n      boundaries.topOffset += realLineHeight;\n    }\n  }\n\n  /**\n   * High level function to know the height of the cursor.\n   * the currentChar is the one that precedes the cursor\n   * Returns fontSize of char at the current cursor\n   * Unused from the library, is for the end user\n   * @return {Number} Character font size\n   */\n  getCurrentCharFontSize(): number {\n    const cp = this._getCurrentCharIndex();\n    return this.getValueOfPropertyAt(cp.l, cp.c, 'fontSize');\n  }\n\n  /**\n   * High level function to know the color of the cursor.\n   * the currentChar is the one that precedes the cursor\n   * Returns color (fill) of char at the current cursor\n   * if the text object has a pattern or gradient for filler, it will return that.\n   * Unused by the library, is for the end user\n   * @return {String | TFiller} Character color (fill)\n   */\n  getCurrentCharColor(): string | TFiller | null {\n    const cp = this._getCurrentCharIndex();\n    return this.getValueOfPropertyAt(cp.l, cp.c, FILL);\n  }\n\n  /**\n   * Returns the cursor position for the getCurrent.. functions\n   * @private\n   */\n  _getCurrentCharIndex() {\n    const cursorPosition = this.get2DCursorLocation(this.selectionStart, true),\n      charIndex =\n        cursorPosition.charIndex > 0 ? cursorPosition.charIndex - 1 : 0;\n    return { l: cursorPosition.lineIndex, c: charIndex };\n  }\n\n  dispose() {\n    this.exitEditingImpl();\n    this.draggableTextDelegate.dispose();\n    super.dispose();\n  }\n}\n\nclassRegistry.setClass(IText);\n// legacy\nclassRegistry.setClass(IText, 'i-text');\n","import type { TClassProperties, TOptions } from '../typedefs';\nimport { IText } from './IText/IText';\nimport { classRegistry } from '../ClassRegistry';\nimport { createTextboxDefaultControls } from '../controls/commonControls';\nimport { JUSTIFY } from './Text/constants';\nimport type { TextStyleDeclaration } from './Text/StyledText';\nimport type { SerializedITextProps, ITextProps } from './IText/IText';\nimport type { ITextEvents } from './IText/ITextBehavior';\nimport type { TextLinesInfo } from './Text/Text';\nimport type { Control } from '../controls/Control';\n\n// @TODO: Many things here are configuration related and shouldn't be on the class nor prototype\n// regexes, list of properties that are not suppose to change by instances, magic consts.\n// this will be a separated effort\nexport const textboxDefaultValues: Partial<TClassProperties<Textbox>> = {\n  minWidth: 20,\n  dynamicMinWidth: 2,\n  lockScalingFlip: true,\n  noScaleCache: false,\n  _wordJoiners: /[ \\t\\r]/,\n  splitByGrapheme: false,\n};\n\nexport type GraphemeData = {\n  wordsData: {\n    word: string[];\n    width: number;\n  }[][];\n  largestWordWidth: number;\n};\n\nexport type StyleMap = Record<string, { line: number; offset: number }>;\n\n// @TODO this is not complete\ninterface UniqueTextboxProps {\n  minWidth: number;\n  splitByGrapheme: boolean;\n  dynamicMinWidth: number;\n  _wordJoiners: RegExp;\n}\n\nexport interface SerializedTextboxProps\n  extends SerializedITextProps,\n    Pick<UniqueTextboxProps, 'minWidth' | 'splitByGrapheme'> {}\n\nexport interface TextboxProps extends ITextProps, UniqueTextboxProps {}\n\n/**\n * Textbox class, based on IText, allows the user to resize the text rectangle\n * and wraps lines automatically. Textboxes have their Y scaling locked, the\n * user can only change width. Height is adjusted automatically based on the\n * wrapping of lines.\n */\nexport class Textbox<\n    Props extends TOptions<TextboxProps> = Partial<TextboxProps>,\n    SProps extends SerializedTextboxProps = SerializedTextboxProps,\n    EventSpec extends ITextEvents = ITextEvents,\n  >\n  extends IText<Props, SProps, EventSpec>\n  implements UniqueTextboxProps\n{\n  /**\n   * Minimum width of textbox, in pixels.\n   * @type Number\n   * @default\n   */\n  declare minWidth: number;\n\n  /**\n   * Minimum calculated width of a textbox, in pixels.\n   * fixed to 2 so that an empty textbox cannot go to 0\n   * and is still selectable without text.\n   * @type Number\n   * @default\n   */\n  declare dynamicMinWidth: number;\n\n  /**\n   * Use this boolean property in order to split strings that have no white space concept.\n   * this is a cheap way to help with chinese/japanese\n   * @type Boolean\n   * @since 2.6.0\n   */\n  declare splitByGrapheme: boolean;\n\n  declare _wordJoiners: RegExp;\n\n  declare _styleMap: StyleMap;\n\n  declare isWrapping: boolean;\n\n  static type = 'Textbox';\n\n  static textLayoutProperties = [...IText.textLayoutProperties, 'width'];\n\n  static ownDefaults = textboxDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Textbox.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {String} text Text string\n   * @param {Object} [options] Options object\n   */\n  constructor(text: string, options?: Props) {\n    super(text, { ...Textbox.ownDefaults, ...options } as Props);\n  }\n\n  /**\n   * Creates the default control object.\n   * If you prefer to have on instance of controls shared among all objects\n   * make this function return an empty object and add controls to the ownDefaults object\n   */\n  static createControls(): { controls: Record<string, Control> } {\n    return { controls: createTextboxDefaultControls() };\n  }\n\n  /**\n   * Unlike superclass's version of this function, Textbox does not update\n   * its width.\n   * @private\n   * @override\n   */\n  initDimensions() {\n    if (!this.initialized) {\n      return;\n    }\n    this.isEditing && this.initDelayedCursor();\n    this._clearCache();\n    // clear dynamicMinWidth as it will be different after we re-wrap line\n    this.dynamicMinWidth = 0;\n    // wrap lines\n    this._styleMap = this._generateStyleMap(this._splitText());\n    // if after wrapping, the width is smaller than dynamicMinWidth, change the width and re-wrap\n    if (this.dynamicMinWidth > this.width) {\n      this._set('width', this.dynamicMinWidth);\n    }\n    if (this.textAlign.includes(JUSTIFY)) {\n      // once text is measured we need to make space fatter to make justified text.\n      this.enlargeSpaces();\n    }\n    // clear cache and re-calculate height\n    this.height = this.calcTextHeight();\n  }\n\n  /**\n   * Generate an object that translates the style object so that it is\n   * broken up by visual lines (new lines and automatic wrapping).\n   * The original text styles object is broken up by actual lines (new lines only),\n   * which is only sufficient for Text / IText\n   * @private\n   */\n  _generateStyleMap(textInfo: TextLinesInfo): StyleMap {\n    let realLineCount = 0,\n      realLineCharCount = 0,\n      charCount = 0;\n    const map: StyleMap = {};\n\n    for (let i = 0; i < textInfo.graphemeLines.length; i++) {\n      if (textInfo.graphemeText[charCount] === '\\n' && i > 0) {\n        realLineCharCount = 0;\n        charCount++;\n        realLineCount++;\n      } else if (\n        !this.splitByGrapheme &&\n        this._reSpaceAndTab.test(textInfo.graphemeText[charCount]) &&\n        i > 0\n      ) {\n        // this case deals with space's that are removed from end of lines when wrapping\n        realLineCharCount++;\n        charCount++;\n      }\n\n      map[i] = { line: realLineCount, offset: realLineCharCount };\n\n      charCount += textInfo.graphemeLines[i].length;\n      realLineCharCount += textInfo.graphemeLines[i].length;\n    }\n\n    return map;\n  }\n\n  /**\n   * Returns true if object has a style property or has it on a specified line\n   * @param {Number} lineIndex\n   * @return {Boolean}\n   */\n  styleHas(property: keyof TextStyleDeclaration, lineIndex: number): boolean {\n    if (this._styleMap && !this.isWrapping) {\n      const map = this._styleMap[lineIndex];\n      if (map) {\n        lineIndex = map.line;\n      }\n    }\n    return super.styleHas(property, lineIndex);\n  }\n\n  /**\n   * Returns true if object has no styling or no styling in a line\n   * @param {Number} lineIndex , lineIndex is on wrapped lines.\n   * @return {Boolean}\n   */\n  isEmptyStyles(lineIndex: number): boolean {\n    if (!this.styles) {\n      return true;\n    }\n    let offset = 0,\n      nextLineIndex = lineIndex + 1,\n      nextOffset: number,\n      shouldLimit = false;\n    const map = this._styleMap[lineIndex],\n      mapNextLine = this._styleMap[lineIndex + 1];\n    if (map) {\n      lineIndex = map.line;\n      offset = map.offset;\n    }\n    if (mapNextLine) {\n      nextLineIndex = mapNextLine.line;\n      shouldLimit = nextLineIndex === lineIndex;\n      nextOffset = mapNextLine.offset;\n    }\n    const obj =\n      typeof lineIndex === 'undefined'\n        ? this.styles\n        : { line: this.styles[lineIndex] };\n    for (const p1 in obj) {\n      for (const p2 in obj[p1]) {\n        const p2Number = parseInt(p2, 10);\n        if (p2Number >= offset && (!shouldLimit || p2Number < nextOffset!)) {\n          // eslint-disable-next-line no-unused-vars\n          for (const p3 in obj[p1][p2]) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * @protected\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {TextStyleDeclaration} a style object reference to the existing one or a new empty object when undefined\n   */\n  _getStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n  ): TextStyleDeclaration {\n    if (this._styleMap && !this.isWrapping) {\n      const map = this._styleMap[lineIndex];\n      if (!map) {\n        return {};\n      }\n      lineIndex = map.line;\n      charIndex = map.offset + charIndex;\n    }\n    return super._getStyleDeclaration(lineIndex, charIndex);\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {Object} style\n   * @private\n   */\n  protected _setStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n    style: object,\n  ) {\n    const map = this._styleMap[lineIndex];\n    super._setStyleDeclaration(map.line, map.offset + charIndex, style);\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @private\n   */\n  protected _deleteStyleDeclaration(lineIndex: number, charIndex: number) {\n    const map = this._styleMap[lineIndex];\n    super._deleteStyleDeclaration(map.line, map.offset + charIndex);\n  }\n\n  /**\n   * probably broken need a fix\n   * Returns the real style line that correspond to the wrapped lineIndex line\n   * Used just to verify if the line does exist or not.\n   * @param {Number} lineIndex\n   * @returns {Boolean} if the line exists or not\n   * @private\n   */\n  protected _getLineStyle(lineIndex: number): boolean {\n    const map = this._styleMap[lineIndex];\n    return !!this.styles[map.line];\n  }\n\n  /**\n   * Set the line style to an empty object so that is initialized\n   * @param {Number} lineIndex\n   * @param {Object} style\n   * @private\n   */\n  protected _setLineStyle(lineIndex: number) {\n    const map = this._styleMap[lineIndex];\n    super._setLineStyle(map.line);\n  }\n\n  /**\n   * Wraps text using the 'width' property of Textbox. First this function\n   * splits text on newlines, so we preserve newlines entered by the user.\n   * Then it wraps each line using the width of the Textbox by calling\n   * _wrapLine().\n   * @param {Array} lines The string array of text that is split into lines\n   * @param {Number} desiredWidth width you want to wrap to\n   * @returns {Array} Array of lines\n   */\n  _wrapText(lines: string[], desiredWidth: number): string[][] {\n    this.isWrapping = true;\n    // extract all thewords and the widths to optimally wrap lines.\n    const data = this.getGraphemeDataForRender(lines);\n    const wrapped: string[][] = [];\n    for (let i = 0; i < data.wordsData.length; i++) {\n      wrapped.push(...this._wrapLine(i, desiredWidth, data));\n    }\n    this.isWrapping = false;\n    return wrapped;\n  }\n\n  /**\n   * For each line of text terminated by an hard line stop,\n   * measure each word width and extract the largest word from all.\n   * The returned words here are the one that at the end will be rendered.\n   * @param {string[]} lines the lines we need to measure\n   *\n   */\n  getGraphemeDataForRender(lines: string[]): GraphemeData {\n    const splitByGrapheme = this.splitByGrapheme,\n      infix = splitByGrapheme ? '' : ' ';\n\n    let largestWordWidth = 0;\n\n    const data = lines.map((line, lineIndex) => {\n      let offset = 0;\n      const wordsOrGraphemes = splitByGrapheme\n        ? this.graphemeSplit(line)\n        : this.wordSplit(line);\n\n      if (wordsOrGraphemes.length === 0) {\n        return [{ word: [], width: 0 }];\n      }\n\n      return wordsOrGraphemes.map((word: string) => {\n        // if using splitByGrapheme words are already in graphemes.\n        const graphemeArray = splitByGrapheme\n          ? [word]\n          : this.graphemeSplit(word);\n        const width = this._measureWord(graphemeArray, lineIndex, offset);\n        largestWordWidth = Math.max(width, largestWordWidth);\n        offset += graphemeArray.length + infix.length;\n        return { word: graphemeArray, width };\n      });\n    });\n\n    return {\n      wordsData: data,\n      largestWordWidth,\n    };\n  }\n\n  /**\n   * Helper function to measure a string of text, given its lineIndex and charIndex offset\n   * It gets called when charBounds are not available yet.\n   * Override if necessary\n   * Use with {@link Textbox#wordSplit}\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {String} text\n   * @param {number} lineIndex\n   * @param {number} charOffset\n   * @returns {number}\n   */\n  _measureWord(word: string[], lineIndex: number, charOffset = 0): number {\n    let width = 0,\n      prevGrapheme;\n    const skipLeft = true;\n    for (let i = 0, len = word.length; i < len; i++) {\n      const box = this._getGraphemeBox(\n        word[i],\n        lineIndex,\n        i + charOffset,\n        prevGrapheme,\n        skipLeft,\n      );\n      width += box.kernedWidth;\n      prevGrapheme = word[i];\n    }\n    return width;\n  }\n\n  /**\n   * Override this method to customize word splitting\n   * Use with {@link Textbox#_measureWord}\n   * @param {string} value\n   * @returns {string[]} array of words\n   */\n  wordSplit(value: string): string[] {\n    return value.split(this._wordJoiners);\n  }\n\n  /**\n   * Wraps a line of text using the width of the Textbox as desiredWidth\n   * and leveraging the known width o words from GraphemeData\n   * @private\n   * @param {Number} lineIndex\n   * @param {Number} desiredWidth width you want to wrap the line to\n   * @param {GraphemeData} graphemeData an object containing all the lines' words width.\n   * @param {Number} reservedSpace space to remove from wrapping for custom functionalities\n   * @returns {Array} Array of line(s) into which the given text is wrapped\n   * to.\n   */\n  _wrapLine(\n    lineIndex: number,\n    desiredWidth: number,\n    { largestWordWidth, wordsData }: GraphemeData,\n    reservedSpace = 0,\n  ): string[][] {\n    const additionalSpace = this._getWidthOfCharSpacing(),\n      splitByGrapheme = this.splitByGrapheme,\n      graphemeLines = [],\n      infix = splitByGrapheme ? '' : ' ';\n\n    let lineWidth = 0,\n      line: string[] = [],\n      // spaces in different languages?\n      offset = 0,\n      infixWidth = 0,\n      lineJustStarted = true;\n\n    desiredWidth -= reservedSpace;\n\n    const maxWidth = Math.max(\n      desiredWidth,\n      largestWordWidth,\n      this.dynamicMinWidth,\n    );\n    // layout words\n    const data = wordsData[lineIndex];\n    offset = 0;\n    let i;\n    for (i = 0; i < data.length; i++) {\n      const { word, width: wordWidth } = data[i];\n      offset += word.length;\n\n      lineWidth += infixWidth + wordWidth - additionalSpace;\n      if (lineWidth > maxWidth && !lineJustStarted) {\n        graphemeLines.push(line);\n        line = [];\n        lineWidth = wordWidth;\n        lineJustStarted = true;\n      } else {\n        lineWidth += additionalSpace;\n      }\n\n      if (!lineJustStarted && !splitByGrapheme) {\n        line.push(infix);\n      }\n      line = line.concat(word);\n\n      infixWidth = splitByGrapheme\n        ? 0\n        : this._measureWord([infix], lineIndex, offset);\n      offset++;\n      lineJustStarted = false;\n    }\n\n    i && graphemeLines.push(line);\n\n    // TODO: this code is probably not necessary anymore.\n    // it can be moved out of this function since largestWordWidth is now\n    // known in advance\n    if (largestWordWidth + reservedSpace > this.dynamicMinWidth) {\n      this.dynamicMinWidth = largestWordWidth - additionalSpace + reservedSpace;\n    }\n    return graphemeLines;\n  }\n\n  /**\n   * Detect if the text line is ended with an hard break\n   * text and itext do not have wrapping, return false\n   * @param {Number} lineIndex text to split\n   * @return {Boolean}\n   */\n  isEndOfWrapping(lineIndex: number): boolean {\n    if (!this._styleMap[lineIndex + 1]) {\n      // is last line, return true;\n      return true;\n    }\n    if (this._styleMap[lineIndex + 1].line !== this._styleMap[lineIndex].line) {\n      // this is last line before a line break, return true;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Detect if a line has a linebreak and so we need to account for it when moving\n   * and counting style.\n   * This is important only for splitByGrapheme at the end of wrapping.\n   * If we are not wrapping the offset is always 1\n   * @return Number\n   */\n  missingNewlineOffset(lineIndex: number, skipWrapping?: boolean): 0 | 1 {\n    if (this.splitByGrapheme && !skipWrapping) {\n      return this.isEndOfWrapping(lineIndex) ? 1 : 0;\n    }\n    return 1;\n  }\n\n  /**\n   * Gets lines of text to render in the Textbox. This function calculates\n   * text wrapping on the fly every time it is called.\n   * @param {String} text text to split\n   * @returns {Array} Array of lines in the Textbox.\n   * @override\n   */\n  _splitTextIntoLines(text: string) {\n    const newText = super._splitTextIntoLines(text),\n      graphemeLines = this._wrapText(newText.lines, this.width),\n      lines = new Array(graphemeLines.length);\n    for (let i = 0; i < graphemeLines.length; i++) {\n      lines[i] = graphemeLines[i].join('');\n    }\n    newText.lines = lines;\n    newText.graphemeLines = graphemeLines;\n    return newText;\n  }\n\n  getMinWidth() {\n    return Math.max(this.minWidth, this.dynamicMinWidth);\n  }\n\n  _removeExtraneousStyles() {\n    const linesToKeep = new Map();\n    for (const prop in this._styleMap) {\n      const propNumber = parseInt(prop, 10);\n      if (this._textLines[propNumber]) {\n        const lineIndex = this._styleMap[prop].line;\n        linesToKeep.set(`${lineIndex}`, true);\n      }\n    }\n    for (const prop in this.styles) {\n      if (!linesToKeep.has(prop)) {\n        delete this.styles[prop];\n      }\n    }\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @method toObject\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject<T, K>([\n      'minWidth',\n      'splitByGrapheme',\n      ...propertiesToInclude,\n    ] as K[]) as Pick<T, K> & SProps;\n  }\n}\n\nclassRegistry.setClass(Textbox);\n","import { Point } from '../../Point';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { makeBoundingBoxFromPoints } from '../../util/misc/boundingBoxFromPoints';\nimport { sendPointToPlane } from '../../util/misc/planeChange';\nimport type { LayoutStrategyResult, StrictLayoutContext } from '../types';\nimport { LayoutStrategy } from './LayoutStrategy';\nimport { getObjectBounds } from './utils';\nimport { classRegistry } from '../../ClassRegistry';\n\n/**\n * Layout will adjust the bounding box to match the clip path bounding box.\n */\nexport class ClipPathLayout extends LayoutStrategy {\n  static readonly type = 'clip-path';\n\n  shouldPerformLayout(context: StrictLayoutContext): boolean {\n    return !!context.target.clipPath && super.shouldPerformLayout(context);\n  }\n\n  shouldLayoutClipPath() {\n    return false;\n  }\n\n  calcLayoutResult(\n    context: StrictLayoutContext,\n    objects: FabricObject[],\n  ): LayoutStrategyResult | undefined {\n    const { target } = context;\n    const { clipPath, group } = target;\n    if (!clipPath || !this.shouldPerformLayout(context)) {\n      return;\n    }\n    // TODO: remove stroke calculation from this case\n    const { width, height } = makeBoundingBoxFromPoints(\n      getObjectBounds(target, clipPath as FabricObject),\n    );\n    const size = new Point(width, height);\n    if (clipPath.absolutePositioned) {\n      //  we want the center point to exist in group's containing plane\n      const clipPathCenter = sendPointToPlane(\n        clipPath.getRelativeCenterPoint(),\n        undefined,\n        group ? group.calcTransformMatrix() : undefined,\n      );\n      return {\n        center: clipPathCenter,\n        size,\n      };\n    } else {\n      //  we want the center point to exist in group's containing plane, so we send it upwards\n      const clipPathCenter = clipPath\n        .getRelativeCenterPoint()\n        .transform(target.calcOwnMatrix(), true);\n      if (this.shouldPerformLayout(context)) {\n        // the clip path is positioned relative to the group's center which is affected by the bbox\n        // so we first calculate the bbox\n        const { center = new Point(), correction = new Point() } =\n          this.calcBoundingBox(objects, context) || {};\n        return {\n          center: center.add(clipPathCenter),\n          correction: correction.subtract(clipPathCenter),\n          size,\n        };\n      } else {\n        return {\n          center: target.getRelativeCenterPoint().add(clipPathCenter),\n          size,\n        };\n      }\n    }\n  }\n}\n\nclassRegistry.setClass(ClipPathLayout);\n","import { Point } from '../../Point';\nimport type {\n  InitializationLayoutContext,\n  LayoutStrategyResult,\n  StrictLayoutContext,\n} from '../types';\nimport { LayoutStrategy } from './LayoutStrategy';\nimport { classRegistry } from '../../ClassRegistry';\n\n/**\n * Layout will keep target's initial size.\n */\nexport class FixedLayout extends LayoutStrategy {\n  static readonly type = 'fixed';\n\n  /**\n   * @override respect target's initial size\n   */\n  getInitialSize(\n    { target }: StrictLayoutContext & InitializationLayoutContext,\n    { size }: Pick<LayoutStrategyResult, 'center' | 'size'>,\n  ): Point {\n    return new Point(target.width || size.x, target.height || size.y);\n  }\n}\n\nclassRegistry.setClass(FixedLayout);\n","import { LayoutManager } from './LayoutManager';\nimport type { RegistrationContext, StrictLayoutContext } from './types';\nimport type { Group } from '../shapes/Group';\n\n/**\n * Today the LayoutManager class also takes care of subscribing event handlers\n * to update the group layout when the group is interactive and a transform is applied\n * to a child object.\n * The ActiveSelection is never interactive, but it could contain objects from\n * groups that are.\n * The standard LayoutManager would subscribe the children of the activeSelection to\n * perform layout changes to the active selection itself, what we need instead is that\n * the transformation applied to the active selection will trigger changes to the\n * original group of the children ( the one referenced under the parent property )\n * This subclass of the LayoutManager has a single duty to fill the gap of this difference.`\n */\nexport class ActiveSelectionLayoutManager extends LayoutManager {\n  subscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ): void {\n    const activeSelection = context.target;\n    const parents = context.targets.reduce((parents, target) => {\n      target.parent && parents.add(target.parent);\n      return parents;\n    }, new Set<Group>());\n    parents.forEach((parent) => {\n      parent.layoutManager.subscribeTargets({\n        target: parent,\n        targets: [activeSelection],\n      });\n    });\n  }\n\n  /**\n   * unsubscribe from parent only if all its children were deselected\n   */\n  unsubscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ): void {\n    const activeSelection = context.target;\n    const selectedObjects = activeSelection.getObjects();\n    const parents = context.targets.reduce((parents, target) => {\n      target.parent && parents.add(target.parent);\n      return parents;\n    }, new Set<Group>());\n    parents.forEach((parent) => {\n      !selectedObjects.some((object) => object.parent === parent) &&\n        parent.layoutManager.unsubscribeTargets({\n          target: parent,\n          targets: [activeSelection],\n        });\n    });\n  }\n}\n","import type { ControlRenderingStyleOverride } from '../controls/controlRendering';\nimport { classRegistry } from '../ClassRegistry';\nimport type { GroupProps } from './Group';\nimport { Group } from './Group';\nimport type { FabricObject } from './Object/FabricObject';\nimport {\n  LAYOUT_TYPE_ADDED,\n  LAYOUT_TYPE_REMOVED,\n} from '../LayoutManager/constants';\nimport type { TClassProperties } from '../typedefs';\nimport { log } from '../util/internals/console';\nimport { ActiveSelectionLayoutManager } from '../LayoutManager/ActiveSelectionLayoutManager';\n\nexport type MultiSelectionStacking = 'canvas-stacking' | 'selection-order';\n\nexport interface ActiveSelectionOptions extends GroupProps {\n  multiSelectionStacking: MultiSelectionStacking;\n}\n\nconst activeSelectionDefaultValues: Partial<TClassProperties<ActiveSelection>> =\n  {\n    multiSelectionStacking: 'canvas-stacking',\n  };\n\n/**\n * Used by Canvas to manage selection.\n *\n * @example\n * class MyActiveSelection extends ActiveSelection {\n *   ...\n * }\n *\n * // override the default `ActiveSelection` class\n * classRegistry.setClass(MyActiveSelection)\n */\nexport class ActiveSelection extends Group {\n  static type = 'ActiveSelection';\n\n  static ownDefaults: Record<string, any> = activeSelectionDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...ActiveSelection.ownDefaults };\n  }\n\n  /**\n   * The ActiveSelection needs to use the ActiveSelectionLayoutManager\n   * or selections on interactive groups may be broken\n   */\n  declare layoutManager: ActiveSelectionLayoutManager;\n\n  /**\n   * controls how selected objects are added during a multiselection event\n   * - `canvas-stacking` adds the selected object to the active selection while respecting canvas object stacking order\n   * - `selection-order` adds the selected object to the top of the stack,\n   * meaning that the stack is ordered by the order in which objects were selected\n   * @default `canvas-stacking`\n   */\n  declare multiSelectionStacking: MultiSelectionStacking;\n\n  constructor(\n    objects: FabricObject[] = [],\n    options: Partial<ActiveSelectionOptions> = {},\n  ) {\n    super();\n    Object.assign(this, ActiveSelection.ownDefaults);\n    this.setOptions(options);\n    const { left, top, layoutManager } = options;\n    this.groupInit(objects, {\n      left,\n      top,\n      layoutManager: layoutManager ?? new ActiveSelectionLayoutManager(),\n    });\n  }\n\n  /**\n   * @private\n   */\n  _shouldSetNestedCoords() {\n    return true;\n  }\n\n  /**\n   * @private\n   * @override we don't want the selection monitor to be active\n   */\n  __objectSelectionMonitor() {\n    //  noop\n  }\n\n  /**\n   * Adds objects with respect to {@link multiSelectionStacking}\n   * @param targets object to add to selection\n   */\n  multiSelectAdd(...targets: FabricObject[]) {\n    if (this.multiSelectionStacking === 'selection-order') {\n      this.add(...targets);\n    } else {\n      //  respect object stacking as it is on canvas\n      //  perf enhancement for large ActiveSelection: consider a binary search of `isInFrontOf`\n      targets.forEach((target) => {\n        const index = this._objects.findIndex((obj) => obj.isInFrontOf(target));\n        const insertAt =\n          index === -1\n            ? //  `target` is in front of all other objects\n              this.size()\n            : index;\n        this.insertAt(insertAt, target);\n      });\n    }\n  }\n\n  /**\n   * @override block ancestors/descendants of selected objects from being selected to prevent a circular object tree\n   */\n  canEnterGroup(object: FabricObject) {\n    if (\n      this.getObjects().some(\n        (o) => o.isDescendantOf(object) || object.isDescendantOf(o),\n      )\n    ) {\n      //  prevent circular object tree\n      log(\n        'error',\n        'ActiveSelection: circular object trees are not supported, this call has no effect',\n      );\n      return false;\n    }\n\n    return super.canEnterGroup(object);\n  }\n\n  /**\n   * Change an object so that it can be part of an active selection.\n   * this method is called by multiselectAdd from canvas code.\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object is in canvas coordinate plane\n   */\n  enterGroup(object: FabricObject, removeParentTransform?: boolean) {\n    // This condition check that the object has currently a group, and the group\n    // is also its parent, meaning that is not in an active selection, but is\n    // in a normal group.\n    if (object.parent && object.parent === object.group) {\n      // Disconnect the object from the group functionalities, but keep the ref parent intact\n      // for later re-enter\n      object.parent._exitGroup(object);\n      // in this case the object is probably inside an active selection.\n    } else if (object.group && object.parent !== object.group) {\n      // in this case group.remove will also clear the old parent reference.\n      object.group.remove(object);\n    }\n    // enter the active selection from a render perspective\n    // the object will be in the objects array of both the ActiveSelection and the Group\n    // but referenced in the group's _activeObjects so that it won't be rendered twice.\n    this._enterGroup(object, removeParentTransform);\n  }\n\n  /**\n   * we want objects to retain their canvas ref when exiting instance\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  exitGroup(object: FabricObject, removeParentTransform?: boolean) {\n    this._exitGroup(object, removeParentTransform);\n    // return to parent\n    object.parent && object.parent._enterGroup(object, true);\n  }\n\n  /**\n   * @private\n   * @param {'added'|'removed'} type\n   * @param {FabricObject[]} targets\n   */\n  _onAfterObjectsChange(type: 'added' | 'removed', targets: FabricObject[]) {\n    super._onAfterObjectsChange(type, targets);\n    const groups = new Set<Group>();\n    targets.forEach((object) => {\n      const { parent } = object;\n      parent && groups.add(parent);\n    });\n    if (type === LAYOUT_TYPE_REMOVED) {\n      //  invalidate groups' layout and mark as dirty\n      groups.forEach((group) => {\n        group._onAfterObjectsChange(LAYOUT_TYPE_ADDED, targets);\n      });\n    } else {\n      //  mark groups as dirty\n      groups.forEach((group) => {\n        group._set('dirty', true);\n      });\n    }\n  }\n\n  /**\n   * @override remove all objects\n   */\n  onDeselect() {\n    this.removeAll();\n    return false;\n  }\n\n  /**\n   * Returns string representation of a group\n   * @return {String}\n   */\n  toString() {\n    return `#<ActiveSelection: (${this.complexity()})>`;\n  }\n\n  /**\n   * Decide if the object should cache or not. The Active selection never caches\n   * @return {Boolean}\n   */\n  shouldCache() {\n    return false;\n  }\n\n  /**\n   * Check if this group or its parent group are caching, recursively up\n   * @return {Boolean}\n   */\n  isOnACache() {\n    return false;\n  }\n\n  /**\n   * Renders controls and borders for the object\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Object} [styleOverride] properties to override the object style\n   * @param {Object} [childrenOverride] properties to override the children overrides\n   */\n  _renderControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride?: ControlRenderingStyleOverride,\n    childrenOverride?: ControlRenderingStyleOverride,\n  ) {\n    ctx.save();\n    ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n    const options = {\n      hasControls: false,\n      ...childrenOverride,\n      forActiveSelection: true,\n    };\n    for (let i = 0; i < this._objects.length; i++) {\n      this._objects[i]._renderControls(ctx, options);\n    }\n    super._renderControls(ctx, styleOverride);\n    ctx.restore();\n  }\n}\n\nclassRegistry.setClass(ActiveSelection);\nclassRegistry.setClass(ActiveSelection, 'activeSelection');\n","/**\n * Canvas 2D filter backend.\n */\nimport type { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TPipelineResources } from './typedefs';\n\nexport class Canvas2dFilterBackend {\n  /**\n   * Experimental. This object is a sort of repository of help layers used to avoid\n   * of recreating them during frequent filtering. If you are previewing a filter with\n   * a slider you probably do not want to create help layers every filter step.\n   * in this object there will be appended some canvases, created once, resized sometimes\n   * cleared never. Clearing is left to the developer.\n   **/\n  resources: TPipelineResources = {};\n\n  /**\n   * Apply a set of filters against a source image and draw the filtered output\n   * to the provided destination canvas.\n   *\n   * @param {EnhancedFilter} filters The filter to apply.\n   * @param {HTMLImageElement|HTMLCanvasElement} sourceElement The source to be filtered.\n   * @param {Number} sourceWidth The width of the source input.\n   * @param {Number} sourceHeight The height of the source input.\n   * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n   */\n  applyFilters(\n    filters: BaseFilter<string, Record<string, any>>[],\n    sourceElement: CanvasImageSource,\n    sourceWidth: number,\n    sourceHeight: number,\n    targetCanvas: HTMLCanvasElement,\n  ): T2DPipelineState | void {\n    const ctx = targetCanvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n    ctx.drawImage(sourceElement, 0, 0, sourceWidth, sourceHeight);\n    const imageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n    const originalImageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n    const pipelineState: T2DPipelineState = {\n      sourceWidth,\n      sourceHeight,\n      imageData,\n      originalEl: sourceElement,\n      originalImageData,\n      canvasEl: targetCanvas,\n      ctx,\n      filterBackend: this,\n    };\n    filters.forEach((filter) => {\n      filter.applyTo(pipelineState);\n    });\n    const { imageData: imageDataPostFilter } = pipelineState;\n    if (\n      imageDataPostFilter.width !== sourceWidth ||\n      imageDataPostFilter.height !== sourceHeight\n    ) {\n      targetCanvas.width = imageDataPostFilter.width;\n      targetCanvas.height = imageDataPostFilter.height;\n    }\n    ctx.putImageData(imageDataPostFilter, 0, 0);\n    return pipelineState;\n  }\n}\n","import { config } from '../config';\nimport { createCanvasElementFor } from '../util/misc/dom';\nimport type {\n  TWebGLPipelineState,\n  TProgramCache,\n  TTextureCache,\n  TPipelineResources,\n} from './typedefs';\nimport type { BaseFilter } from './BaseFilter';\n\nexport class WebGLFilterBackend {\n  declare tileSize: number;\n\n  /**\n   * Define ...\n   **/\n  aPosition: Float32Array = new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]);\n\n  /**\n   * If GLPut data is the fastest operation, or if forced, this buffer will be used\n   * to transfer the data back in the 2d logic\n   **/\n  declare imageBuffer?: ArrayBuffer;\n\n  declare canvas: HTMLCanvasElement;\n\n  /**\n   * The Webgl context that will execute the operations for filtering\n   **/\n  declare gl: WebGLRenderingContext;\n\n  /**\n   * Keyed map for shader cache\n   **/\n  declare programCache: TProgramCache;\n\n  /**\n   * Keyed map for texture cache\n   **/\n  declare textureCache: TTextureCache;\n\n  /**\n   * Contains GPU info for debug\n   **/\n  declare gpuInfo: any;\n\n  /**\n   * Experimental. This object is a sort of repository of help layers used to avoid\n   * of recreating them during frequent filtering. If you are previewing a filter with\n   * a slider you probably do not want to create help layers every filter step.\n   * in this object there will be appended some canvases, created once, resized sometimes\n   * cleared never. Clearing is left to the developer.\n   **/\n  resources: TPipelineResources = {};\n\n  constructor({ tileSize = config.textureSize } = {}) {\n    this.tileSize = tileSize;\n    this.setupGLContext(tileSize, tileSize);\n    this.captureGPUInfo();\n  }\n\n  /**\n   * Setup a WebGL context suitable for filtering, and bind any needed event handlers.\n   */\n  setupGLContext(width: number, height: number): void {\n    this.dispose();\n    this.createWebGLCanvas(width, height);\n  }\n\n  /**\n   * Create a canvas element and associated WebGL context and attaches them as\n   * class properties to the GLFilterBackend class.\n   */\n  createWebGLCanvas(width: number, height: number): void {\n    const canvas = createCanvasElementFor({ width, height });\n    const glOptions = {\n        alpha: true,\n        premultipliedAlpha: false,\n        depth: false,\n        stencil: false,\n        antialias: false,\n      },\n      gl = canvas.getContext('webgl', glOptions) as WebGLRenderingContext;\n\n    if (!gl) {\n      return;\n    }\n    gl.clearColor(0, 0, 0, 0);\n    // this canvas can fire webglcontextlost and webglcontextrestored\n    this.canvas = canvas;\n    this.gl = gl;\n  }\n\n  /**\n   * Attempts to apply the requested filters to the source provided, drawing the filtered output\n   * to the provided target canvas.\n   *\n   * @param {Array} filters The filters to apply.\n   * @param {TexImageSource} source The source to be filtered.\n   * @param {Number} width The width of the source input.\n   * @param {Number} height The height of the source input.\n   * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n   * @param {String|undefined} cacheKey A key used to cache resources related to the source. If\n   * omitted, caching will be skipped.\n   */\n  applyFilters(\n    filters: BaseFilter<string, Record<string, any>>[],\n    source: TexImageSource,\n    width: number,\n    height: number,\n    targetCanvas: HTMLCanvasElement,\n    cacheKey?: string,\n  ): TWebGLPipelineState | undefined {\n    const gl = this.gl;\n    const ctx = targetCanvas.getContext('2d');\n    if (!gl || !ctx) {\n      return;\n    }\n    let cachedTexture;\n    if (cacheKey) {\n      cachedTexture = this.getCachedTexture(cacheKey, source);\n    }\n    const pipelineState: TWebGLPipelineState = {\n      originalWidth:\n        (source as HTMLImageElement).width ||\n        (source as HTMLImageElement).naturalWidth ||\n        0,\n      originalHeight:\n        (source as HTMLImageElement).height ||\n        (source as HTMLImageElement).naturalHeight ||\n        0,\n      sourceWidth: width,\n      sourceHeight: height,\n      destinationWidth: width,\n      destinationHeight: height,\n      context: gl,\n      sourceTexture: this.createTexture(\n        gl,\n        width,\n        height,\n        !cachedTexture ? source : undefined,\n      ),\n      targetTexture: this.createTexture(gl, width, height),\n      originalTexture:\n        cachedTexture ||\n        this.createTexture(\n          gl,\n          width,\n          height,\n          !cachedTexture ? source : undefined,\n        )!,\n      passes: filters.length,\n      webgl: true,\n      aPosition: this.aPosition,\n      programCache: this.programCache,\n      pass: 0,\n      filterBackend: this,\n      targetCanvas: targetCanvas,\n    };\n    const tempFbo = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, tempFbo);\n    filters.forEach((filter: any) => {\n      filter && filter.applyTo(pipelineState);\n    });\n    resizeCanvasIfNeeded(pipelineState);\n    this.copyGLTo2D(gl, pipelineState);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.deleteTexture(pipelineState.sourceTexture);\n    gl.deleteTexture(pipelineState.targetTexture);\n    gl.deleteFramebuffer(tempFbo);\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    return pipelineState;\n  }\n\n  /**\n   * Detach event listeners, remove references, and clean up caches.\n   */\n  dispose() {\n    if (this.canvas) {\n      // we are disposing, we don't care about the fact\n      // that the canvas shouldn't be null.\n      // @ts-expect-error disposing\n      this.canvas = null;\n      // @ts-expect-error disposing\n      this.gl = null;\n    }\n    this.clearWebGLCaches();\n  }\n\n  /**\n   * Wipe out WebGL-related caches.\n   */\n  clearWebGLCaches() {\n    this.programCache = {};\n    this.textureCache = {};\n  }\n\n  /**\n   * Create a WebGL texture object.\n   *\n   * Accepts specific dimensions to initialize the texture to or a source image.\n   *\n   * @param {WebGLRenderingContext} gl The GL context to use for creating the texture.\n   * @param {number} width The width to initialize the texture at.\n   * @param {number} height The height to initialize the texture.\n   * @param {TexImageSource} textureImageSource A source for the texture data.\n   * @param {number} filter gl.NEAREST default or gl.LINEAR filters for the texture.\n   * This filter is very useful for LUTs filters. If you need interpolation use gl.LINEAR\n   * @returns {WebGLTexture}\n   */\n  createTexture(\n    gl: WebGLRenderingContext,\n    width: number,\n    height: number,\n    textureImageSource?: TexImageSource,\n    filter?:\n      | WebGLRenderingContextBase['NEAREST']\n      | WebGLRenderingContextBase['LINEAR'],\n  ) {\n    const {\n      NEAREST,\n      TEXTURE_2D,\n      RGBA,\n      UNSIGNED_BYTE,\n      CLAMP_TO_EDGE,\n      TEXTURE_MAG_FILTER,\n      TEXTURE_MIN_FILTER,\n      TEXTURE_WRAP_S,\n      TEXTURE_WRAP_T,\n    } = gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(TEXTURE_2D, texture);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_MAG_FILTER, filter || NEAREST);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_MIN_FILTER, filter || NEAREST);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n    if (textureImageSource) {\n      gl.texImage2D(\n        TEXTURE_2D,\n        0,\n        RGBA,\n        RGBA,\n        UNSIGNED_BYTE,\n        textureImageSource,\n      );\n    } else {\n      gl.texImage2D(\n        TEXTURE_2D,\n        0,\n        RGBA,\n        width,\n        height,\n        0,\n        RGBA,\n        UNSIGNED_BYTE,\n        null,\n      );\n    }\n    return texture;\n  }\n\n  /**\n   * Can be optionally used to get a texture from the cache array\n   *\n   * If an existing texture is not found, a new texture is created and cached.\n   *\n   * @param {String} uniqueId A cache key to use to find an existing texture.\n   * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source to use to create the\n   * texture cache entry if one does not already exist.\n   */\n  getCachedTexture(\n    uniqueId: string,\n    textureImageSource: TexImageSource,\n    filter?:\n      | WebGLRenderingContextBase['NEAREST']\n      | WebGLRenderingContextBase['LINEAR'],\n  ): WebGLTexture | null {\n    const { textureCache } = this;\n    if (textureCache[uniqueId]) {\n      return textureCache[uniqueId];\n    } else {\n      const texture = this.createTexture(\n        this.gl,\n        (textureImageSource as HTMLImageElement).width,\n        (textureImageSource as HTMLImageElement).height,\n        textureImageSource,\n        filter,\n      );\n      if (texture) {\n        textureCache[uniqueId] = texture;\n      }\n      return texture;\n    }\n  }\n\n  /**\n   * Clear out cached resources related to a source image that has been\n   * filtered previously.\n   *\n   * @param {String} cacheKey The cache key provided when the source image was filtered.\n   */\n  evictCachesForKey(cacheKey: string) {\n    if (this.textureCache[cacheKey]) {\n      this.gl.deleteTexture(this.textureCache[cacheKey]);\n      delete this.textureCache[cacheKey];\n    }\n  }\n\n  /**\n   * Copy an input WebGL canvas on to an output 2D canvas.\n   *\n   * The WebGL canvas is assumed to be upside down, with the top-left pixel of the\n   * desired output image appearing in the bottom-left corner of the WebGL canvas.\n   *\n   * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n   * @param {Object} pipelineState The 2D target canvas to copy on to.\n   */\n  copyGLTo2D(gl: WebGLRenderingContext, pipelineState: TWebGLPipelineState) {\n    const glCanvas = gl.canvas,\n      targetCanvas = pipelineState.targetCanvas,\n      ctx = targetCanvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n    ctx.translate(0, targetCanvas.height); // move it down again\n    ctx.scale(1, -1); // vertical flip\n    // where is my image on the big glcanvas?\n    const sourceY = glCanvas.height - targetCanvas.height;\n    ctx.drawImage(\n      glCanvas,\n      0,\n      sourceY,\n      targetCanvas.width,\n      targetCanvas.height,\n      0,\n      0,\n      targetCanvas.width,\n      targetCanvas.height,\n    );\n  }\n\n  /**\n   * Copy an input WebGL canvas on to an output 2D canvas using 2d canvas' putImageData\n   * API. Measurably faster than using ctx.drawImage in Firefox (version 54 on OSX Sierra).\n   *\n   * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n   * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\n   * @param {Object} pipelineState The 2D target canvas to copy on to.\n   */\n  copyGLTo2DPutImageData(\n    this: Required<WebGLFilterBackend>,\n    gl: WebGLRenderingContext,\n    pipelineState: TWebGLPipelineState,\n  ) {\n    const targetCanvas = pipelineState.targetCanvas,\n      ctx = targetCanvas.getContext('2d'),\n      dWidth = pipelineState.destinationWidth,\n      dHeight = pipelineState.destinationHeight,\n      numBytes = dWidth * dHeight * 4;\n    if (!ctx) {\n      return;\n    }\n    const u8 = new Uint8Array(this.imageBuffer, 0, numBytes);\n    const u8Clamped = new Uint8ClampedArray(this.imageBuffer, 0, numBytes);\n\n    gl.readPixels(0, 0, dWidth, dHeight, gl.RGBA, gl.UNSIGNED_BYTE, u8);\n    const imgData = new ImageData(u8Clamped, dWidth, dHeight);\n    ctx.putImageData(imgData, 0, 0);\n  }\n\n  /**\n   * Attempt to extract GPU information strings from a WebGL context.\n   *\n   * Useful information when debugging or blacklisting specific GPUs.\n   *\n   * @returns {Object} A GPU info object with renderer and vendor strings.\n   */\n  captureGPUInfo() {\n    if (this.gpuInfo) {\n      return this.gpuInfo;\n    }\n    const gl = this.gl,\n      gpuInfo = { renderer: '', vendor: '' };\n    if (!gl) {\n      return gpuInfo;\n    }\n    const ext = gl.getExtension('WEBGL_debug_renderer_info');\n    if (ext) {\n      const renderer = gl.getParameter(ext.UNMASKED_RENDERER_WEBGL);\n      const vendor = gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);\n      if (renderer) {\n        gpuInfo.renderer = renderer.toLowerCase();\n      }\n      if (vendor) {\n        gpuInfo.vendor = vendor.toLowerCase();\n      }\n    }\n    this.gpuInfo = gpuInfo;\n    return gpuInfo;\n  }\n}\n\nfunction resizeCanvasIfNeeded(pipelineState: TWebGLPipelineState): void {\n  const targetCanvas = pipelineState.targetCanvas,\n    width = targetCanvas.width,\n    height = targetCanvas.height,\n    dWidth = pipelineState.destinationWidth,\n    dHeight = pipelineState.destinationHeight;\n\n  if (width !== dWidth || height !== dHeight) {\n    targetCanvas.width = dWidth;\n    targetCanvas.height = dHeight;\n  }\n}\n","import { config } from '../config';\nimport { getEnv } from '../env';\nimport { createCanvasElement } from '../util/misc/dom';\nimport { Canvas2dFilterBackend } from './Canvas2dFilterBackend';\nimport { WebGLFilterBackend } from './WebGLFilterBackend';\n\nexport type FilterBackend = WebGLFilterBackend | Canvas2dFilterBackend;\n\nlet filterBackend: FilterBackend;\n\n/**\n * Verifies if it is possible to initialize webgl or fallback on a canvas2d filtering backend\n */\nexport function initFilterBackend(): FilterBackend {\n  const { WebGLProbe } = getEnv();\n  WebGLProbe.queryWebGL(createCanvasElement());\n  if (config.enableGLFiltering && WebGLProbe.isSupported(config.textureSize)) {\n    return new WebGLFilterBackend({ tileSize: config.textureSize });\n  } else {\n    return new Canvas2dFilterBackend();\n  }\n}\n\n/**\n * Get the current fabricJS filter backend  or initialize one if not available yet\n * @param [strict] pass `true` to create the backend if it wasn't created yet (default behavior),\n * pass `false` to get the backend ref without mutating it\n */\nexport function getFilterBackend(strict = true): FilterBackend {\n  if (!filterBackend && strict) {\n    filterBackend = initFilterBackend();\n  }\n  return filterBackend;\n}\n\nexport function setFilterBackend(backend: FilterBackend) {\n  filterBackend = backend;\n}\n","import { getFabricDocument, getEnv } from '../env';\nimport type { BaseFilter } from '../filters/BaseFilter';\nimport { getFilterBackend } from '../filters/FilterBackend';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type {\n  TClassProperties,\n  TCrossOrigin,\n  TSize,\n  Abortable,\n  TOptions,\n} from '../typedefs';\nimport { uid } from '../util/internals/uid';\nimport { createCanvasElementFor } from '../util/misc/dom';\nimport { findScaleToCover, findScaleToFit } from '../util/misc/findScaleTo';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n  loadImage,\n} from '../util/misc/objectEnlive';\nimport { parsePreserveAspectRatioAttribute } from '../util/misc/svgParsing';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport { WebGLFilterBackend } from '../filters/WebGLFilterBackend';\nimport { FILL, NONE } from '../constants';\nimport { getDocumentFromElement } from '../util/dom_misc';\nimport type { CSSRules } from '../parser/typedefs';\nimport type { Resize } from '../filters/Resize';\nimport type { TCachedFabricObject } from './Object/Object';\nimport { log } from '../util/internals/console';\n\n// @todo Would be nice to have filtering code not imported directly.\n\nexport type ImageSource =\n  | HTMLImageElement\n  | HTMLVideoElement\n  | HTMLCanvasElement;\n\ninterface UniqueImageProps {\n  srcFromAttribute: boolean;\n  minimumScaleTrigger: number;\n  cropX: number;\n  cropY: number;\n  imageSmoothing: boolean;\n  filters: BaseFilter<string, Record<string, any>>[];\n  resizeFilter?: Resize;\n}\n\nexport const imageDefaultValues: Partial<TClassProperties<FabricImage>> = {\n  strokeWidth: 0,\n  srcFromAttribute: false,\n  minimumScaleTrigger: 0.5,\n  cropX: 0,\n  cropY: 0,\n  imageSmoothing: true,\n};\n\nexport interface SerializedImageProps extends SerializedObjectProps {\n  src: string;\n  crossOrigin: TCrossOrigin;\n  filters: any[];\n  resizeFilter?: any;\n  cropX: number;\n  cropY: number;\n}\n\nexport interface ImageProps extends FabricObjectProps, UniqueImageProps {}\n\nconst IMAGE_PROPS = ['cropX', 'cropY'] as const;\n\n/**\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#images}\n */\nexport class FabricImage<\n    Props extends TOptions<ImageProps> = Partial<ImageProps>,\n    SProps extends SerializedImageProps = SerializedImageProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements ImageProps\n{\n  /**\n   * When calling {@link FabricImage.getSrc}, return value from element src with `element.getAttribute('src')`.\n   * This allows for relative urls as image src.\n   * @since 2.7.0\n   * @type Boolean\n   * @default false\n   */\n  declare srcFromAttribute: boolean;\n\n  /**\n   * private\n   * contains last value of scaleX to detect\n   * if the Image got resized after the last Render\n   * @type Number\n   */\n  protected _lastScaleX = 1;\n\n  /**\n   * private\n   * contains last value of scaleY to detect\n   * if the Image got resized after the last Render\n   * @type Number\n   */\n  protected _lastScaleY = 1;\n\n  /**\n   * private\n   * contains last value of scaling applied by the apply filter chain\n   * @type Number\n   */\n  protected _filterScalingX = 1;\n\n  /**\n   * private\n   * contains last value of scaling applied by the apply filter chain\n   * @type Number\n   */\n  protected _filterScalingY = 1;\n\n  /**\n   * minimum scale factor under which any resizeFilter is triggered to resize the image\n   * 0 will disable the automatic resize. 1 will trigger automatically always.\n   * number bigger than 1 are not implemented yet.\n   * @type Number\n   */\n  declare minimumScaleTrigger: number;\n\n  /**\n   * key used to retrieve the texture representing this image\n   * @since 2.0.0\n   * @type String\n   * @default\n   */\n  declare cacheKey: string;\n\n  /**\n   * Image crop in pixels from original image size.\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  declare cropX: number;\n\n  /**\n   * Image crop in pixels from original image size.\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  declare cropY: number;\n\n  /**\n   * Indicates whether this canvas will use image smoothing when painting this image.\n   * Also influence if the cacheCanvas for this image uses imageSmoothing\n   * @since 4.0.0-beta.11\n   * @type Boolean\n   * @default\n   */\n  declare imageSmoothing: boolean;\n\n  declare preserveAspectRatio: string;\n\n  protected declare src: string;\n\n  declare filters: BaseFilter<string, Record<string, any>>[];\n  declare resizeFilter: Resize;\n\n  declare _element: ImageSource;\n  declare _filteredEl?: HTMLCanvasElement;\n  declare _originalElement: ImageSource;\n\n  static type = 'Image';\n\n  static cacheProperties = [...cacheProperties, ...IMAGE_PROPS];\n\n  static ownDefaults = imageDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...FabricImage.ownDefaults,\n    };\n  }\n  /**\n   * Constructor\n   * Image can be initialized with any canvas drawable or a string.\n   * The string should be a url and will be loaded as an image.\n   * Canvas and Image element work out of the box, while videos require extra code to work.\n   * Please check video element events for seeking.\n   * @param {ImageSource | string} element Image element\n   * @param {Object} [options] Options object\n   */\n  constructor(elementId: string, options?: Props);\n  constructor(element: ImageSource, options?: Props);\n  constructor(arg0: ImageSource | string, options?: Props) {\n    super();\n    this.filters = [];\n    Object.assign(this, FabricImage.ownDefaults);\n    this.setOptions(options);\n    this.cacheKey = `texture${uid()}`;\n    this.setElement(\n      typeof arg0 === 'string'\n        ? ((\n            (this.canvas && getDocumentFromElement(this.canvas.getElement())) ||\n            getFabricDocument()\n          ).getElementById(arg0) as ImageSource)\n        : arg0,\n      options,\n    );\n  }\n\n  /**\n   * Returns image element which this instance if based on\n   */\n  getElement() {\n    return this._element;\n  }\n\n  /**\n   * Sets image element for this instance to a specified one.\n   * If filters defined they are applied to new image.\n   * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.\n   * @param {HTMLImageElement} element\n   * @param {Partial<TSize>} [size] Options object\n   */\n  setElement(element: ImageSource, size: Partial<TSize> = {}) {\n    this.removeTexture(this.cacheKey);\n    this.removeTexture(`${this.cacheKey}_filtered`);\n    this._element = element;\n    this._originalElement = element;\n    this._setWidthHeight(size);\n    element.classList?.add(FabricImage.CSS_CANVAS);\n    if (this.filters.length !== 0) {\n      this.applyFilters();\n    }\n    // resizeFilters work on the already filtered copy.\n    // we need to apply resizeFilters AFTER normal filters.\n    // applyResizeFilters is run more often than normal filters\n    // and is triggered by user interactions rather than dev code\n    if (this.resizeFilter) {\n      this.applyResizeFilters();\n    }\n  }\n\n  /**\n   * Delete a single texture if in webgl mode\n   */\n  removeTexture(key: string) {\n    const backend = getFilterBackend(false);\n    if (backend instanceof WebGLFilterBackend) {\n      backend.evictCachesForKey(key);\n    }\n  }\n\n  /**\n   * Delete textures, reference to elements and eventually JSDOM cleanup\n   */\n  dispose() {\n    super.dispose();\n    this.removeTexture(this.cacheKey);\n    this.removeTexture(`${this.cacheKey}_filtered`);\n    this._cacheContext = null;\n    (\n      ['_originalElement', '_element', '_filteredEl', '_cacheCanvas'] as const\n    ).forEach((elementKey) => {\n      const el = this[elementKey];\n      el && getEnv().dispose(el);\n      // @ts-expect-error disposing\n      this[elementKey] = undefined;\n    });\n  }\n\n  /**\n   * Get the crossOrigin value (of the corresponding image element)\n   */\n  getCrossOrigin(): string | null {\n    return (\n      this._originalElement &&\n      ((this._originalElement as any).crossOrigin || null)\n    );\n  }\n\n  /**\n   * Returns original size of an image\n   */\n  getOriginalSize() {\n    const element = this.getElement() as any;\n    if (!element) {\n      return {\n        width: 0,\n        height: 0,\n      };\n    }\n    return {\n      width: element.naturalWidth || element.width,\n      height: element.naturalHeight || element.height,\n    };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _stroke(ctx: CanvasRenderingContext2D) {\n    if (!this.stroke || this.strokeWidth === 0) {\n      return;\n    }\n    const w = this.width / 2,\n      h = this.height / 2;\n    ctx.beginPath();\n    ctx.moveTo(-w, -h);\n    ctx.lineTo(w, -h);\n    ctx.lineTo(w, h);\n    ctx.lineTo(-w, h);\n    ctx.lineTo(-w, -h);\n    ctx.closePath();\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    const filters: Record<string, any>[] = [];\n    this.filters.forEach((filterObj) => {\n      filterObj && filters.push(filterObj.toObject());\n    });\n    return {\n      ...super.toObject([...IMAGE_PROPS, ...propertiesToInclude]),\n      src: this.getSrc(),\n      crossOrigin: this.getCrossOrigin(),\n      filters,\n      ...(this.resizeFilter\n        ? { resizeFilter: this.resizeFilter.toObject() }\n        : {}),\n    };\n  }\n\n  /**\n   * Returns true if an image has crop applied, inspecting values of cropX,cropY,width,height.\n   * @return {Boolean}\n   */\n  hasCrop() {\n    return (\n      !!this.cropX ||\n      !!this.cropY ||\n      this.width < this._element.width ||\n      this.height < this._element.height\n    );\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {string[]} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const imageMarkup: string[] = [],\n      element = this._element,\n      x = -this.width / 2,\n      y = -this.height / 2;\n    let svgString: string[] = [],\n      strokeSvg: string[] = [],\n      clipPath = '',\n      imageRendering = '';\n    if (!element) {\n      return [];\n    }\n    if (this.hasCrop()) {\n      const clipPathId = uid();\n      svgString.push(\n        '<clipPath id=\"imageCrop_' + clipPathId + '\">\\n',\n        '\\t<rect x=\"' +\n          x +\n          '\" y=\"' +\n          y +\n          '\" width=\"' +\n          this.width +\n          '\" height=\"' +\n          this.height +\n          '\" />\\n',\n        '</clipPath>\\n',\n      );\n      clipPath = ' clip-path=\"url(#imageCrop_' + clipPathId + ')\" ';\n    }\n    if (!this.imageSmoothing) {\n      imageRendering = ' image-rendering=\"optimizeSpeed\"';\n    }\n    imageMarkup.push(\n      '\\t<image ',\n      'COMMON_PARTS',\n      `xlink:href=\"${this.getSvgSrc(true)}\" x=\"${x - this.cropX}\" y=\"${\n        y - this.cropY\n        // we're essentially moving origin of transformation from top/left corner to the center of the shape\n        // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left\n        // so that object's center aligns with container's left/top\n      }\" width=\"${\n        element.width || (element as HTMLImageElement).naturalWidth\n      }\" height=\"${\n        element.height || (element as HTMLImageElement).naturalHeight\n      }\"${imageRendering}${clipPath}></image>\\n`,\n    );\n\n    if (this.stroke || this.strokeDashArray) {\n      const origFill = this.fill;\n      this.fill = null;\n      strokeSvg = [\n        `\\t<rect x=\"${x}\" y=\"${y}\" width=\"${this.width}\" height=\"${\n          this.height\n        }\" style=\"${this.getSvgStyles()}\" />\\n`,\n      ];\n      this.fill = origFill;\n    }\n    if (this.paintFirst !== FILL) {\n      svgString = svgString.concat(strokeSvg, imageMarkup);\n    } else {\n      svgString = svgString.concat(imageMarkup, strokeSvg);\n    }\n    return svgString;\n  }\n\n  /**\n   * Returns source of an image\n   * @param {Boolean} filtered indicates if the src is needed for svg\n   * @return {String} Source of an image\n   */\n  getSrc(filtered?: boolean): string {\n    const element = filtered ? this._element : this._originalElement;\n    if (element) {\n      if ((element as HTMLCanvasElement).toDataURL) {\n        return (element as HTMLCanvasElement).toDataURL();\n      }\n\n      if (this.srcFromAttribute) {\n        return element.getAttribute('src') || '';\n      } else {\n        return (element as HTMLImageElement).src;\n      }\n    } else {\n      return this.src || '';\n    }\n  }\n\n  /**\n   * Alias for getSrc\n   * @param filtered\n   * @deprecated\n   */\n  getSvgSrc(filtered?: boolean) {\n    return this.getSrc(filtered);\n  }\n\n  /**\n   * Loads and sets source of an image\\\n   * **IMPORTANT**: It is recommended to abort loading tasks before calling this method to prevent race conditions and unnecessary networking\n   * @param {String} src Source string (URL)\n   * @param {LoadImageOptions} [options] Options object\n   */\n  setSrc(src: string, { crossOrigin, signal }: LoadImageOptions = {}) {\n    return loadImage(src, { crossOrigin, signal }).then((img) => {\n      typeof crossOrigin !== 'undefined' && this.set({ crossOrigin });\n      this.setElement(img);\n    });\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {String} String representation of an instance\n   */\n  toString() {\n    return `#<Image: { src: \"${this.getSrc()}\" }>`;\n  }\n\n  applyResizeFilters() {\n    const filter = this.resizeFilter,\n      minimumScale = this.minimumScaleTrigger,\n      objectScale = this.getTotalObjectScaling(),\n      scaleX = objectScale.x,\n      scaleY = objectScale.y,\n      elementToFilter = this._filteredEl || this._originalElement;\n    if (this.group) {\n      this.set('dirty', true);\n    }\n    if (!filter || (scaleX > minimumScale && scaleY > minimumScale)) {\n      this._element = elementToFilter;\n      this._filterScalingX = 1;\n      this._filterScalingY = 1;\n      this._lastScaleX = scaleX;\n      this._lastScaleY = scaleY;\n      return;\n    }\n    const canvasEl = createCanvasElementFor(elementToFilter),\n      { width, height } = elementToFilter;\n    this._element = canvasEl;\n    this._lastScaleX = filter.scaleX = scaleX;\n    this._lastScaleY = filter.scaleY = scaleY;\n    getFilterBackend().applyFilters(\n      [filter],\n      elementToFilter,\n      width,\n      height,\n      this._element,\n    );\n    this._filterScalingX = canvasEl.width / this._originalElement.width;\n    this._filterScalingY = canvasEl.height / this._originalElement.height;\n  }\n\n  /**\n   * Applies filters assigned to this image (from \"filters\" array) or from filter param\n   * @method applyFilters\n   * @param {Array} filters to be applied\n   * @param {Boolean} forResizing specify if the filter operation is a resize operation\n   */\n  applyFilters(\n    filters: BaseFilter<string, Record<string, any>>[] = this.filters || [],\n  ) {\n    filters = filters.filter((filter) => filter && !filter.isNeutralState());\n    this.set('dirty', true);\n\n    // needs to clear out or WEBGL will not resize correctly\n    this.removeTexture(`${this.cacheKey}_filtered`);\n\n    if (filters.length === 0) {\n      this._element = this._originalElement;\n      // this is unsafe and needs to be rethinkend\n      this._filteredEl = undefined;\n      this._filterScalingX = 1;\n      this._filterScalingY = 1;\n      return;\n    }\n\n    const imgElement = this._originalElement,\n      sourceWidth =\n        (imgElement as HTMLImageElement).naturalWidth || imgElement.width,\n      sourceHeight =\n        (imgElement as HTMLImageElement).naturalHeight || imgElement.height;\n\n    if (this._element === this._originalElement) {\n      // if the _element a reference to _originalElement\n      // we need to create a new element to host the filtered pixels\n      const canvasEl = createCanvasElementFor({\n        width: sourceWidth,\n        height: sourceHeight,\n      });\n      this._element = canvasEl;\n      this._filteredEl = canvasEl;\n    } else if (this._filteredEl) {\n      // if the _element is it own element,\n      // and we also have a _filteredEl, then we clean up _filteredEl\n      // and we assign it to _element.\n      // in this way we invalidate the eventual old resize filtered element\n      this._element = this._filteredEl;\n      this._filteredEl\n        .getContext('2d')!\n        .clearRect(0, 0, sourceWidth, sourceHeight);\n      // we also need to resize again at next renderAll, so remove saved _lastScaleX/Y\n      this._lastScaleX = 1;\n      this._lastScaleY = 1;\n    }\n    getFilterBackend().applyFilters(\n      filters,\n      this._originalElement,\n      sourceWidth,\n      sourceHeight,\n      this._element as HTMLCanvasElement,\n      this.cacheKey,\n    );\n    if (\n      this._originalElement.width !== this._element.width ||\n      this._originalElement.height !== this._element.height\n    ) {\n      this._filterScalingX = this._element.width / this._originalElement.width;\n      this._filterScalingY =\n        this._element.height / this._originalElement.height;\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.imageSmoothingEnabled = this.imageSmoothing;\n    if (this.isMoving !== true && this.resizeFilter && this._needsResize()) {\n      this.applyResizeFilters();\n    }\n    this._stroke(ctx);\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Paint the cached copy of the object on the target context.\n   * it will set the imageSmoothing for the draw operation\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawCacheOnCanvas(\n    this: TCachedFabricObject<FabricImage>,\n    ctx: CanvasRenderingContext2D,\n  ) {\n    ctx.imageSmoothingEnabled = this.imageSmoothing;\n    super.drawCacheOnCanvas(ctx);\n  }\n\n  /**\n   * Decide if the FabricImage should cache or not. Create its own cache level\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step.\n   * Generally you do not cache objects in groups because the group outside is cached.\n   * This is the special Image version where we would like to avoid caching where possible.\n   * Essentially images do not benefit from caching. They may require caching, and in that\n   * case we do it. Also caching an image usually ends in a loss of details.\n   * A full performance audit should be done.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    return this.needsItsOwnCache();\n  }\n\n  _renderFill(ctx: CanvasRenderingContext2D) {\n    const elementToDraw = this._element;\n    if (!elementToDraw) {\n      return;\n    }\n    const scaleX = this._filterScalingX,\n      scaleY = this._filterScalingY,\n      w = this.width,\n      h = this.height,\n      // crop values cannot be lesser than 0.\n      cropX = Math.max(this.cropX, 0),\n      cropY = Math.max(this.cropY, 0),\n      elWidth =\n        (elementToDraw as HTMLImageElement).naturalWidth || elementToDraw.width,\n      elHeight =\n        (elementToDraw as HTMLImageElement).naturalHeight ||\n        elementToDraw.height,\n      sX = cropX * scaleX,\n      sY = cropY * scaleY,\n      // the width height cannot exceed element width/height, starting from the crop offset.\n      sW = Math.min(w * scaleX, elWidth - sX),\n      sH = Math.min(h * scaleY, elHeight - sY),\n      x = -w / 2,\n      y = -h / 2,\n      maxDestW = Math.min(w, elWidth / scaleX - cropX),\n      maxDestH = Math.min(h, elHeight / scaleY - cropY);\n\n    elementToDraw &&\n      ctx.drawImage(elementToDraw, sX, sY, sW, sH, x, y, maxDestW, maxDestH);\n  }\n\n  /**\n   * needed to check if image needs resize\n   * @private\n   */\n  _needsResize() {\n    const scale = this.getTotalObjectScaling();\n    return scale.x !== this._lastScaleX || scale.y !== this._lastScaleY;\n  }\n\n  /**\n   * @private\n   * @deprecated unused\n   */\n  _resetWidthHeight() {\n    this.set(this.getOriginalSize());\n  }\n\n  /**\n   * @private\n   * Set the width and the height of the image object, using the element or the\n   * options.\n   */\n  _setWidthHeight({ width, height }: Partial<TSize> = {}) {\n    const size = this.getOriginalSize();\n    this.width = width || size.width;\n    this.height = height || size.height;\n  }\n\n  /**\n   * Calculate offset for center and scale factor for the image in order to respect\n   * the preserveAspectRatio attribute\n   * @private\n   */\n  parsePreserveAspectRatioAttribute() {\n    const pAR = parsePreserveAspectRatioAttribute(\n        this.preserveAspectRatio || '',\n      ),\n      pWidth = this.width,\n      pHeight = this.height,\n      parsedAttributes = { width: pWidth, height: pHeight };\n    let rWidth = this._element.width,\n      rHeight = this._element.height,\n      scaleX = 1,\n      scaleY = 1,\n      offsetLeft = 0,\n      offsetTop = 0,\n      cropX = 0,\n      cropY = 0,\n      offset;\n\n    if (pAR && (pAR.alignX !== NONE || pAR.alignY !== NONE)) {\n      if (pAR.meetOrSlice === 'meet') {\n        scaleX = scaleY = findScaleToFit(this._element, parsedAttributes);\n        offset = (pWidth - rWidth * scaleX) / 2;\n        if (pAR.alignX === 'Min') {\n          offsetLeft = -offset;\n        }\n        if (pAR.alignX === 'Max') {\n          offsetLeft = offset;\n        }\n        offset = (pHeight - rHeight * scaleY) / 2;\n        if (pAR.alignY === 'Min') {\n          offsetTop = -offset;\n        }\n        if (pAR.alignY === 'Max') {\n          offsetTop = offset;\n        }\n      }\n      if (pAR.meetOrSlice === 'slice') {\n        scaleX = scaleY = findScaleToCover(this._element, parsedAttributes);\n        offset = rWidth - pWidth / scaleX;\n        if (pAR.alignX === 'Mid') {\n          cropX = offset / 2;\n        }\n        if (pAR.alignX === 'Max') {\n          cropX = offset;\n        }\n        offset = rHeight - pHeight / scaleY;\n        if (pAR.alignY === 'Mid') {\n          cropY = offset / 2;\n        }\n        if (pAR.alignY === 'Max') {\n          cropY = offset;\n        }\n        rWidth = pWidth / scaleX;\n        rHeight = pHeight / scaleY;\n      }\n    } else {\n      scaleX = pWidth / rWidth;\n      scaleY = pHeight / rHeight;\n    }\n    return {\n      width: rWidth,\n      height: rHeight,\n      scaleX,\n      scaleY,\n      offsetLeft,\n      offsetTop,\n      cropX,\n      cropY,\n    };\n  }\n\n  /**\n   * Default CSS class name for canvas\n   * Will be removed from fabric 7\n   * @static\n   * @deprecated\n   * @type String\n   * @default\n   */\n  static CSS_CANVAS = 'canvas-img';\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link FabricImage.fromElement})\n   * @static\n   * @see {@link http://www.w3.org/TR/SVG/struct.html#ImageElement}\n   */\n  static ATTRIBUTE_NAMES = [\n    ...SHARED_ATTRIBUTES,\n    'x',\n    'y',\n    'width',\n    'height',\n    'preserveAspectRatio',\n    'xlink:href',\n    'crossOrigin',\n    'image-rendering',\n  ];\n\n  /**\n   * Creates an instance of FabricImage from its object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {object} [options] Options object\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricImage>}\n   */\n  static fromObject<T extends TOptions<SerializedImageProps>>(\n    { filters: f, resizeFilter: rf, src, crossOrigin, type, ...object }: T,\n    options?: Abortable,\n  ) {\n    return Promise.all([\n      loadImage(src!, { ...options, crossOrigin }),\n      f && enlivenObjects<BaseFilter<string>>(f, options),\n      // TODO: redundant - handled by enlivenObjectEnlivables\n      rf && enlivenObjects<BaseFilter<'Resize'>>([rf], options),\n      enlivenObjectEnlivables(object, options),\n    ]).then(([el, filters = [], [resizeFilter] = [], hydratedProps = {}]) => {\n      return new this(el, {\n        ...object,\n        // TODO: this creates a difference between image creation and restoring from JSON\n        src,\n        filters,\n        resizeFilter,\n        ...hydratedProps,\n      });\n    });\n  }\n\n  /**\n   * Creates an instance of Image from an URL string\n   * @static\n   * @param {String} url URL to create an image from\n   * @param {LoadImageOptions} [options] Options object\n   * @returns {Promise<FabricImage>}\n   */\n  static fromURL<T extends TOptions<ImageProps>>(\n    url: string,\n    { crossOrigin = null, signal }: LoadImageOptions = {},\n    imageOptions?: T,\n  ): Promise<FabricImage> {\n    return loadImage(url, { crossOrigin, signal }).then(\n      (img) => new this(img, imageOptions),\n    );\n  }\n\n  /**\n   * Returns {@link FabricImage} instance from an SVG element\n   * @static\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @param {Function} callback Callback to execute when Image object is created\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable = {},\n    cssRules?: CSSRules,\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n    return this.fromURL(\n      parsedAttributes['xlink:href'],\n      options,\n      parsedAttributes,\n    ).catch((err) => {\n      log('log', 'Unable to parse Image', err);\n      return null;\n    });\n  }\n}\n\nclassRegistry.setClass(FabricImage);\nclassRegistry.setSVGClass(FabricImage);\n","import { svgNS } from './constants';\nimport {\n  parsePreserveAspectRatioAttribute,\n  parseUnit,\n} from '../util/misc/svgParsing';\nimport { svgViewBoxElementsRegEx, reViewBoxAttrValue } from './constants';\nimport { NONE } from '../constants';\n\nexport type ParsedViewboxTransform = Partial<{\n  width: number;\n  height: number;\n  minX: number;\n  minY: number;\n  viewBoxWidth: number;\n  viewBoxHeight: number;\n}>;\n\n/**\n * Add a <g> element that envelop all child elements and makes the viewbox transformMatrix descend on all elements\n */\nexport function applyViewboxTransform(\n  element: Element,\n): ParsedViewboxTransform {\n  if (!svgViewBoxElementsRegEx.test(element.nodeName)) {\n    return {};\n  }\n  const viewBoxAttr: string | null = element.getAttribute('viewBox');\n  let scaleX = 1;\n  let scaleY = 1;\n  let minX = 0;\n  let minY = 0;\n  let matrix;\n  let el;\n  const widthAttr = element.getAttribute('width');\n  const heightAttr = element.getAttribute('height');\n  const x = element.getAttribute('x') || 0;\n  const y = element.getAttribute('y') || 0;\n  const goodViewbox = viewBoxAttr && reViewBoxAttrValue.test(viewBoxAttr);\n  const missingViewBox = !goodViewbox;\n  const missingDimAttr =\n    !widthAttr || !heightAttr || widthAttr === '100%' || heightAttr === '100%';\n\n  let translateMatrix = '';\n  let widthDiff = 0;\n  let heightDiff = 0;\n\n  if (missingViewBox) {\n    if (\n      (x || y) &&\n      element.parentNode &&\n      element.parentNode.nodeName !== '#document'\n    ) {\n      translateMatrix =\n        ' translate(' + parseUnit(x || '0') + ' ' + parseUnit(y || '0') + ') ';\n      matrix = (element.getAttribute('transform') || '') + translateMatrix;\n      element.setAttribute('transform', matrix);\n      element.removeAttribute('x');\n      element.removeAttribute('y');\n    }\n  }\n\n  if (missingViewBox && missingDimAttr) {\n    return {\n      width: 0,\n      height: 0,\n    };\n  }\n\n  const parsedDim: ParsedViewboxTransform = {\n    width: 0,\n    height: 0,\n  };\n\n  if (missingViewBox) {\n    parsedDim.width = parseUnit(widthAttr!);\n    parsedDim.height = parseUnit(heightAttr!);\n    // set a transform for elements that have x y and are inner(only) SVGs\n    return parsedDim;\n  }\n\n  const pasedViewBox = viewBoxAttr.match(reViewBoxAttrValue)!;\n  minX = -parseFloat(pasedViewBox[1]);\n  minY = -parseFloat(pasedViewBox[2]);\n  const viewBoxWidth = parseFloat(pasedViewBox[3]);\n  const viewBoxHeight = parseFloat(pasedViewBox[4]);\n  parsedDim.minX = minX;\n  parsedDim.minY = minY;\n  parsedDim.viewBoxWidth = viewBoxWidth;\n  parsedDim.viewBoxHeight = viewBoxHeight;\n  if (!missingDimAttr) {\n    parsedDim.width = parseUnit(widthAttr);\n    parsedDim.height = parseUnit(heightAttr);\n    scaleX = parsedDim.width / viewBoxWidth;\n    scaleY = parsedDim.height / viewBoxHeight;\n  } else {\n    parsedDim.width = viewBoxWidth;\n    parsedDim.height = viewBoxHeight;\n  }\n\n  // default is to preserve aspect ratio\n  const preserveAspectRatio = parsePreserveAspectRatioAttribute(\n    element.getAttribute('preserveAspectRatio') || '',\n  );\n  if (preserveAspectRatio.alignX !== NONE) {\n    //translate all container for the effect of Mid, Min, Max\n    if (preserveAspectRatio.meetOrSlice === 'meet') {\n      scaleY = scaleX = scaleX > scaleY ? scaleY : scaleX;\n      // calculate additional translation to move the viewbox\n    }\n    if (preserveAspectRatio.meetOrSlice === 'slice') {\n      scaleY = scaleX = scaleX > scaleY ? scaleX : scaleY;\n      // calculate additional translation to move the viewbox\n    }\n    widthDiff = parsedDim.width - viewBoxWidth * scaleX;\n    heightDiff = parsedDim.height - viewBoxHeight * scaleX;\n    if (preserveAspectRatio.alignX === 'Mid') {\n      widthDiff /= 2;\n    }\n    if (preserveAspectRatio.alignY === 'Mid') {\n      heightDiff /= 2;\n    }\n    if (preserveAspectRatio.alignX === 'Min') {\n      widthDiff = 0;\n    }\n    if (preserveAspectRatio.alignY === 'Min') {\n      heightDiff = 0;\n    }\n  }\n\n  if (\n    scaleX === 1 &&\n    scaleY === 1 &&\n    minX === 0 &&\n    minY === 0 &&\n    x === 0 &&\n    y === 0\n  ) {\n    return parsedDim;\n  }\n  if ((x || y) && element.parentNode!.nodeName !== '#document') {\n    translateMatrix =\n      ' translate(' + parseUnit(x || '0') + ' ' + parseUnit(y || '0') + ') ';\n  }\n\n  matrix =\n    translateMatrix +\n    ' matrix(' +\n    scaleX +\n    ' 0' +\n    ' 0 ' +\n    scaleY +\n    ' ' +\n    (minX * scaleX + widthDiff) +\n    ' ' +\n    (minY * scaleY + heightDiff) +\n    ') ';\n  // seems unused.\n  // parsedDim.viewboxTransform = parseTransformAttribute(matrix);\n  if (element.nodeName === 'svg') {\n    el = element.ownerDocument.createElementNS(svgNS, 'g');\n    // element.firstChild != null\n    while (element.firstChild) {\n      el.appendChild(element.firstChild);\n    }\n    element.appendChild(el);\n  } else {\n    el = element;\n    el.removeAttribute('x');\n    el.removeAttribute('y');\n    matrix = el.getAttribute('transform') + matrix;\n  }\n  el.setAttribute('transform', matrix);\n  return parsedDim;\n}\n","export const getTagName = (node: Element) => node.tagName.replace('svg:', '');\n","import { svgInvalidAncestors } from './constants';\nimport { getSvgRegex } from './getSvgRegex';\nimport { getTagName } from './getTagName';\n\nconst svgInvalidAncestorsRegEx = getSvgRegex(svgInvalidAncestors);\n\nexport function hasInvalidAncestor(element: Element) {\n  let _element: Element | null = element;\n  while (_element && (_element = _element.parentElement)) {\n    if (\n      _element &&\n      _element.nodeName &&\n      svgInvalidAncestorsRegEx.test(getTagName(_element)) &&\n      !_element.getAttribute('instantiated_by_use')\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n","export function getMultipleNodes(\n  doc: Document,\n  nodeNames: string[],\n): Element[] {\n  let nodeName,\n    nodeArray: Element[] = [],\n    nodeList,\n    i,\n    len;\n  for (i = 0, len = nodeNames.length; i < len; i++) {\n    nodeName = nodeNames[i];\n    nodeList = doc.getElementsByTagNameNS(\n      'http://www.w3.org/2000/svg',\n      nodeName,\n    );\n    nodeArray = nodeArray.concat(Array.from(nodeList));\n  }\n  return nodeArray;\n}\n","const gradientsAttrs = [\n  'gradientTransform',\n  'x1',\n  'x2',\n  'y1',\n  'y2',\n  'gradientUnits',\n  'cx',\n  'cy',\n  'r',\n  'fx',\n  'fy',\n];\nconst xlinkAttr = 'xlink:href';\n\nexport function recursivelyParseGradientsXlink(\n  doc: Document,\n  gradient: Element,\n) {\n  const xLink = gradient.getAttribute(xlinkAttr)?.slice(1) || '',\n    referencedGradient = doc.getElementById(xLink);\n  if (referencedGradient && referencedGradient.getAttribute(xlinkAttr)) {\n    recursivelyParseGradientsXlink(doc, referencedGradient as Element);\n  }\n  if (referencedGradient) {\n    gradientsAttrs.forEach((attr) => {\n      const value = referencedGradient.getAttribute(attr);\n      if (!gradient.hasAttribute(attr) && value) {\n        gradient.setAttribute(attr, value);\n      }\n    });\n    if (!gradient.children.length) {\n      const referenceClone = referencedGradient.cloneNode(true);\n      while (referenceClone.firstChild) {\n        gradient.appendChild(referenceClone.firstChild);\n      }\n    }\n  }\n  gradient.removeAttribute(xlinkAttr);\n}\n","import { getMultipleNodes } from './getMultipleNodes';\nimport { recursivelyParseGradientsXlink } from './recursivelyParseGradientsXlink';\n\nconst tagArray = [\n  'linearGradient',\n  'radialGradient',\n  'svg:linearGradient',\n  'svg:radialGradient',\n];\n\n/**\n * Parses an SVG document, returning all of the gradient declarations found in it\n * @param {SVGDocument} doc SVG document to parse\n * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element\n */\nexport function getGradientDefs(\n  doc: Document,\n): Record<string, SVGGradientElement> {\n  const elList = getMultipleNodes(doc, tagArray);\n  const gradientDefs: Record<string, SVGGradientElement> = {};\n  let j = elList.length;\n  while (j--) {\n    const el = elList[j];\n    if (el.getAttribute('xlink:href')) {\n      recursivelyParseGradientsXlink(doc, el);\n    }\n    const id = el.getAttribute('id');\n    if (id) {\n      gradientDefs[id] = el as SVGGradientElement;\n    }\n  }\n  return gradientDefs;\n}\n","import type { CSSRules } from './typedefs';\n\n/**\n * Returns CSS rules for a given SVG document\n * @param {HTMLElement} doc SVG document to parse\n * @return {Object} CSS rules of this document\n */\nexport function getCSSRules(doc: Document) {\n  const styles = doc.getElementsByTagName('style');\n  let i;\n  let len;\n  const allRules: CSSRules = {};\n\n  // very crude parsing of style contents\n  for (i = 0, len = styles.length; i < len; i++) {\n    const styleContents = (styles[i].textContent || '').replace(\n      // remove comments\n      /\\/\\*[\\s\\S]*?\\*\\//g,\n      '',\n    );\n\n    if (styleContents.trim() === '') {\n      continue;\n    }\n    // recovers all the rule in this form `body { style code... }`\n    // rules = styleContents.match(/[^{]*\\{[\\s\\S]*?\\}/g);\n    styleContents\n      .split('}')\n      // remove empty rules and remove everything if we didn't split in at least 2 pieces\n      .filter((rule, index, array) => array.length > 1 && rule.trim())\n      // at this point we have hopefully an array of rules `body { style code... `\n      .forEach((rule) => {\n        // if there is more than one opening bracket and the rule starts with '@', it is likely\n        // a nested at-rule like @media, @supports, @scope, etc. Ignore these as the code below\n        // can not handle it.\n        if (\n          (rule.match(/{/g) || []).length > 1 &&\n          rule.trim().startsWith('@')\n        ) {\n          return;\n        }\n\n        const match = rule.split('{'),\n          ruleObj: Record<string, string> = {},\n          declaration = match[1].trim(),\n          propertyValuePairs = declaration.split(';').filter(function (pair) {\n            return pair.trim();\n          });\n\n        for (i = 0, len = propertyValuePairs.length; i < len; i++) {\n          const pair = propertyValuePairs[i].split(':'),\n            property = pair[0].trim(),\n            value = pair[1].trim();\n          ruleObj[property] = value;\n        }\n        rule = match[0].trim();\n        rule.split(',').forEach((_rule) => {\n          _rule = _rule.replace(/^svg/i, '').trim();\n          if (_rule === '') {\n            return;\n          }\n          allRules[_rule] = {\n            ...(allRules[_rule] || {}),\n            ...ruleObj,\n          };\n        });\n      });\n  }\n  return allRules;\n}\n","import { Gradient } from '../gradient/Gradient';\nimport { Group } from '../shapes/Group';\nimport { FabricImage } from '../shapes/Image';\nimport { classRegistry } from '../ClassRegistry';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from '../util/misc/matrix';\nimport { removeTransformMatrixForSvgParsing } from '../util/transform_matrix_removal';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport { Point } from '../Point';\nimport { CENTER, FILL, STROKE } from '../constants';\nimport { getGradientDefs } from './getGradientDefs';\nimport { getCSSRules } from './getCSSRules';\nimport type { LoadImageOptions } from '../util';\nimport type { CSSRules, TSvgReviverCallback } from './typedefs';\nimport type { ParsedViewboxTransform } from './applyViewboxTransform';\nimport type { SVGOptions } from '../gradient';\nimport { getTagName } from './getTagName';\nimport { parseTransformAttribute } from './parseTransformAttribute';\n\nconst findTag = (el: Element) =>\n  classRegistry.getSVGClass(getTagName(el).toLowerCase());\n\ntype StorageType = {\n  fill: SVGGradientElement;\n  stroke: SVGGradientElement;\n  clipPath: Element[];\n};\n\ntype NotParsedFabricObject = FabricObject & {\n  fill: string;\n  stroke: string;\n  clipPath?: string;\n  clipRule?: CanvasFillRule;\n};\n\nexport class ElementsParser {\n  declare elements: Element[];\n  declare options: LoadImageOptions & ParsedViewboxTransform;\n  declare reviver?: TSvgReviverCallback;\n  declare regexUrl: RegExp;\n  declare doc: Document;\n  declare clipPaths: Record<string, Element[]>;\n  declare gradientDefs: Record<string, SVGGradientElement>;\n  declare cssRules: CSSRules;\n\n  constructor(\n    elements: Element[],\n    options: LoadImageOptions & ParsedViewboxTransform,\n    reviver: TSvgReviverCallback | undefined,\n    doc: Document,\n    clipPaths: Record<string, Element[]>,\n  ) {\n    this.elements = elements;\n    this.options = options;\n    this.reviver = reviver;\n    this.regexUrl = /^url\\(['\"]?#([^'\"]+)['\"]?\\)/g;\n    this.doc = doc;\n    this.clipPaths = clipPaths;\n    this.gradientDefs = getGradientDefs(doc);\n    this.cssRules = getCSSRules(doc);\n  }\n\n  parse(): Promise<Array<FabricObject | null>> {\n    return Promise.all(\n      this.elements.map((element) => this.createObject(element)),\n    );\n  }\n\n  async createObject(el: Element): Promise<FabricObject | null> {\n    const klass = findTag(el);\n    if (klass) {\n      const obj: NotParsedFabricObject = await klass.fromElement(\n        el,\n        this.options,\n        this.cssRules,\n      );\n      this.resolveGradient(obj, el, FILL);\n      this.resolveGradient(obj, el, STROKE);\n      if (obj instanceof FabricImage && obj._originalElement) {\n        removeTransformMatrixForSvgParsing(\n          obj,\n          obj.parsePreserveAspectRatioAttribute(),\n        );\n      } else {\n        removeTransformMatrixForSvgParsing(obj);\n      }\n      await this.resolveClipPath(obj, el);\n      this.reviver && this.reviver(el, obj);\n      return obj;\n    }\n    return null;\n  }\n\n  extractPropertyDefinition(\n    obj: NotParsedFabricObject,\n    property: 'fill' | 'stroke' | 'clipPath',\n    storage: Record<string, StorageType[typeof property]>,\n  ): StorageType[typeof property] | undefined {\n    const value = obj[property]!,\n      regex = this.regexUrl;\n    if (!regex.test(value)) {\n      return undefined;\n    }\n    // verify: can we remove the 'g' flag? and remove lastIndex changes?\n    regex.lastIndex = 0;\n    // we passed the regex test, so we know is not null;\n    const id = regex.exec(value)![1];\n    regex.lastIndex = 0;\n    // @todo fix this\n    return storage[id];\n  }\n\n  resolveGradient(\n    obj: NotParsedFabricObject,\n    el: Element,\n    property: 'fill' | 'stroke',\n  ) {\n    const gradientDef = this.extractPropertyDefinition(\n      obj,\n      property,\n      this.gradientDefs,\n    ) as SVGGradientElement;\n    if (gradientDef) {\n      const opacityAttr = el.getAttribute(property + '-opacity');\n      const gradient = Gradient.fromElement(gradientDef, obj, {\n        ...this.options,\n        opacity: opacityAttr,\n      } as SVGOptions);\n      obj.set(property, gradient);\n    }\n  }\n\n  // TODO: resolveClipPath could be run once per clippath with minor work per object.\n  // is a refactor that i m not sure is worth on this code\n  async resolveClipPath(\n    obj: NotParsedFabricObject,\n    usingElement: Element,\n    exactOwner?: Element,\n  ) {\n    const clipPathElements = this.extractPropertyDefinition(\n      obj,\n      'clipPath',\n      this.clipPaths,\n    ) as Element[];\n    if (clipPathElements) {\n      const objTransformInv = invertTransform(obj.calcTransformMatrix());\n      const clipPathTag = clipPathElements[0].parentElement!;\n      let clipPathOwner = usingElement;\n      while (\n        !exactOwner &&\n        clipPathOwner.parentElement &&\n        clipPathOwner.getAttribute('clip-path') !== obj.clipPath\n      ) {\n        clipPathOwner = clipPathOwner.parentElement;\n      }\n      // move the clipPath tag as sibling to the real element that is using it\n      clipPathOwner.parentElement!.appendChild(clipPathTag!);\n\n      // this multiplication order could be opposite.\n      // but i don't have an svg to test it\n      // at the first SVG that has a transform on both places and is misplaced\n      // try to invert this multiplication order\n      const finalTransform = parseTransformAttribute(\n        `${clipPathOwner.getAttribute('transform') || ''} ${\n          clipPathTag.getAttribute('originalTransform') || ''\n        }`,\n      );\n\n      clipPathTag.setAttribute(\n        'transform',\n        `matrix(${finalTransform.join(',')})`,\n      );\n\n      const container = await Promise.all(\n        clipPathElements.map((clipPathElement) => {\n          return findTag(clipPathElement)\n            .fromElement(clipPathElement, this.options, this.cssRules)\n            .then((enlivedClippath: NotParsedFabricObject) => {\n              removeTransformMatrixForSvgParsing(enlivedClippath);\n              enlivedClippath.fillRule = enlivedClippath.clipRule!;\n              delete enlivedClippath.clipRule;\n              return enlivedClippath;\n            });\n        }),\n      );\n      const clipPath =\n        container.length === 1 ? container[0] : new Group(container);\n      const gTransform = multiplyTransformMatrices(\n        objTransformInv,\n        clipPath.calcTransformMatrix(),\n      );\n      if (clipPath.clipPath) {\n        await this.resolveClipPath(\n          clipPath,\n          clipPathOwner,\n          // this is tricky.\n          // it tries to differentiate from when clipPaths are inherited by outside groups\n          // or when are really clipPaths referencing other clipPaths\n          clipPathTag.getAttribute('clip-path') ? clipPathOwner : undefined,\n        );\n      }\n      const { scaleX, scaleY, angle, skewX, translateX, translateY } =\n        qrDecompose(gTransform);\n      clipPath.set({\n        flipX: false,\n        flipY: false,\n      });\n      clipPath.set({\n        scaleX,\n        scaleY,\n        angle,\n        skewX,\n        skewY: 0,\n      });\n      clipPath.setPositionByOrigin(\n        new Point(translateX, translateY),\n        CENTER,\n        CENTER,\n      );\n      obj.clipPath = clipPath;\n    } else {\n      // if clip-path does not resolve to any element, delete the property.\n      delete obj.clipPath;\n      return;\n    }\n  }\n}\n","import { applyViewboxTransform } from './applyViewboxTransform';\nimport { svgValidTagNamesRegEx } from './constants';\nimport { hasInvalidAncestor } from './hasInvalidAncestor';\nimport { parseUseDirectives } from './parseUseDirectives';\nimport type { SVGParsingOutput, TSvgReviverCallback } from './typedefs';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport { ElementsParser } from './elements_parser';\nimport { log, SignalAbortedError } from '../util/internals/console';\nimport { getTagName } from './getTagName';\n\nconst isValidSvgTag = (el: Element) =>\n  svgValidTagNamesRegEx.test(getTagName(el));\n\nexport const createEmptyResponse = (): SVGParsingOutput => ({\n  objects: [],\n  elements: [],\n  options: {},\n  allElements: [],\n});\n\n/**\n * Parses an SVG document, converts it to an array of corresponding fabric.* instances and passes them to a callback\n * @static\n * @function\n * @memberOf fabric\n * @param {HTMLElement} doc SVG document to parse\n * @param {TSvgParsedCallback} callback Invoked when the parsing is done, with null if parsing wasn't possible with the list of svg nodes.\n * @param {TSvgReviverCallback} [reviver] Extra callback for further parsing of SVG elements, called after each fabric object has been created.\n * Takes as input the original svg element and the generated `FabricObject` as arguments. Used to inspect extra properties not parsed by fabric,\n * or extra custom manipulation\n * @param {Object} [options] Object containing options for parsing\n * @param {String} [options.crossOrigin] crossOrigin setting to use for external resources\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @return {SVGParsingOutput}\n * {@link SVGParsingOutput} also receives `allElements` array as the last argument. This is the full list of svg nodes available in the document.\n * You may want to use it if you are trying to regroup the objects as they were originally grouped in the SVG. ( This was the reason why it was added )\n */\nexport async function parseSVGDocument(\n  doc: Document,\n  reviver?: TSvgReviverCallback,\n  { crossOrigin, signal }: LoadImageOptions = {},\n): Promise<SVGParsingOutput> {\n  if (signal && signal.aborted) {\n    log('log', new SignalAbortedError('parseSVGDocument'));\n    // this is an unhappy path, we dont care about speed\n    return createEmptyResponse();\n  }\n  const documentElement = doc.documentElement;\n  parseUseDirectives(doc);\n\n  const descendants = Array.from(documentElement.getElementsByTagName('*')),\n    options = {\n      ...applyViewboxTransform(documentElement),\n      crossOrigin,\n      signal,\n    };\n  const elements = descendants.filter((el) => {\n    applyViewboxTransform(el);\n    return isValidSvgTag(el) && !hasInvalidAncestor(el); // http://www.w3.org/TR/SVG/struct.html#DefsElement\n  });\n  if (!elements || (elements && !elements.length)) {\n    return {\n      ...createEmptyResponse(),\n      options,\n      allElements: descendants,\n    };\n  }\n  const localClipPaths: Record<string, Element[]> = {};\n  descendants\n    .filter((el) => getTagName(el) === 'clipPath')\n    .forEach((el) => {\n      el.setAttribute('originalTransform', el.getAttribute('transform') || '');\n      const id = el.getAttribute('id')!;\n      localClipPaths[id] = Array.from(el.getElementsByTagName('*')).filter(\n        (el) => isValidSvgTag(el),\n      );\n    });\n\n  // Precedence of rules:   style > class > attribute\n  const elementParser = new ElementsParser(\n    elements,\n    options,\n    reviver,\n    doc,\n    localClipPaths,\n  );\n\n  const instances = await elementParser.parse();\n\n  return {\n    objects: instances,\n    elements,\n    options,\n    allElements: descendants,\n  };\n}\n","import { svgNS } from './constants';\nimport { getMultipleNodes } from './getMultipleNodes';\nimport { applyViewboxTransform } from './applyViewboxTransform';\nimport { parseStyleString } from './parseStyleString';\n\nexport function parseUseDirectives(doc: Document) {\n  const nodelist = getMultipleNodes(doc, ['use', 'svg:use']);\n  const skipAttributes = ['x', 'y', 'xlink:href', 'href', 'transform'];\n\n  for (const useElement of nodelist) {\n    const useAttributes: NamedNodeMap = useElement.attributes;\n\n    const useAttrMap: Record<string, string> = {};\n    for (const attr of useAttributes) {\n      attr.value && (useAttrMap[attr.name] = attr.value);\n    }\n\n    const xlink = (useAttrMap['xlink:href'] || useAttrMap.href || '').slice(1);\n\n    if (xlink === '') {\n      return;\n    }\n    const referencedElement = doc.getElementById(xlink);\n    if (referencedElement === null) {\n      // if we can't find the target of the xlink, consider this use tag bad, similar to no xlink\n      return;\n    }\n    let clonedOriginal = referencedElement.cloneNode(true) as Element;\n\n    const originalAttributes: NamedNodeMap = clonedOriginal.attributes;\n\n    const originalAttrMap: Record<string, string> = {};\n    for (const attr of originalAttributes) {\n      attr.value && (originalAttrMap[attr.name] = attr.value);\n    }\n\n    // Transform attribute needs to be merged in a particular way\n    const { x = 0, y = 0, transform = '' } = useAttrMap;\n    const currentTrans = `${transform} ${\n      originalAttrMap.transform || ''\n    } translate(${x}, ${y})`;\n\n    applyViewboxTransform(clonedOriginal);\n\n    if (/^svg$/i.test(clonedOriginal.nodeName)) {\n      // if is an SVG, create a group and apply all the attributes on top of it\n      const el3 = clonedOriginal.ownerDocument.createElementNS(svgNS, 'g');\n      Object.entries(originalAttrMap).forEach(([name, value]) =>\n        el3.setAttributeNS(svgNS, name, value),\n      );\n      el3.append(...clonedOriginal.childNodes);\n      clonedOriginal = el3;\n    }\n\n    for (const attr of useAttributes) {\n      if (!attr) {\n        continue;\n      }\n      const { name, value } = attr;\n      if (skipAttributes.includes(name)) {\n        continue;\n      }\n\n      if (name === 'style') {\n        // when use has a style, merge the two styles, with the ref being priority (not use)\n        // priority is by feature. an attribute for fill on the original element\n        // will overwrite the fill in style or attribute for tha use\n        const styleRecord: Record<string, any> = {};\n        parseStyleString(value!, styleRecord);\n        // cleanup styleRecord from attributes of original\n        Object.entries(originalAttrMap).forEach(([name, value]) => {\n          styleRecord[name] = value;\n        });\n        // now we can put in the style of the original that will overwrite the original attributes\n        parseStyleString(originalAttrMap.style || '', styleRecord);\n        const mergedStyles = Object.entries(styleRecord)\n          .map((entry) => entry.join(':'))\n          .join(';');\n        clonedOriginal.setAttribute(name, mergedStyles);\n      } else {\n        // set the attribute from use element only if the original does not have it already\n        !originalAttrMap[name] && clonedOriginal.setAttribute(name, value!);\n      }\n    }\n\n    clonedOriginal.setAttribute('transform', currentTrans);\n    clonedOriginal.setAttribute('instantiated_by_use', '1');\n    clonedOriginal.removeAttribute('id');\n    useElement.parentNode!.replaceChild(clonedOriginal, useElement);\n  }\n}\n","import { Point } from '../Point';\nimport { Control } from './Control';\nimport type { TMat2D } from '../typedefs';\nimport type { Polyline } from '../shapes/Polyline';\nimport { multiplyTransformMatrices } from '../util/misc/matrix';\nimport type {\n  TModificationEvents,\n  TPointerEvent,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport { MODIFY_POLY } from '../constants';\n\nconst ACTION_NAME: TModificationEvents = MODIFY_POLY;\n\ntype TTransformAnchor = Transform & { pointIndex: number };\n\n/**\n * This function locates the controls.\n * It'll be used both for drawing and for interaction.\n */\nexport const createPolyPositionHandler = (pointIndex: number) => {\n  return function (dim: Point, finalMatrix: TMat2D, polyObject: Polyline) {\n    const { points, pathOffset } = polyObject;\n    return new Point(points[pointIndex])\n      .subtract(pathOffset)\n      .transform(\n        multiplyTransformMatrices(\n          polyObject.getViewportTransform(),\n          polyObject.calcTransformMatrix(),\n        ),\n      );\n  };\n};\n\n/**\n * This function defines what the control does.\n * It'll be called on every mouse move after a control has been clicked and is being dragged.\n * The function receives as argument the mouse event, the current transform object\n * and the current position in canvas coordinate `transform.target` is a reference to the\n * current object being transformed.\n */\nexport const polyActionHandler = (\n  eventData: TPointerEvent,\n  transform: TTransformAnchor,\n  x: number,\n  y: number,\n) => {\n  const { target, pointIndex } = transform;\n  const poly = target as Polyline;\n  const mouseLocalPosition = sendPointToPlane(\n    new Point(x, y),\n    undefined,\n    poly.calcOwnMatrix(),\n  );\n\n  poly.points[pointIndex] = mouseLocalPosition.add(poly.pathOffset);\n  poly.setDimensions();\n\n  return true;\n};\n\n/**\n * Keep the polygon in the same position when we change its `width`/`height`/`top`/`left`.\n */\nexport const factoryPolyActionHandler = (\n  pointIndex: number,\n  fn: TransformActionHandler<TTransformAnchor>,\n) => {\n  return function (\n    eventData: TPointerEvent,\n    transform: Transform,\n    x: number,\n    y: number,\n  ) {\n    const poly = transform.target as Polyline,\n      anchorPoint = new Point(\n        poly.points[(pointIndex > 0 ? pointIndex : poly.points.length) - 1],\n      ),\n      anchorPointInParentPlane = anchorPoint\n        .subtract(poly.pathOffset)\n        .transform(poly.calcOwnMatrix()),\n      actionPerformed = fn(eventData, { ...transform, pointIndex }, x, y);\n\n    const newAnchorPointInParentPlane = anchorPoint\n      .subtract(poly.pathOffset)\n      .transform(poly.calcOwnMatrix());\n\n    const diff = newAnchorPointInParentPlane.subtract(anchorPointInParentPlane);\n    poly.left -= diff.x;\n    poly.top -= diff.y;\n\n    return actionPerformed;\n  };\n};\n\nexport const createPolyActionHandler = (pointIndex: number) =>\n  wrapWithFireEvent(\n    ACTION_NAME,\n    factoryPolyActionHandler(pointIndex, polyActionHandler),\n  );\n\nexport function createPolyControls(\n  poly: Polyline,\n  options?: Partial<Control>,\n): Record<string, Control>;\nexport function createPolyControls(\n  numOfControls: number,\n  options?: Partial<Control>,\n): Record<string, Control>;\nexport function createPolyControls(\n  arg0: number | Polyline,\n  options: Partial<Control> = {},\n) {\n  const controls = {} as Record<string, Control>;\n  for (\n    let idx = 0;\n    idx < (typeof arg0 === 'number' ? arg0 : arg0.points.length);\n    idx++\n  ) {\n    controls[`p${idx}`] = new Control({\n      actionName: ACTION_NAME,\n      positionHandler: createPolyPositionHandler(idx),\n      actionHandler: createPolyActionHandler(idx),\n      ...options,\n    });\n  }\n  return controls;\n}\n","import { Point } from '../Point';\nimport { Control } from './Control';\nimport type { TMat2D } from '../typedefs';\nimport type { Path } from '../shapes/Path';\nimport { multiplyTransformMatrices } from '../util/misc/matrix';\nimport type {\n  TModificationEvents,\n  TPointerEvent,\n  Transform,\n} from '../EventTypeDefs';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport type { TSimpleParseCommandType } from '../util/path/typedefs';\nimport type { ControlRenderingStyleOverride } from './controlRendering';\nimport { fireEvent } from './fireEvent';\nimport { commonEventInfo } from './util';\n\nconst ACTION_NAME: TModificationEvents = 'modifyPath' as const;\n\ntype TTransformAnchor = Transform;\n\nexport type PathPointControlStyle = {\n  controlFill?: string;\n  controlStroke?: string;\n  connectionDashArray?: number[];\n};\n\nconst calcPathPointPosition = (\n  pathObject: Path,\n  commandIndex: number,\n  pointIndex: number,\n) => {\n  const { path, pathOffset } = pathObject;\n  const command = path[commandIndex];\n  return new Point(\n    (command[pointIndex] as number) - pathOffset.x,\n    (command[pointIndex + 1] as number) - pathOffset.y,\n  ).transform(\n    multiplyTransformMatrices(\n      pathObject.getViewportTransform(),\n      pathObject.calcTransformMatrix(),\n    ),\n  );\n};\n\nconst movePathPoint = (\n  pathObject: Path,\n  x: number,\n  y: number,\n  commandIndex: number,\n  pointIndex: number,\n) => {\n  const { path, pathOffset } = pathObject;\n\n  const anchorCommand =\n    path[(commandIndex > 0 ? commandIndex : path.length) - 1];\n  const anchorPoint = new Point(\n    anchorCommand[pointIndex] as number,\n    anchorCommand[pointIndex + 1] as number,\n  );\n\n  const anchorPointInParentPlane = anchorPoint\n    .subtract(pathOffset)\n    .transform(pathObject.calcOwnMatrix());\n\n  const mouseLocalPosition = sendPointToPlane(\n    new Point(x, y),\n    undefined,\n    pathObject.calcOwnMatrix(),\n  );\n\n  path[commandIndex][pointIndex] = mouseLocalPosition.x + pathOffset.x;\n  path[commandIndex][pointIndex + 1] = mouseLocalPosition.y + pathOffset.y;\n  pathObject.setDimensions();\n\n  const newAnchorPointInParentPlane = anchorPoint\n    .subtract(pathObject.pathOffset)\n    .transform(pathObject.calcOwnMatrix());\n\n  const diff = newAnchorPointInParentPlane.subtract(anchorPointInParentPlane);\n  pathObject.left -= diff.x;\n  pathObject.top -= diff.y;\n  pathObject.set('dirty', true);\n  return true;\n};\n\n/**\n * This function locates the controls.\n * It'll be used both for drawing and for interaction.\n */\nfunction pathPositionHandler(\n  this: PathPointControl,\n  dim: Point,\n  finalMatrix: TMat2D,\n  pathObject: Path,\n) {\n  const { commandIndex, pointIndex } = this;\n  return calcPathPointPosition(pathObject, commandIndex, pointIndex);\n}\n\n/**\n * This function defines what the control does.\n * It'll be called on every mouse move after a control has been clicked and is being dragged.\n * The function receives as argument the mouse event, the current transform object\n * and the current position in canvas coordinate `transform.target` is a reference to the\n * current object being transformed.\n */\nfunction pathActionHandler(\n  this: PathPointControl,\n  eventData: TPointerEvent,\n  transform: TTransformAnchor,\n  x: number,\n  y: number,\n) {\n  const { target } = transform;\n  const { commandIndex, pointIndex } = this;\n  const actionPerformed = movePathPoint(\n    target as Path,\n    x,\n    y,\n    commandIndex,\n    pointIndex,\n  );\n  if (actionPerformed) {\n    fireEvent(this.actionName as TModificationEvents, {\n      ...commonEventInfo(eventData, transform, x, y),\n      commandIndex,\n      pointIndex,\n    });\n  }\n  return actionPerformed;\n}\n\nconst indexFromPrevCommand = (previousCommandType: TSimpleParseCommandType) =>\n  previousCommandType === 'C' ? 5 : previousCommandType === 'Q' ? 3 : 1;\n\nclass PathPointControl extends Control {\n  declare commandIndex: number;\n  declare pointIndex: number;\n  declare controlFill: string;\n  declare controlStroke: string;\n  constructor(options?: Partial<PathPointControl>) {\n    super(options);\n  }\n\n  render(\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride | undefined,\n    fabricObject: Path,\n  ) {\n    const overrides: ControlRenderingStyleOverride = {\n      ...styleOverride,\n      cornerColor: this.controlFill,\n      cornerStrokeColor: this.controlStroke,\n      transparentCorners: !this.controlFill,\n    };\n    super.render(ctx, left, top, overrides, fabricObject);\n  }\n}\n\nclass PathControlPointControl extends PathPointControl {\n  declare connectionDashArray?: number[];\n  declare connectToCommandIndex: number;\n  declare connectToPointIndex: number;\n  constructor(options?: Partial<PathControlPointControl>) {\n    super(options);\n  }\n\n  render(\n    this: PathControlPointControl,\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride | undefined,\n    fabricObject: Path,\n  ) {\n    const { path } = fabricObject;\n    const {\n      commandIndex,\n      pointIndex,\n      connectToCommandIndex,\n      connectToPointIndex,\n    } = this;\n    ctx.save();\n    ctx.strokeStyle = this.controlStroke;\n    if (this.connectionDashArray) {\n      ctx.setLineDash(this.connectionDashArray);\n    }\n    const [commandType] = path[commandIndex];\n    const point = calcPathPointPosition(\n      fabricObject,\n      connectToCommandIndex,\n      connectToPointIndex,\n    );\n\n    if (commandType === 'Q') {\n      // one control point connects to 2 points\n      const point2 = calcPathPointPosition(\n        fabricObject,\n        commandIndex,\n        pointIndex + 2,\n      );\n      ctx.moveTo(point2.x, point2.y);\n      ctx.lineTo(left, top);\n    } else {\n      ctx.moveTo(left, top);\n    }\n    ctx.lineTo(point.x, point.y);\n    ctx.stroke();\n    ctx.restore();\n\n    super.render(ctx, left, top, styleOverride, fabricObject);\n  }\n}\n\nconst createControl = (\n  commandIndexPos: number,\n  pointIndexPos: number,\n  isControlPoint: boolean,\n  options: Partial<Control> & {\n    controlPointStyle?: PathPointControlStyle;\n    pointStyle?: PathPointControlStyle;\n  },\n  connectToCommandIndex?: number,\n  connectToPointIndex?: number,\n) =>\n  new (isControlPoint ? PathControlPointControl : PathPointControl)({\n    commandIndex: commandIndexPos,\n    pointIndex: pointIndexPos,\n    actionName: ACTION_NAME,\n    positionHandler: pathPositionHandler,\n    actionHandler: pathActionHandler,\n    connectToCommandIndex,\n    connectToPointIndex,\n    ...options,\n    ...(isControlPoint ? options.controlPointStyle : options.pointStyle),\n  } as Partial<PathControlPointControl>);\n\nexport function createPathControls(\n  path: Path,\n  options: Partial<Control> & {\n    controlPointStyle?: PathPointControlStyle;\n    pointStyle?: PathPointControlStyle;\n  } = {},\n): Record<string, Control> {\n  const controls = {} as Record<string, Control>;\n  let previousCommandType: TSimpleParseCommandType = 'M';\n  path.path.forEach((command, commandIndex) => {\n    const commandType = command[0];\n\n    if (commandType !== 'Z') {\n      controls[`c_${commandIndex}_${commandType}`] = createControl(\n        commandIndex,\n        command.length - 2,\n        false,\n        options,\n      );\n    }\n    switch (commandType) {\n      case 'C':\n        controls[`c_${commandIndex}_C_CP_1`] = createControl(\n          commandIndex,\n          1,\n          true,\n          options,\n          commandIndex - 1,\n          indexFromPrevCommand(previousCommandType),\n        );\n        controls[`c_${commandIndex}_C_CP_2`] = createControl(\n          commandIndex,\n          3,\n          true,\n          options,\n          commandIndex,\n          5,\n        );\n        break;\n      case 'Q':\n        controls[`c_${commandIndex}_Q_CP_1`] = createControl(\n          commandIndex,\n          1,\n          true,\n          options,\n          commandIndex,\n          3,\n        );\n        break;\n    }\n    previousCommandType = commandType;\n  });\n  return controls;\n}\n","import { getFabricWindow } from '../env';\nimport { createCanvasElement, createCanvasElementFor } from '../util/misc/dom';\nimport { WebGLFilterBackend } from './WebGLFilterBackend';\nimport type { TWebGLPipelineState, T2DPipelineState } from './typedefs';\n\nexport const isWebGLPipelineState = (\n  options: TWebGLPipelineState | T2DPipelineState,\n): options is TWebGLPipelineState => {\n  return (options as TWebGLPipelineState).webgl !== undefined;\n};\n\n/**\n * Pick a method to copy data from GL context to 2d canvas.  In some browsers using\n * drawImage should be faster, but is also bugged for a small combination of old hardware\n * and drivers.\n * putImageData is faster than drawImage for that specific operation.\n */\nexport const isPutImageFaster = (width: number, height: number): boolean => {\n  const targetCanvas = createCanvasElementFor({ width, height });\n  const sourceCanvas = createCanvasElement();\n  const gl = sourceCanvas.getContext('webgl')!;\n  // eslint-disable-next-line no-undef\n  const imageBuffer = new ArrayBuffer(width * height * 4);\n\n  const testContext = {\n    imageBuffer: imageBuffer,\n  } as unknown as Required<WebGLFilterBackend>;\n  const testPipelineState = {\n    destinationWidth: width,\n    destinationHeight: height,\n    targetCanvas: targetCanvas,\n  } as unknown as TWebGLPipelineState;\n  let startTime;\n\n  startTime = getFabricWindow().performance.now();\n  WebGLFilterBackend.prototype.copyGLTo2D.call(\n    testContext,\n    gl,\n    testPipelineState,\n  );\n  const drawImageTime = getFabricWindow().performance.now() - startTime;\n\n  startTime = getFabricWindow().performance.now();\n  WebGLFilterBackend.prototype.copyGLTo2DPutImageData.call(\n    testContext,\n    gl,\n    testPipelineState,\n  );\n  const putImageDataTime = getFabricWindow().performance.now() - startTime;\n\n  return drawImageTime > putImageDataTime;\n};\n","export const highPsourceCode = `precision highp float`;\n\nexport const identityFragmentShader = `\n    ${highPsourceCode};\n    varying vec2 vTexCoord;\n    uniform sampler2D uTexture;\n    void main() {\n      gl_FragColor = texture2D(uTexture, vTexCoord);\n    }`;\n\nexport const vertexSource = `\n    attribute vec2 aPosition;\n    varying vec2 vTexCoord;\n    void main() {\n      vTexCoord = aPosition;\n      gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n    }`;\n","import { getEnv } from '../env';\nimport type {\n  T2DPipelineState,\n  TWebGLAttributeLocationMap,\n  TWebGLPipelineState,\n  TWebGLProgramCacheItem,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport {\n  highPsourceCode,\n  identityFragmentShader,\n  vertexSource,\n} from './shaders/baseFilter';\nimport type { Abortable } from '../typedefs';\nimport { FabricError } from '../util/internals/console';\nimport { createCanvasElementFor } from '../util/misc/dom';\n\nconst regex = new RegExp(highPsourceCode, 'g');\n\nexport class BaseFilter<\n  Name extends string,\n  OwnProps extends Record<string, any> = object,\n  SerializedProps extends Record<string, any> = OwnProps,\n> {\n  /**\n   * Filter type\n   * @param {String} type\n   * @default\n   */\n  get type(): Name {\n    return (this.constructor as typeof BaseFilter).type as Name;\n  }\n\n  /**\n   * The class type. Used to identify which class this is.\n   * This is used for serialization purposes and internally it can be used\n   * to identify classes. As a developer you could use `instance of Class`\n   * but to avoid importing all the code and blocking tree shaking we try\n   * to avoid doing that.\n   */\n  static type = 'BaseFilter';\n\n  /**\n   * Contains the uniform locations for the fragment shader.\n   * uStepW and uStepH are handled by the BaseFilter, each filter class\n   * needs to specify all the one that are needed\n   */\n  static uniformLocations: string[] = [];\n\n  declare static defaults: Record<string, unknown>;\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor({\n    type,\n    ...options\n  }: { type?: never } & Partial<OwnProps> & Record<string, any> = {}) {\n    Object.assign(\n      this,\n      (this.constructor as typeof BaseFilter).defaults,\n      options,\n    );\n  }\n\n  protected getFragmentSource(): string {\n    return identityFragmentShader;\n  }\n\n  getVertexSource(): string {\n    return vertexSource;\n  }\n\n  /**\n   * Compile this filter's shader program.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context to use for shader compilation.\n   * @param {String} fragmentSource fragmentShader source for compilation\n   * @param {String} vertexSource vertexShader source for compilation\n   */\n  createProgram(\n    gl: WebGLRenderingContext,\n    fragmentSource: string = this.getFragmentSource(),\n    vertexSource: string = this.getVertexSource(),\n  ) {\n    const {\n      WebGLProbe: { GLPrecision = 'highp' },\n    } = getEnv();\n    if (GLPrecision !== 'highp') {\n      fragmentSource = fragmentSource.replace(\n        regex,\n        highPsourceCode.replace('highp', GLPrecision),\n      );\n    }\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    const program = gl.createProgram();\n\n    if (!vertexShader || !fragmentShader || !program) {\n      throw new FabricError(\n        'Vertex, fragment shader or program creation error',\n      );\n    }\n    gl.shaderSource(vertexShader, vertexSource);\n    gl.compileShader(vertexShader);\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      throw new FabricError(\n        `Vertex shader compile error for ${this.type}: ${gl.getShaderInfoLog(\n          vertexShader,\n        )}`,\n      );\n    }\n\n    gl.shaderSource(fragmentShader, fragmentSource);\n    gl.compileShader(fragmentShader);\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      throw new FabricError(\n        `Fragment shader compile error for ${this.type}: ${gl.getShaderInfoLog(\n          fragmentShader,\n        )}`,\n      );\n    }\n\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      throw new FabricError(\n        `Shader link error for \"${this.type}\" ${gl.getProgramInfoLog(program)}`,\n      );\n    }\n\n    const uniformLocations = this.getUniformLocations(gl, program) || {};\n    uniformLocations.uStepW = gl.getUniformLocation(program, 'uStepW');\n    uniformLocations.uStepH = gl.getUniformLocation(program, 'uStepH');\n\n    return {\n      program,\n      attributeLocations: this.getAttributeLocations(gl, program),\n      uniformLocations,\n    };\n  }\n\n  /**\n   * Return a map of attribute names to WebGLAttributeLocation objects.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {WebGLShaderProgram} program The shader program from which to take attribute locations.\n   * @returns {Object} A map of attribute names to attribute locations.\n   */\n  getAttributeLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n  ): TWebGLAttributeLocationMap {\n    return {\n      aPosition: gl.getAttribLocation(program, 'aPosition'),\n    };\n  }\n\n  /**\n   * Return a map of uniform names to WebGLUniformLocation objects.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {WebGLShaderProgram} program The shader program from which to take uniform locations.\n   * @returns {Object} A map of uniform names to uniform locations.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n  ): TWebGLUniformLocationMap {\n    const locations = (this.constructor as unknown as typeof BaseFilter<string>)\n      .uniformLocations;\n\n    const uniformLocations: Record<string, WebGLUniformLocation | null> = {};\n    for (let i = 0; i < locations.length; i++) {\n      uniformLocations[locations[i]] = gl.getUniformLocation(\n        program,\n        locations[i],\n      );\n    }\n    return uniformLocations;\n  }\n\n  /**\n   * Send attribute data from this filter to its shader program on the GPU.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {Object} attributeLocations A map of shader attribute names to their locations.\n   */\n  sendAttributeData(\n    gl: WebGLRenderingContext,\n    attributeLocations: Record<string, number>,\n    aPositionData: Float32Array,\n  ) {\n    const attributeLocation = attributeLocations.aPosition;\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.enableVertexAttribArray(attributeLocation);\n    gl.vertexAttribPointer(attributeLocation, 2, gl.FLOAT, false, 0, 0);\n    gl.bufferData(gl.ARRAY_BUFFER, aPositionData, gl.STATIC_DRAW);\n  }\n\n  _setupFrameBuffer(options: TWebGLPipelineState) {\n    const gl = options.context;\n    if (options.passes > 1) {\n      const width = options.destinationWidth;\n      const height = options.destinationHeight;\n      if (options.sourceWidth !== width || options.sourceHeight !== height) {\n        gl.deleteTexture(options.targetTexture);\n        options.targetTexture = options.filterBackend.createTexture(\n          gl,\n          width,\n          height,\n        );\n      }\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        options.targetTexture,\n        0,\n      );\n    } else {\n      // draw last filter on canvas and not to framebuffer.\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      gl.finish();\n    }\n  }\n\n  _swapTextures(options: TWebGLPipelineState) {\n    options.passes--;\n    options.pass++;\n    const temp = options.targetTexture;\n    options.targetTexture = options.sourceTexture;\n    options.sourceTexture = temp;\n  }\n\n  /**\n   * Generic isNeutral implementation for one parameter based filters.\n   * Used only in image applyFilters to discard filters that will not have an effect\n   * on the image\n   * Other filters may need their own version ( ColorMatrix, HueRotation, gamma, ComposedFilter )\n   * @param {Object} options\n   **/\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isNeutralState(options?: any): boolean {\n    return false;\n  }\n\n  /**\n   * Apply this filter to the input image data provided.\n   *\n   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      this._setupFrameBuffer(options);\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n    } else {\n      this.applyTo2d(options);\n    }\n  }\n\n  applyTo2d(_options: T2DPipelineState): void {\n    // override by subclass\n  }\n\n  /**\n   * Returns a string that represent the current selected shader code for the filter.\n   * Used to force recompilation when parameters change or to retrieve the shader from cache\n   * @type string\n   **/\n  getCacheKey(): string {\n    return this.type;\n  }\n\n  /**\n   * Retrieves the cached shader.\n   * @param {Object} options\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   * @return {WebGLProgram} the compiled program shader\n   */\n  retrieveShader(options: TWebGLPipelineState): TWebGLProgramCacheItem {\n    const key = this.getCacheKey();\n    if (!options.programCache[key]) {\n      options.programCache[key] = this.createProgram(options.context);\n    }\n    return options.programCache[key];\n  }\n\n  /**\n   * Apply this filter using webgl.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.originalTexture The texture of the original input image.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyToWebGL(options: TWebGLPipelineState) {\n    const gl = options.context;\n    const shader = this.retrieveShader(options);\n    if (options.pass === 0 && options.originalTexture) {\n      gl.bindTexture(gl.TEXTURE_2D, options.originalTexture);\n    } else {\n      gl.bindTexture(gl.TEXTURE_2D, options.sourceTexture);\n    }\n    gl.useProgram(shader.program);\n    this.sendAttributeData(gl, shader.attributeLocations, options.aPosition);\n\n    gl.uniform1f(shader.uniformLocations.uStepW, 1 / options.sourceWidth);\n    gl.uniform1f(shader.uniformLocations.uStepH, 1 / options.sourceHeight);\n\n    this.sendUniformData(gl, shader.uniformLocations);\n    gl.viewport(0, 0, options.destinationWidth, options.destinationHeight);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  }\n\n  bindAdditionalTexture(\n    gl: WebGLRenderingContext,\n    texture: WebGLTexture,\n    textureUnit: number,\n  ) {\n    gl.activeTexture(textureUnit);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // reset active texture to 0 as usual\n    gl.activeTexture(gl.TEXTURE0);\n  }\n\n  unbindAdditionalTexture(gl: WebGLRenderingContext, textureUnit: number) {\n    gl.activeTexture(textureUnit);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.activeTexture(gl.TEXTURE0);\n  }\n\n  /**\n   * Send uniform data from this filter to its shader program on the GPU.\n   *\n   * Intended to be overridden by subclasses.\n   *\n   * @param {WebGLRenderingContext} _gl The canvas context used to compile the shader program.\n   * @param {Object} _uniformLocations A map of shader uniform names to their locations.\n   */\n  sendUniformData(\n    _gl: WebGLRenderingContext,\n    _uniformLocations: TWebGLUniformLocationMap,\n  ): void {\n    // override by subclass\n  }\n\n  /**\n   * If needed by a 2d filter, this functions can create an helper canvas to be used\n   * remember that options.targetCanvas is available for use till end of chain.\n   */\n  createHelpLayer(options: T2DPipelineState) {\n    if (!options.helpLayer) {\n      const { sourceWidth, sourceHeight } = options;\n      const helpLayer = createCanvasElementFor({\n        width: sourceWidth,\n        height: sourceHeight,\n      });\n      options.helpLayer = helpLayer;\n    }\n  }\n\n  /**\n   * Returns object representation of an instance\n   * It will automatically export the default values of a filter,\n   * stored in the static defaults property.\n   * @return {Object} Object representation of an instance\n   */\n  toObject(): { type: Name } & SerializedProps {\n    const defaultKeys = Object.keys(\n      (this.constructor as typeof BaseFilter).defaults || {},\n    ) as (keyof SerializedProps)[];\n\n    return {\n      type: this.type,\n      ...defaultKeys.reduce<SerializedProps>((acc, key) => {\n        acc[key] = this[\n          key as keyof this\n        ] as unknown as (typeof acc)[typeof key];\n        return acc;\n      }, {} as SerializedProps),\n    };\n  }\n\n  /**\n   * Returns a JSON representation of an instance\n   * @return {Object} JSON\n   */\n  toJSON() {\n    // delegate, not alias\n    return this.toObject();\n  }\n\n  static async fromObject(\n    { type, ...filterOptions }: Record<string, any>,\n    _options: Abortable,\n  ): Promise<BaseFilter<string, object>> {\n    return new this(filterOptions);\n  }\n}\n","export const blendColorFragmentSource = {\n  multiply: 'gl_FragColor.rgb *= uColor.rgb;\\n',\n  screen:\n    'gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\\n',\n  add: 'gl_FragColor.rgb += uColor.rgb;\\n',\n  difference: 'gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\\n',\n  subtract: 'gl_FragColor.rgb -= uColor.rgb;\\n',\n  lighten: 'gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\\n',\n  darken: 'gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\\n',\n  exclusion:\n    'gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\\n',\n  overlay: `\n    if (uColor.r < 0.5) {\n      gl_FragColor.r *= 2.0 * uColor.r;\n    } else {\n      gl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\n    }\n    if (uColor.g < 0.5) {\n      gl_FragColor.g *= 2.0 * uColor.g;\n    } else {\n      gl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\n    }\n    if (uColor.b < 0.5) {\n      gl_FragColor.b *= 2.0 * uColor.b;\n    } else {\n      gl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\n    }\n    `,\n  tint: `\n    gl_FragColor.rgb *= (1.0 - uColor.a);\n    gl_FragColor.rgb += uColor.rgb;\n    `,\n} as const;\n","import { Color } from '../color/Color';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { blendColorFragmentSource } from './shaders/blendColor';\n\nexport type TBlendMode =\n  | 'multiply'\n  | 'add'\n  | 'difference'\n  | 'screen'\n  | 'subtract'\n  | 'darken'\n  | 'lighten'\n  | 'overlay'\n  | 'exclusion'\n  | 'tint';\n\ntype BlendColorOwnProps = {\n  color: string;\n  mode: TBlendMode;\n  alpha: number;\n};\n\nexport const blendColorDefaultValues: BlendColorOwnProps = {\n  color: '#F95C63',\n  mode: 'multiply',\n  alpha: 1,\n};\n\n/**\n * Color Blend filter class\n * @example\n * const filter = new BlendColor({\n *  color: '#000',\n *  mode: 'multiply'\n * });\n *\n * const filter = new BlendImage({\n *  image: fabricImageObject,\n *  mode: 'multiply'\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class BlendColor extends BaseFilter<'BlendColor', BlendColorOwnProps> {\n  /**\n   * Color to make the blend operation with. default to a reddish color since black or white\n   * gives always strong result.\n   * @type String\n   * @default\n   **/\n  declare color: BlendColorOwnProps['color'];\n\n  /**\n   * Blend mode for the filter: one of multiply, add, difference, screen, subtract,\n   * darken, lighten, overlay, exclusion, tint.\n   * @type String\n   * @default\n   **/\n  declare mode: BlendColorOwnProps['mode'];\n  /**\n   * alpha value. represent the strength of the blend color operation.\n   * @type Number\n   * @default\n   **/\n  declare alpha: BlendColorOwnProps['alpha'];\n\n  static defaults = blendColorDefaultValues;\n\n  static type = 'BlendColor';\n\n  static uniformLocations = ['uColor'];\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  protected getFragmentSource(): string {\n    return `\n      precision highp float;\n      uniform sampler2D uTexture;\n      uniform vec4 uColor;\n      varying vec2 vTexCoord;\n      void main() {\n        vec4 color = texture2D(uTexture, vTexCoord);\n        gl_FragColor = color;\n        if (color.a > 0.0) {\n          ${blendColorFragmentSource[this.mode]}\n        }\n      }\n      `;\n  }\n\n  /**\n   * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const source = new Color(this.color).getSource();\n    const alpha = this.alpha;\n    const tr = source[0] * alpha;\n    const tg = source[1] * alpha;\n    const tb = source[2] * alpha;\n    const alpha1 = 1 - alpha;\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      let oR, oG, oB;\n      switch (this.mode) {\n        case 'multiply':\n          oR = (r * tr) / 255;\n          oG = (g * tg) / 255;\n          oB = (b * tb) / 255;\n          break;\n        case 'screen':\n          oR = 255 - ((255 - r) * (255 - tr)) / 255;\n          oG = 255 - ((255 - g) * (255 - tg)) / 255;\n          oB = 255 - ((255 - b) * (255 - tb)) / 255;\n          break;\n        case 'add':\n          oR = r + tr;\n          oG = g + tg;\n          oB = b + tb;\n          break;\n        case 'difference':\n          oR = Math.abs(r - tr);\n          oG = Math.abs(g - tg);\n          oB = Math.abs(b - tb);\n          break;\n        case 'subtract':\n          oR = r - tr;\n          oG = g - tg;\n          oB = b - tb;\n          break;\n        case 'darken':\n          oR = Math.min(r, tr);\n          oG = Math.min(g, tg);\n          oB = Math.min(b, tb);\n          break;\n        case 'lighten':\n          oR = Math.max(r, tr);\n          oG = Math.max(g, tg);\n          oB = Math.max(b, tb);\n          break;\n        case 'overlay':\n          oR =\n            tr < 128\n              ? (2 * r * tr) / 255\n              : 255 - (2 * (255 - r) * (255 - tr)) / 255;\n          oG =\n            tg < 128\n              ? (2 * g * tg) / 255\n              : 255 - (2 * (255 - g) * (255 - tg)) / 255;\n          oB =\n            tb < 128\n              ? (2 * b * tb) / 255\n              : 255 - (2 * (255 - b) * (255 - tb)) / 255;\n          break;\n        case 'exclusion':\n          oR = tr + r - (2 * tr * r) / 255;\n          oG = tg + g - (2 * tg * g) / 255;\n          oB = tb + b - (2 * tb * b) / 255;\n          break;\n        case 'tint':\n          oR = tr + r * alpha1;\n          oG = tg + g * alpha1;\n          oB = tb + b * alpha1;\n      }\n      data[i] = oR;\n      data[i + 1] = oG;\n      data[i + 2] = oB;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const source = new Color(this.color).getSource();\n    source[0] = (this.alpha * source[0]) / 255;\n    source[1] = (this.alpha * source[1]) / 255;\n    source[2] = (this.alpha * source[2]) / 255;\n    source[3] = this.alpha;\n    gl.uniform4fv(uniformLocations.uColor, source);\n  }\n}\n\nclassRegistry.setClass(BlendColor);\n","import type { TBlendImageMode } from '../BlendImage';\n\nexport const fragmentSource: Record<TBlendImageMode, string> = {\n  multiply: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform sampler2D uImage;\n    uniform vec4 uColor;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      vec4 color2 = texture2D(uImage, vTexCoord2);\n      color.rgba *= color2.rgba;\n      gl_FragColor = color;\n    }\n    `,\n  mask: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform sampler2D uImage;\n    uniform vec4 uColor;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      vec4 color2 = texture2D(uImage, vTexCoord2);\n      color.a = color2.a;\n      gl_FragColor = color;\n    }\n    `,\n} as const;\n\nexport const vertexSource = `\n    attribute vec2 aPosition;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    uniform mat3 uTransformMatrix;\n    void main() {\n      vTexCoord = aPosition;\n      vTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\n      gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n    }\n    ` as const;\n","import { FabricImage } from '../shapes/Image';\nimport { createCanvasElement } from '../util/misc/dom';\nimport { BaseFilter } from './BaseFilter';\nimport type {\n  T2DPipelineState,\n  TWebGLPipelineState,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport type { WebGLFilterBackend } from './WebGLFilterBackend';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource, vertexSource } from './shaders/blendImage';\n\nexport type TBlendImageMode = 'multiply' | 'mask';\n\ntype BlendImageOwnProps = {\n  mode: TBlendImageMode;\n  alpha: number;\n};\n\nexport const blendImageDefaultValues: BlendImageOwnProps = {\n  mode: 'multiply',\n  alpha: 1,\n};\n\n/**\n * Image Blend filter class\n * @example\n * const filter = new filters.BlendColor({\n *  color: '#000',\n *  mode: 'multiply'\n * });\n *\n * const filter = new BlendImage({\n *  image: fabricImageObject,\n *  mode: 'multiply'\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class BlendImage extends BaseFilter<'BlendImage', BlendImageOwnProps> {\n  /**\n   * Image to make the blend operation with.\n   **/\n  declare image: FabricImage;\n\n  /**\n   * Blend mode for the filter: either 'multiply' or 'mask'. 'multiply' will\n   * multiply the values of each channel (R, G, B, and A) of the filter image by\n   * their corresponding values in the base image. 'mask' will only look at the\n   * alpha channel of the filter image, and apply those values to the base\n   * image's alpha channel.\n   * @type String\n   * @default\n   **/\n  declare mode: BlendImageOwnProps['mode'];\n\n  /**\n   * alpha value. represent the strength of the blend image operation.\n   * not implemented.\n   **/\n  declare alpha: BlendImageOwnProps['alpha'];\n\n  static type = 'BlendImage';\n\n  static defaults = blendImageDefaultValues;\n\n  static uniformLocations = ['uTransformMatrix', 'uImage'];\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  getFragmentSource(): string {\n    return fragmentSource[this.mode];\n  }\n\n  getVertexSource(): string {\n    return vertexSource;\n  }\n\n  applyToWebGL(options: TWebGLPipelineState) {\n    const gl = options.context,\n      texture = this.createTexture(options.filterBackend, this.image);\n    this.bindAdditionalTexture(gl, texture!, gl.TEXTURE1);\n    super.applyToWebGL(options);\n    this.unbindAdditionalTexture(gl, gl.TEXTURE1);\n  }\n\n  createTexture(backend: WebGLFilterBackend, image: FabricImage) {\n    return backend.getCachedTexture(image.cacheKey, image.getElement());\n  }\n\n  /**\n   * Calculate a transformMatrix to adapt the image to blend over\n   * @param {Object} options\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  calculateMatrix() {\n    const image = this.image,\n      { width, height } = image.getElement();\n    return [\n      1 / image.scaleX,\n      0,\n      0,\n      0,\n      1 / image.scaleY,\n      0,\n      -image.left / width,\n      -image.top / height,\n      1,\n    ];\n  }\n\n  /**\n   * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({\n    imageData: { data, width, height },\n    filterBackend: { resources },\n  }: T2DPipelineState) {\n    const image = this.image;\n    if (!resources.blendImage) {\n      resources.blendImage = createCanvasElement();\n    }\n    const canvas1 = resources.blendImage;\n    const context = canvas1.getContext('2d')!;\n    if (canvas1.width !== width || canvas1.height !== height) {\n      canvas1.width = width;\n      canvas1.height = height;\n    } else {\n      context.clearRect(0, 0, width, height);\n    }\n    context.setTransform(\n      image.scaleX,\n      0,\n      0,\n      image.scaleY,\n      image.left,\n      image.top,\n    );\n    context.drawImage(image.getElement(), 0, 0, width, height);\n    const blendData = context.getImageData(0, 0, width, height).data;\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const a = data[i + 3];\n\n      const tr = blendData[i];\n      const tg = blendData[i + 1];\n      const tb = blendData[i + 2];\n      const ta = blendData[i + 3];\n\n      switch (this.mode) {\n        case 'multiply':\n          data[i] = (r * tr) / 255;\n          data[i + 1] = (g * tg) / 255;\n          data[i + 2] = (b * tb) / 255;\n          data[i + 3] = (a * ta) / 255;\n          break;\n        case 'mask':\n          data[i + 3] = ta;\n          break;\n      }\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const matrix = this.calculateMatrix();\n    gl.uniform1i(uniformLocations.uImage, 1); // texture unit 1.\n    gl.uniformMatrix3fv(uniformLocations.uTransformMatrix, false, matrix);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * TODO: Handle the possibility of missing image better.\n   * As of now a BlendImage filter without image can't be used with fromObject\n   * @return {Object} Object representation of an instance\n   */\n  toObject(): {\n    type: 'BlendImage';\n    image: ReturnType<FabricImage['toObject']>;\n  } & BlendImageOwnProps {\n    return {\n      ...super.toObject(),\n      image: this.image && this.image.toObject(),\n    };\n  }\n\n  /**\n   * Create filter instance from an object representation\n   * @static\n   * @param {object} object Object to create an instance from\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting image loading, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<BlendImage>}\n   */\n  static async fromObject(\n    { type, image, ...filterOptions }: Record<string, any>,\n    options: { signal: AbortSignal },\n  ): Promise<BaseFilter<'BlendImage', BlendImageOwnProps>> {\n    return FabricImage.fromObject(image, options).then(\n      (enlivedImage) =>\n        new this({ ...filterOptions, image: enlivedImage }) as BlendImage,\n    );\n  }\n}\n\nclassRegistry.setClass(BlendImage);\n","import { createCanvasElement } from '../util/misc/dom';\nimport { BaseFilter } from './BaseFilter';\nimport type {\n  TWebGLPipelineState,\n  T2DPipelineState,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/blur';\n\ntype BlurOwnProps = {\n  blur: number;\n};\n\nexport const blurDefaultValues: BlurOwnProps = {\n  blur: 0,\n};\n\n/**\n * Blur filter class\n * @example\n * const filter = new Blur({\n *   blur: 0.5\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class Blur extends BaseFilter<'Blur', BlurOwnProps> {\n  /**\n   * blur value, in percentage of image dimensions.\n   * specific to keep the image blur constant at different resolutions\n   * range between 0 and 1.\n   * @type Number\n   * @default\n   */\n  declare blur: BlurOwnProps['blur'];\n\n  declare horizontal: boolean;\n  declare aspectRatio: number;\n\n  static type = 'Blur';\n\n  static defaults = blurDefaultValues;\n\n  static uniformLocations = ['uDelta'];\n\n  getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      // this aspectRatio is used to give the same blur to vertical and horizontal\n      this.aspectRatio = options.sourceWidth / options.sourceHeight;\n      options.passes++;\n      this._setupFrameBuffer(options);\n      this.horizontal = true;\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n      this._setupFrameBuffer(options);\n      this.horizontal = false;\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n    } else {\n      this.applyTo2d(options);\n    }\n  }\n\n  applyTo2d(options: T2DPipelineState) {\n    options.imageData = this.simpleBlur(options);\n  }\n\n  simpleBlur({\n    ctx,\n    imageData,\n    filterBackend: { resources },\n  }: T2DPipelineState) {\n    const { width, height } = imageData;\n    if (!resources.blurLayer1) {\n      resources.blurLayer1 = createCanvasElement();\n      resources.blurLayer2 = createCanvasElement();\n    }\n    const canvas1 = resources.blurLayer1!;\n    const canvas2 = resources.blurLayer2!;\n    if (canvas1.width !== width || canvas1.height !== height) {\n      canvas2.width = canvas1.width = width;\n      canvas2.height = canvas1.height = height;\n    }\n    const ctx1 = canvas1.getContext('2d')!,\n      ctx2 = canvas2.getContext('2d')!,\n      nSamples = 15,\n      blur = this.blur * 0.06 * 0.5;\n    let random, percent, j, i;\n\n    // load first canvas\n    ctx1.putImageData(imageData, 0, 0);\n    ctx2.clearRect(0, 0, width, height);\n\n    for (i = -nSamples; i <= nSamples; i++) {\n      random = (Math.random() - 0.5) / 4;\n      percent = i / nSamples;\n      j = blur * percent * width + random;\n      ctx2.globalAlpha = 1 - Math.abs(percent);\n      ctx2.drawImage(canvas1, j, random);\n      ctx1.drawImage(canvas2, 0, 0);\n      ctx2.globalAlpha = 1;\n      ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n    }\n    for (i = -nSamples; i <= nSamples; i++) {\n      random = (Math.random() - 0.5) / 4;\n      percent = i / nSamples;\n      j = blur * percent * height + random;\n      ctx2.globalAlpha = 1 - Math.abs(percent);\n      ctx2.drawImage(canvas1, random, j);\n      ctx1.drawImage(canvas2, 0, 0);\n      ctx2.globalAlpha = 1;\n      ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n    }\n    ctx.drawImage(canvas1, 0, 0);\n    const newImageData = ctx.getImageData(0, 0, canvas1.width, canvas1.height);\n    ctx1.globalAlpha = 1;\n    ctx1.clearRect(0, 0, canvas1.width, canvas1.height);\n    return newImageData;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const delta = this.chooseRightDelta();\n    gl.uniform2fv(uniformLocations.uDelta, delta);\n  }\n\n  isNeutralState() {\n    return this.blur === 0;\n  }\n\n  /**\n   * choose right value of image percentage to blur with\n   * @returns {Array} a numeric array with delta values\n   */\n  chooseRightDelta() {\n    let blurScale = 1;\n    const delta = [0, 0];\n    if (this.horizontal) {\n      if (this.aspectRatio > 1) {\n        // image is wide, i want to shrink radius horizontal\n        blurScale = 1 / this.aspectRatio;\n      }\n    } else {\n      if (this.aspectRatio < 1) {\n        // image is tall, i want to shrink radius vertical\n        blurScale = this.aspectRatio;\n      }\n    }\n    const blur = blurScale * this.blur * 0.12;\n    if (this.horizontal) {\n      delta[0] = blur;\n    } else {\n      delta[1] = blur;\n    }\n    return delta;\n  }\n}\n\nclassRegistry.setClass(Blur);\n","export const fragmentSource = `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform vec2 uDelta;\n    varying vec2 vTexCoord;\n    const float nSamples = 15.0;\n    vec3 v3offset = vec3(12.9898, 78.233, 151.7182);\n    float random(vec3 scale) {\n      /* use the fragment position for a different seed per-pixel */\n      return fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\n    }\n    void main() {\n      vec4 color = vec4(0.0);\n      float total = 0.0;\n      float offset = random(v3offset);\n      for (float t = -nSamples; t <= nSamples; t++) {\n        float percent = (t + offset - 0.5) / nSamples;\n        float weight = 1.0 - abs(percent);\n        color += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\n        total += weight;\n      }\n      gl_FragColor = color / total;\n    }\n  ` as const;\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/brightness';\n\ntype BrightnessOwnProps = {\n  brightness: number;\n};\n\nexport const brightnessDefaultValues: BrightnessOwnProps = {\n  brightness: 0,\n};\n\n/**\n * Brightness filter class\n * @example\n * const filter = new Brightness({\n *   brightness: 0.05\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Brightness extends BaseFilter<'Brightness', BrightnessOwnProps> {\n  /**\n   * Brightness value, from -1 to 1.\n   * translated to -255 to 255 for 2d\n   * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n   * @param {Number} brightness\n   * @default\n   */\n  declare brightness: BrightnessOwnProps['brightness'];\n\n  static type = 'Brightness';\n\n  static defaults = brightnessDefaultValues;\n\n  static uniformLocations = ['uBrightness'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const brightness = Math.round(this.brightness * 255);\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] += brightness;\n      data[i + 1] += brightness;\n      data[i + 2] += brightness;\n    }\n  }\n\n  isNeutralState() {\n    return this.brightness === 0;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uBrightness, this.brightness);\n  }\n}\n\nclassRegistry.setClass(Brightness);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uBrightness;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color.rgb += uBrightness;\n    gl_FragColor = color;\n  }\n`;\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  varying vec2 vTexCoord;\n  uniform mat4 uColorMatrix;\n  uniform vec4 uConstants;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color *= uColorMatrix;\n    color += uConstants;\n    gl_FragColor = color;\n  }`;\n","import { BaseFilter } from './BaseFilter';\nimport type {\n  T2DPipelineState,\n  TMatColorMatrix,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/colorMatrix';\n\nexport type ColorMatrixOwnProps = {\n  matrix: TMatColorMatrix;\n  colorsOnly: boolean;\n};\n\nexport const colorMatrixDefaultValues: ColorMatrixOwnProps = {\n  matrix: [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0],\n  colorsOnly: true,\n};\n\n/**\n   * Color Matrix filter class\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @see {@Link http://phoboslab.org/log/2013/11/fast-image-filters-with-webgl demo}\n   * @example <caption>Kodachrome filter</caption>\n   * const filter = new ColorMatrix({\n   *  matrix: [\n       1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\n       -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\n       -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\n       0, 0, 0, 1, 0\n      ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\nexport class ColorMatrix<\n  Name extends string = 'ColorMatrix',\n  OwnProps extends object = ColorMatrixOwnProps,\n  SerializedProps extends object = ColorMatrixOwnProps,\n> extends BaseFilter<Name, OwnProps, SerializedProps> {\n  /**\n   * Colormatrix for pixels.\n   * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\n   * outside the -1, 1 range.\n   * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n   * @param {Array} matrix array of 20 numbers.\n   * @default\n   */\n  declare matrix: ColorMatrixOwnProps['matrix'];\n\n  /**\n   * Lock the colormatrix on the color part, skipping alpha, mainly for non webgl scenario\n   * to save some calculation\n   * @type Boolean\n   * @default true\n   */\n  declare colorsOnly: ColorMatrixOwnProps['colorsOnly'];\n\n  static type = 'ColorMatrix';\n\n  static defaults = colorMatrixDefaultValues;\n\n  static uniformLocations = ['uColorMatrix', 'uConstants'];\n\n  getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the ColorMatrix operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d(options: T2DPipelineState) {\n    const imageData = options.imageData,\n      data = imageData.data,\n      m = this.matrix,\n      colorsOnly = this.colorsOnly;\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n\n      data[i] = r * m[0] + g * m[1] + b * m[2] + m[4] * 255;\n      data[i + 1] = r * m[5] + g * m[6] + b * m[7] + m[9] * 255;\n      data[i + 2] = r * m[10] + g * m[11] + b * m[12] + m[14] * 255;\n      if (!colorsOnly) {\n        const a = data[i + 3];\n        data[i] += a * m[3];\n        data[i + 1] += a * m[8];\n        data[i + 2] += a * m[13];\n        data[i + 3] =\n          r * m[15] + g * m[16] + b * m[17] + a * m[18] + m[19] * 255;\n      }\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const m = this.matrix,\n      matrix = [\n        m[0],\n        m[1],\n        m[2],\n        m[3],\n        m[5],\n        m[6],\n        m[7],\n        m[8],\n        m[10],\n        m[11],\n        m[12],\n        m[13],\n        m[15],\n        m[16],\n        m[17],\n        m[18],\n      ],\n      constants = [m[4], m[9], m[14], m[19]];\n    gl.uniformMatrix4fv(uniformLocations.uColorMatrix, false, matrix);\n    gl.uniform4fv(uniformLocations.uConstants, constants);\n  }\n\n  toObject(): { type: Name } & SerializedProps {\n    return {\n      ...super.toObject(),\n      matrix: [...this.matrix] as TMatColorMatrix,\n    };\n  }\n}\n\nclassRegistry.setClass(ColorMatrix);\n","import { ColorMatrix } from './ColorMatrix';\nimport { classRegistry } from '../ClassRegistry';\nimport type { TMatColorMatrix } from './typedefs';\n\ntype FixedFiltersOwnProps = {\n  colorsOnly: boolean;\n};\n\nexport function createColorMatrixFilter(key: string, matrix: TMatColorMatrix) {\n  const newClass = class extends ColorMatrix<\n    typeof key,\n    FixedFiltersOwnProps,\n    FixedFiltersOwnProps\n  > {\n    static type = key;\n\n    static defaults = {\n      colorsOnly: false,\n      matrix,\n    };\n\n    toObject(): { type: string } & FixedFiltersOwnProps {\n      return { type: this.type, colorsOnly: this.colorsOnly };\n    }\n  };\n  classRegistry.setClass(newClass, key);\n  return newClass as typeof ColorMatrix<typeof key, FixedFiltersOwnProps>;\n}\n\nexport const Brownie = createColorMatrixFilter(\n  'Brownie',\n  [\n    0.5997, 0.34553, -0.27082, 0, 0.186, -0.0377, 0.86095, 0.15059, 0, -0.1449,\n    0.24113, -0.07441, 0.44972, 0, -0.02965, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Vintage = createColorMatrixFilter(\n  'Vintage',\n  [\n    0.62793, 0.32021, -0.03965, 0, 0.03784, 0.02578, 0.64411, 0.03259, 0,\n    0.02926, 0.0466, -0.08512, 0.52416, 0, 0.02023, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Kodachrome = createColorMatrixFilter(\n  'Kodachrome',\n  [\n    1.12855, -0.39673, -0.03992, 0, 0.24991, -0.16404, 1.08352, -0.05498, 0,\n    0.09698, -0.16786, -0.56034, 1.60148, 0, 0.13972, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Technicolor = createColorMatrixFilter(\n  'Technicolor',\n  [\n    1.91252, -0.85453, -0.09155, 0, 0.04624, -0.30878, 1.76589, -0.10601, 0,\n    -0.27589, -0.2311, -0.75018, 1.84759, 0, 0.12137, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Polaroid = createColorMatrixFilter(\n  'Polaroid',\n  [\n    1.438, -0.062, -0.062, 0, 0, -0.122, 1.378, -0.122, 0, 0, -0.016, -0.016,\n    1.483, 0, 0, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Sepia = createColorMatrixFilter(\n  'Sepia',\n  [\n    0.393, 0.769, 0.189, 0, 0, 0.349, 0.686, 0.168, 0, 0, 0.272, 0.534, 0.131,\n    0, 0, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const BlackWhite = createColorMatrixFilter(\n  'BlackWhite',\n  [\n    1.5, 1.5, 1.5, 0, -1, 1.5, 1.5, 1.5, 0, -1, 1.5, 1.5, 1.5, 0, -1, 0, 0, 0,\n    1, 0,\n  ],\n);\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLPipelineState } from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport { classRegistry } from '../ClassRegistry';\n\ntype ComposedOwnProps = {\n  subFilters: BaseFilter<string, object, object>[];\n};\n\ntype ComposedSerializedProps = {\n  subFilters: Record<string, unknown>[];\n};\n\n/**\n * A container class that knows how to apply a sequence of filters to an input image.\n */\nexport class Composed extends BaseFilter<\n  'Composed',\n  ComposedOwnProps,\n  ComposedSerializedProps\n> {\n  /**\n   * A non sparse array of filters to apply\n   */\n  declare subFilters: ComposedOwnProps['subFilters'];\n\n  static type = 'Composed';\n\n  constructor(\n    options: { subFilters?: BaseFilter<string, object>[] } & Record<\n      string,\n      any\n    > = {},\n  ) {\n    super(options);\n    this.subFilters = options.subFilters || [];\n  }\n\n  /**\n   * Apply this container's filters to the input image provided.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be applied.\n   */\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      options.passes += this.subFilters.length - 1;\n    }\n    this.subFilters.forEach((filter) => {\n      filter.applyTo(options);\n    });\n  }\n\n  /**\n   * Serialize this filter into JSON.\n   * @returns {Object} A JSON representation of this filter.\n   */\n  toObject() {\n    return {\n      type: this.type,\n      subFilters: this.subFilters.map((filter) => filter.toObject()),\n    };\n  }\n\n  isNeutralState() {\n    return !this.subFilters.some((filter) => !filter.isNeutralState());\n  }\n\n  /**\n   * Deserialize a JSON definition of a ComposedFilter into a concrete instance.\n   * @static\n   * @param {oject} object Object to create an instance from\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting `BlendImage` filter loading, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<Composed>}\n   */\n  static fromObject(\n    object: Record<string, any>,\n    options: { signal: AbortSignal },\n  ): Promise<Composed> {\n    return Promise.all(\n      ((object.subFilters || []) as BaseFilter<string, object>[]).map(\n        (filter) =>\n          classRegistry\n            .getClass<typeof BaseFilter>(filter.type)\n            .fromObject(filter, options),\n      ),\n    ).then(\n      (enlivedFilters) => new this({ subFilters: enlivedFilters }) as Composed,\n    );\n  }\n}\n\nclassRegistry.setClass(Composed);\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/constrast';\n\ntype ContrastOwnProps = {\n  contrast: number;\n};\n\nexport const contrastDefaultValues: ContrastOwnProps = {\n  contrast: 0,\n};\n\n/**\n * Contrast filter class\n * @example\n * const filter = new Contrast({\n *   contrast: 0.25\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Contrast extends BaseFilter<'Contrast', ContrastOwnProps> {\n  /**\n   * contrast value, range from -1 to 1.\n   * @param {Number} contrast\n   * @default 0\n   */\n  declare contrast: ContrastOwnProps['contrast'];\n\n  static type = 'Contrast';\n\n  static defaults = contrastDefaultValues;\n\n  static uniformLocations = ['uContrast'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  isNeutralState() {\n    return this.contrast === 0;\n  }\n\n  /**\n   * Apply the Contrast operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const contrast = Math.floor(this.contrast * 255),\n      contrastF = (259 * (contrast + 255)) / (255 * (259 - contrast));\n\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = contrastF * (data[i] - 128) + 128;\n      data[i + 1] = contrastF * (data[i + 1] - 128) + 128;\n      data[i + 2] = contrastF * (data[i + 2] - 128) + 128;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uContrast, this.contrast);\n  }\n}\n\nclassRegistry.setClass(Contrast);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uContrast;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\n    color.rgb = contrastF * (color.rgb - 0.5) + 0.5;\n    gl_FragColor = color;\n  }`;\n","export const fragmentSource = {\n  Convolute_3_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[9];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 3.0; h+=1.0) {\n        for (float w = 0.0; w < 3.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_3_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[9];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 3.0; h+=1.0) {\n        for (float w = 0.0; w < 3.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n  Convolute_5_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[25];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 5.0; h+=1.0) {\n        for (float w = 0.0; w < 5.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_5_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[25];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 5.0; h+=1.0) {\n        for (float w = 0.0; w < 5.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n  Convolute_7_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[49];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 7.0; h+=1.0) {\n        for (float w = 0.0; w < 7.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_7_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[49];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 7.0; h+=1.0) {\n        for (float w = 0.0; w < 7.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n  Convolute_9_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[81];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 9.0; h+=1.0) {\n        for (float w = 0.0; w < 9.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_9_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[81];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 9.0; h+=1.0) {\n        for (float w = 0.0; w < 9.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n};\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/convolute';\n\nexport type ConvoluteOwnProps = {\n  opaque: boolean;\n  matrix: number[];\n};\n\nexport const convoluteDefaultValues: ConvoluteOwnProps = {\n  opaque: false,\n  matrix: [0, 0, 0, 0, 1, 0, 0, 0, 0],\n};\n\n/**\n * Adapted from <a href=\"http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\">html5rocks article</a>\n * @example <caption>Sharpen filter</caption>\n * const filter = new Convolute({\n *   matrix: [ 0, -1,  0,\n *            -1,  5, -1,\n *             0, -1,  0 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n * @example <caption>Blur filter</caption>\n * const filter = new Convolute({\n *   matrix: [ 1/9, 1/9, 1/9,\n *             1/9, 1/9, 1/9,\n *             1/9, 1/9, 1/9 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n * @example <caption>Emboss filter</caption>\n * const filter = new Convolute({\n *   matrix: [ 1,   1,  1,\n *             1, 0.7, -1,\n *            -1,  -1, -1 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n * @example <caption>Emboss filter with opaqueness</caption>\n * const filter = new Convolute({\n *   opaque: true,\n *   matrix: [ 1,   1,  1,\n *             1, 0.7, -1,\n *            -1,  -1, -1 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class Convolute extends BaseFilter<'Convolute', ConvoluteOwnProps> {\n  /*\n   * Opaque value (true/false)\n   */\n  declare opaque: ConvoluteOwnProps['opaque'];\n\n  /*\n   * matrix for the filter, max 9x9\n   */\n  declare matrix: ConvoluteOwnProps['matrix'];\n\n  static type = 'Convolute';\n\n  static defaults = convoluteDefaultValues;\n\n  static uniformLocations = ['uMatrix', 'uOpaque', 'uHalfSize', 'uSize'];\n\n  getCacheKey() {\n    return `${this.type}_${Math.sqrt(this.matrix.length)}_${\n      this.opaque ? 1 : 0\n    }` as keyof typeof fragmentSource;\n  }\n\n  getFragmentSource() {\n    return fragmentSource[this.getCacheKey()];\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d(options: T2DPipelineState) {\n    const imageData = options.imageData,\n      data = imageData.data,\n      weights = this.matrix,\n      side = Math.round(Math.sqrt(weights.length)),\n      halfSide = Math.floor(side / 2),\n      sw = imageData.width,\n      sh = imageData.height,\n      output = options.ctx.createImageData(sw, sh),\n      dst = output.data,\n      // go through the destination image pixels\n      alphaFac = this.opaque ? 1 : 0;\n    let r, g, b, a, dstOff, scx, scy, srcOff, wt, x, y, cx, cy;\n\n    for (y = 0; y < sh; y++) {\n      for (x = 0; x < sw; x++) {\n        dstOff = (y * sw + x) * 4;\n        // calculate the weighed sum of the source image pixels that\n        // fall under the convolution matrix\n        r = 0;\n        g = 0;\n        b = 0;\n        a = 0;\n\n        for (cy = 0; cy < side; cy++) {\n          for (cx = 0; cx < side; cx++) {\n            scy = y + cy - halfSide;\n            scx = x + cx - halfSide;\n\n            // eslint-disable-next-line max-depth\n            if (scy < 0 || scy >= sh || scx < 0 || scx >= sw) {\n              continue;\n            }\n\n            srcOff = (scy * sw + scx) * 4;\n            wt = weights[cy * side + cx];\n\n            r += data[srcOff] * wt;\n            g += data[srcOff + 1] * wt;\n            b += data[srcOff + 2] * wt;\n            // eslint-disable-next-line max-depth\n            if (!alphaFac) {\n              a += data[srcOff + 3] * wt;\n            }\n          }\n        }\n        dst[dstOff] = r;\n        dst[dstOff + 1] = g;\n        dst[dstOff + 2] = b;\n        if (!alphaFac) {\n          dst[dstOff + 3] = a;\n        } else {\n          dst[dstOff + 3] = data[dstOff + 3];\n        }\n      }\n    }\n    options.imageData = output;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1fv(uniformLocations.uMatrix, this.matrix);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @return {Object} Object representation of an instance\n   */\n  toObject() {\n    return {\n      ...super.toObject(),\n      opaque: this.opaque,\n      matrix: [...this.matrix],\n    };\n  }\n}\n\nclassRegistry.setClass(Convolute);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform vec3 uGamma;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    vec3 correction = (1.0 / uGamma);\n    color.r = pow(color.r, correction.r);\n    color.g = pow(color.g, correction.g);\n    color.b = pow(color.b, correction.b);\n    gl_FragColor = color;\n    gl_FragColor.rgb *= color.a;\n  }\n`;\n","import { BaseFilter } from './BaseFilter';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/gamma';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\n\nconst GAMMA = 'Gamma' as const;\n\nexport type GammaInput = [number, number, number];\n\nexport type GammaOwnProps = {\n  gamma: GammaInput;\n};\n\nexport const gammaDefaultValues: GammaOwnProps = {\n  gamma: [1, 1, 1],\n};\n\n/**\n * Gamma filter class\n * @example\n * const filter = new Gamma({\n *   gamma: [1, 0.5, 2.1]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Gamma extends BaseFilter<typeof GAMMA, GammaOwnProps> {\n  /**\n   * Gamma array value, from 0.01 to 2.2.\n   * @param {Array} gamma\n   * @default\n   */\n  declare gamma: GammaOwnProps['gamma'];\n  declare rgbValues?: {\n    r: Uint8Array;\n    g: Uint8Array;\n    b: Uint8Array;\n  };\n\n  static type = GAMMA;\n\n  static defaults = gammaDefaultValues;\n\n  static uniformLocations = ['uGamma'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  constructor(options: { gamma?: GammaInput } = {}) {\n    super(options);\n    this.gamma =\n      options.gamma ||\n      ((\n        this.constructor as typeof Gamma\n      ).defaults.gamma.concat() as GammaInput);\n  }\n\n  /**\n   * Apply the Gamma operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const gamma = this.gamma,\n      rInv = 1 / gamma[0],\n      gInv = 1 / gamma[1],\n      bInv = 1 / gamma[2];\n\n    if (!this.rgbValues) {\n      this.rgbValues = {\n        r: new Uint8Array(256),\n        g: new Uint8Array(256),\n        b: new Uint8Array(256),\n      };\n    }\n\n    // This is an optimization - pre-compute a look-up table for each color channel\n    // instead of performing these pow calls for each pixel in the image.\n    const rgb = this.rgbValues;\n    for (let i = 0; i < 256; i++) {\n      rgb.r[i] = Math.pow(i / 255, rInv) * 255;\n      rgb.g[i] = Math.pow(i / 255, gInv) * 255;\n      rgb.b[i] = Math.pow(i / 255, bInv) * 255;\n    }\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = rgb.r[data[i]];\n      data[i + 1] = rgb.g[data[i + 1]];\n      data[i + 2] = rgb.b[data[i + 2]];\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform3fv(uniformLocations.uGamma, this.gamma);\n  }\n\n  isNeutralState() {\n    const { gamma } = this;\n    return gamma[0] === 1 && gamma[1] === 1 && gamma[2] === 1;\n  }\n\n  toObject(): { type: typeof GAMMA; gamma: GammaInput } {\n    return {\n      type: GAMMA,\n      gamma: this.gamma.concat() as GammaInput,\n    };\n  }\n}\n\nclassRegistry.setClass(Gamma);\n","import type { TGrayscaleMode } from '../Grayscale';\n\nexport const fragmentSource: Record<TGrayscaleMode, string> = {\n  average: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      float average = (color.r + color.b + color.g) / 3.0;\n      gl_FragColor = vec4(average, average, average, color.a);\n    }\n    `,\n  lightness: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform int uMode;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 col = texture2D(uTexture, vTexCoord);\n      float average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\n      gl_FragColor = vec4(average, average, average, col.a);\n    }\n    `,\n  luminosity: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform int uMode;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 col = texture2D(uTexture, vTexCoord);\n      float average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\n      gl_FragColor = vec4(average, average, average, col.a);\n    }\n    `,\n};\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/grayscale';\n\nexport type TGrayscaleMode = 'average' | 'lightness' | 'luminosity';\n\ntype GrayscaleOwnProps = {\n  mode: TGrayscaleMode;\n};\n\nexport const grayscaleDefaultValues: GrayscaleOwnProps = {\n  mode: 'average',\n};\n\n/**\n * Grayscale image filter class\n * @example\n * const filter = new Grayscale();\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Grayscale extends BaseFilter<'Grayscale', GrayscaleOwnProps> {\n  declare mode: TGrayscaleMode;\n\n  static type = 'Grayscale';\n\n  static defaults = grayscaleDefaultValues;\n\n  static uniformLocations = ['uMode'];\n\n  /**\n   * Apply the Grayscale operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    for (let i = 0, value: number; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      switch (this.mode) {\n        case 'average':\n          value = (r + g + b) / 3;\n          break;\n        case 'lightness':\n          value = (Math.min(r, g, b) + Math.max(r, g, b)) / 2;\n          break;\n        case 'luminosity':\n          value = 0.21 * r + 0.72 * g + 0.07 * b;\n          break;\n      }\n\n      data[i + 2] = data[i + 1] = data[i] = value;\n    }\n  }\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  getFragmentSource() {\n    return fragmentSource[this.mode];\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const mode = 1;\n    gl.uniform1i(uniformLocations.uMode, mode);\n  }\n\n  /**\n   * Grayscale filter isNeutralState implementation\n   * The filter is never neutral\n   * on the image\n   **/\n  isNeutralState() {\n    return false;\n  }\n}\n\nclassRegistry.setClass(Grayscale);\n","import { cos } from '../util/misc/cos';\nimport { sin } from '../util/misc/sin';\nimport {\n  ColorMatrix,\n  type ColorMatrixOwnProps,\n  colorMatrixDefaultValues,\n} from './ColorMatrix';\nimport type { TWebGLPipelineState, T2DPipelineState } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\n\nexport type HueRotationOwnProps = ColorMatrixOwnProps & {\n  rotation: number;\n};\n\nexport type HueRotationSerializedProps = {\n  rotation: number;\n};\n\nexport const hueRotationDefaultValues: HueRotationOwnProps = {\n  ...colorMatrixDefaultValues,\n  rotation: 0,\n};\n\n/**\n * HueRotation filter class\n * @example\n * const filter = new HueRotation({\n *   rotation: -0.5\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class HueRotation extends ColorMatrix<\n  'HueRotation',\n  HueRotationOwnProps,\n  HueRotationSerializedProps\n> {\n  /**\n   * HueRotation value, from -1 to 1.\n   */\n  declare rotation: HueRotationOwnProps['rotation'];\n\n  static type = 'HueRotation';\n\n  static defaults = hueRotationDefaultValues;\n\n  calculateMatrix() {\n    const rad = this.rotation * Math.PI,\n      cosine = cos(rad),\n      sine = sin(rad),\n      aThird = 1 / 3,\n      aThirdSqtSin = Math.sqrt(aThird) * sine,\n      OneMinusCos = 1 - cosine;\n    this.matrix = [\n      cosine + OneMinusCos / 3,\n      aThird * OneMinusCos - aThirdSqtSin,\n      aThird * OneMinusCos + aThirdSqtSin,\n      0,\n      0,\n      aThird * OneMinusCos + aThirdSqtSin,\n      cosine + aThird * OneMinusCos,\n      aThird * OneMinusCos - aThirdSqtSin,\n      0,\n      0,\n      aThird * OneMinusCos - aThirdSqtSin,\n      aThird * OneMinusCos + aThirdSqtSin,\n      cosine + aThird * OneMinusCos,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n    ];\n  }\n\n  isNeutralState() {\n    return this.rotation === 0;\n  }\n\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    this.calculateMatrix();\n    super.applyTo(options);\n  }\n\n  toObject() {\n    return {\n      type: this.type,\n      rotation: this.rotation,\n    };\n  }\n}\n\nclassRegistry.setClass(HueRotation);\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/invert';\n\nexport type InvertOwnProps = {\n  alpha: boolean;\n  invert: boolean;\n};\n\nexport const invertDefaultValues: InvertOwnProps = {\n  alpha: false,\n  invert: true,\n};\n\n/**\n * @example\n * const filter = new Invert();\n * object.filters.push(filter);\n * object.applyFilters(canvas.renderAll.bind(canvas));\n */\nexport class Invert extends BaseFilter<'Invert', InvertOwnProps> {\n  /**\n   * Invert also alpha.\n   * @param {Boolean} alpha\n   * @default\n   **/\n  declare alpha: InvertOwnProps['alpha'];\n\n  /**\n   * Filter invert. if false, does nothing\n   * @param {Boolean} invert\n   * @default\n   */\n  declare invert: InvertOwnProps['invert'];\n\n  static type = 'Invert';\n\n  static defaults = invertDefaultValues;\n\n  static uniformLocations = ['uInvert', 'uAlpha'];\n\n  /**\n   * Apply the Invert operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = 255 - data[i];\n      data[i + 1] = 255 - data[i + 1];\n      data[i + 2] = 255 - data[i + 2];\n\n      if (this.alpha) {\n        data[i + 3] = 255 - data[i + 3];\n      }\n    }\n  }\n\n  protected getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Invert filter isNeutralState implementation\n   * Used only in image applyFilters to discard filters that will not have an effect\n   * on the image\n   * @param {Object} options\n   **/\n  isNeutralState() {\n    return !this.invert;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1i(uniformLocations.uInvert, Number(this.invert));\n    gl.uniform1i(uniformLocations.uAlpha, Number(this.alpha));\n  }\n}\n\nclassRegistry.setClass(Invert);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform int uInvert;\n  uniform int uAlpha;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    if (uInvert == 1) {\n      if (uAlpha == 1) {\n        gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,1.0 -color.a);\n      } else {\n        gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\n      }\n    } else {\n      gl_FragColor = color;\n    }\n  }\n`;\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/noise';\n\nexport type NoiseOwnProps = {\n  noise: number;\n};\n\nexport const noiseDefaultValues: NoiseOwnProps = {\n  noise: 0,\n};\n\n/**\n * Noise filter class\n * @example\n * const filter = new Noise({\n *   noise: 700\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class Noise extends BaseFilter<'Noise', NoiseOwnProps> {\n  /**\n   * Noise value, from\n   * @param {Number} noise\n   * @default\n   */\n  declare noise: NoiseOwnProps['noise'];\n\n  static type = 'Noise';\n\n  static defaults = noiseDefaultValues;\n\n  static uniformLocations = ['uNoise', 'uSeed'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const noise = this.noise;\n    for (let i = 0; i < data.length; i += 4) {\n      const rand = (0.5 - Math.random()) * noise;\n      data[i] += rand;\n      data[i + 1] += rand;\n      data[i + 2] += rand;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uNoise, this.noise / 255);\n    gl.uniform1f(uniformLocations.uSeed, Math.random());\n  }\n\n  isNeutralState() {\n    return this.noise === 0;\n  }\n}\n\nclassRegistry.setClass(Noise);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uStepH;\n  uniform float uNoise;\n  uniform float uSeed;\n  varying vec2 vTexCoord;\n  float rand(vec2 co, float seed, float vScale) {\n    return fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\n  }\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\n    gl_FragColor = color;\n  }\n`;\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/pixelate';\n\nexport type PixelateOwnProps = {\n  blocksize: number;\n};\n\nexport const pixelateDefaultValues: PixelateOwnProps = {\n  blocksize: 4,\n};\n\n/**\n * Pixelate filter class\n * @example\n * const filter = new Pixelate({\n *   blocksize: 8\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Pixelate extends BaseFilter<'Pixelate', PixelateOwnProps> {\n  declare blocksize: PixelateOwnProps['blocksize'];\n\n  static type = 'Pixelate';\n\n  static defaults = pixelateDefaultValues;\n\n  static uniformLocations = ['uBlocksize'];\n\n  /**\n   * Apply the Pixelate operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data, width, height } }: T2DPipelineState) {\n    for (let i = 0; i < height; i += this.blocksize) {\n      for (let j = 0; j < width; j += this.blocksize) {\n        const index = i * 4 * width + j * 4;\n        const r = data[index];\n        const g = data[index + 1];\n        const b = data[index + 2];\n        const a = data[index + 3];\n\n        for (let _i = i; _i < Math.min(i + this.blocksize, height); _i++) {\n          for (let _j = j; _j < Math.min(j + this.blocksize, width); _j++) {\n            const index = _i * 4 * width + _j * 4;\n            data[index] = r;\n            data[index + 1] = g;\n            data[index + 2] = b;\n            data[index + 3] = a;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Indicate when the filter is not gonna apply changes to the image\n   **/\n  isNeutralState() {\n    return this.blocksize === 1;\n  }\n\n  protected getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uBlocksize, this.blocksize);\n  }\n}\n\nclassRegistry.setClass(Pixelate);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uBlocksize;\n  uniform float uStepW;\n  uniform float uStepH;\n  varying vec2 vTexCoord;\n  void main() {\n    float blockW = uBlocksize * uStepW;\n    float blockH = uBlocksize * uStepH;\n    int posX = int(vTexCoord.x / blockW);\n    int posY = int(vTexCoord.y / blockH);\n    float fposX = float(posX);\n    float fposY = float(posY);\n    vec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\n    vec4 color = texture2D(uTexture, squareCoords);\n    gl_FragColor = color;\n  }\n`;\n","import { classRegistry } from '../ClassRegistry';\nimport { Color } from '../color/Color';\nimport { BaseFilter } from './BaseFilter';\nimport { fragmentShader } from './shaders/removeColor';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\n\nexport type RemoveColorOwnProps = {\n  color: string;\n  distance: number;\n  useAlpha: boolean;\n};\n\nexport const removeColorDefaultValues: RemoveColorOwnProps = {\n  color: '#FFFFFF',\n  distance: 0.02,\n  useAlpha: false,\n};\n\n/**\n * Remove white filter class\n * @example\n * const filter = new RemoveColor({\n *   threshold: 0.2,\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class RemoveColor extends BaseFilter<\n  'RemoveColor',\n  RemoveColorOwnProps\n> {\n  /**\n   * Color to remove, in any format understood by {@link Color}.\n   * @param {String} type\n   * @default\n   */\n  declare color: RemoveColorOwnProps['color'];\n\n  /**\n   * distance to actual color, as value up or down from each r,g,b\n   * between 0 and 1\n   **/\n  declare distance: RemoveColorOwnProps['distance'];\n\n  /**\n   * For color to remove inside distance, use alpha channel for a smoother deletion\n   * NOT IMPLEMENTED YET\n   **/\n  declare useAlpha: RemoveColorOwnProps['useAlpha'];\n\n  static type = 'RemoveColor';\n\n  static defaults = removeColorDefaultValues;\n\n  static uniformLocations = ['uLow', 'uHigh'];\n\n  getFragmentSource() {\n    return fragmentShader;\n  }\n\n  /**\n   * Applies filter to canvas element\n   * @param {Object} canvasEl Canvas element to apply filter to\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const distance = this.distance * 255,\n      source = new Color(this.color).getSource(),\n      lowC = [source[0] - distance, source[1] - distance, source[2] - distance],\n      highC = [\n        source[0] + distance,\n        source[1] + distance,\n        source[2] + distance,\n      ];\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n\n      if (\n        r > lowC[0] &&\n        g > lowC[1] &&\n        b > lowC[2] &&\n        r < highC[0] &&\n        g < highC[1] &&\n        b < highC[2]\n      ) {\n        data[i + 3] = 0;\n      }\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const source = new Color(this.color).getSource(),\n      distance = this.distance,\n      lowC = [\n        0 + source[0] / 255 - distance,\n        0 + source[1] / 255 - distance,\n        0 + source[2] / 255 - distance,\n        1,\n      ],\n      highC = [\n        source[0] / 255 + distance,\n        source[1] / 255 + distance,\n        source[2] / 255 + distance,\n        1,\n      ];\n    gl.uniform4fv(uniformLocations.uLow, lowC);\n    gl.uniform4fv(uniformLocations.uHigh, highC);\n  }\n}\n\nclassRegistry.setClass(RemoveColor);\n","export const fragmentShader = `\nprecision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uLow;\nuniform vec4 uHigh;\nvarying vec2 vTexCoord;\nvoid main() {\n  gl_FragColor = texture2D(uTexture, vTexCoord);\n  if(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\n    gl_FragColor.a = 0.0;\n  }\n}\n`;\n","import { BaseFilter } from './BaseFilter';\nimport type {\n  T2DPipelineState,\n  TWebGLPipelineState,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport { classRegistry } from '../ClassRegistry';\nimport { createCanvasElement } from '../util/misc/dom';\nimport type { XY } from '../Point';\n\nexport type TResizeType = 'bilinear' | 'hermite' | 'sliceHack' | 'lanczos';\n\nexport type ResizeOwnProps = {\n  resizeType: TResizeType;\n  scaleX: number;\n  scaleY: number;\n  lanczosLobes: number;\n};\n\nexport const resizeDefaultValues: ResizeOwnProps = {\n  resizeType: 'hermite',\n  scaleX: 1,\n  scaleY: 1,\n  lanczosLobes: 3,\n};\n\ntype ResizeDuring2DResize = Resize & {\n  rcpScaleX: number;\n  rcpScaleY: number;\n};\n\ntype ResizeDuringWEBGLResize = Resize & {\n  rcpScaleX: number;\n  rcpScaleY: number;\n  horizontal: boolean;\n  width: number;\n  height: number;\n  taps: number[];\n  tempScale: number;\n  dH: number;\n  dW: number;\n};\n\n/**\n * Resize image filter class\n * @example\n * const filter = new Resize();\n * object.filters.push(filter);\n * object.applyFilters(canvas.renderAll.bind(canvas));\n */\nexport class Resize extends BaseFilter<'Resize', ResizeOwnProps> {\n  /**\n   * Resize type\n   * for webgl resizeType is just lanczos, for canvas2d can be:\n   * bilinear, hermite, sliceHack, lanczos.\n   * @default\n   */\n  declare resizeType: ResizeOwnProps['resizeType'];\n\n  /**\n   * Scale factor for resizing, x axis\n   * @param {Number} scaleX\n   * @default\n   */\n  declare scaleX: ResizeOwnProps['scaleX'];\n\n  /**\n   * Scale factor for resizing, y axis\n   * @param {Number} scaleY\n   * @default\n   */\n  declare scaleY: ResizeOwnProps['scaleY'];\n\n  /**\n   * LanczosLobes parameter for lanczos filter, valid for resizeType lanczos\n   * @param {Number} lanczosLobes\n   * @default\n   */\n  declare lanczosLobes: ResizeOwnProps['lanczosLobes'];\n\n  static type = 'Resize';\n\n  static defaults = resizeDefaultValues;\n\n  static uniformLocations = ['uDelta', 'uTaps'];\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    this: ResizeDuringWEBGLResize,\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform2fv(\n      uniformLocations.uDelta,\n      this.horizontal ? [1 / this.width, 0] : [0, 1 / this.height],\n    );\n    gl.uniform1fv(uniformLocations.uTaps, this.taps);\n  }\n\n  getFilterWindow(this: ResizeDuringWEBGLResize) {\n    const scale = this.tempScale;\n    return Math.ceil(this.lanczosLobes / scale);\n  }\n\n  getCacheKey(this: ResizeDuringWEBGLResize): string {\n    const filterWindow = this.getFilterWindow();\n    return `${this.type}_${filterWindow}`;\n  }\n\n  getFragmentSource(this: ResizeDuringWEBGLResize): string {\n    const filterWindow = this.getFilterWindow();\n    return this.generateShader(filterWindow);\n  }\n\n  getTaps(this: ResizeDuringWEBGLResize) {\n    const lobeFunction = this.lanczosCreate(this.lanczosLobes),\n      scale = this.tempScale,\n      filterWindow = this.getFilterWindow(),\n      taps = new Array(filterWindow);\n    for (let i = 1; i <= filterWindow; i++) {\n      taps[i - 1] = lobeFunction(i * scale);\n    }\n    return taps;\n  }\n\n  /**\n   * Generate vertex and shader sources from the necessary steps numbers\n   * @param {Number} filterWindow\n   */\n  generateShader(filterWindow: number) {\n    const offsets = new Array(filterWindow);\n    for (let i = 1; i <= filterWindow; i++) {\n      offsets[i - 1] = `${i}.0 * uDelta`;\n    }\n    return `\n      precision highp float;\n      uniform sampler2D uTexture;\n      uniform vec2 uDelta;\n      varying vec2 vTexCoord;\n      uniform float uTaps[${filterWindow}];\n      void main() {\n        vec4 color = texture2D(uTexture, vTexCoord);\n        float sum = 1.0;\n        ${offsets\n          .map(\n            (offset, i) => `\n              color += texture2D(uTexture, vTexCoord + ${offset}) * uTaps[${i}] + texture2D(uTexture, vTexCoord - ${offset}) * uTaps[${i}];\n              sum += 2.0 * uTaps[${i}];\n            `,\n          )\n          .join('\\n')}\n        gl_FragColor = color / sum;\n      }\n    `;\n  }\n\n  applyToForWebgl(this: ResizeDuringWEBGLResize, options: TWebGLPipelineState) {\n    options.passes++;\n    this.width = options.sourceWidth;\n    this.horizontal = true;\n    this.dW = Math.round(this.width * this.scaleX);\n    this.dH = options.sourceHeight;\n    this.tempScale = this.dW / this.width;\n    this.taps = this.getTaps();\n    options.destinationWidth = this.dW;\n    super.applyTo(options);\n    options.sourceWidth = options.destinationWidth;\n\n    this.height = options.sourceHeight;\n    this.horizontal = false;\n    this.dH = Math.round(this.height * this.scaleY);\n    this.tempScale = this.dH / this.height;\n    this.taps = this.getTaps();\n    options.destinationHeight = this.dH;\n    super.applyTo(options);\n    options.sourceHeight = options.destinationHeight;\n  }\n\n  /**\n   * Apply the resize filter to the image\n   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      (this as unknown as ResizeDuringWEBGLResize).applyToForWebgl(options);\n    } else {\n      (this as unknown as ResizeDuring2DResize).applyTo2d(options);\n    }\n  }\n\n  isNeutralState() {\n    return this.scaleX === 1 && this.scaleY === 1;\n  }\n\n  lanczosCreate(lobes: number) {\n    return (x: number) => {\n      if (x >= lobes || x <= -lobes) {\n        return 0.0;\n      }\n      if (x < 1.1920929e-7 && x > -1.1920929e-7) {\n        return 1.0;\n      }\n      x *= Math.PI;\n      const xx = x / lobes;\n      return ((Math.sin(x) / x) * Math.sin(xx)) / xx;\n    };\n  }\n\n  applyTo2d(this: ResizeDuring2DResize, options: T2DPipelineState) {\n    const imageData = options.imageData,\n      scaleX = this.scaleX,\n      scaleY = this.scaleY;\n\n    this.rcpScaleX = 1 / scaleX;\n    this.rcpScaleY = 1 / scaleY;\n\n    const oW = imageData.width;\n    const oH = imageData.height;\n    const dW = Math.round(oW * scaleX);\n    const dH = Math.round(oH * scaleY);\n    let newData: ImageData;\n\n    if (this.resizeType === 'sliceHack') {\n      newData = this.sliceByTwo(options, oW, oH, dW, dH);\n    } else if (this.resizeType === 'hermite') {\n      newData = this.hermiteFastResize(options, oW, oH, dW, dH);\n    } else if (this.resizeType === 'bilinear') {\n      newData = this.bilinearFiltering(options, oW, oH, dW, dH);\n    } else if (this.resizeType === 'lanczos') {\n      newData = this.lanczosResize(options, oW, oH, dW, dH);\n    } else {\n      // this should never trigger, is here just for safety net.\n      newData = new ImageData(dW, dH);\n    }\n    options.imageData = newData;\n  }\n\n  /**\n   * Filter sliceByTwo\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  sliceByTwo(\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ) {\n    const imageData = options.imageData;\n    const mult = 0.5;\n    let doneW = false;\n    let doneH = false;\n    let stepW = oW * mult;\n    let stepH = oH * mult;\n    const resources = options.filterBackend.resources;\n    let sX = 0;\n    let sY = 0;\n    const dX = oW;\n    let dY = 0;\n    if (!resources.sliceByTwo) {\n      resources.sliceByTwo = createCanvasElement();\n    }\n    const tmpCanvas = resources.sliceByTwo;\n    if (tmpCanvas.width < oW * 1.5 || tmpCanvas.height < oH) {\n      tmpCanvas.width = oW * 1.5;\n      tmpCanvas.height = oH;\n    }\n    const ctx = tmpCanvas.getContext('2d')!;\n    ctx.clearRect(0, 0, oW * 1.5, oH);\n    ctx.putImageData(imageData, 0, 0);\n\n    dW = Math.floor(dW);\n    dH = Math.floor(dH);\n\n    while (!doneW || !doneH) {\n      oW = stepW;\n      oH = stepH;\n      if (dW < Math.floor(stepW * mult)) {\n        stepW = Math.floor(stepW * mult);\n      } else {\n        stepW = dW;\n        doneW = true;\n      }\n      if (dH < Math.floor(stepH * mult)) {\n        stepH = Math.floor(stepH * mult);\n      } else {\n        stepH = dH;\n        doneH = true;\n      }\n      ctx.drawImage(tmpCanvas, sX, sY, oW, oH, dX, dY, stepW, stepH);\n      sX = dX;\n      sY = dY;\n      dY += stepH;\n    }\n    return ctx.getImageData(sX, sY, dW, dH);\n  }\n\n  /**\n   * Filter lanczosResize\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  lanczosResize(\n    this: ResizeDuring2DResize,\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ): ImageData {\n    function process(u: number): ImageData {\n      let v, i, weight, idx, a, red, green, blue, alpha, fX, fY;\n      center.x = (u + 0.5) * ratioX;\n      icenter.x = Math.floor(center.x);\n      for (v = 0; v < dH; v++) {\n        center.y = (v + 0.5) * ratioY;\n        icenter.y = Math.floor(center.y);\n        a = 0;\n        red = 0;\n        green = 0;\n        blue = 0;\n        alpha = 0;\n        for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {\n          if (i < 0 || i >= oW) {\n            continue;\n          }\n          fX = Math.floor(1000 * Math.abs(i - center.x));\n          if (!cacheLanc[fX]) {\n            cacheLanc[fX] = {};\n          }\n          for (let j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {\n            if (j < 0 || j >= oH) {\n              continue;\n            }\n            fY = Math.floor(1000 * Math.abs(j - center.y));\n            if (!cacheLanc[fX][fY]) {\n              cacheLanc[fX][fY] = lanczos(\n                Math.sqrt(\n                  Math.pow(fX * rcpRatioX, 2) + Math.pow(fY * rcpRatioY, 2),\n                ) / 1000,\n              );\n            }\n            weight = cacheLanc[fX][fY];\n            if (weight > 0) {\n              idx = (j * oW + i) * 4;\n              a += weight;\n              red += weight * srcData[idx];\n              green += weight * srcData[idx + 1];\n              blue += weight * srcData[idx + 2];\n              alpha += weight * srcData[idx + 3];\n            }\n          }\n        }\n        idx = (v * dW + u) * 4;\n        destData[idx] = red / a;\n        destData[idx + 1] = green / a;\n        destData[idx + 2] = blue / a;\n        destData[idx + 3] = alpha / a;\n      }\n\n      if (++u < dW) {\n        return process(u);\n      } else {\n        return destImg;\n      }\n    }\n\n    const srcData = options.imageData.data,\n      destImg = options.ctx.createImageData(dW, dH),\n      destData = destImg.data,\n      lanczos = this.lanczosCreate(this.lanczosLobes),\n      ratioX = this.rcpScaleX,\n      ratioY = this.rcpScaleY,\n      rcpRatioX = 2 / this.rcpScaleX,\n      rcpRatioY = 2 / this.rcpScaleY,\n      range2X = Math.ceil((ratioX * this.lanczosLobes) / 2),\n      range2Y = Math.ceil((ratioY * this.lanczosLobes) / 2),\n      cacheLanc: Record<number, Record<number, number>> = {},\n      center: XY = { x: 0, y: 0 },\n      icenter: XY = { x: 0, y: 0 };\n\n    return process(0);\n  }\n\n  /**\n   * bilinearFiltering\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  bilinearFiltering(\n    this: ResizeDuring2DResize,\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ) {\n    let a;\n    let b;\n    let c;\n    let d;\n    let x;\n    let y;\n    let i;\n    let j;\n    let xDiff;\n    let yDiff;\n    let chnl;\n    let color;\n    let offset = 0;\n    let origPix;\n    const ratioX = this.rcpScaleX;\n    const ratioY = this.rcpScaleY;\n    const w4 = 4 * (oW - 1);\n    const img = options.imageData;\n    const pixels = img.data;\n    const destImage = options.ctx.createImageData(dW, dH);\n    const destPixels = destImage.data;\n    for (i = 0; i < dH; i++) {\n      for (j = 0; j < dW; j++) {\n        x = Math.floor(ratioX * j);\n        y = Math.floor(ratioY * i);\n        xDiff = ratioX * j - x;\n        yDiff = ratioY * i - y;\n        origPix = 4 * (y * oW + x);\n\n        for (chnl = 0; chnl < 4; chnl++) {\n          a = pixels[origPix + chnl];\n          b = pixels[origPix + 4 + chnl];\n          c = pixels[origPix + w4 + chnl];\n          d = pixels[origPix + w4 + 4 + chnl];\n          color =\n            a * (1 - xDiff) * (1 - yDiff) +\n            b * xDiff * (1 - yDiff) +\n            c * yDiff * (1 - xDiff) +\n            d * xDiff * yDiff;\n          destPixels[offset++] = color;\n        }\n      }\n    }\n    return destImage;\n  }\n\n  /**\n   * hermiteFastResize\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  hermiteFastResize(\n    this: ResizeDuring2DResize,\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ) {\n    const ratioW = this.rcpScaleX,\n      ratioH = this.rcpScaleY,\n      ratioWHalf = Math.ceil(ratioW / 2),\n      ratioHHalf = Math.ceil(ratioH / 2),\n      img = options.imageData,\n      data = img.data,\n      img2 = options.ctx.createImageData(dW, dH),\n      data2 = img2.data;\n    for (let j = 0; j < dH; j++) {\n      for (let i = 0; i < dW; i++) {\n        const x2 = (i + j * dW) * 4;\n        let weight = 0;\n        let weights = 0;\n        let weightsAlpha = 0;\n        let gxR = 0;\n        let gxG = 0;\n        let gxB = 0;\n        let gxA = 0;\n        const centerY = (j + 0.5) * ratioH;\n        for (let yy = Math.floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {\n          const dy = Math.abs(centerY - (yy + 0.5)) / ratioHHalf,\n            centerX = (i + 0.5) * ratioW,\n            w0 = dy * dy;\n          for (let xx = Math.floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {\n            let dx = Math.abs(centerX - (xx + 0.5)) / ratioWHalf;\n            const w = Math.sqrt(w0 + dx * dx);\n            /* eslint-disable max-depth */\n            if (w > 1 && w < -1) {\n              continue;\n            }\n            //hermite filter\n            weight = 2 * w * w * w - 3 * w * w + 1;\n            if (weight > 0) {\n              dx = 4 * (xx + yy * oW);\n              //alpha\n              gxA += weight * data[dx + 3];\n              weightsAlpha += weight;\n              //colors\n              if (data[dx + 3] < 255) {\n                weight = (weight * data[dx + 3]) / 250;\n              }\n              gxR += weight * data[dx];\n              gxG += weight * data[dx + 1];\n              gxB += weight * data[dx + 2];\n              weights += weight;\n            }\n            /* eslint-enable max-depth */\n          }\n        }\n        data2[x2] = gxR / weights;\n        data2[x2 + 1] = gxG / weights;\n        data2[x2 + 2] = gxB / weights;\n        data2[x2 + 3] = gxA / weightsAlpha;\n      }\n    }\n    return img2;\n  }\n}\n\nclassRegistry.setClass(Resize);\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/saturation';\n\nexport type SaturationOwnProps = {\n  saturation: number;\n};\n\nexport const saturationDefaultValues: SaturationOwnProps = {\n  saturation: 0,\n};\n\n/**\n * Saturate filter class\n * @example\n * const filter = new Saturation({\n *   saturation: 1\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Saturation extends BaseFilter<'Saturation', SaturationOwnProps> {\n  /**\n   * Saturation value, from -1 to 1.\n   * Increases/decreases the color saturation.\n   * A value of 0 has no effect.\n   *\n   * @param {Number} saturation\n   * @default\n   */\n  declare saturation: SaturationOwnProps['saturation'];\n\n  static type = 'Saturation';\n\n  static defaults = saturationDefaultValues;\n\n  static uniformLocations = ['uSaturation'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const adjust = -this.saturation;\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const max = Math.max(r, g, b);\n      data[i] += max !== r ? (max - r) * adjust : 0;\n      data[i + 1] += max !== g ? (max - g) * adjust : 0;\n      data[i + 2] += max !== b ? (max - b) * adjust : 0;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uSaturation, -this.saturation);\n  }\n\n  isNeutralState() {\n    return this.saturation === 0;\n  }\n}\n\nclassRegistry.setClass(Saturation);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uSaturation;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float rgMax = max(color.r, color.g);\n    float rgbMax = max(rgMax, color.b);\n    color.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\n    color.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\n    color.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\n    gl_FragColor = color;\n  }\n`;\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/vibrance';\n\nexport type VibranceOwnProps = {\n  vibrance: number;\n};\n\nexport const vibranceDefaultValues: VibranceOwnProps = {\n  vibrance: 0,\n};\n\n/**\n * Vibrance filter class\n * @example\n * const filter = new Vibrance({\n *   vibrance: 1\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Vibrance extends BaseFilter<'Vibrance', VibranceOwnProps> {\n  /**\n   * Vibrance value, from -1 to 1.\n   * Increases/decreases the saturation of more muted colors with less effect on saturated colors.\n   * A value of 0 has no effect.\n   *\n   * @param {Number} vibrance\n   * @default\n   */\n  declare vibrance: VibranceOwnProps['vibrance'];\n\n  static type = 'Vibrance';\n\n  static defaults = vibranceDefaultValues;\n\n  static uniformLocations = ['uVibrance'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Vibrance operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const adjust = -this.vibrance;\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const max = Math.max(r, g, b);\n      const avg = (r + g + b) / 3;\n      const amt = ((Math.abs(max - avg) * 2) / 255) * adjust;\n      data[i] += max !== r ? (max - r) * amt : 0;\n      data[i + 1] += max !== g ? (max - g) * amt : 0;\n      data[i + 2] += max !== b ? (max - b) * amt : 0;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {TWebGLUniformLocationMap} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uVibrance, -this.vibrance);\n  }\n\n  isNeutralState() {\n    return this.vibrance === 0;\n  }\n}\n\nclassRegistry.setClass(Vibrance);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uVibrance;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float max = max(color.r, max(color.g, color.b));\n    float avg = (color.r + color.g + color.b) / 3.0;\n    float amt = (abs(max - avg) * 2.0) * uVibrance;\n    color.r += max != color.r ? (max - color.r) * amt : 0.00;\n    color.g += max != color.g ? (max - color.g) * amt : 0.00;\n    color.b += max != color.b ? (max - color.b) * amt : 0.00;\n    gl_FragColor = color;\n  }\n`;\n","import { Color } from '../color/Color';\nimport type { Point } from '../Point';\nimport { Shadow } from '../Shadow';\nimport { Circle } from '../shapes/Circle';\nimport { Group } from '../shapes/Group';\nimport { getRandomInt } from '../util/internals/getRandomInt';\nimport type { Canvas } from '../canvas/Canvas';\nimport { BaseBrush } from './BaseBrush';\nimport type { CircleBrushPoint } from './typedefs';\nimport { CENTER } from '../constants';\n\nexport class CircleBrush extends BaseBrush {\n  /**\n   * Width of a brush\n   * @type Number\n   * @default\n   */\n  width = 10;\n\n  declare points: CircleBrushPoint[];\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n    this.points = [];\n  }\n\n  /**\n   * Invoked inside on mouse down and mouse move\n   * @param {Point} pointer\n   */\n  drawDot(pointer: Point) {\n    const point = this.addPoint(pointer),\n      ctx = this.canvas.contextTop;\n    this._saveAndTransform(ctx);\n    this.dot(ctx, point);\n    ctx.restore();\n  }\n\n  dot(ctx: CanvasRenderingContext2D, point: CircleBrushPoint) {\n    ctx.fillStyle = point.fill;\n    ctx.beginPath();\n    ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  /**\n   * Invoked on mouse down\n   */\n  onMouseDown(pointer: Point) {\n    this.points = [];\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n    this.drawDot(pointer);\n  }\n\n  /**\n   * Render the full state of the brush\n   * @private\n   */\n  _render() {\n    const ctx = this.canvas.contextTop,\n      points = this.points;\n    this._saveAndTransform(ctx);\n    for (let i = 0; i < points.length; i++) {\n      this.dot(ctx, points[i]);\n    }\n    ctx.restore();\n  }\n\n  /**\n   * Invoked on mouse move\n   * @param {Point} pointer\n   */\n  onMouseMove(pointer: Point) {\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    if (this.needsFullRender()) {\n      this.canvas.clearContext(this.canvas.contextTop);\n      this.addPoint(pointer);\n      this._render();\n    } else {\n      this.drawDot(pointer);\n    }\n  }\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp() {\n    const originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = false;\n\n    const circles: Circle[] = [];\n\n    for (let i = 0; i < this.points.length; i++) {\n      const point = this.points[i],\n        circle = new Circle({\n          radius: point.radius,\n          left: point.x,\n          top: point.y,\n          originX: CENTER,\n          originY: CENTER,\n          fill: point.fill,\n        });\n\n      this.shadow && (circle.shadow = new Shadow(this.shadow));\n\n      circles.push(circle);\n    }\n    const group = new Group(circles, { canvas: this.canvas });\n\n    this.canvas.fire('before:path:created', { path: group });\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.requestRenderAll();\n  }\n\n  /**\n   * @param {Object} pointer\n   * @return {Point} Just added pointer point\n   */\n  addPoint({ x, y }: Point) {\n    const pointerPoint: CircleBrushPoint = {\n      x,\n      y,\n      radius: getRandomInt(Math.max(0, this.width - 20), this.width + 20) / 2,\n      fill: new Color(this.color).setAlpha(getRandomInt(0, 100) / 100).toRgba(),\n    };\n\n    this.points.push(pointerPoint);\n\n    return pointerPoint;\n  }\n}\n","import { Pattern } from '../Pattern';\nimport { createCanvasElement } from '../util/misc/dom';\nimport type { Canvas } from '../canvas/Canvas';\nimport { PencilBrush } from './PencilBrush';\nimport type { TSimplePathData } from '../util/path/typedefs';\n\nexport class PatternBrush extends PencilBrush {\n  declare source?: CanvasImageSource;\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n  }\n\n  getPatternSrc() {\n    const dotWidth = 20,\n      dotDistance = 5,\n      patternCanvas = createCanvasElement(),\n      patternCtx = patternCanvas.getContext('2d');\n\n    patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;\n    if (patternCtx) {\n      patternCtx.fillStyle = this.color;\n      patternCtx.beginPath();\n      patternCtx.arc(\n        dotWidth / 2,\n        dotWidth / 2,\n        dotWidth / 2,\n        0,\n        Math.PI * 2,\n        false,\n      );\n      patternCtx.closePath();\n      patternCtx.fill();\n    }\n    return patternCanvas;\n  }\n\n  /**\n   * Creates \"pattern\" instance property\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  getPattern(ctx: CanvasRenderingContext2D) {\n    return ctx.createPattern(this.source || this.getPatternSrc(), 'repeat');\n  }\n\n  /**\n   * Sets brush styles\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  _setBrushStyles(ctx: CanvasRenderingContext2D) {\n    super._setBrushStyles(ctx);\n    const pattern = this.getPattern(ctx);\n    pattern && (ctx.strokeStyle = pattern);\n  }\n\n  /**\n   * Creates path\n   */\n  createPath(pathData: TSimplePathData) {\n    const path = super.createPath(pathData),\n      topLeft = path._getLeftTopCoords().scalarAdd(path.strokeWidth / 2);\n\n    path.stroke = new Pattern({\n      source: this.source || this.getPatternSrc(),\n      offsetX: -topLeft.x,\n      offsetY: -topLeft.y,\n    });\n    return path;\n  }\n}\n","import type { Point } from '../Point';\nimport { Group } from '../shapes/Group';\nimport { Shadow } from '../Shadow';\nimport { Rect } from '../shapes/Rect';\nimport { getRandomInt } from '../util/internals/getRandomInt';\nimport type { Canvas } from '../canvas/Canvas';\nimport { BaseBrush } from './BaseBrush';\nimport type { SprayBrushPoint } from './typedefs';\nimport { CENTER } from '../constants';\n\n/**\n *\n * @param rects\n * @returns\n */\nfunction getUniqueRects(rects: Rect[]) {\n  const uniqueRects: Record<string, boolean> = {};\n  const uniqueRectsArray: Rect[] = [];\n\n  for (let i = 0, key: string; i < rects.length; i++) {\n    key = `${rects[i].left}${rects[i].top}`;\n    if (!uniqueRects[key]) {\n      uniqueRects[key] = true;\n      uniqueRectsArray.push(rects[i]);\n    }\n  }\n\n  return uniqueRectsArray;\n}\n\nexport class SprayBrush extends BaseBrush {\n  /**\n   * Width of a spray\n   * @type Number\n   * @default\n   */\n  width = 10;\n\n  /**\n   * Density of a spray (number of dots per chunk)\n   * @type Number\n   * @default\n   */\n  density = 20;\n\n  /**\n   * Width of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidth = 1;\n\n  /**\n   * Width variance of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidthVariance = 1;\n\n  /**\n   * Whether opacity of a dot should be random\n   * @type Boolean\n   * @default\n   */\n  randomOpacity = false;\n\n  /**\n   * Whether overlapping dots (rectangles) should be removed (for performance reasons)\n   * @type Boolean\n   * @default\n   */\n  optimizeOverlapping = true;\n\n  private declare sprayChunks: SprayBrushPoint[][];\n\n  private declare sprayChunk: SprayBrushPoint[];\n\n  /**\n   * Constructor\n   * @param {Canvas} canvas\n   * @return {SprayBrush} Instance of a spray brush\n   */\n  constructor(canvas: Canvas) {\n    super(canvas);\n    this.sprayChunks = [];\n    this.sprayChunk = [];\n  }\n\n  /**\n   * Invoked on mouse down\n   * @param {Point} pointer\n   */\n  onMouseDown(pointer: Point) {\n    this.sprayChunks = [];\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n\n    this.addSprayChunk(pointer);\n    this.renderChunck(this.sprayChunk);\n  }\n\n  /**\n   * Invoked on mouse move\n   * @param {Point} pointer\n   */\n  onMouseMove(pointer: Point) {\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    this.addSprayChunk(pointer);\n    this.renderChunck(this.sprayChunk);\n  }\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp() {\n    const originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = false;\n\n    const rects: Rect[] = [];\n\n    for (let i = 0; i < this.sprayChunks.length; i++) {\n      const sprayChunk = this.sprayChunks[i];\n      for (let j = 0; j < sprayChunk.length; j++) {\n        const chunck = sprayChunk[j];\n        const rect = new Rect({\n          width: chunck.width,\n          height: chunck.width,\n          left: chunck.x + 1,\n          top: chunck.y + 1,\n          originX: CENTER,\n          originY: CENTER,\n          fill: this.color,\n        });\n        rects.push(rect);\n      }\n    }\n\n    const group = new Group(\n      this.optimizeOverlapping ? getUniqueRects(rects) : rects,\n      {\n        objectCaching: true,\n        subTargetCheck: false,\n        interactive: false,\n      },\n    );\n    this.shadow && group.set('shadow', new Shadow(this.shadow));\n    this.canvas.fire('before:path:created', { path: group });\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.requestRenderAll();\n  }\n\n  renderChunck(sprayChunck: SprayBrushPoint[]) {\n    const ctx = this.canvas.contextTop;\n    ctx.fillStyle = this.color;\n\n    this._saveAndTransform(ctx);\n\n    for (let i = 0; i < sprayChunck.length; i++) {\n      const point = sprayChunck[i];\n      ctx.globalAlpha = point.opacity;\n      ctx.fillRect(point.x, point.y, point.width, point.width);\n    }\n\n    ctx.restore();\n  }\n\n  /**\n   * Render all spray chunks\n   */\n  _render() {\n    const ctx = this.canvas.contextTop;\n    ctx.fillStyle = this.color;\n\n    this._saveAndTransform(ctx);\n\n    for (let i = 0; i < this.sprayChunks.length; i++) {\n      this.renderChunck(this.sprayChunks[i]);\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @param {Point} pointer\n   */\n  addSprayChunk(pointer: Point) {\n    this.sprayChunk = [];\n    const radius = this.width / 2;\n\n    for (let i = 0; i < this.density; i++) {\n      this.sprayChunk.push({\n        x: getRandomInt(pointer.x - radius, pointer.x + radius),\n        y: getRandomInt(pointer.y - radius, pointer.y + radius),\n        width: this.dotWidthVariance\n          ? getRandomInt(\n              // bottom clamp width to 1\n              Math.max(1, this.dotWidth - this.dotWidthVariance),\n              this.dotWidth + this.dotWidthVariance,\n            )\n          : this.dotWidth,\n        opacity: this.randomOpacity ? getRandomInt(0, 100) / 100 : 1,\n      });\n    }\n\n    this.sprayChunks.push(this.sprayChunk);\n  }\n}\n","import { getFabricWindow } from '../env';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport { parseSVGDocument } from './parseSVGDocument';\nimport type { SVGParsingOutput, TSvgReviverCallback } from './typedefs';\n\n/**\n * Takes string corresponding to an SVG document, and parses it into a set of fabric objects\n * @memberOf fabric\n * @param {String} string representing the svg\n * @param {TSvgParsedCallback} callback Invoked when the parsing is done, with null if parsing wasn't possible with the list of svg nodes.\n * {@link TSvgParsedCallback} also receives `allElements` array as the last argument. This is the full list of svg nodes available in the document.\n * You may want to use it if you are trying to regroup the objects as they were originally grouped in the SVG. ( This was the reason why it was added )\n * @param {TSvgReviverCallback} [reviver] Extra callback for further parsing of SVG elements, called after each fabric object has been created.\n * Takes as input the original svg element and the generated `FabricObject` as arguments. Used to inspect extra properties not parsed by fabric,\n * or extra custom manipulation\n * @param {Object} [options] Object containing options for parsing\n * @param {String} [options.crossOrigin] crossOrigin setting to use for external resources\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n */\nexport function loadSVGFromString(\n  string: string,\n  reviver?: TSvgReviverCallback,\n  options?: LoadImageOptions,\n): Promise<SVGParsingOutput> {\n  const parser = new (getFabricWindow().DOMParser)(),\n    // should we use `image/svg+xml` here?\n    doc = parser.parseFromString(string.trim(), 'text/xml');\n  return parseSVGDocument(doc, reviver, options);\n}\n","import { request } from '../util/internals/dom_request';\nimport { parseSVGDocument, createEmptyResponse } from './parseSVGDocument';\nimport type { SVGParsingOutput, TSvgReviverCallback } from './typedefs';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\n\n/**\n * Takes url corresponding to an SVG document, and parses it into a set of fabric objects.\n * Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)\n * @memberOf fabric\n * @param {string} url where the SVG is\n * @param {TSvgParsedCallback} callback Invoked when the parsing is done, with null if parsing wasn't possible with the list of svg nodes.\n * {@link TSvgParsedCallback} also receives `allElements` array as the last argument. This is the full list of svg nodes available in the document.\n * You may want to use it if you are trying to regroup the objects as they were originally grouped in the SVG. ( This was the reason why it was added )\n * @param {TSvgReviverCallback} [reviver] Extra callback for further parsing of SVG elements, called after each fabric object has been created.\n * Takes as input the original svg element and the generated `FabricObject` as arguments. Used to inspect extra properties not parsed by fabric,\n * or extra custom manipulation\n * @param {Object} [options] Object containing options for parsing\n * @param {String} [options.crossOrigin] crossOrigin setting to use for external resources\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n */\nexport function loadSVGFromURL(\n  url: string,\n  reviver?: TSvgReviverCallback,\n  options: LoadImageOptions = {},\n): Promise<SVGParsingOutput> {\n  // need to handle error properly\n  return new Promise<Document>((resolve, reject) => {\n    const onComplete = (r: XMLHttpRequest) => {\n      const xml = r.responseXML;\n      if (xml) {\n        resolve(xml);\n      }\n      reject();\n    };\n\n    request(url.replace(/^\\n\\s*/, '').trim(), {\n      onComplete,\n      signal: options.signal,\n    });\n  })\n    .then((parsedDoc) => parseSVGDocument(parsedDoc, reviver, options))\n    .catch(() => {\n      // this is an unhappy path, we dont care about speed\n      return createEmptyResponse();\n    });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}